{"version":3,"file":"CustomAnnotationManager-legacy-BxESFapd.js","sources":["../../src/core/CustomAnnotationManager.js"],"sourcesContent":["/**\n * 自定义标注管理器\n * \n * 功能：\n * - 管理自定义标注类型（特殊关键点和关键区域）\n * - 支持点击式标注（点）和拖拽式标注（区域）\n * - 提供颜色自定义和元数据管理\n * - 支持编号系统和实时同步\n * - 与现有标注系统集成\n */\n\nexport class CustomAnnotationManager {\n  constructor() {\n    // 自定义标注类型存储\n    this.customTypes = new Map();\n    \n    // 自定义标注数据存储 (imageId -> annotations[])\n    this.customAnnotations = new Map();\n    \n    // 当前状态\n    this.isEnabled = true;\n    this.currentMode = 'normal'; // 'normal' | 'custom'\n    this.selectedCustomType = null;\n    \n    // 配置\n    this.config = {\n      maxCustomTypes: 20,\n      maxAnnotationsPerImage: 100,\n      minRegionSize: 10,\n      defaultPointRadius: 8,\n      defaultRegionStrokeWidth: 2\n    };\n    \n    // 实时同步管理器引用\n    this.realTimeSyncManager = null;\n    \n    // 事件处理器\n    this.eventHandlers = {\n      onAnnotationCreate: [],\n      onAnnotationUpdate: [],\n      onAnnotationDelete: [],\n      onModeChange: [],\n      onTypeCreate: [],\n      onTypeUpdate: [],\n      onTypeDelete: []\n    };\n    \n    // 加载已保存的数据\n    this.loadFromStorage();\n    \n    // 🔧 NEW: Ensure builtin regular type exists for migrated data\n    this.ensureBuiltinRegularType();\n\n    // 🔧 NEW: Default mode to builtin regular type on first load\n    if (this.currentMode === 'normal' && !this.selectedCustomType && this.customTypes.has('builtin-regular-keypoint')) {\n      try {\n        this.setCustomAnnotationMode('builtin-regular-keypoint');\n      } catch (e) {\n        console.warn('Failed to set default builtin type mode:', e);\n      }\n    }\n    \n    console.log('CustomAnnotationManager initialized');\n  }\n\n  /**\n   * 🔧 NEW: 注册内置的“regular”类型（用于迁移后的数据渲染与选择）\n   */\n  ensureBuiltinRegularType() {\n    const builtinId = 'builtin-regular-keypoint';\n    if (!this.customTypes.has(builtinId)) {\n      const builtinType = {\n        id: builtinId,\n        name: 'Regular (Builtin)',\n        type: 'point',\n        color: '#22c55e',\n        description: 'Default keypoint type migrated from regular',\n        metadata: { builtin: true, defaultAngle: 0, isDirectional: true },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      this.customTypes.set(builtinId, builtinType);\n      // 触发UI更新（不触发远端同步/存储）\n      this.triggerEvent('onTypeCreate', { type: builtinType });\n      console.log('[CustomAnnotationManager] Registered builtin type:', builtinId);\n    }\n  }\n\n  /**\n   * 创建自定义标注类型\n   * @param {Object} typeData - 类型数据\n   * @returns {Object} 创建的类型对象\n   */\n  createCustomType(typeData) {\n    const { id, name, type, color, description = '', metadata = {} } = typeData;\n    \n    // 验证必要字段\n    if (!id || !name || !type || !color) {\n      throw new Error('Missing required fields: id, name, type, color');\n    }\n    \n    // 验证类型\n    if (!['point', 'region'].includes(type)) {\n      throw new Error('Invalid type: must be \"point\" or \"region\"');\n    }\n    \n    // 检查是否已存在\n    if (this.customTypes.has(id)) {\n      throw new Error(`Custom type with id \"${id}\" already exists`);\n    }\n    \n    // 检查数量限制\n    if (this.customTypes.size >= this.config.maxCustomTypes) {\n      throw new Error(`Maximum number of custom types (${this.config.maxCustomTypes}) reached`);\n    }\n    \n    // 创建类型对象\n    const customType = {\n      id,\n      name,\n      type,\n      color,\n      description,\n      metadata,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.customTypes.set(id, customType);\n    \n    // 触发类型创建事件\n    this.triggerEvent('onTypeCreate', { type: customType });\n    \n    // 🔄 NEW: 实时同步 - 自定义类型创建\n    this.triggerCustomTypeCreateSync(customType, {\n      timestamp: new Date().toISOString()\n    });\n    \n    // 自动保存数据\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    console.log(`Created custom type: ${id} (${name})`);\n    return customType;\n  }\n\n  /**\n   * 更新自定义标注类型\n   * @param {string} id - 类型ID\n   * @param {Object} updateData - 更新数据\n   * @returns {Object} 更新后的类型对象\n   */\n  updateCustomType(id, updateData) {\n    const existingType = this.customTypes.get(id);\n    if (!existingType) {\n      throw new Error(`Custom type with id \"${id}\" not found`);\n    }\n    \n    // 不允许更改ID和type\n    const { id: newId, type: newType, ...allowedUpdates } = updateData;\n    \n    if (newId && newId !== id) {\n      console.warn('Cannot change custom type ID');\n    }\n    \n    if (newType && newType !== existingType.type) {\n      console.warn('Cannot change custom type type');\n    }\n    \n    // 更新类型\n    const updatedType = {\n      ...existingType,\n      ...allowedUpdates,\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.customTypes.set(id, updatedType);\n    \n    // 触发类型更新事件\n    this.triggerEvent('onTypeUpdate', { type: updatedType });\n    \n    console.log(`Updated custom type: ${id}`);\n    return updatedType;\n  }\n\n  /**\n   * 删除自定义标注类型\n   * @param {string} id - 类型ID\n   * @returns {boolean} 是否成功删除\n   */\n  deleteCustomType(id) {\n    if (!this.customTypes.has(id)) {\n      return false;\n    }\n    \n    // 删除相关标注\n    this.deleteAnnotationsByTypeId(id);\n    \n    // 删除类型\n    this.customTypes.delete(id);\n    \n    // 触发类型删除事件\n    this.triggerEvent('onTypeDelete', { typeId: id });\n    \n    // 如果当前选中的是被删除的类型，切换回正常模式\n    if (this.selectedCustomType === id) {\n      this.setNormalMode();\n    }\n    \n    console.log(`Deleted custom type: ${id}`);\n    return true;\n  }\n\n  /**\n   * 获取所有自定义类型\n   * @returns {Array} 自定义类型数组\n   */\n  getAllCustomTypes() {\n    return Array.from(this.customTypes.values());\n  }\n\n  /**\n   * 获取指定类型\n   * @param {string} id - 类型ID\n   * @returns {Object|null} 类型对象\n   */\n  getCustomType(id) {\n    return this.customTypes.get(id) || null;\n  }\n\n  /**\n   * 创建自定义标注\n   * @param {Object} annotationData - 标注数据\n   * @returns {Object} 创建的标注对象\n   */\n  createCustomAnnotation(annotationData) {\n    const { typeId, x, y, width, height, imageId, metadata = {}, parentAnnotationType, parentAnnotationId } = annotationData;\n    \n    // 验证必要字段\n    if (!typeId || !imageId || x === undefined || y === undefined) {\n      throw new Error('Missing required fields: typeId, imageId, x, y');\n    }\n    \n    // 验证类型是否存在\n    const customType = this.customTypes.get(typeId);\n    if (!customType) {\n      throw new Error(`Custom type with id \"${typeId}\" not found`);\n    }\n    \n    // 验证区域类型的尺寸\n    if (customType.type === 'region') {\n      if (width === undefined || height === undefined) {\n        throw new Error('Width and height are required for region annotations');\n      }\n      if (width < this.config.minRegionSize || height < this.config.minRegionSize) {\n        throw new Error(`Region size must be at least ${this.config.minRegionSize}px`);\n      }\n    }\n    \n    // 获取或创建图像标注数组\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 检查数量限制\n    if (imageAnnotations.length >= this.config.maxAnnotationsPerImage) {\n      throw new Error(`Maximum number of annotations per image (${this.config.maxAnnotationsPerImage}) reached`);\n    }\n    \n    // 🔧 FIX: 生成特定类型的下一个序号（每种类型独立计数）\n    const order = this.getNextOrderNumber(imageId, typeId);\n    \n    // 创建标注对象\n    const annotation = {\n      id: this.generateAnnotationId(),\n      typeId,\n      x,\n      y,\n      ...(customType.type === 'region' && { width, height }),\n      imageId,\n      order,\n      metadata,\n      ...(parentAnnotationType && parentAnnotationId && { parentAnnotationType, parentAnnotationId }),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    imageAnnotations.push(annotation);\n    \n    // 触发事件\n    this.triggerEvent('onAnnotationCreate', annotation);\n    \n    // 🔄 NEW: 实时同步 - 自定义标注创建\n    this.triggerCustomAnnotationCreateSync(annotation, {\n      imageId: imageId,\n      typeId: typeId,\n      timestamp: new Date().toISOString()\n    });\n    \n    // 自动保存数据\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    console.log(`Created custom annotation: ${annotation.id} (type: ${typeId}, order: ${order})`);\n    return annotation;\n  }\n\n  /**\n   * 获取指定图像的标注\n   * @param {string} imageId - 图像ID\n   * @returns {Array} 标注数组\n   */\n  getAnnotationsByImageId(imageId) {\n    return this.customAnnotations.get(imageId) || [];\n  }\n\n  /**\n   * 删除自定义标注\n   * @param {string} annotationId - 标注ID\n   * @returns {boolean} 是否成功删除\n   */\n  deleteCustomAnnotation(annotationId) {\n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const index = annotations.findIndex(ann => ann.id === annotationId);\n      if (index !== -1) {\n        const deletedAnnotation = annotations.splice(index, 1)[0];\n        \n        // 如果图像没有标注了，删除图像条目\n        if (annotations.length === 0) {\n          this.customAnnotations.delete(imageId);\n        }\n        \n        // 触发事件\n        this.triggerEvent('onAnnotationDelete', deletedAnnotation);\n        \n        // 🔄 NEW: 实时同步 - 自定义标注删除\n        this.triggerCustomAnnotationDeleteSync(deletedAnnotation, {\n          imageId: imageId,\n          typeId: deletedAnnotation.typeId,\n          timestamp: new Date().toISOString()\n        });\n        \n        // 自动保存数据\n        this.saveToStorage();\n        \n        // 🔄 NEW: 集成数据库自动保存\n        this.triggerDatabaseAutoSave();\n        \n        console.log(`Deleted custom annotation: ${annotationId}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * 根据类型ID删除所有标注\n   * @param {string} typeId - 类型ID\n   */\n  deleteAnnotationsByTypeId(typeId) {\n    let deletedCount = 0;\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const originalLength = annotations.length;\n      const filtered = annotations.filter(ann => ann.typeId !== typeId);\n      \n      if (filtered.length !== originalLength) {\n        deletedCount += originalLength - filtered.length;\n        \n        if (filtered.length === 0) {\n          this.customAnnotations.delete(imageId);\n        } else {\n          this.customAnnotations.set(imageId, filtered);\n        }\n      }\n    }\n    \n    if (deletedCount > 0) {\n      console.log(`Deleted ${deletedCount} annotations of type ${typeId}`);\n    }\n  }\n\n  /**\n   * 设置自定义标注模式\n   * @param {string} typeId - 类型ID\n   */\n  setCustomAnnotationMode(typeId) {\n    const customType = this.customTypes.get(typeId);\n    if (!customType) {\n      throw new Error(`Custom type with id \"${typeId}\" not found`);\n    }\n    \n    this.currentMode = 'custom';\n    this.selectedCustomType = typeId;\n    \n    // 触发模式变化事件\n    this.triggerEvent('onModeChange', {\n      mode: 'custom',\n      typeId,\n      customType\n    });\n    \n    console.log(`Switched to custom annotation mode: ${typeId}`);\n  }\n\n  /**\n   * 设置正常模式\n   */\n  setNormalMode() {\n    this.currentMode = 'normal';\n    this.selectedCustomType = null;\n    \n    // 触发模式变化事件\n    this.triggerEvent('onModeChange', {\n      mode: 'normal',\n      typeId: null,\n      customType: null\n    });\n    \n    console.log('Switched to normal annotation mode');\n  }\n\n  /**\n   * 检查是否处于自定义模式\n   * @returns {boolean} 是否处于自定义模式\n   */\n  isInCustomMode() {\n    return this.currentMode === 'custom' && this.selectedCustomType !== null;\n  }\n\n  /**\n   * 获取当前选中的自定义类型\n   * @returns {Object|null} 当前选中的类型对象\n   */\n  getCurrentCustomType() {\n    if (!this.selectedCustomType) {\n      return null;\n    }\n    return this.customTypes.get(this.selectedCustomType);\n  }\n\n  /**\n   * 处理画布点击（点类型标注）\n   * @param {Object} clickData - 点击数据（包含图像坐标）\n   * @returns {Object} 处理结果\n   */\n  handleCanvasClick(clickData) {\n    if (!this.isInCustomMode()) {\n      return { success: false, reason: 'Not in custom mode' };\n    }\n    \n    const customType = this.getCurrentCustomType();\n    if (!customType) {\n      return { success: false, reason: 'No custom type selected' };\n    }\n    \n    if (customType.type !== 'point') {\n      return { success: false, reason: 'Selected type is not a point type' };\n    }\n    \n    // 验证点击数据\n    if (!clickData.imageId || typeof clickData.x !== 'number' || typeof clickData.y !== 'number') {\n      return { success: false, reason: 'Invalid click data' };\n    }\n    \n    try {\n      const annotation = this.createCustomAnnotation({\n        typeId: customType.id,\n        x: clickData.x,\n        y: clickData.y,\n        imageId: clickData.imageId\n      });\n      \n      return { success: true, annotation };\n    } catch (error) {\n      return { success: false, reason: error.message };\n    }\n  }\n\n  /**\n   * 处理区域拖拽（区域类型标注）\n   * @param {Object} dragData - 拖拽数据\n   * @returns {Object} 处理结果\n   */\n  handleRegionDrag(dragData) {\n    if (!this.isInCustomMode()) {\n      return { success: false, reason: 'Not in custom mode' };\n    }\n    \n    const customType = this.getCurrentCustomType();\n    if (!customType) {\n      return { success: false, reason: 'No custom type selected' };\n    }\n    \n    if (customType.type !== 'region') {\n      return { success: false, reason: 'Selected type is not a region type' };\n    }\n    \n    const { startX, startY, endX, endY, imageId } = dragData;\n    \n    // 计算区域位置和尺寸\n    const x = Math.min(startX, endX);\n    const y = Math.min(startY, endY);\n    const width = Math.abs(endX - startX);\n    const height = Math.abs(endY - startY);\n    \n    try {\n      const annotation = this.createCustomAnnotation({\n        typeId: customType.id,\n        x,\n        y,\n        width,\n        height,\n        imageId\n      });\n      \n      return { success: true, annotation };\n    } catch (error) {\n      return { success: false, reason: error.message };\n    }\n  }\n\n  /**\n   * 获取下一个序号\n   * @param {string} imageId - 图像ID\n   * @param {string} typeId - 类型ID（可选，用于按类型编号）\n   * @returns {number} 下一个序号\n   */\n  getNextOrderNumber(imageId, typeId = null) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    \n    // 如果指定了类型ID，只考虑该类型的标注\n    const relevantAnnotations = typeId \n      ? annotations.filter(ann => ann.typeId === typeId)\n      : annotations;\n    \n    if (relevantAnnotations.length === 0) {\n      return 1;\n    }\n    \n    const maxOrder = Math.max(...relevantAnnotations.map(ann => ann.order || 0));\n    return maxOrder + 1;\n  }\n\n  /**\n   * 重新整理指定图像的标注序号，确保序号连续\n   * @param {string} imageId - 图像ID\n   * @param {string} typeId - 类型ID（可选，只重新整理指定类型）\n   */\n  reorderAnnotations(imageId, typeId = null) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    \n    if (typeId) {\n      // 只重新整理指定类型的标注\n      const typeAnnotations = annotations.filter(ann => ann.typeId === typeId);\n      typeAnnotations.sort((a, b) => (a.order || 0) - (b.order || 0));\n      \n      typeAnnotations.forEach((annotation, index) => {\n        annotation.order = index + 1;\n        annotation.updatedAt = new Date().toISOString();\n      });\n      \n      console.log(`Reordered ${typeAnnotations.length} annotations of type ${typeId} for image ${imageId}`);\n    } else {\n      // 重新整理所有标注\n      annotations.sort((a, b) => (a.order || 0) - (b.order || 0));\n      \n      annotations.forEach((annotation, index) => {\n        annotation.order = index + 1;\n        annotation.updatedAt = new Date().toISOString();\n      });\n      \n      console.log(`Reordered ${annotations.length} annotations for image ${imageId}`);\n    }\n    \n    // 保存更改\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    // 触发更新事件\n    this.triggerEvent('onAnnotationUpdate', { imageId, typeId });\n  }\n\n  /**\n   * 获取标注统计信息（按类型）\n   * @param {string} imageId - 图像ID\n   * @returns {Object} 统计信息\n   */\n  getAnnotationStats(imageId) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    const stats = {\n      total: annotations.length,\n      byType: {},\n      orderRange: { min: 0, max: 0 },\n      gaps: []\n    };\n    \n    if (annotations.length === 0) {\n      return stats;\n    }\n    \n    // 按类型统计\n    annotations.forEach(annotation => {\n      const typeId = annotation.typeId;\n      if (!stats.byType[typeId]) {\n        const customType = this.getCustomType(typeId);\n        stats.byType[typeId] = {\n          count: 0,\n          typeName: customType?.name || 'Unknown',\n          typeColor: customType?.color || '#000000',\n          annotationType: customType?.type || 'unknown'\n        };\n      }\n      stats.byType[typeId].count++;\n    });\n    \n    // 序号范围和间隙检测\n    const orders = annotations.map(ann => ann.order || 0).filter(order => order > 0).sort((a, b) => a - b);\n    if (orders.length > 0) {\n      stats.orderRange.min = orders[0];\n      stats.orderRange.max = orders[orders.length - 1];\n      \n      // 检测序号间隙\n      for (let i = orders[0]; i <= orders[orders.length - 1]; i++) {\n        if (!orders.includes(i)) {\n          stats.gaps.push(i);\n        }\n      }\n    }\n    \n    return stats;\n  }\n\n  /**\n   * 查找具有指定序号的标注\n   * @param {string} imageId - 图像ID\n   * @param {number} order - 序号\n   * @returns {Object|null} 标注对象\n   */\n  findAnnotationByOrder(imageId, order) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    return annotations.find(ann => ann.order === order) || null;\n  }\n\n  /**\n   * 更新标注序号\n   * @param {string} annotationId - 标注ID\n   * @param {number} newOrder - 新序号\n   * @returns {boolean} 是否成功更新\n   */\n  updateAnnotationOrder(annotationId, newOrder) {\n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const annotation = annotations.find(ann => ann.id === annotationId);\n      if (annotation) {\n        // 检查新序号是否与其他标注冲突\n        const conflictAnnotation = annotations.find(ann => ann.id !== annotationId && ann.order === newOrder);\n        if (conflictAnnotation) {\n          console.warn(`Order ${newOrder} is already used by annotation ${conflictAnnotation.id}`);\n          return false;\n        }\n        \n        const oldOrder = annotation.order;\n        annotation.order = newOrder;\n        annotation.updatedAt = new Date().toISOString();\n        \n        // 触发更新事件\n        this.triggerEvent('onAnnotationUpdate', annotation);\n        \n        // 🔄 NEW: 实时同步 - 标注序号更新\n        this.triggerCustomAnnotationUpdateSync(annotation, {\n          imageId: imageId,\n          orderChange: { from: oldOrder, to: newOrder },\n          timestamp: new Date().toISOString()\n        });\n        \n        // 保存更改\n        this.saveToStorage();\n        \n        // 🔄 NEW: 集成数据库自动保存\n        this.triggerDatabaseAutoSave();\n        \n        console.log(`Updated annotation ${annotationId} order from ${oldOrder} to ${newOrder}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * 生成标注ID\n   * @returns {string} 标注ID\n   */\n  generateAnnotationId() {\n    return `custom_ann_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 导出数据\n   * @returns {Object} 导出的数据\n   */\n  exportData() {\n    const customTypes = Array.from(this.customTypes.values());\n    const customAnnotations = [];\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      customAnnotations.push(...annotations);\n    }\n    \n    return {\n      version: '1.0',\n      exportTime: new Date().toISOString(),\n      customTypes,\n      customAnnotations\n    };\n  }\n\n  /**\n   * 导入数据\n   * @param {Object} importData - 导入的数据\n   * @returns {Object} 导入结果\n   */\n  importData(importData) {\n    try {\n      const { version, customTypes = [], customAnnotations = [] } = importData;\n      \n      if (version !== '1.0') {\n        console.warn(`Importing data with version ${version}, expected 1.0`);\n      }\n      \n      // 导入自定义类型\n      for (const typeData of customTypes) {\n        if (!this.customTypes.has(typeData.id)) {\n          this.customTypes.set(typeData.id, typeData);\n        }\n      }\n      \n      // 导入标注\n      for (const annotation of customAnnotations) {\n        if (!this.customAnnotations.has(annotation.imageId)) {\n          this.customAnnotations.set(annotation.imageId, []);\n        }\n        \n        const imageAnnotations = this.customAnnotations.get(annotation.imageId);\n        \n        // 避免重复导入\n        if (!imageAnnotations.find(ann => ann.id === annotation.id)) {\n          imageAnnotations.push(annotation);\n        }\n      }\n      \n      console.log(`Imported ${customTypes.length} custom types and ${customAnnotations.length} annotations`);\n      return { success: true };\n    } catch (error) {\n      console.error('Import failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * 添加事件监听器\n   * @param {string} eventName - 事件名称\n   * @param {Function} handler - 事件处理函数\n   */\n  addEventListener(eventName, handler) {\n    if (!this.eventHandlers[eventName]) {\n      this.eventHandlers[eventName] = [];\n    }\n    this.eventHandlers[eventName].push(handler);\n  }\n\n  /**\n   * 移除事件监听器\n   * @param {string} eventName - 事件名称\n   * @param {Function} handler - 事件处理函数\n   */\n  removeEventListener(eventName, handler) {\n    if (this.eventHandlers[eventName]) {\n      const index = this.eventHandlers[eventName].indexOf(handler);\n      if (index > -1) {\n        this.eventHandlers[eventName].splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * 触发事件\n   * @param {string} eventName - 事件名称\n   * @param {any} data - 事件数据\n   */\n  triggerEvent(eventName, data) {\n    if (this.eventHandlers[eventName]) {\n      this.eventHandlers[eventName].forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventName}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * 设置实时同步管理器\n   * @param {Object} realTimeSyncManager - 实时同步管理器\n   */\n  setRealTimeSyncManager(realTimeSyncManager) {\n    this.realTimeSyncManager = realTimeSyncManager;\n    console.log('Real-time sync manager set for custom annotations');\n  }\n\n  /**\n   * 触发自定义标注创建的实时同步\n   * @param {Object} annotation - 标注数据\n   * @param {Object} context - 上下文信息 (imageId, plantId等)\n   */\n  triggerCustomAnnotationCreateSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping create sync');\n      return;\n    }\n\n    try {\n      // 获取当前应用状态\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_CREATE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation create sync:', syncData);\n      \n      // Call the real-time sync manager's custom annotation sync method\n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation create sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义标注更新的实时同步\n   * @param {Object} annotation - 更新后的标注数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomAnnotationUpdateSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping update sync');\n      return;\n    }\n\n    try {\n      // 🔧 FIX: 获取当前应用状态 - 与create方法保持一致\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注更新同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_UPDATE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation update sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation update sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义标注删除的实时同步\n   * @param {Object} annotation - 被删除的标注数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomAnnotationDeleteSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping delete sync');\n      return;\n    }\n\n    try {\n      // 🔧 FIX: 获取当前应用状态 - 与create方法保持一致\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注删除同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_DELETE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation delete sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation delete sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义类型创建的实时同步\n   * @param {Object} customType - 自定义类型数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomTypeCreateSync(customType, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom type real-time sync disabled, skipping create sync');\n      return;\n    }\n\n    try {\n      const syncData = {\n        type: 'CUSTOM_TYPE_CREATE',\n        customType: customType,\n        context: context,\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom type create sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom type create sync:', error);\n    }\n  }\n\n  /**\n   * 获取统计信息\n   * @returns {Object} 统计信息\n   */\n  getStats() {\n    const totalTypes = this.customTypes.size;\n    let totalAnnotations = 0;\n    let annotatedImages = 0;\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      if (annotations.length > 0) {\n        annotatedImages++;\n        totalAnnotations += annotations.length;\n      }\n    }\n    \n    return {\n      totalTypes,\n      totalAnnotations,\n      annotatedImages,\n      averageAnnotationsPerImage: annotatedImages > 0 ? (totalAnnotations / annotatedImages).toFixed(2) : 0\n    };\n  }\n\n  /**\n   * 保存数据到localStorage\n   */\n  saveToStorage() {\n    try {\n      const data = {\n        customTypes: Array.from(this.customTypes.entries()),\n        customAnnotations: Array.from(this.customAnnotations.entries()),\n        version: '1.0',\n        savedAt: new Date().toISOString()\n      };\n      \n      localStorage.setItem('customAnnotationData', JSON.stringify(data));\n      console.log('Custom annotation data saved to localStorage');\n    } catch (error) {\n      console.error('Failed to save custom annotation data:', error);\n    }\n  }\n\n  /**\n   * 从localStorage加载数据\n   */\n  loadFromStorage() {\n    try {\n      const savedData = localStorage.getItem('customAnnotationData');\n      if (!savedData) {\n        console.log('No saved custom annotation data found');\n        return;\n      }\n\n      const data = JSON.parse(savedData);\n      \n      // 恢复自定义类型\n      if (data.customTypes) {\n        this.customTypes.clear();\n        data.customTypes.forEach(([id, type]) => {\n          this.customTypes.set(id, type);\n        });\n      }\n      \n      // 恢复自定义标注\n      if (data.customAnnotations) {\n        this.customAnnotations.clear();\n        data.customAnnotations.forEach(([imageId, annotations]) => {\n          this.customAnnotations.set(imageId, annotations);\n        });\n      }\n      \n      console.log(`Loaded custom annotation data from localStorage (version: ${data.version})`);\n      \n      // 触发事件通知UI更新 - 为每个加载的类型触发事件\n      if (data.customTypes && data.customTypes.length > 0) {\n        console.log(`Triggering type events for ${data.customTypes.length} loaded types`);\n        // 延迟触发事件，确保所有UI组件都已初始化\n        setTimeout(() => {\n          data.customTypes.forEach(([id, type]) => {\n            this.triggerEvent('onTypeCreate', { type });\n          });\n        }, 100);\n      }\n      \n    } catch (error) {\n      console.error('Failed to load custom annotation data:', error);\n    }\n  }\n\n  /**\n   * 清除localStorage中的数据\n   */\n  clearStorage() {\n    try {\n      localStorage.removeItem('customAnnotationData');\n      console.log('Custom annotation data cleared from localStorage');\n    } catch (error) {\n      console.error('Failed to clear custom annotation data:', error);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 触发数据库自动保存\n   */\n  async triggerDatabaseAutoSave() {\n    try {\n      // 通过全局对象访问AnnotationTool的自动保存功能\n      const annotationTool = window.PlantAnnotationTool?.annotationTool;\n      if (annotationTool && typeof annotationTool.autoSaveCurrentImage === 'function') {\n        await annotationTool.autoSaveCurrentImage();\n        console.log('Custom annotation database auto-save triggered');\n      } else {\n        console.warn('AnnotationTool auto-save not available');\n      }\n    } catch (error) {\n      console.error('Failed to trigger database auto-save:', error);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 获取自定义标注数据用于数据库保存\n   */\n  getCustomAnnotationsForSave(imageId) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    return annotations.map(annotation => {\n      const customType = this.getCustomType(annotation.typeId);\n      return {\n        ...annotation,\n        customType: customType ? {\n          id: customType.id,\n          name: customType.name,\n          type: customType.type,\n          color: customType.color,\n          description: customType.description\n        } : null\n      };\n    });\n  }\n  \n  /**\n   * 🔄 NEW: 从数据库保存数据中恢复自定义标注\n   */\n  loadCustomAnnotationsFromSave(imageId, savedCustomAnnotations) {\n    if (!savedCustomAnnotations || !Array.isArray(savedCustomAnnotations)) {\n      return;\n    }\n    \n    // 确保图像标注数组存在\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 加载自定义标注\n    savedCustomAnnotations.forEach(savedAnnotation => {\n      // 检查是否已存在\n      const exists = imageAnnotations.find(ann => ann.id === savedAnnotation.id);\n      if (!exists) {\n        // 移除customType字段（这是为了保存而添加的），保持标注数据的纯净\n        const { customType, ...annotation } = savedAnnotation;\n        imageAnnotations.push(annotation);\n      }\n    });\n    \n    console.log(`Loaded ${savedCustomAnnotations.length} custom annotations for image ${imageId}`);\n  }\n  \n  /**\n   * 🔧 FIX: 从主键点数组同步自定义标注到内部状态\n   * @param {string} imageId - 图像ID\n   * @param {Array} customAnnotations - 自定义标注数组\n   */\n  syncAnnotationsFromKeypoints(imageId, customAnnotations) {\n    if (!imageId || !customAnnotations || customAnnotations.length === 0) {\n      return;\n    }\n    \n    // 确保图像标注数组存在\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 为每个自定义标注添加到内部状态\n    customAnnotations.forEach(annotation => {\n      // 检查是否已存在\n      const existingIndex = imageAnnotations.findIndex(existing => existing.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        // 创建标注副本并添加到内部状态\n        const annotationCopy = { ...annotation };\n        imageAnnotations.push(annotationCopy);\n        console.log(`[同步] 添加自定义标注到内部状态: ${annotation.id} (类型: ${annotation.customTypeId})`);\n      } else {\n        // 更新现有标注\n        imageAnnotations[existingIndex] = { ...annotation };\n        console.log(`[同步] 更新自定义标注在内部状态: ${annotation.id} (类型: ${annotation.customTypeId})`);\n      }\n    });\n    \n    // 保存到localStorage\n    this.saveToStorage();\n    \n    console.log(`[同步] 同步了 ${customAnnotations.length} 个自定义标注到图像 ${imageId}`);\n  }\n  \n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注创建事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationCreateFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation create');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 检查是否已存在该标注\n      const existingAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const exists = existingAnnotations.find(ann => ann.id === annotation.id);\n      \n      if (exists) {\n        console.log('🔄 Custom annotation already exists, skipping');\n        return;\n      }\n\n      // 确保自定义类型存在\n      if (!this.customTypes.has(annotation.typeId)) {\n        console.warn(`🔄 Custom type ${annotation.typeId} not found for synced annotation`);\n        return;\n      }\n\n      // 确保图像标注数组存在\n      if (!this.customAnnotations.has(context.imageId)) {\n        this.customAnnotations.set(context.imageId, []);\n      }\n\n      // 添加标注（不触发同步，避免循环）\n      this.customAnnotations.get(context.imageId).push(annotation);\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationCreate', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation created from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation create from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注更新事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationUpdateFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation update');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 查找并更新标注\n      const imageAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const existingIndex = imageAnnotations.findIndex(ann => ann.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        console.warn('🔄 Custom annotation not found for update from sync:', annotation.id);\n        return;\n      }\n\n      // 更新标注（不触发同步，避免循环）\n      imageAnnotations[existingIndex] = { ...imageAnnotations[existingIndex], ...annotation };\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationUpdate', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation updated from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation update from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注删除事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationDeleteFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation delete');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 查找并删除标注\n      const imageAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const existingIndex = imageAnnotations.findIndex(ann => ann.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        console.warn('🔄 Custom annotation not found for delete from sync:', annotation.id);\n        return;\n      }\n\n      // 删除标注（不触发同步，避免循环）\n      imageAnnotations.splice(existingIndex, 1);\n      \n      // 如果图像没有标注了，删除图像条目\n      if (imageAnnotations.length === 0) {\n        this.customAnnotations.delete(context.imageId);\n      }\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationDelete', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation deleted from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation delete from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义类型创建事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomTypeCreateFromSync(syncData) {\n    try {\n      if (!syncData.customType) {\n        console.warn('🔄 Invalid sync data for custom type create');\n        return;\n      }\n\n      const { customType } = syncData;\n      \n      // 检查是否已存在该类型\n      if (this.customTypes.has(customType.id)) {\n        console.log('🔄 Custom type already exists, skipping');\n        return;\n      }\n\n      // 添加类型（不触发同步，避免循环）\n      this.customTypes.set(customType.id, customType);\n      \n      // 触发UI更新事件\n      this.triggerEvent('onTypeCreate', { type: customType });\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom type created from sync:', customType.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom type create from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 处理来自实时同步的所有自定义标注相关事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleSyncEvent(syncData) {\n    if (!syncData || !syncData.type) {\n      console.warn('🔄 Invalid sync data received');\n      return;\n    }\n\n    console.log('🔄 Processing custom annotation sync event:', syncData.type);\n\n    switch (syncData.type) {\n      case 'CUSTOM_ANNOTATION_CREATE':\n        this.handleCustomAnnotationCreateFromSync(syncData);\n        break;\n      case 'CUSTOM_ANNOTATION_UPDATE':\n        this.handleCustomAnnotationUpdateFromSync(syncData);\n        break;\n      case 'CUSTOM_ANNOTATION_DELETE':\n        this.handleCustomAnnotationDeleteFromSync(syncData);\n        break;\n      case 'CUSTOM_TYPE_CREATE':\n        this.handleCustomTypeCreateFromSync(syncData);\n        break;\n      default:\n        console.warn('🔄 Unknown custom annotation sync event type:', syncData.type);\n    }\n  }\n}"],"names":["exports","constructor","this","customTypes","Map","customAnnotations","isEnabled","currentMode","selectedCustomType","config","maxCustomTypes","maxAnnotationsPerImage","minRegionSize","defaultPointRadius","defaultRegionStrokeWidth","realTimeSyncManager","eventHandlers","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","onModeChange","onTypeCreate","onTypeUpdate","onTypeDelete","loadFromStorage","ensureBuiltinRegularType","has","setCustomAnnotationMode","e","console","warn","log","builtinId","builtinType","id","name","type","color","description","metadata","builtin","defaultAngle","isDirectional","createdAt","Date","toISOString","updatedAt","set","triggerEvent","createCustomType","typeData","Error","includes","size","customType","triggerCustomTypeCreateSync","timestamp","saveToStorage","triggerDatabaseAutoSave","updateCustomType","updateData","existingType","get","newId","newType","allowedUpdates","updatedType","deleteCustomType","deleteAnnotationsByTypeId","delete","typeId","setNormalMode","getAllCustomTypes","Array","from","values","getCustomType","createCustomAnnotation","annotationData","x","y","width","height","imageId","parentAnnotationType","parentAnnotationId","undefined","imageAnnotations","length","order","getNextOrderNumber","annotation","generateAnnotationId","push","triggerCustomAnnotationCreateSync","getAnnotationsByImageId","deleteCustomAnnotation","annotationId","annotations","entries","index","findIndex","ann","deletedAnnotation","splice","triggerCustomAnnotationDeleteSync","deletedCount","originalLength","filtered","filter","mode","isInCustomMode","getCurrentCustomType","handleCanvasClick","clickData","success","reason","error","message","handleRegionDrag","dragData","startX","startY","endX","endY","Math","min","abs","relevantAnnotations","max","map","reorderAnnotations","typeAnnotations","sort","a","b","forEach","getAnnotationStats","stats","total","byType","orderRange","gaps","count","typeName","typeColor","annotationType","orders","i","findAnnotationByOrder","find","updateAnnotationOrder","newOrder","conflictAnnotation","oldOrder","triggerCustomAnnotationUpdateSync","orderChange","to","now","random","toString","substr","exportData","version","exportTime","importData","addEventListener","eventName","handler","removeEventListener","indexOf","data","setRealTimeSyncManager","context","isRealTimeSyncEnabled","appState","window","PlantAnnotationTool","currentPlant","currentImage","syncData","plantId","viewAngle","selectedViewAngle","triggerCustomAnnotationSync","getStats","totalTypes","totalAnnotations","annotatedImages","averageAnnotationsPerImage","toFixed","savedAt","localStorage","setItem","JSON","stringify","savedData","getItem","parse","clear","setTimeout","clearStorage","removeItem","annotationTool","autoSaveCurrentImage","getCustomAnnotationsForSave","loadCustomAnnotationsFromSave","savedCustomAnnotations","isArray","savedAnnotation","syncAnnotationsFromKeypoints","existingIndex","existing","annotationCopy","customTypeId","handleCustomAnnotationCreateFromSync","existingAnnotations","handleCustomAnnotationUpdateFromSync","handleCustomAnnotationDeleteFromSync","handleCustomTypeCreateFromSync","handleSyncEvent"],"mappings":"wEAu2CAA,EAAA,0BA51CO,MACLC,WAAAA,GA0CE,GAxCAC,KAAKC,YAAc,IAAIC,IAGvBF,KAAKG,kBAAoB,IAAID,IAG7BF,KAAKI,WAAY,EACjBJ,KAAKK,YAAc,SACnBL,KAAKM,mBAAqB,KAG1BN,KAAKO,OAAS,CACZC,eAAgB,GAChBC,uBAAwB,IACxBC,cAAe,GACfC,mBAAoB,EACpBC,yBAA0B,GAI5BZ,KAAKa,oBAAsB,KAG3Bb,KAAKc,cAAgB,CACnBC,mBAAoB,GACpBC,mBAAoB,GACpBC,mBAAoB,GACpBC,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,aAAc,IAIhBrB,KAAKsB,kBAGLtB,KAAKuB,2BAGoB,WAArBvB,KAAKK,cAA6BL,KAAKM,oBAAsBN,KAAKC,YAAYuB,IAAI,4BACpF,IACExB,KAAKyB,wBAAwB,2BACrC,CAAQ,MAAOC,GACPC,QAAQC,KAAK,2CAA4CF,EACjE,CAGIC,QAAQE,IAAI,sCAChB,CAKEN,wBAAAA,GACE,MAAMO,EAAY,2BAClB,IAAK9B,KAAKC,YAAYuB,IAAIM,GAAY,CACpC,MAAMC,EAAc,CAClBC,GAAIF,EACJG,KAAM,oBACNC,KAAM,QACNC,MAAO,UACPC,YAAa,8CACbC,SAAU,CAAEC,SAAS,EAAMC,aAAc,EAAGC,eAAe,GAC3DC,WAAW,IAAIC,MAAOC,cACtBC,WAAW,IAAIF,MAAOC,eAExB3C,KAAKC,YAAY4C,IAAIf,EAAWC,GAEhC/B,KAAK8C,aAAa,eAAgB,CAAEZ,KAAMH,IAC1CJ,QAAQE,IAAI,qDAAsDC,EACxE,CACA,CAOEiB,gBAAAA,CAAiBC,GACf,MAAMhB,GAAEA,EAAEC,KAAEA,EAAIC,KAAEA,EAAIC,MAAEA,EAAKC,YAAEA,EAAc,GAAEC,SAAEA,EAAW,CAAA,GAAOW,EAGnE,KAAKhB,GAAOC,GAASC,GAASC,GAC5B,MAAM,IAAIc,MAAM,kDAIlB,IAAK,CAAC,QAAS,UAAUC,SAAShB,GAChC,MAAM,IAAIe,MAAM,6CAIlB,GAAIjD,KAAKC,YAAYuB,IAAIQ,GACvB,MAAM,IAAIiB,MAAM,wBAAwBjB,qBAI1C,GAAIhC,KAAKC,YAAYkD,MAAQnD,KAAKO,OAAOC,eACvC,MAAM,IAAIyC,MAAM,mCAAmCjD,KAAKO,OAAOC,2BAIjE,MAAM4C,EAAa,CACjBpB,KACAC,OACAC,OACAC,QACAC,cACAC,WACAI,WAAW,IAAIC,MAAOC,cACtBC,WAAW,IAAIF,MAAOC,eAoBxB,OAjBA3C,KAAKC,YAAY4C,IAAIb,EAAIoB,GAGzBpD,KAAK8C,aAAa,eAAgB,CAAEZ,KAAMkB,IAG1CpD,KAAKqD,4BAA4BD,EAAY,CAC3CE,WAAW,IAAIZ,MAAOC,gBAIxB3C,KAAKuD,gBAGLvD,KAAKwD,0BAEL7B,QAAQE,IAAI,wBAAwBG,MAAOC,MACpCmB,CACX,CAQEK,gBAAAA,CAAiBzB,EAAI0B,GACnB,MAAMC,EAAe3D,KAAKC,YAAY2D,IAAI5B,GAC1C,IAAK2B,EACH,MAAM,IAAIV,MAAM,wBAAwBjB,gBAI1C,MAAQA,GAAI6B,EAAO3B,KAAM4B,KAAYC,GAAmBL,EAEpDG,GAASA,IAAU7B,GACrBL,QAAQC,KAAK,gCAGXkC,GAAWA,IAAYH,EAAazB,MACtCP,QAAQC,KAAK,kCAIf,MAAMoC,EAAc,IACfL,KACAI,EACHnB,WAAW,IAAIF,MAAOC,eASxB,OANA3C,KAAKC,YAAY4C,IAAIb,EAAIgC,GAGzBhE,KAAK8C,aAAa,eAAgB,CAAEZ,KAAM8B,IAE1CrC,QAAQE,IAAI,wBAAwBG,KAC7BgC,CACX,CAOEC,gBAAAA,CAAiBjC,GACf,QAAKhC,KAAKC,YAAYuB,IAAIQ,KAK1BhC,KAAKkE,0BAA0BlC,GAG/BhC,KAAKC,YAAYkE,OAAOnC,GAGxBhC,KAAK8C,aAAa,eAAgB,CAAEsB,OAAQpC,IAGxChC,KAAKM,qBAAuB0B,GAC9BhC,KAAKqE,gBAGP1C,QAAQE,IAAI,wBAAwBG,MAC7B,EACX,CAMEsC,iBAAAA,GACE,OAAOC,MAAMC,KAAKxE,KAAKC,YAAYwE,SACvC,CAOEC,aAAAA,CAAc1C,GACZ,OAAOhC,KAAKC,YAAY2D,IAAI5B,IAAO,IACvC,CAOE2C,sBAAAA,CAAuBC,GACrB,MAAMR,OAAEA,EAAMS,EAAEA,EAACC,EAAEA,EAACC,MAAEA,EAAKC,OAAEA,EAAMC,QAAEA,EAAO5C,SAAEA,EAAW,CAAA,EAAE6C,qBAAEA,EAAoBC,mBAAEA,GAAuBP,EAG1G,IAAKR,IAAWa,QAAiBG,IAANP,QAAyBO,IAANN,EAC5C,MAAM,IAAI7B,MAAM,kDAIlB,MAAMG,EAAapD,KAAKC,YAAY2D,IAAIQ,GACxC,IAAKhB,EACH,MAAM,IAAIH,MAAM,wBAAwBmB,gBAI1C,GAAwB,WAApBhB,EAAWlB,KAAmB,CAChC,QAAckD,IAAVL,QAAkCK,IAAXJ,EACzB,MAAM,IAAI/B,MAAM,wDAElB,GAAI8B,EAAQ/E,KAAKO,OAAOG,eAAiBsE,EAAShF,KAAKO,OAAOG,cAC5D,MAAM,IAAIuC,MAAM,gCAAgCjD,KAAKO,OAAOG,kBAEpE,CAGSV,KAAKG,kBAAkBqB,IAAIyD,IAC9BjF,KAAKG,kBAAkB0C,IAAIoC,EAAS,IAGtC,MAAMI,EAAmBrF,KAAKG,kBAAkByD,IAAIqB,GAGpD,GAAII,EAAiBC,QAAUtF,KAAKO,OAAOE,uBACzC,UAAUwC,MAAM,4CAA4CjD,KAAKO,OAAOE,mCAI1E,MAAM8E,EAAQvF,KAAKwF,mBAAmBP,EAASb,GAGzCqB,EAAa,CACjBzD,GAAIhC,KAAK0F,uBACTtB,SACAS,IACAC,OACwB,WAApB1B,EAAWlB,MAAqB,CAAE6C,QAAOC,UAC7CC,UACAM,QACAlD,cACI6C,GAAwBC,GAAsB,CAAED,uBAAsBC,sBAC1E1C,WAAW,IAAIC,MAAOC,cACtBC,WAAW,IAAIF,MAAOC,eAsBxB,OAnBA0C,EAAiBM,KAAKF,GAGtBzF,KAAK8C,aAAa,qBAAsB2C,GAGxCzF,KAAK4F,kCAAkCH,EAAY,CACjDR,QAASA,EACTb,OAAQA,EACRd,WAAW,IAAIZ,MAAOC,gBAIxB3C,KAAKuD,gBAGLvD,KAAKwD,0BAEL7B,QAAQE,IAAI,8BAA8B4D,EAAWzD,aAAaoC,aAAkBmB,MAC7EE,CACX,CAOEI,uBAAAA,CAAwBZ,GACtB,OAAOjF,KAAKG,kBAAkByD,IAAIqB,IAAY,EAClD,CAOEa,sBAAAA,CAAuBC,GACrB,IAAK,MAAOd,EAASe,KAAgBhG,KAAKG,kBAAkB8F,UAAW,CACrE,MAAMC,EAAQF,EAAYG,UAAUC,GAAOA,EAAIpE,KAAO+D,GACtD,IAAc,IAAVG,EAAc,CAChB,MAAMG,EAAoBL,EAAYM,OAAOJ,EAAO,GAAG,GAwBvD,OArB2B,IAAvBF,EAAYV,QACdtF,KAAKG,kBAAkBgE,OAAOc,GAIhCjF,KAAK8C,aAAa,qBAAsBuD,GAGxCrG,KAAKuG,kCAAkCF,EAAmB,CACxDpB,QAASA,EACTb,OAAQiC,EAAkBjC,OAC1Bd,WAAW,IAAIZ,MAAOC,gBAIxB3C,KAAKuD,gBAGLvD,KAAKwD,0BAEL7B,QAAQE,IAAI,8BAA8BkE,MACnC,CACf,CACA,CAEI,OAAO,CACX,CAME7B,yBAAAA,CAA0BE,GACxB,IAAIoC,EAAe,EAEnB,IAAK,MAAOvB,EAASe,KAAgBhG,KAAKG,kBAAkB8F,UAAW,CACrE,MAAMQ,EAAiBT,EAAYV,OAC7BoB,EAAWV,EAAYW,OAAOP,GAAOA,EAAIhC,SAAWA,GAEtDsC,EAASpB,SAAWmB,IACtBD,GAAgBC,EAAiBC,EAASpB,OAElB,IAApBoB,EAASpB,OACXtF,KAAKG,kBAAkBgE,OAAOc,GAE9BjF,KAAKG,kBAAkB0C,IAAIoC,EAASyB,GAG9C,CAEQF,EAAe,GACjB7E,QAAQE,IAAI,WAAW2E,yBAAoCpC,IAEjE,CAME3C,uBAAAA,CAAwB2C,GACtB,MAAMhB,EAAapD,KAAKC,YAAY2D,IAAIQ,GACxC,IAAKhB,EACH,MAAM,IAAIH,MAAM,wBAAwBmB,gBAG1CpE,KAAKK,YAAc,SACnBL,KAAKM,mBAAqB8D,EAG1BpE,KAAK8C,aAAa,eAAgB,CAChC8D,KAAM,SACNxC,SACAhB,eAGFzB,QAAQE,IAAI,uCAAuCuC,IACvD,CAKEC,aAAAA,GACErE,KAAKK,YAAc,SACnBL,KAAKM,mBAAqB,KAG1BN,KAAK8C,aAAa,eAAgB,CAChC8D,KAAM,SACNxC,OAAQ,KACRhB,WAAY,OAGdzB,QAAQE,IAAI,qCAChB,CAMEgF,cAAAA,GACE,MAA4B,gBAAhBxG,aAAwD,OAA5BL,KAAKM,kBACjD,CAMEwG,oBAAAA,GACE,OAAK9G,KAAKM,mBAGHN,KAAKC,YAAY2D,IAAI5D,KAAKM,oBAFxB,IAGb,CAOEyG,iBAAAA,CAAkBC,GAChB,IAAKhH,KAAK6G,iBACR,MAAO,CAAEI,SAAS,EAAOC,OAAQ,sBAGnC,MAAM9D,EAAapD,KAAK8G,uBACxB,IAAK1D,EACH,MAAO,CAAE6D,SAAS,EAAOC,OAAQ,2BAGnC,GAAwB,UAApB9D,EAAWlB,KACb,MAAO,CAAE+E,SAAS,EAAOC,OAAQ,qCAInC,IAAKF,EAAU/B,SAAkC,iBAAhB+B,EAAUnC,GAAyC,iBAAhBmC,EAAUlC,EAC5E,MAAO,CAAEmC,SAAS,EAAOC,OAAQ,sBAGnC,IAQE,MAAO,CAAED,SAAS,EAAMxB,WAPLzF,KAAK2E,uBAAuB,CAC7CP,OAAQhB,EAAWpB,GACnB6C,EAAGmC,EAAUnC,EACbC,EAAGkC,EAAUlC,EACbG,QAAS+B,EAAU/B,UAI3B,CAAM,MAAOkC,GACP,MAAO,CAAEF,SAAS,EAAOC,OAAQC,EAAMC,QAC7C,CACA,CAOEC,gBAAAA,CAAiBC,GACf,IAAKtH,KAAK6G,iBACR,MAAO,CAAEI,SAAS,EAAOC,OAAQ,sBAGnC,MAAM9D,EAAapD,KAAK8G,uBACxB,IAAK1D,EACH,MAAO,CAAE6D,SAAS,EAAOC,OAAQ,2BAGnC,GAAwB,WAApB9D,EAAWlB,KACb,MAAO,CAAE+E,SAAS,EAAOC,OAAQ,sCAGnC,MAAMK,OAAEA,EAAMC,OAAEA,EAAMC,KAAEA,EAAIC,KAAEA,EAAIzC,QAAEA,GAAYqC,EAG1CzC,EAAI8C,KAAKC,IAAIL,EAAQE,GACrB3C,EAAI6C,KAAKC,IAAIJ,EAAQE,GACrB3C,EAAQ4C,KAAKE,IAAIJ,EAAOF,GACxBvC,EAAS2C,KAAKE,IAAIH,EAAOF,GAE/B,IAUE,MAAO,CAAEP,SAAS,EAAMxB,WATLzF,KAAK2E,uBAAuB,CAC7CP,OAAQhB,EAAWpB,GACnB6C,IACAC,IACAC,QACAC,SACAC,YAIR,CAAM,MAAOkC,GACP,MAAO,CAAEF,SAAS,EAAOC,OAAQC,EAAMC,QAC7C,CACA,CAQE5B,kBAAAA,CAAmBP,EAASb,EAAS,MACnC,MAAM4B,EAAchG,KAAK6F,wBAAwBZ,GAG3C6C,EAAsB1D,EACxB4B,EAAYW,OAAOP,GAAOA,EAAIhC,SAAWA,GACzC4B,EAEJ,OAAmC,IAA/B8B,EAAoBxC,OACf,EAGQqC,KAAKI,OAAOD,EAAoBE,IAAI5B,GAAOA,EAAIb,OAAS,IACvD,CACtB,CAOE0C,kBAAAA,CAAmBhD,EAASb,EAAS,MACnC,MAAM4B,EAAchG,KAAK6F,wBAAwBZ,GAEjD,GAAIb,EAAQ,CAEV,MAAM8D,EAAkBlC,EAAYW,OAAOP,GAAOA,EAAIhC,SAAWA,GACjE8D,EAAgBC,KAAK,CAACC,EAAGC,KAAOD,EAAE7C,OAAS,IAAM8C,EAAE9C,OAAS,IAE5D2C,EAAgBI,QAAQ,CAAC7C,EAAYS,KACnCT,EAAWF,MAAQW,EAAQ,EAC3BT,EAAW7C,WAAY,IAAIF,MAAOC,gBAGpChB,QAAQE,IAAI,aAAaqG,EAAgB5C,8BAA8BlB,eAAoBa,IACjG,MAEMe,EAAYmC,KAAK,CAACC,EAAGC,KAAOD,EAAE7C,OAAS,IAAM8C,EAAE9C,OAAS,IAExDS,EAAYsC,QAAQ,CAAC7C,EAAYS,KAC/BT,EAAWF,MAAQW,EAAQ,EAC3BT,EAAW7C,WAAY,IAAIF,MAAOC,gBAGpChB,QAAQE,IAAI,aAAamE,EAAYV,gCAAgCL,KAIvEjF,KAAKuD,gBAGLvD,KAAKwD,0BAGLxD,KAAK8C,aAAa,qBAAsB,CAAEmC,UAASb,UACvD,CAOEmE,kBAAAA,CAAmBtD,GACjB,MAAMe,EAAchG,KAAK6F,wBAAwBZ,GAC3CuD,EAAQ,CACZC,MAAOzC,EAAYV,OACnBoD,OAAQ,CAAA,EACRC,WAAY,CAAEf,IAAK,EAAGG,IAAK,GAC3Ba,KAAM,IAGR,GAA2B,IAAvB5C,EAAYV,OACd,OAAOkD,EAITxC,EAAYsC,QAAQ7C,IAClB,MAAMrB,EAASqB,EAAWrB,OAC1B,IAAKoE,EAAME,OAAOtE,GAAS,CACzB,MAAMhB,EAAapD,KAAK0E,cAAcN,GACtCoE,EAAME,OAAOtE,GAAU,CACrByE,MAAO,EACPC,SAAU1F,GAAYnB,MAAQ,UAC9B8G,UAAW3F,GAAYjB,OAAS,UAChC6G,eAAgB5F,GAAYlB,MAAQ,UAE9C,CACMsG,EAAME,OAAOtE,GAAQyE,UAIvB,MAAMI,EAASjD,EAAYgC,IAAI5B,GAAOA,EAAIb,OAAS,GAAGoB,OAAOpB,GAASA,EAAQ,GAAG4C,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACpG,GAAIY,EAAO3D,OAAS,EAAG,CACrBkD,EAAMG,WAAWf,IAAMqB,EAAO,GAC9BT,EAAMG,WAAWZ,IAAMkB,EAAOA,EAAO3D,OAAS,GAG9C,IAAK,IAAI4D,EAAID,EAAO,GAAIC,GAAKD,EAAOA,EAAO3D,OAAS,GAAI4D,IACjDD,EAAO/F,SAASgG,IACnBV,EAAMI,KAAKjD,KAAKuD,EAG1B,CAEI,OAAOV,CACX,CAQEW,qBAAAA,CAAsBlE,EAASM,GAE7B,OADoBvF,KAAK6F,wBAAwBZ,GAC9BmE,KAAKhD,GAAOA,EAAIb,QAAUA,IAAU,IAC3D,CAQE8D,qBAAAA,CAAsBtD,EAAcuD,GAClC,IAAK,MAAOrE,EAASe,KAAgBhG,KAAKG,kBAAkB8F,UAAW,CACrE,MAAMR,EAAaO,EAAYoD,KAAKhD,GAAOA,EAAIpE,KAAO+D,GACtD,GAAIN,EAAY,CAEd,MAAM8D,EAAqBvD,EAAYoD,KAAKhD,GAAOA,EAAIpE,KAAO+D,GAAgBK,EAAIb,QAAU+D,GAC5F,GAAIC,EAEF,OADA5H,QAAQC,KAAK,SAAS0H,mCAA0CC,EAAmBvH,OAC5E,EAGT,MAAMwH,EAAW/D,EAAWF,MAqB5B,OApBAE,EAAWF,MAAQ+D,EACnB7D,EAAW7C,WAAY,IAAIF,MAAOC,cAGlC3C,KAAK8C,aAAa,qBAAsB2C,GAGxCzF,KAAKyJ,kCAAkChE,EAAY,CACjDR,QAASA,EACTyE,YAAa,CAAElF,KAAMgF,EAAUG,GAAIL,GACnChG,WAAW,IAAIZ,MAAOC,gBAIxB3C,KAAKuD,gBAGLvD,KAAKwD,0BAEL7B,QAAQE,IAAI,sBAAsBkE,gBAA2ByD,QAAeF,MACrE,CACf,CACA,CAEI,OAAO,CACX,CAME5D,oBAAAA,GACE,MAAO,cAAchD,KAAKkH,SAASjC,KAAKkC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAC5E,CAMEC,UAAAA,GACE,MAAM/J,EAAcsE,MAAMC,KAAKxE,KAAKC,YAAYwE,UAC1CtE,EAAoB,GAE1B,IAAK,MAAO8E,EAASe,UAAqB7F,kBAAkB8F,UAC1D9F,EAAkBwF,QAAQK,GAG5B,MAAO,CACLiE,QAAS,MACTC,YAAY,IAAIxH,MAAOC,cACvB1C,cACAE,oBAEN,CAOEgK,UAAAA,CAAWA,GACT,IACE,MAAMF,QAAEA,EAAOhK,YAAEA,EAAc,GAAEE,kBAAEA,EAAoB,IAAOgK,EAE9C,QAAZF,GACFtI,QAAQC,KAAK,+BAA+BqI,mBAI9C,IAAK,MAAMjH,KAAY/C,EAChBD,KAAKC,YAAYuB,IAAIwB,EAAShB,KACjChC,KAAKC,YAAY4C,IAAIG,EAAShB,GAAIgB,GAKtC,IAAK,MAAMyC,KAActF,EAAmB,CACrCH,KAAKG,kBAAkBqB,IAAIiE,EAAWR,UACzCjF,KAAKG,kBAAkB0C,IAAI4C,EAAWR,QAAS,IAGjD,MAAMI,EAAmBrF,KAAKG,kBAAkByD,IAAI6B,EAAWR,SAG1DI,EAAiB+D,KAAKhD,GAAOA,EAAIpE,KAAOyD,EAAWzD,KACtDqD,EAAiBM,KAAKF,EAEhC,CAGM,OADA9D,QAAQE,IAAI,YAAY5B,EAAYqF,2BAA2BnF,EAAkBmF,sBAC1E,CAAE2B,SAAS,EACxB,CAAM,MAAOE,GAEP,OADAxF,QAAQwF,MAAM,iBAAkBA,GACzB,CAAEF,SAAS,EAAOE,MAAOA,EAAMC,QAC5C,CACA,CAOEgD,gBAAAA,CAAiBC,EAAWC,GACrBtK,KAAKc,cAAcuJ,KACtBrK,KAAKc,cAAcuJ,GAAa,IAElCrK,KAAKc,cAAcuJ,GAAW1E,KAAK2E,EACvC,CAOEC,mBAAAA,CAAoBF,EAAWC,GAC7B,GAAItK,KAAKc,cAAcuJ,GAAY,CACjC,MAAMnE,EAAQlG,KAAKc,cAAcuJ,GAAWG,QAAQF,GAChDpE,GAAQ,GACVlG,KAAKc,cAAcuJ,GAAW/D,OAAOJ,EAAO,EAEpD,CACA,CAOEpD,YAAAA,CAAauH,EAAWI,GAClBzK,KAAKc,cAAcuJ,IACrBrK,KAAKc,cAAcuJ,GAAW/B,QAAQgC,IACpC,IACEA,EAAQG,EAClB,CAAU,MAAOtD,GACPxF,QAAQwF,MAAM,8BAA8BkD,KAAclD,EACpE,GAGA,CAMEuD,sBAAAA,CAAuB7J,GACrBb,KAAKa,oBAAsBA,EAC3Bc,QAAQE,IAAI,oDAChB,CAOE+D,iCAAAA,CAAkCH,EAAYkF,EAAU,IACtD,GAAK3K,KAAKa,qBAAwBb,KAAKa,oBAAoB+J,wBAK3D,IAEE,MAAMC,EAAWC,OAAOC,qBAAqBF,SAC7C,IAAKA,GAAUG,eAAiBH,GAAUI,aAExC,YADAtJ,QAAQC,KAAK,4BAIf,MAAMsJ,EAAW,CACfhJ,KAAM,2BACNuD,WAAYA,EACZkF,QAAS,IACJA,EACHQ,QAASN,EAASG,aAAahJ,GAC/BiD,QAAS4F,EAASI,aAAajJ,GAC/BoJ,UAAWP,EAASG,aAAaK,kBACjCR,SAAUA,GAEZvH,WAAW,IAAIZ,MAAOC,eAGxBhB,QAAQE,IAAI,+CAAgDqJ,GAGQ,wBAApDrK,oBAAoByK,4BAClCtL,KAAKa,oBAAoByK,4BAA4BJ,GAErDvJ,QAAQC,KAAK,oEAErB,CAAM,MAAOuF,GACPxF,QAAQwF,MAAM,sDAAuDA,EAC3E,MAnCMxF,QAAQE,IAAI,qEAoClB,CAOE4H,iCAAAA,CAAkChE,EAAYkF,EAAU,IACtD,GAAK3K,KAAKa,qBAAwBb,KAAKa,oBAAoB+J,wBAK3D,IAEE,MAAMC,EAAWC,OAAOC,qBAAqBF,SAC7C,IAAKA,GAAUG,eAAiBH,GAAUI,aAExC,YADAtJ,QAAQC,KAAK,8BAIf,MAAMsJ,EAAW,CACfhJ,KAAM,2BACNuD,WAAYA,EACZkF,QAAS,IACJA,EACHQ,QAASN,EAASG,aAAahJ,GAC/BiD,QAAS4F,EAASI,aAAajJ,GAC/BoJ,UAAWP,EAASG,aAAaK,kBACjCR,SAAUA,GAEZvH,WAAW,IAAIZ,MAAOC,eAGxBhB,QAAQE,IAAI,+CAAgDqJ,GAEQ,wBAApDrK,oBAAoByK,4BAClCtL,KAAKa,oBAAoByK,4BAA4BJ,GAErDvJ,QAAQC,KAAK,oEAErB,CAAM,MAAOuF,GACPxF,QAAQwF,MAAM,sDAAuDA,EAC3E,MAlCMxF,QAAQE,IAAI,qEAmClB,CAOE0E,iCAAAA,CAAkCd,EAAYkF,EAAU,IACtD,GAAK3K,KAAKa,qBAAwBb,KAAKa,oBAAoB+J,wBAK3D,IAEE,MAAMC,EAAWC,OAAOC,qBAAqBF,SAC7C,IAAKA,GAAUG,eAAiBH,GAAUI,aAExC,YADAtJ,QAAQC,KAAK,8BAIf,MAAMsJ,EAAW,CACfhJ,KAAM,2BACNuD,WAAYA,EACZkF,QAAS,IACJA,EACHQ,QAASN,EAASG,aAAahJ,GAC/BiD,QAAS4F,EAASI,aAAajJ,GAC/BoJ,UAAWP,EAASG,aAAaK,kBACjCR,SAAUA,GAEZvH,WAAW,IAAIZ,MAAOC,eAGxBhB,QAAQE,IAAI,+CAAgDqJ,GAEQ,wBAApDrK,oBAAoByK,4BAClCtL,KAAKa,oBAAoByK,4BAA4BJ,GAErDvJ,QAAQC,KAAK,oEAErB,CAAM,MAAOuF,GACPxF,QAAQwF,MAAM,sDAAuDA,EAC3E,MAlCMxF,QAAQE,IAAI,qEAmClB,CAOEwB,2BAAAA,CAA4BD,EAAYuH,EAAU,IAChD,GAAK3K,KAAKa,qBAAwBb,KAAKa,oBAAoB+J,wBAK3D,IACE,MAAMM,EAAW,CACfhJ,KAAM,qBACNkB,WAAYA,EACZuH,QAASA,EACTrH,WAAW,IAAIZ,MAAOC,eAGxBhB,QAAQE,IAAI,yCAA0CqJ,GAEc,mBAAzDlL,KAAKa,oBAAoByK,4BAClCtL,KAAKa,oBAAoByK,4BAA4BJ,GAErDvJ,QAAQC,KAAK,oEAErB,CAAM,MAAOuF,GACPxF,QAAQwF,MAAM,gDAAiDA,EACrE,MArBMxF,QAAQE,IAAI,+DAsBlB,CAME0J,QAAAA,GACE,MAAMC,EAAaxL,KAAKC,YAAYkD,KACpC,IAAIsI,EAAmB,EACnBC,EAAkB,EAEtB,IAAK,MAAOzG,EAASe,KAAgBhG,KAAKG,kBAAkB8F,UACtDD,EAAYV,OAAS,IACvBoG,IACAD,GAAoBzF,EAAYV,QAIpC,MAAO,CACLkG,aACAC,mBACAC,kBACAC,2BAA4BD,EAAkB,GAAKD,EAAmBC,GAAiBE,QAAQ,GAAK,EAE1G,CAKErI,aAAAA,GACE,IACE,MAAMkH,EAAO,CACXxK,YAAasE,MAAMC,KAAKxE,KAAKC,YAAYgG,WACzC9F,kBAAmBoE,MAAMC,KAAKxE,KAAKG,kBAAkB8F,WACrDgE,QAAS,MACT4B,SAAS,IAAInJ,MAAOC,eAGtBmJ,aAAaC,QAAQ,uBAAwBC,KAAKC,UAAUxB,IAC5D9I,QAAQE,IAAI,+CAClB,CAAM,MAAOsF,GACPxF,QAAQwF,MAAM,yCAA0CA,EAC9D,CACA,CAKE7F,eAAAA,GACE,IACE,MAAM4K,EAAYJ,aAAaK,QAAQ,wBACvC,IAAKD,EAEH,YADAvK,QAAQE,IAAI,yCAId,MAAM4I,EAAOuB,KAAKI,MAAMF,GAGpBzB,EAAKxK,cACPD,KAAKC,YAAYoM,QACjB5B,EAAKxK,YAAYqI,QAAQ,EAAEtG,EAAIE,MAC7BlC,KAAKC,YAAY4C,IAAIb,EAAIE,MAKzBuI,EAAKtK,oBACPH,KAAKG,kBAAkBkM,QACvB5B,EAAKtK,kBAAkBmI,QAAQ,EAAErD,EAASe,MACxChG,KAAKG,kBAAkB0C,IAAIoC,EAASe,MAIxCrE,QAAQE,IAAI,6DAA6D4I,EAAKR,YAG1EQ,EAAKxK,aAAewK,EAAKxK,YAAYqF,OAAS,IAChD3D,QAAQE,IAAI,8BAA8B4I,EAAKxK,YAAYqF,uBAE3DgH,WAAW,KACT7B,EAAKxK,YAAYqI,QAAQ,EAAEtG,EAAIE,MAC7BlC,KAAK8C,aAAa,eAAgB,CAAEZ,YAErC,KAGX,CAAM,MAAOiF,GACPxF,QAAQwF,MAAM,yCAA0CA,EAC9D,CACA,CAKEoF,YAAAA,GACE,IACET,aAAaU,WAAW,wBACxB7K,QAAQE,IAAI,mDAClB,CAAM,MAAOsF,GACPxF,QAAQwF,MAAM,0CAA2CA,EAC/D,CACA,CAKE,6BAAM3D,GACJ,IAEE,MAAMiJ,EAAiB3B,OAAOC,qBAAqB0B,eAC/CA,GAAiE,mBAAxCA,EAAeC,4BACpCD,EAAeC,uBACrB/K,QAAQE,IAAI,mDAEZF,QAAQC,KAAK,yCAErB,CAAM,MAAOuF,GACPxF,QAAQwF,MAAM,wCAAyCA,EAC7D,CACA,CAKEwF,2BAAAA,CAA4B1H,GAE1B,OADoBjF,KAAK6F,wBAAwBZ,GAC9B+C,IAAIvC,IACrB,MAAMrC,EAAapD,KAAK0E,cAAce,EAAWrB,QACjD,MAAO,IACFqB,EACHrC,WAAYA,EAAa,CACvBpB,GAAIoB,EAAWpB,GACfC,KAAMmB,EAAWnB,KACjBC,KAAMkB,EAAWlB,KACjBC,MAAOiB,EAAWjB,MAClBC,YAAagB,EAAWhB,aACtB,OAGZ,CAKEwK,6BAAAA,CAA8B3H,EAAS4H,GACrC,IAAKA,IAA2BtI,MAAMuI,QAAQD,GAC5C,OAIG7M,KAAKG,kBAAkBqB,IAAIyD,IAC9BjF,KAAKG,kBAAkB0C,IAAIoC,EAAS,IAGtC,MAAMI,EAAmBrF,KAAKG,kBAAkByD,IAAIqB,GAGpD4H,EAAuBvE,QAAQyE,IAG7B,IADe1H,EAAiB+D,KAAKhD,GAAOA,EAAIpE,KAAO+K,EAAgB/K,IAC1D,CAEX,MAAMoB,WAAEA,KAAeqC,GAAesH,EACtC1H,EAAiBM,KAAKF,EAC9B,IAGI9D,QAAQE,IAAI,UAAUgL,EAAuBvH,uCAAuCL,IACxF,CAOE+H,4BAAAA,CAA6B/H,EAAS9E,GACpC,IAAK8E,IAAY9E,GAAkD,IAA7BA,EAAkBmF,OACtD,OAIGtF,KAAKG,kBAAkBqB,IAAIyD,IAC9BjF,KAAKG,kBAAkB0C,IAAIoC,EAAS,IAGtC,MAAMI,EAAmBrF,KAAKG,kBAAkByD,IAAIqB,GAGpD9E,EAAkBmI,QAAQ7C,IAExB,MAAMwH,EAAgB5H,EAAiBc,UAAU+G,GAAYA,EAASlL,KAAOyD,EAAWzD,IAExF,IAAsB,IAAlBiL,EAAsB,CAExB,MAAME,EAAiB,IAAK1H,GAC5BJ,EAAiBM,KAAKwH,GACtBxL,QAAQE,IAAI,sBAAsB4D,EAAWzD,WAAWyD,EAAW2H,gBAC3E,MAEQ/H,EAAiB4H,GAAiB,IAAKxH,GACvC9D,QAAQE,IAAI,sBAAsB4D,EAAWzD,WAAWyD,EAAW2H,mBAKvEpN,KAAKuD,gBAEL5B,QAAQE,IAAI,YAAY1B,EAAkBmF,oBAAoBL,IAClE,CAMEoI,oCAAAA,CAAqCnC,GACnC,IACE,IAAKA,EAASzF,WAEZ,YADA9D,QAAQC,KAAK,qDAIf,MAAM6D,WAAEA,EAAUkF,QAAEA,GAAYO,EAG1BoC,EAAsBtN,KAAK6F,wBAAwB8E,EAAQ1F,SAGjE,GAFeqI,EAAoBlE,KAAKhD,GAAOA,EAAIpE,KAAOyD,EAAWzD,IAInE,YADAL,QAAQE,IAAI,iDAKd,IAAK7B,KAAKC,YAAYuB,IAAIiE,EAAWrB,QAEnC,YADAzC,QAAQC,KAAK,kBAAkB6D,EAAWrB,0CAKvCpE,KAAKG,kBAAkBqB,IAAImJ,EAAQ1F,UACtCjF,KAAKG,kBAAkB0C,IAAI8H,EAAQ1F,QAAS,IAI9CjF,KAAKG,kBAAkByD,IAAI+G,EAAQ1F,SAASU,KAAKF,GAGjDzF,KAAK8C,aAAa,qBAAsB2C,GAGxCzF,KAAKuD,gBAEL5B,QAAQE,IAAI,0CAA2C4D,EAAWzD,GACxE,CAAM,MAAOmF,GACPxF,QAAQwF,MAAM,0DAA2DA,EAC/E,CACA,CAMEoG,oCAAAA,CAAqCrC,GACnC,IACE,IAAKA,EAASzF,WAEZ,YADA9D,QAAQC,KAAK,qDAIf,MAAM6D,WAAEA,EAAUkF,QAAEA,GAAYO,EAG1B7F,EAAmBrF,KAAK6F,wBAAwB8E,EAAQ1F,SACxDgI,EAAgB5H,EAAiBc,UAAUC,GAAOA,EAAIpE,KAAOyD,EAAWzD,IAE9E,IAAuB,IAAnBiL,EAEF,YADAtL,QAAQC,KAAK,uDAAwD6D,EAAWzD,IAKlFqD,EAAiB4H,GAAiB,IAAK5H,EAAiB4H,MAAmBxH,GAG3EzF,KAAK8C,aAAa,qBAAsB2C,GAGxCzF,KAAKuD,gBAEL5B,QAAQE,IAAI,0CAA2C4D,EAAWzD,GACxE,CAAM,MAAOmF,GACPxF,QAAQwF,MAAM,0DAA2DA,EAC/E,CACA,CAMEqG,oCAAAA,CAAqCtC,GACnC,IACE,IAAKA,EAASzF,WAEZ,YADA9D,QAAQC,KAAK,qDAIf,MAAM6D,WAAEA,EAAUkF,QAAEA,GAAYO,EAG1B7F,EAAmBrF,KAAK6F,wBAAwB8E,EAAQ1F,SACxDgI,EAAgB5H,EAAiBc,UAAUC,GAAOA,EAAIpE,KAAOyD,EAAWzD,IAE9E,IAAuB,IAAnBiL,EAEF,YADAtL,QAAQC,KAAK,uDAAwD6D,EAAWzD,IAKlFqD,EAAiBiB,OAAO2G,EAAe,GAGP,IAA5B5H,EAAiBC,QACnBtF,KAAKG,kBAAkBgE,OAAOwG,EAAQ1F,SAIxCjF,KAAK8C,aAAa,qBAAsB2C,GAGxCzF,KAAKuD,gBAEL5B,QAAQE,IAAI,0CAA2C4D,EAAWzD,GACxE,CAAM,MAAOmF,GACPxF,QAAQwF,MAAM,0DAA2DA,EAC/E,CACA,CAMEsG,8BAAAA,CAA+BvC,GAC7B,IACE,IAAKA,EAAS9H,WAEZ,YADAzB,QAAQC,KAAK,+CAIf,MAAMwB,WAAEA,GAAe8H,EAGvB,GAAIlL,KAAKC,YAAYuB,IAAI4B,EAAWpB,IAElC,YADAL,QAAQE,IAAI,2CAKd7B,KAAKC,YAAY4C,IAAIO,EAAWpB,GAAIoB,GAGpCpD,KAAK8C,aAAa,eAAgB,CAAEZ,KAAMkB,IAG1CpD,KAAKuD,gBAEL5B,QAAQE,IAAI,oCAAqCuB,EAAWpB,GAClE,CAAM,MAAOmF,GACPxF,QAAQwF,MAAM,oDAAqDA,EACzE,CACA,CAMEuG,eAAAA,CAAgBxC,GACd,GAAKA,GAAaA,EAAShJ,KAO3B,OAFAP,QAAQE,IAAI,8CAA+CqJ,EAAShJ,MAE5DgJ,EAAShJ,MACf,IAAK,2BACHlC,KAAKqN,qCAAqCnC,GAC1C,MACF,IAAK,2BACHlL,KAAKuN,qCAAqCrC,GAC1C,MACF,IAAK,2BACHlL,KAAKwN,qCAAqCtC,GAC1C,MACF,IAAK,qBACHlL,KAAKyN,+BAA+BvC,GACpC,MACF,QACEvJ,QAAQC,KAAK,gDAAiDsJ,EAAShJ,WApBzEP,QAAQC,KAAK,gCAsBnB"}