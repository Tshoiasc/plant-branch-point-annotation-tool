class h{constructor(){if(this.customTypes=new Map,this.customAnnotations=new Map,this.isEnabled=!0,this.currentMode="normal",this.selectedCustomType=null,this.config={maxCustomTypes:20,maxAnnotationsPerImage:100,minRegionSize:10,defaultPointRadius:8,defaultRegionStrokeWidth:2},this.realTimeSyncManager=null,this.eventHandlers={onAnnotationCreate:[],onAnnotationUpdate:[],onAnnotationDelete:[],onModeChange:[],onTypeCreate:[],onTypeUpdate:[],onTypeDelete:[]},this.loadFromStorage(),this.ensureBuiltinRegularType(),this.currentMode==="normal"&&!this.selectedCustomType&&this.customTypes.has("builtin-regular-keypoint"))try{this.setCustomAnnotationMode("builtin-regular-keypoint")}catch(e){console.warn("Failed to set default builtin type mode:",e)}console.log("CustomAnnotationManager initialized")}ensureBuiltinRegularType(){const e="builtin-regular-keypoint";if(!this.customTypes.has(e)){const t={id:e,name:"Regular (Builtin)",type:"point",color:"#22c55e",description:"Default keypoint type migrated from regular",metadata:{builtin:!0,defaultAngle:0,isDirectional:!0},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};this.customTypes.set(e,t),this.triggerEvent("onTypeCreate",{type:t}),console.log("[CustomAnnotationManager] Registered builtin type:",e)}}createCustomType(e){const{id:t,name:o,type:n,color:s,description:a="",metadata:i={}}=e;if(!t||!o||!n||!s)throw new Error("Missing required fields: id, name, type, color");if(!["point","region"].includes(n))throw new Error('Invalid type: must be "point" or "region"');if(this.customTypes.has(t))throw new Error('Custom type with id "'.concat(t,'" already exists'));if(this.customTypes.size>=this.config.maxCustomTypes)throw new Error("Maximum number of custom types (".concat(this.config.maxCustomTypes,") reached"));const r={id:t,name:o,type:n,color:s,description:a,metadata:i,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return this.customTypes.set(t,r),this.triggerEvent("onTypeCreate",{type:r}),this.triggerCustomTypeCreateSync(r,{timestamp:new Date().toISOString()}),this.saveToStorage(),this.triggerDatabaseAutoSave(),console.log("Created custom type: ".concat(t," (").concat(o,")")),r}updateCustomType(e,t){const o=this.customTypes.get(e);if(!o)throw new Error('Custom type with id "'.concat(e,'" not found'));const{id:n,type:s,...a}=t;n&&n!==e&&console.warn("Cannot change custom type ID"),s&&s!==o.type&&console.warn("Cannot change custom type type");const i={...o,...a,updatedAt:new Date().toISOString()};return this.customTypes.set(e,i),this.triggerEvent("onTypeUpdate",{type:i}),console.log("Updated custom type: ".concat(e)),i}deleteCustomType(e){return this.customTypes.has(e)?(this.deleteAnnotationsByTypeId(e),this.customTypes.delete(e),this.triggerEvent("onTypeDelete",{typeId:e}),this.selectedCustomType===e&&this.setNormalMode(),console.log("Deleted custom type: ".concat(e)),!0):!1}getAllCustomTypes(){return Array.from(this.customTypes.values())}getCustomType(e){return this.customTypes.get(e)||null}createCustomAnnotation(e){const{typeId:t,x:o,y:n,width:s,height:a,imageId:i,metadata:r={},parentAnnotationType:d,parentAnnotationId:m}=e;if(!t||!i||o===void 0||n===void 0)throw new Error("Missing required fields: typeId, imageId, x, y");const c=this.customTypes.get(t);if(!c)throw new Error('Custom type with id "'.concat(t,'" not found'));if(c.type==="region"){if(s===void 0||a===void 0)throw new Error("Width and height are required for region annotations");if(s<this.config.minRegionSize||a<this.config.minRegionSize)throw new Error("Region size must be at least ".concat(this.config.minRegionSize,"px"))}this.customAnnotations.has(i)||this.customAnnotations.set(i,[]);const l=this.customAnnotations.get(i);if(l.length>=this.config.maxAnnotationsPerImage)throw new Error("Maximum number of annotations per image (".concat(this.config.maxAnnotationsPerImage,") reached"));const g=this.getNextOrderNumber(i,t),u={id:this.generateAnnotationId(),typeId:t,x:o,y:n,...c.type==="region"&&{width:s,height:a},imageId:i,order:g,metadata:r,...d&&m&&{parentAnnotationType:d,parentAnnotationId:m},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return l.push(u),this.triggerEvent("onAnnotationCreate",u),this.triggerCustomAnnotationCreateSync(u,{imageId:i,typeId:t,timestamp:new Date().toISOString()}),this.saveToStorage(),this.triggerDatabaseAutoSave(),console.log("Created custom annotation: ".concat(u.id," (type: ").concat(t,", order: ").concat(g,")")),u}getAnnotationsByImageId(e){return this.customAnnotations.get(e)||[]}deleteCustomAnnotation(e){for(const[t,o]of this.customAnnotations.entries()){const n=o.findIndex(s=>s.id===e);if(n!==-1){const s=o.splice(n,1)[0];return o.length===0&&this.customAnnotations.delete(t),this.triggerEvent("onAnnotationDelete",s),this.triggerCustomAnnotationDeleteSync(s,{imageId:t,typeId:s.typeId,timestamp:new Date().toISOString()}),this.saveToStorage(),this.triggerDatabaseAutoSave(),console.log("Deleted custom annotation: ".concat(e)),!0}}return!1}deleteAnnotationsByTypeId(e){let t=0;for(const[o,n]of this.customAnnotations.entries()){const s=n.length,a=n.filter(i=>i.typeId!==e);a.length!==s&&(t+=s-a.length,a.length===0?this.customAnnotations.delete(o):this.customAnnotations.set(o,a))}t>0&&console.log("Deleted ".concat(t," annotations of type ").concat(e))}setCustomAnnotationMode(e){const t=this.customTypes.get(e);if(!t)throw new Error('Custom type with id "'.concat(e,'" not found'));this.currentMode="custom",this.selectedCustomType=e,this.triggerEvent("onModeChange",{mode:"custom",typeId:e,customType:t}),console.log("Switched to custom annotation mode: ".concat(e))}setNormalMode(){this.currentMode="normal",this.selectedCustomType=null,this.triggerEvent("onModeChange",{mode:"normal",typeId:null,customType:null}),console.log("Switched to normal annotation mode")}isInCustomMode(){return this.currentMode==="custom"&&this.selectedCustomType!==null}getCurrentCustomType(){return this.selectedCustomType?this.customTypes.get(this.selectedCustomType):null}handleCanvasClick(e){if(!this.isInCustomMode())return{success:!1,reason:"Not in custom mode"};const t=this.getCurrentCustomType();if(!t)return{success:!1,reason:"No custom type selected"};if(t.type!=="point")return{success:!1,reason:"Selected type is not a point type"};if(!e.imageId||typeof e.x!="number"||typeof e.y!="number")return{success:!1,reason:"Invalid click data"};try{return{success:!0,annotation:this.createCustomAnnotation({typeId:t.id,x:e.x,y:e.y,imageId:e.imageId})}}catch(o){return{success:!1,reason:o.message}}}handleRegionDrag(e){if(!this.isInCustomMode())return{success:!1,reason:"Not in custom mode"};const t=this.getCurrentCustomType();if(!t)return{success:!1,reason:"No custom type selected"};if(t.type!=="region")return{success:!1,reason:"Selected type is not a region type"};const{startX:o,startY:n,endX:s,endY:a,imageId:i}=e,r=Math.min(o,s),d=Math.min(n,a),m=Math.abs(s-o),c=Math.abs(a-n);try{return{success:!0,annotation:this.createCustomAnnotation({typeId:t.id,x:r,y:d,width:m,height:c,imageId:i})}}catch(l){return{success:!1,reason:l.message}}}getNextOrderNumber(e,t=null){const o=this.getAnnotationsByImageId(e),n=t?o.filter(a=>a.typeId===t):o;return n.length===0?1:Math.max(...n.map(a=>a.order||0))+1}reorderAnnotations(e,t=null){const o=this.getAnnotationsByImageId(e);if(t){const n=o.filter(s=>s.typeId===t);n.sort((s,a)=>(s.order||0)-(a.order||0)),n.forEach((s,a)=>{s.order=a+1,s.updatedAt=new Date().toISOString()}),console.log("Reordered ".concat(n.length," annotations of type ").concat(t," for image ").concat(e))}else o.sort((n,s)=>(n.order||0)-(s.order||0)),o.forEach((n,s)=>{n.order=s+1,n.updatedAt=new Date().toISOString()}),console.log("Reordered ".concat(o.length," annotations for image ").concat(e));this.saveToStorage(),this.triggerDatabaseAutoSave(),this.triggerEvent("onAnnotationUpdate",{imageId:e,typeId:t})}getAnnotationStats(e){const t=this.getAnnotationsByImageId(e),o={total:t.length,byType:{},orderRange:{min:0,max:0},gaps:[]};if(t.length===0)return o;t.forEach(s=>{const a=s.typeId;if(!o.byType[a]){const i=this.getCustomType(a);o.byType[a]={count:0,typeName:(i==null?void 0:i.name)||"Unknown",typeColor:(i==null?void 0:i.color)||"#000000",annotationType:(i==null?void 0:i.type)||"unknown"}}o.byType[a].count++});const n=t.map(s=>s.order||0).filter(s=>s>0).sort((s,a)=>s-a);if(n.length>0){o.orderRange.min=n[0],o.orderRange.max=n[n.length-1];for(let s=n[0];s<=n[n.length-1];s++)n.includes(s)||o.gaps.push(s)}return o}findAnnotationByOrder(e,t){return this.getAnnotationsByImageId(e).find(n=>n.order===t)||null}updateAnnotationOrder(e,t){for(const[o,n]of this.customAnnotations.entries()){const s=n.find(a=>a.id===e);if(s){const a=n.find(r=>r.id!==e&&r.order===t);if(a)return console.warn("Order ".concat(t," is already used by annotation ").concat(a.id)),!1;const i=s.order;return s.order=t,s.updatedAt=new Date().toISOString(),this.triggerEvent("onAnnotationUpdate",s),this.triggerCustomAnnotationUpdateSync(s,{imageId:o,orderChange:{from:i,to:t},timestamp:new Date().toISOString()}),this.saveToStorage(),this.triggerDatabaseAutoSave(),console.log("Updated annotation ".concat(e," order from ").concat(i," to ").concat(t)),!0}}return!1}generateAnnotationId(){return"custom_ann_".concat(Date.now(),"_").concat(Math.random().toString(36).substr(2,9))}exportData(){const e=Array.from(this.customTypes.values()),t=[];for(const[o,n]of this.customAnnotations.entries())t.push(...n);return{version:"1.0",exportTime:new Date().toISOString(),customTypes:e,customAnnotations:t}}importData(e){try{const{version:t,customTypes:o=[],customAnnotations:n=[]}=e;t!=="1.0"&&console.warn("Importing data with version ".concat(t,", expected 1.0"));for(const s of o)this.customTypes.has(s.id)||this.customTypes.set(s.id,s);for(const s of n){this.customAnnotations.has(s.imageId)||this.customAnnotations.set(s.imageId,[]);const a=this.customAnnotations.get(s.imageId);a.find(i=>i.id===s.id)||a.push(s)}return console.log("Imported ".concat(o.length," custom types and ").concat(n.length," annotations")),{success:!0}}catch(t){return console.error("Import failed:",t),{success:!1,error:t.message}}}addEventListener(e,t){this.eventHandlers[e]||(this.eventHandlers[e]=[]),this.eventHandlers[e].push(t)}removeEventListener(e,t){if(this.eventHandlers[e]){const o=this.eventHandlers[e].indexOf(t);o>-1&&this.eventHandlers[e].splice(o,1)}}triggerEvent(e,t){this.eventHandlers[e]&&this.eventHandlers[e].forEach(o=>{try{o(t)}catch(n){console.error("Error in event handler for ".concat(e,":"),n)}})}setRealTimeSyncManager(e){this.realTimeSyncManager=e,console.log("Real-time sync manager set for custom annotations")}triggerCustomAnnotationCreateSync(e,t={}){var o;if(!this.realTimeSyncManager||!this.realTimeSyncManager.isRealTimeSyncEnabled()){console.log("🔄 Custom annotation real-time sync disabled, skipping create sync");return}try{const n=(o=window.PlantAnnotationTool)==null?void 0:o.appState;if(!(n!=null&&n.currentPlant)||!(n!=null&&n.currentImage)){console.warn("🔄 缺少当前植株或图像信息，跳过自定义标注同步");return}const s={type:"CUSTOM_ANNOTATION_CREATE",annotation:e,context:{...t,plantId:n.currentPlant.id,imageId:n.currentImage.id,viewAngle:n.currentPlant.selectedViewAngle,appState:n},timestamp:new Date().toISOString()};console.log("🔄 Triggering custom annotation create sync:",s),typeof this.realTimeSyncManager.triggerCustomAnnotationSync=="function"?this.realTimeSyncManager.triggerCustomAnnotationSync(s):console.warn("🔄 Real-time sync manager does not support custom annotation sync")}catch(n){console.error("🔄 Failed to trigger custom annotation create sync:",n)}}triggerCustomAnnotationUpdateSync(e,t={}){var o;if(!this.realTimeSyncManager||!this.realTimeSyncManager.isRealTimeSyncEnabled()){console.log("🔄 Custom annotation real-time sync disabled, skipping update sync");return}try{const n=(o=window.PlantAnnotationTool)==null?void 0:o.appState;if(!(n!=null&&n.currentPlant)||!(n!=null&&n.currentImage)){console.warn("🔄 缺少当前植株或图像信息，跳过自定义标注更新同步");return}const s={type:"CUSTOM_ANNOTATION_UPDATE",annotation:e,context:{...t,plantId:n.currentPlant.id,imageId:n.currentImage.id,viewAngle:n.currentPlant.selectedViewAngle,appState:n},timestamp:new Date().toISOString()};console.log("🔄 Triggering custom annotation update sync:",s),typeof this.realTimeSyncManager.triggerCustomAnnotationSync=="function"?this.realTimeSyncManager.triggerCustomAnnotationSync(s):console.warn("🔄 Real-time sync manager does not support custom annotation sync")}catch(n){console.error("🔄 Failed to trigger custom annotation update sync:",n)}}triggerCustomAnnotationDeleteSync(e,t={}){var o;if(!this.realTimeSyncManager||!this.realTimeSyncManager.isRealTimeSyncEnabled()){console.log("🔄 Custom annotation real-time sync disabled, skipping delete sync");return}try{const n=(o=window.PlantAnnotationTool)==null?void 0:o.appState;if(!(n!=null&&n.currentPlant)||!(n!=null&&n.currentImage)){console.warn("🔄 缺少当前植株或图像信息，跳过自定义标注删除同步");return}const s={type:"CUSTOM_ANNOTATION_DELETE",annotation:e,context:{...t,plantId:n.currentPlant.id,imageId:n.currentImage.id,viewAngle:n.currentPlant.selectedViewAngle,appState:n},timestamp:new Date().toISOString()};console.log("🔄 Triggering custom annotation delete sync:",s),typeof this.realTimeSyncManager.triggerCustomAnnotationSync=="function"?this.realTimeSyncManager.triggerCustomAnnotationSync(s):console.warn("🔄 Real-time sync manager does not support custom annotation sync")}catch(n){console.error("🔄 Failed to trigger custom annotation delete sync:",n)}}triggerCustomTypeCreateSync(e,t={}){if(!this.realTimeSyncManager||!this.realTimeSyncManager.isRealTimeSyncEnabled()){console.log("🔄 Custom type real-time sync disabled, skipping create sync");return}try{const o={type:"CUSTOM_TYPE_CREATE",customType:e,context:t,timestamp:new Date().toISOString()};console.log("🔄 Triggering custom type create sync:",o),typeof this.realTimeSyncManager.triggerCustomAnnotationSync=="function"?this.realTimeSyncManager.triggerCustomAnnotationSync(o):console.warn("🔄 Real-time sync manager does not support custom annotation sync")}catch(o){console.error("🔄 Failed to trigger custom type create sync:",o)}}getStats(){const e=this.customTypes.size;let t=0,o=0;for(const[n,s]of this.customAnnotations.entries())s.length>0&&(o++,t+=s.length);return{totalTypes:e,totalAnnotations:t,annotatedImages:o,averageAnnotationsPerImage:o>0?(t/o).toFixed(2):0}}saveToStorage(){try{const e={customTypes:Array.from(this.customTypes.entries()),customAnnotations:Array.from(this.customAnnotations.entries()),version:"1.0",savedAt:new Date().toISOString()};localStorage.setItem("customAnnotationData",JSON.stringify(e)),console.log("Custom annotation data saved to localStorage")}catch(e){console.error("Failed to save custom annotation data:",e)}}loadFromStorage(){try{const e=localStorage.getItem("customAnnotationData");if(!e){console.log("No saved custom annotation data found");return}const t=JSON.parse(e);t.customTypes&&(this.customTypes.clear(),t.customTypes.forEach(([o,n])=>{this.customTypes.set(o,n)})),t.customAnnotations&&(this.customAnnotations.clear(),t.customAnnotations.forEach(([o,n])=>{this.customAnnotations.set(o,n)})),console.log("Loaded custom annotation data from localStorage (version: ".concat(t.version,")")),t.customTypes&&t.customTypes.length>0&&(console.log("Triggering type events for ".concat(t.customTypes.length," loaded types")),setTimeout(()=>{t.customTypes.forEach(([o,n])=>{this.triggerEvent("onTypeCreate",{type:n})})},100))}catch(e){console.error("Failed to load custom annotation data:",e)}}clearStorage(){try{localStorage.removeItem("customAnnotationData"),console.log("Custom annotation data cleared from localStorage")}catch(e){console.error("Failed to clear custom annotation data:",e)}}async triggerDatabaseAutoSave(){var e;try{const t=(e=window.PlantAnnotationTool)==null?void 0:e.annotationTool;t&&typeof t.autoSaveCurrentImage=="function"?(await t.autoSaveCurrentImage(),console.log("Custom annotation database auto-save triggered")):console.warn("AnnotationTool auto-save not available")}catch(t){console.error("Failed to trigger database auto-save:",t)}}getCustomAnnotationsForSave(e){return this.getAnnotationsByImageId(e).map(o=>{const n=this.getCustomType(o.typeId);return{...o,customType:n?{id:n.id,name:n.name,type:n.type,color:n.color,description:n.description}:null}})}loadCustomAnnotationsFromSave(e,t){if(!t||!Array.isArray(t))return;this.customAnnotations.has(e)||this.customAnnotations.set(e,[]);const o=this.customAnnotations.get(e);t.forEach(n=>{if(!o.find(a=>a.id===n.id)){const{customType:a,...i}=n;o.push(i)}}),console.log("Loaded ".concat(t.length," custom annotations for image ").concat(e))}syncAnnotationsFromKeypoints(e,t){if(!e||!t||t.length===0)return;this.customAnnotations.has(e)||this.customAnnotations.set(e,[]);const o=this.customAnnotations.get(e);t.forEach(n=>{const s=o.findIndex(a=>a.id===n.id);if(s===-1){const a={...n};o.push(a),console.log("[同步] 添加自定义标注到内部状态: ".concat(n.id," (类型: ").concat(n.customTypeId,")"))}else o[s]={...n},console.log("[同步] 更新自定义标注在内部状态: ".concat(n.id," (类型: ").concat(n.customTypeId,")"))}),this.saveToStorage(),console.log("[同步] 同步了 ".concat(t.length," 个自定义标注到图像 ").concat(e))}handleCustomAnnotationCreateFromSync(e){try{if(!e.annotation){console.warn("🔄 Invalid sync data for custom annotation create");return}const{annotation:t,context:o}=e;if(this.getAnnotationsByImageId(o.imageId).find(a=>a.id===t.id)){console.log("🔄 Custom annotation already exists, skipping");return}if(!this.customTypes.has(t.typeId)){console.warn("🔄 Custom type ".concat(t.typeId," not found for synced annotation"));return}this.customAnnotations.has(o.imageId)||this.customAnnotations.set(o.imageId,[]),this.customAnnotations.get(o.imageId).push(t),this.triggerEvent("onAnnotationCreate",t),this.saveToStorage(),console.log("🔄 Custom annotation created from sync:",t.id)}catch(t){console.error("🔄 Failed to handle custom annotation create from sync:",t)}}handleCustomAnnotationUpdateFromSync(e){try{if(!e.annotation){console.warn("🔄 Invalid sync data for custom annotation update");return}const{annotation:t,context:o}=e,n=this.getAnnotationsByImageId(o.imageId),s=n.findIndex(a=>a.id===t.id);if(s===-1){console.warn("🔄 Custom annotation not found for update from sync:",t.id);return}n[s]={...n[s],...t},this.triggerEvent("onAnnotationUpdate",t),this.saveToStorage(),console.log("🔄 Custom annotation updated from sync:",t.id)}catch(t){console.error("🔄 Failed to handle custom annotation update from sync:",t)}}handleCustomAnnotationDeleteFromSync(e){try{if(!e.annotation){console.warn("🔄 Invalid sync data for custom annotation delete");return}const{annotation:t,context:o}=e,n=this.getAnnotationsByImageId(o.imageId),s=n.findIndex(a=>a.id===t.id);if(s===-1){console.warn("🔄 Custom annotation not found for delete from sync:",t.id);return}n.splice(s,1),n.length===0&&this.customAnnotations.delete(o.imageId),this.triggerEvent("onAnnotationDelete",t),this.saveToStorage(),console.log("🔄 Custom annotation deleted from sync:",t.id)}catch(t){console.error("🔄 Failed to handle custom annotation delete from sync:",t)}}handleCustomTypeCreateFromSync(e){try{if(!e.customType){console.warn("🔄 Invalid sync data for custom type create");return}const{customType:t}=e;if(this.customTypes.has(t.id)){console.log("🔄 Custom type already exists, skipping");return}this.customTypes.set(t.id,t),this.triggerEvent("onTypeCreate",{type:t}),this.saveToStorage(),console.log("🔄 Custom type created from sync:",t.id)}catch(t){console.error("🔄 Failed to handle custom type create from sync:",t)}}handleSyncEvent(e){if(!e||!e.type){console.warn("🔄 Invalid sync data received");return}switch(console.log("🔄 Processing custom annotation sync event:",e.type),e.type){case"CUSTOM_ANNOTATION_CREATE":this.handleCustomAnnotationCreateFromSync(e);break;case"CUSTOM_ANNOTATION_UPDATE":this.handleCustomAnnotationUpdateFromSync(e);break;case"CUSTOM_ANNOTATION_DELETE":this.handleCustomAnnotationDeleteFromSync(e);break;case"CUSTOM_TYPE_CREATE":this.handleCustomTypeCreateFromSync(e);break;default:console.warn("🔄 Unknown custom annotation sync event type:",e.type)}}}export{h as CustomAnnotationManager};
//# sourceMappingURL=CustomAnnotationManager-CoJ30DAK.js.map
