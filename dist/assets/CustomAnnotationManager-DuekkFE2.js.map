{"version":3,"file":"CustomAnnotationManager-DuekkFE2.js","sources":["../../src/core/CustomAnnotationManager.js"],"sourcesContent":["/**\n * 自定义标注管理器\n * \n * 功能：\n * - 管理自定义标注类型（特殊关键点和关键区域）\n * - 支持点击式标注（点）和拖拽式标注（区域）\n * - 提供颜色自定义和元数据管理\n * - 支持编号系统和实时同步\n * - 与现有标注系统集成\n */\n\nexport class CustomAnnotationManager {\n  constructor() {\n    // 自定义标注类型存储\n    this.customTypes = new Map();\n    \n    // 自定义标注数据存储 (imageId -> annotations[])\n    this.customAnnotations = new Map();\n    \n    // 当前状态\n    this.isEnabled = true;\n    this.currentMode = 'normal'; // 'normal' | 'custom'\n    this.selectedCustomType = null;\n    \n    // 配置\n    this.config = {\n      maxCustomTypes: 20,\n      maxAnnotationsPerImage: 100,\n      minRegionSize: 10,\n      defaultPointRadius: 8,\n      defaultRegionStrokeWidth: 2\n    };\n    \n    // 实时同步管理器引用\n    this.realTimeSyncManager = null;\n    \n    // 事件处理器\n    this.eventHandlers = {\n      onAnnotationCreate: [],\n      onAnnotationUpdate: [],\n      onAnnotationDelete: [],\n      onModeChange: [],\n      onTypeCreate: [],\n      onTypeUpdate: [],\n      onTypeDelete: []\n    };\n    \n    // 加载已保存的数据\n    this.loadFromStorage();\n    \n    // 🔧 NEW: Ensure builtin regular type exists for migrated data\n    this.ensureBuiltinRegularType();\n    \n    console.log('CustomAnnotationManager initialized');\n  }\n\n  /**\n   * 🔧 NEW: 注册内置的“regular”类型（用于迁移后的数据渲染与选择）\n   */\n  ensureBuiltinRegularType() {\n    const builtinId = 'builtin-regular-keypoint';\n    if (!this.customTypes.has(builtinId)) {\n      const builtinType = {\n        id: builtinId,\n        name: 'Regular (Builtin)',\n        type: 'point',\n        color: '#22c55e',\n        description: 'Default keypoint type migrated from regular',\n        metadata: { builtin: true, defaultAngle: 0, isDirectional: true },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      this.customTypes.set(builtinId, builtinType);\n      // 触发UI更新（不触发远端同步/存储）\n      this.triggerEvent('onTypeCreate', { type: builtinType });\n      console.log('[CustomAnnotationManager] Registered builtin type:', builtinId);\n    }\n  }\n\n  /**\n   * 创建自定义标注类型\n   * @param {Object} typeData - 类型数据\n   * @returns {Object} 创建的类型对象\n   */\n  createCustomType(typeData) {\n    const { id, name, type, color, description = '', metadata = {} } = typeData;\n    \n    // 验证必要字段\n    if (!id || !name || !type || !color) {\n      throw new Error('Missing required fields: id, name, type, color');\n    }\n    \n    // 验证类型\n    if (!['point', 'region'].includes(type)) {\n      throw new Error('Invalid type: must be \"point\" or \"region\"');\n    }\n    \n    // 检查是否已存在\n    if (this.customTypes.has(id)) {\n      throw new Error(`Custom type with id \"${id}\" already exists`);\n    }\n    \n    // 检查数量限制\n    if (this.customTypes.size >= this.config.maxCustomTypes) {\n      throw new Error(`Maximum number of custom types (${this.config.maxCustomTypes}) reached`);\n    }\n    \n    // 创建类型对象\n    const customType = {\n      id,\n      name,\n      type,\n      color,\n      description,\n      metadata,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.customTypes.set(id, customType);\n    \n    // 触发类型创建事件\n    this.triggerEvent('onTypeCreate', { type: customType });\n    \n    // 🔄 NEW: 实时同步 - 自定义类型创建\n    this.triggerCustomTypeCreateSync(customType, {\n      timestamp: new Date().toISOString()\n    });\n    \n    // 自动保存数据\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    console.log(`Created custom type: ${id} (${name})`);\n    return customType;\n  }\n\n  /**\n   * 更新自定义标注类型\n   * @param {string} id - 类型ID\n   * @param {Object} updateData - 更新数据\n   * @returns {Object} 更新后的类型对象\n   */\n  updateCustomType(id, updateData) {\n    const existingType = this.customTypes.get(id);\n    if (!existingType) {\n      throw new Error(`Custom type with id \"${id}\" not found`);\n    }\n    \n    // 不允许更改ID和type\n    const { id: newId, type: newType, ...allowedUpdates } = updateData;\n    \n    if (newId && newId !== id) {\n      console.warn('Cannot change custom type ID');\n    }\n    \n    if (newType && newType !== existingType.type) {\n      console.warn('Cannot change custom type type');\n    }\n    \n    // 更新类型\n    const updatedType = {\n      ...existingType,\n      ...allowedUpdates,\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.customTypes.set(id, updatedType);\n    \n    // 触发类型更新事件\n    this.triggerEvent('onTypeUpdate', { type: updatedType });\n    \n    console.log(`Updated custom type: ${id}`);\n    return updatedType;\n  }\n\n  /**\n   * 删除自定义标注类型\n   * @param {string} id - 类型ID\n   * @returns {boolean} 是否成功删除\n   */\n  deleteCustomType(id) {\n    if (!this.customTypes.has(id)) {\n      return false;\n    }\n    \n    // 删除相关标注\n    this.deleteAnnotationsByTypeId(id);\n    \n    // 删除类型\n    this.customTypes.delete(id);\n    \n    // 触发类型删除事件\n    this.triggerEvent('onTypeDelete', { typeId: id });\n    \n    // 如果当前选中的是被删除的类型，切换回正常模式\n    if (this.selectedCustomType === id) {\n      this.setNormalMode();\n    }\n    \n    console.log(`Deleted custom type: ${id}`);\n    return true;\n  }\n\n  /**\n   * 获取所有自定义类型\n   * @returns {Array} 自定义类型数组\n   */\n  getAllCustomTypes() {\n    return Array.from(this.customTypes.values());\n  }\n\n  /**\n   * 获取指定类型\n   * @param {string} id - 类型ID\n   * @returns {Object|null} 类型对象\n   */\n  getCustomType(id) {\n    return this.customTypes.get(id) || null;\n  }\n\n  /**\n   * 创建自定义标注\n   * @param {Object} annotationData - 标注数据\n   * @returns {Object} 创建的标注对象\n   */\n  createCustomAnnotation(annotationData) {\n    const { typeId, x, y, width, height, imageId, metadata = {} } = annotationData;\n    \n    // 验证必要字段\n    if (!typeId || !imageId || x === undefined || y === undefined) {\n      throw new Error('Missing required fields: typeId, imageId, x, y');\n    }\n    \n    // 验证类型是否存在\n    const customType = this.customTypes.get(typeId);\n    if (!customType) {\n      throw new Error(`Custom type with id \"${typeId}\" not found`);\n    }\n    \n    // 验证区域类型的尺寸\n    if (customType.type === 'region') {\n      if (width === undefined || height === undefined) {\n        throw new Error('Width and height are required for region annotations');\n      }\n      if (width < this.config.minRegionSize || height < this.config.minRegionSize) {\n        throw new Error(`Region size must be at least ${this.config.minRegionSize}px`);\n      }\n    }\n    \n    // 获取或创建图像标注数组\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 检查数量限制\n    if (imageAnnotations.length >= this.config.maxAnnotationsPerImage) {\n      throw new Error(`Maximum number of annotations per image (${this.config.maxAnnotationsPerImage}) reached`);\n    }\n    \n    // 🔧 FIX: 生成特定类型的下一个序号（每种类型独立计数）\n    const order = this.getNextOrderNumber(imageId, typeId);\n    \n    // 创建标注对象\n    const annotation = {\n      id: this.generateAnnotationId(),\n      typeId,\n      x,\n      y,\n      ...(customType.type === 'region' && { width, height }),\n      imageId,\n      order,\n      metadata,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    imageAnnotations.push(annotation);\n    \n    // 触发事件\n    this.triggerEvent('onAnnotationCreate', annotation);\n    \n    // 🔄 NEW: 实时同步 - 自定义标注创建\n    this.triggerCustomAnnotationCreateSync(annotation, {\n      imageId: imageId,\n      typeId: typeId,\n      timestamp: new Date().toISOString()\n    });\n    \n    // 自动保存数据\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    console.log(`Created custom annotation: ${annotation.id} (type: ${typeId}, order: ${order})`);\n    return annotation;\n  }\n\n  /**\n   * 获取指定图像的标注\n   * @param {string} imageId - 图像ID\n   * @returns {Array} 标注数组\n   */\n  getAnnotationsByImageId(imageId) {\n    return this.customAnnotations.get(imageId) || [];\n  }\n\n  /**\n   * 删除自定义标注\n   * @param {string} annotationId - 标注ID\n   * @returns {boolean} 是否成功删除\n   */\n  deleteCustomAnnotation(annotationId) {\n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const index = annotations.findIndex(ann => ann.id === annotationId);\n      if (index !== -1) {\n        const deletedAnnotation = annotations.splice(index, 1)[0];\n        \n        // 如果图像没有标注了，删除图像条目\n        if (annotations.length === 0) {\n          this.customAnnotations.delete(imageId);\n        }\n        \n        // 触发事件\n        this.triggerEvent('onAnnotationDelete', deletedAnnotation);\n        \n        // 🔄 NEW: 实时同步 - 自定义标注删除\n        this.triggerCustomAnnotationDeleteSync(deletedAnnotation, {\n          imageId: imageId,\n          typeId: deletedAnnotation.typeId,\n          timestamp: new Date().toISOString()\n        });\n        \n        // 自动保存数据\n        this.saveToStorage();\n        \n        // 🔄 NEW: 集成数据库自动保存\n        this.triggerDatabaseAutoSave();\n        \n        console.log(`Deleted custom annotation: ${annotationId}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * 根据类型ID删除所有标注\n   * @param {string} typeId - 类型ID\n   */\n  deleteAnnotationsByTypeId(typeId) {\n    let deletedCount = 0;\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const originalLength = annotations.length;\n      const filtered = annotations.filter(ann => ann.typeId !== typeId);\n      \n      if (filtered.length !== originalLength) {\n        deletedCount += originalLength - filtered.length;\n        \n        if (filtered.length === 0) {\n          this.customAnnotations.delete(imageId);\n        } else {\n          this.customAnnotations.set(imageId, filtered);\n        }\n      }\n    }\n    \n    if (deletedCount > 0) {\n      console.log(`Deleted ${deletedCount} annotations of type ${typeId}`);\n    }\n  }\n\n  /**\n   * 设置自定义标注模式\n   * @param {string} typeId - 类型ID\n   */\n  setCustomAnnotationMode(typeId) {\n    const customType = this.customTypes.get(typeId);\n    if (!customType) {\n      throw new Error(`Custom type with id \"${typeId}\" not found`);\n    }\n    \n    this.currentMode = 'custom';\n    this.selectedCustomType = typeId;\n    \n    // 触发模式变化事件\n    this.triggerEvent('onModeChange', {\n      mode: 'custom',\n      typeId,\n      customType\n    });\n    \n    console.log(`Switched to custom annotation mode: ${typeId}`);\n  }\n\n  /**\n   * 设置正常模式\n   */\n  setNormalMode() {\n    this.currentMode = 'normal';\n    this.selectedCustomType = null;\n    \n    // 触发模式变化事件\n    this.triggerEvent('onModeChange', {\n      mode: 'normal',\n      typeId: null,\n      customType: null\n    });\n    \n    console.log('Switched to normal annotation mode');\n  }\n\n  /**\n   * 检查是否处于自定义模式\n   * @returns {boolean} 是否处于自定义模式\n   */\n  isInCustomMode() {\n    return this.currentMode === 'custom' && this.selectedCustomType !== null;\n  }\n\n  /**\n   * 获取当前选中的自定义类型\n   * @returns {Object|null} 当前选中的类型对象\n   */\n  getCurrentCustomType() {\n    if (!this.selectedCustomType) {\n      return null;\n    }\n    return this.customTypes.get(this.selectedCustomType);\n  }\n\n  /**\n   * 处理画布点击（点类型标注）\n   * @param {Object} clickData - 点击数据（包含图像坐标）\n   * @returns {Object} 处理结果\n   */\n  handleCanvasClick(clickData) {\n    if (!this.isInCustomMode()) {\n      return { success: false, reason: 'Not in custom mode' };\n    }\n    \n    const customType = this.getCurrentCustomType();\n    if (!customType) {\n      return { success: false, reason: 'No custom type selected' };\n    }\n    \n    if (customType.type !== 'point') {\n      return { success: false, reason: 'Selected type is not a point type' };\n    }\n    \n    // 验证点击数据\n    if (!clickData.imageId || typeof clickData.x !== 'number' || typeof clickData.y !== 'number') {\n      return { success: false, reason: 'Invalid click data' };\n    }\n    \n    try {\n      const annotation = this.createCustomAnnotation({\n        typeId: customType.id,\n        x: clickData.x,\n        y: clickData.y,\n        imageId: clickData.imageId\n      });\n      \n      return { success: true, annotation };\n    } catch (error) {\n      return { success: false, reason: error.message };\n    }\n  }\n\n  /**\n   * 处理区域拖拽（区域类型标注）\n   * @param {Object} dragData - 拖拽数据\n   * @returns {Object} 处理结果\n   */\n  handleRegionDrag(dragData) {\n    if (!this.isInCustomMode()) {\n      return { success: false, reason: 'Not in custom mode' };\n    }\n    \n    const customType = this.getCurrentCustomType();\n    if (!customType) {\n      return { success: false, reason: 'No custom type selected' };\n    }\n    \n    if (customType.type !== 'region') {\n      return { success: false, reason: 'Selected type is not a region type' };\n    }\n    \n    const { startX, startY, endX, endY, imageId } = dragData;\n    \n    // 计算区域位置和尺寸\n    const x = Math.min(startX, endX);\n    const y = Math.min(startY, endY);\n    const width = Math.abs(endX - startX);\n    const height = Math.abs(endY - startY);\n    \n    try {\n      const annotation = this.createCustomAnnotation({\n        typeId: customType.id,\n        x,\n        y,\n        width,\n        height,\n        imageId\n      });\n      \n      return { success: true, annotation };\n    } catch (error) {\n      return { success: false, reason: error.message };\n    }\n  }\n\n  /**\n   * 获取下一个序号\n   * @param {string} imageId - 图像ID\n   * @param {string} typeId - 类型ID（可选，用于按类型编号）\n   * @returns {number} 下一个序号\n   */\n  getNextOrderNumber(imageId, typeId = null) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    \n    // 如果指定了类型ID，只考虑该类型的标注\n    const relevantAnnotations = typeId \n      ? annotations.filter(ann => ann.typeId === typeId)\n      : annotations;\n    \n    if (relevantAnnotations.length === 0) {\n      return 1;\n    }\n    \n    const maxOrder = Math.max(...relevantAnnotations.map(ann => ann.order || 0));\n    return maxOrder + 1;\n  }\n\n  /**\n   * 重新整理指定图像的标注序号，确保序号连续\n   * @param {string} imageId - 图像ID\n   * @param {string} typeId - 类型ID（可选，只重新整理指定类型）\n   */\n  reorderAnnotations(imageId, typeId = null) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    \n    if (typeId) {\n      // 只重新整理指定类型的标注\n      const typeAnnotations = annotations.filter(ann => ann.typeId === typeId);\n      typeAnnotations.sort((a, b) => (a.order || 0) - (b.order || 0));\n      \n      typeAnnotations.forEach((annotation, index) => {\n        annotation.order = index + 1;\n        annotation.updatedAt = new Date().toISOString();\n      });\n      \n      console.log(`Reordered ${typeAnnotations.length} annotations of type ${typeId} for image ${imageId}`);\n    } else {\n      // 重新整理所有标注\n      annotations.sort((a, b) => (a.order || 0) - (b.order || 0));\n      \n      annotations.forEach((annotation, index) => {\n        annotation.order = index + 1;\n        annotation.updatedAt = new Date().toISOString();\n      });\n      \n      console.log(`Reordered ${annotations.length} annotations for image ${imageId}`);\n    }\n    \n    // 保存更改\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    // 触发更新事件\n    this.triggerEvent('onAnnotationUpdate', { imageId, typeId });\n  }\n\n  /**\n   * 获取标注统计信息（按类型）\n   * @param {string} imageId - 图像ID\n   * @returns {Object} 统计信息\n   */\n  getAnnotationStats(imageId) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    const stats = {\n      total: annotations.length,\n      byType: {},\n      orderRange: { min: 0, max: 0 },\n      gaps: []\n    };\n    \n    if (annotations.length === 0) {\n      return stats;\n    }\n    \n    // 按类型统计\n    annotations.forEach(annotation => {\n      const typeId = annotation.typeId;\n      if (!stats.byType[typeId]) {\n        const customType = this.getCustomType(typeId);\n        stats.byType[typeId] = {\n          count: 0,\n          typeName: customType?.name || 'Unknown',\n          typeColor: customType?.color || '#000000',\n          annotationType: customType?.type || 'unknown'\n        };\n      }\n      stats.byType[typeId].count++;\n    });\n    \n    // 序号范围和间隙检测\n    const orders = annotations.map(ann => ann.order || 0).filter(order => order > 0).sort((a, b) => a - b);\n    if (orders.length > 0) {\n      stats.orderRange.min = orders[0];\n      stats.orderRange.max = orders[orders.length - 1];\n      \n      // 检测序号间隙\n      for (let i = orders[0]; i <= orders[orders.length - 1]; i++) {\n        if (!orders.includes(i)) {\n          stats.gaps.push(i);\n        }\n      }\n    }\n    \n    return stats;\n  }\n\n  /**\n   * 查找具有指定序号的标注\n   * @param {string} imageId - 图像ID\n   * @param {number} order - 序号\n   * @returns {Object|null} 标注对象\n   */\n  findAnnotationByOrder(imageId, order) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    return annotations.find(ann => ann.order === order) || null;\n  }\n\n  /**\n   * 更新标注序号\n   * @param {string} annotationId - 标注ID\n   * @param {number} newOrder - 新序号\n   * @returns {boolean} 是否成功更新\n   */\n  updateAnnotationOrder(annotationId, newOrder) {\n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const annotation = annotations.find(ann => ann.id === annotationId);\n      if (annotation) {\n        // 检查新序号是否与其他标注冲突\n        const conflictAnnotation = annotations.find(ann => ann.id !== annotationId && ann.order === newOrder);\n        if (conflictAnnotation) {\n          console.warn(`Order ${newOrder} is already used by annotation ${conflictAnnotation.id}`);\n          return false;\n        }\n        \n        const oldOrder = annotation.order;\n        annotation.order = newOrder;\n        annotation.updatedAt = new Date().toISOString();\n        \n        // 触发更新事件\n        this.triggerEvent('onAnnotationUpdate', annotation);\n        \n        // 🔄 NEW: 实时同步 - 标注序号更新\n        this.triggerCustomAnnotationUpdateSync(annotation, {\n          imageId: imageId,\n          orderChange: { from: oldOrder, to: newOrder },\n          timestamp: new Date().toISOString()\n        });\n        \n        // 保存更改\n        this.saveToStorage();\n        \n        // 🔄 NEW: 集成数据库自动保存\n        this.triggerDatabaseAutoSave();\n        \n        console.log(`Updated annotation ${annotationId} order from ${oldOrder} to ${newOrder}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * 生成标注ID\n   * @returns {string} 标注ID\n   */\n  generateAnnotationId() {\n    return `custom_ann_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 导出数据\n   * @returns {Object} 导出的数据\n   */\n  exportData() {\n    const customTypes = Array.from(this.customTypes.values());\n    const customAnnotations = [];\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      customAnnotations.push(...annotations);\n    }\n    \n    return {\n      version: '1.0',\n      exportTime: new Date().toISOString(),\n      customTypes,\n      customAnnotations\n    };\n  }\n\n  /**\n   * 导入数据\n   * @param {Object} importData - 导入的数据\n   * @returns {Object} 导入结果\n   */\n  importData(importData) {\n    try {\n      const { version, customTypes = [], customAnnotations = [] } = importData;\n      \n      if (version !== '1.0') {\n        console.warn(`Importing data with version ${version}, expected 1.0`);\n      }\n      \n      // 导入自定义类型\n      for (const typeData of customTypes) {\n        if (!this.customTypes.has(typeData.id)) {\n          this.customTypes.set(typeData.id, typeData);\n        }\n      }\n      \n      // 导入标注\n      for (const annotation of customAnnotations) {\n        if (!this.customAnnotations.has(annotation.imageId)) {\n          this.customAnnotations.set(annotation.imageId, []);\n        }\n        \n        const imageAnnotations = this.customAnnotations.get(annotation.imageId);\n        \n        // 避免重复导入\n        if (!imageAnnotations.find(ann => ann.id === annotation.id)) {\n          imageAnnotations.push(annotation);\n        }\n      }\n      \n      console.log(`Imported ${customTypes.length} custom types and ${customAnnotations.length} annotations`);\n      return { success: true };\n    } catch (error) {\n      console.error('Import failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * 添加事件监听器\n   * @param {string} eventName - 事件名称\n   * @param {Function} handler - 事件处理函数\n   */\n  addEventListener(eventName, handler) {\n    if (!this.eventHandlers[eventName]) {\n      this.eventHandlers[eventName] = [];\n    }\n    this.eventHandlers[eventName].push(handler);\n  }\n\n  /**\n   * 移除事件监听器\n   * @param {string} eventName - 事件名称\n   * @param {Function} handler - 事件处理函数\n   */\n  removeEventListener(eventName, handler) {\n    if (this.eventHandlers[eventName]) {\n      const index = this.eventHandlers[eventName].indexOf(handler);\n      if (index > -1) {\n        this.eventHandlers[eventName].splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * 触发事件\n   * @param {string} eventName - 事件名称\n   * @param {any} data - 事件数据\n   */\n  triggerEvent(eventName, data) {\n    if (this.eventHandlers[eventName]) {\n      this.eventHandlers[eventName].forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventName}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * 设置实时同步管理器\n   * @param {Object} realTimeSyncManager - 实时同步管理器\n   */\n  setRealTimeSyncManager(realTimeSyncManager) {\n    this.realTimeSyncManager = realTimeSyncManager;\n    console.log('Real-time sync manager set for custom annotations');\n  }\n\n  /**\n   * 触发自定义标注创建的实时同步\n   * @param {Object} annotation - 标注数据\n   * @param {Object} context - 上下文信息 (imageId, plantId等)\n   */\n  triggerCustomAnnotationCreateSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping create sync');\n      return;\n    }\n\n    try {\n      // 获取当前应用状态\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_CREATE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation create sync:', syncData);\n      \n      // Call the real-time sync manager's custom annotation sync method\n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation create sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义标注更新的实时同步\n   * @param {Object} annotation - 更新后的标注数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomAnnotationUpdateSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping update sync');\n      return;\n    }\n\n    try {\n      // 🔧 FIX: 获取当前应用状态 - 与create方法保持一致\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注更新同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_UPDATE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation update sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation update sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义标注删除的实时同步\n   * @param {Object} annotation - 被删除的标注数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomAnnotationDeleteSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping delete sync');\n      return;\n    }\n\n    try {\n      // 🔧 FIX: 获取当前应用状态 - 与create方法保持一致\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注删除同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_DELETE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation delete sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation delete sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义类型创建的实时同步\n   * @param {Object} customType - 自定义类型数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomTypeCreateSync(customType, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom type real-time sync disabled, skipping create sync');\n      return;\n    }\n\n    try {\n      const syncData = {\n        type: 'CUSTOM_TYPE_CREATE',\n        customType: customType,\n        context: context,\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom type create sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom type create sync:', error);\n    }\n  }\n\n  /**\n   * 获取统计信息\n   * @returns {Object} 统计信息\n   */\n  getStats() {\n    const totalTypes = this.customTypes.size;\n    let totalAnnotations = 0;\n    let annotatedImages = 0;\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      if (annotations.length > 0) {\n        annotatedImages++;\n        totalAnnotations += annotations.length;\n      }\n    }\n    \n    return {\n      totalTypes,\n      totalAnnotations,\n      annotatedImages,\n      averageAnnotationsPerImage: annotatedImages > 0 ? (totalAnnotations / annotatedImages).toFixed(2) : 0\n    };\n  }\n\n  /**\n   * 保存数据到localStorage\n   */\n  saveToStorage() {\n    try {\n      const data = {\n        customTypes: Array.from(this.customTypes.entries()),\n        customAnnotations: Array.from(this.customAnnotations.entries()),\n        version: '1.0',\n        savedAt: new Date().toISOString()\n      };\n      \n      localStorage.setItem('customAnnotationData', JSON.stringify(data));\n      console.log('Custom annotation data saved to localStorage');\n    } catch (error) {\n      console.error('Failed to save custom annotation data:', error);\n    }\n  }\n\n  /**\n   * 从localStorage加载数据\n   */\n  loadFromStorage() {\n    try {\n      const savedData = localStorage.getItem('customAnnotationData');\n      if (!savedData) {\n        console.log('No saved custom annotation data found');\n        return;\n      }\n\n      const data = JSON.parse(savedData);\n      \n      // 恢复自定义类型\n      if (data.customTypes) {\n        this.customTypes.clear();\n        data.customTypes.forEach(([id, type]) => {\n          this.customTypes.set(id, type);\n        });\n      }\n      \n      // 恢复自定义标注\n      if (data.customAnnotations) {\n        this.customAnnotations.clear();\n        data.customAnnotations.forEach(([imageId, annotations]) => {\n          this.customAnnotations.set(imageId, annotations);\n        });\n      }\n      \n      console.log(`Loaded custom annotation data from localStorage (version: ${data.version})`);\n      \n      // 触发事件通知UI更新 - 为每个加载的类型触发事件\n      if (data.customTypes && data.customTypes.length > 0) {\n        console.log(`Triggering type events for ${data.customTypes.length} loaded types`);\n        // 延迟触发事件，确保所有UI组件都已初始化\n        setTimeout(() => {\n          data.customTypes.forEach(([id, type]) => {\n            this.triggerEvent('onTypeCreate', { type });\n          });\n        }, 100);\n      }\n      \n    } catch (error) {\n      console.error('Failed to load custom annotation data:', error);\n    }\n  }\n\n  /**\n   * 清除localStorage中的数据\n   */\n  clearStorage() {\n    try {\n      localStorage.removeItem('customAnnotationData');\n      console.log('Custom annotation data cleared from localStorage');\n    } catch (error) {\n      console.error('Failed to clear custom annotation data:', error);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 触发数据库自动保存\n   */\n  async triggerDatabaseAutoSave() {\n    try {\n      // 通过全局对象访问AnnotationTool的自动保存功能\n      const annotationTool = window.PlantAnnotationTool?.annotationTool;\n      if (annotationTool && typeof annotationTool.autoSaveCurrentImage === 'function') {\n        await annotationTool.autoSaveCurrentImage();\n        console.log('Custom annotation database auto-save triggered');\n      } else {\n        console.warn('AnnotationTool auto-save not available');\n      }\n    } catch (error) {\n      console.error('Failed to trigger database auto-save:', error);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 获取自定义标注数据用于数据库保存\n   */\n  getCustomAnnotationsForSave(imageId) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    return annotations.map(annotation => {\n      const customType = this.getCustomType(annotation.typeId);\n      return {\n        ...annotation,\n        customType: customType ? {\n          id: customType.id,\n          name: customType.name,\n          type: customType.type,\n          color: customType.color,\n          description: customType.description\n        } : null\n      };\n    });\n  }\n  \n  /**\n   * 🔄 NEW: 从数据库保存数据中恢复自定义标注\n   */\n  loadCustomAnnotationsFromSave(imageId, savedCustomAnnotations) {\n    if (!savedCustomAnnotations || !Array.isArray(savedCustomAnnotations)) {\n      return;\n    }\n    \n    // 确保图像标注数组存在\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 加载自定义标注\n    savedCustomAnnotations.forEach(savedAnnotation => {\n      // 检查是否已存在\n      const exists = imageAnnotations.find(ann => ann.id === savedAnnotation.id);\n      if (!exists) {\n        // 移除customType字段（这是为了保存而添加的），保持标注数据的纯净\n        const { customType, ...annotation } = savedAnnotation;\n        imageAnnotations.push(annotation);\n      }\n    });\n    \n    console.log(`Loaded ${savedCustomAnnotations.length} custom annotations for image ${imageId}`);\n  }\n  \n  /**\n   * 🔧 FIX: 从主键点数组同步自定义标注到内部状态\n   * @param {string} imageId - 图像ID\n   * @param {Array} customAnnotations - 自定义标注数组\n   */\n  syncAnnotationsFromKeypoints(imageId, customAnnotations) {\n    if (!imageId || !customAnnotations || customAnnotations.length === 0) {\n      return;\n    }\n    \n    // 确保图像标注数组存在\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 为每个自定义标注添加到内部状态\n    customAnnotations.forEach(annotation => {\n      // 检查是否已存在\n      const existingIndex = imageAnnotations.findIndex(existing => existing.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        // 创建标注副本并添加到内部状态\n        const annotationCopy = { ...annotation };\n        imageAnnotations.push(annotationCopy);\n        console.log(`[同步] 添加自定义标注到内部状态: ${annotation.id} (类型: ${annotation.customTypeId})`);\n      } else {\n        // 更新现有标注\n        imageAnnotations[existingIndex] = { ...annotation };\n        console.log(`[同步] 更新自定义标注在内部状态: ${annotation.id} (类型: ${annotation.customTypeId})`);\n      }\n    });\n    \n    // 保存到localStorage\n    this.saveToStorage();\n    \n    console.log(`[同步] 同步了 ${customAnnotations.length} 个自定义标注到图像 ${imageId}`);\n  }\n  \n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注创建事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationCreateFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation create');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 检查是否已存在该标注\n      const existingAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const exists = existingAnnotations.find(ann => ann.id === annotation.id);\n      \n      if (exists) {\n        console.log('🔄 Custom annotation already exists, skipping');\n        return;\n      }\n\n      // 确保自定义类型存在\n      if (!this.customTypes.has(annotation.typeId)) {\n        console.warn(`🔄 Custom type ${annotation.typeId} not found for synced annotation`);\n        return;\n      }\n\n      // 确保图像标注数组存在\n      if (!this.customAnnotations.has(context.imageId)) {\n        this.customAnnotations.set(context.imageId, []);\n      }\n\n      // 添加标注（不触发同步，避免循环）\n      this.customAnnotations.get(context.imageId).push(annotation);\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationCreate', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation created from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation create from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注更新事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationUpdateFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation update');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 查找并更新标注\n      const imageAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const existingIndex = imageAnnotations.findIndex(ann => ann.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        console.warn('🔄 Custom annotation not found for update from sync:', annotation.id);\n        return;\n      }\n\n      // 更新标注（不触发同步，避免循环）\n      imageAnnotations[existingIndex] = { ...imageAnnotations[existingIndex], ...annotation };\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationUpdate', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation updated from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation update from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注删除事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationDeleteFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation delete');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 查找并删除标注\n      const imageAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const existingIndex = imageAnnotations.findIndex(ann => ann.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        console.warn('🔄 Custom annotation not found for delete from sync:', annotation.id);\n        return;\n      }\n\n      // 删除标注（不触发同步，避免循环）\n      imageAnnotations.splice(existingIndex, 1);\n      \n      // 如果图像没有标注了，删除图像条目\n      if (imageAnnotations.length === 0) {\n        this.customAnnotations.delete(context.imageId);\n      }\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationDelete', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation deleted from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation delete from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义类型创建事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomTypeCreateFromSync(syncData) {\n    try {\n      if (!syncData.customType) {\n        console.warn('🔄 Invalid sync data for custom type create');\n        return;\n      }\n\n      const { customType } = syncData;\n      \n      // 检查是否已存在该类型\n      if (this.customTypes.has(customType.id)) {\n        console.log('🔄 Custom type already exists, skipping');\n        return;\n      }\n\n      // 添加类型（不触发同步，避免循环）\n      this.customTypes.set(customType.id, customType);\n      \n      // 触发UI更新事件\n      this.triggerEvent('onTypeCreate', { type: customType });\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom type created from sync:', customType.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom type create from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 处理来自实时同步的所有自定义标注相关事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleSyncEvent(syncData) {\n    if (!syncData || !syncData.type) {\n      console.warn('🔄 Invalid sync data received');\n      return;\n    }\n\n    console.log('🔄 Processing custom annotation sync event:', syncData.type);\n\n    switch (syncData.type) {\n      case 'CUSTOM_ANNOTATION_CREATE':\n        this.handleCustomAnnotationCreateFromSync(syncData);\n        break;\n      case 'CUSTOM_ANNOTATION_UPDATE':\n        this.handleCustomAnnotationUpdateFromSync(syncData);\n        break;\n      case 'CUSTOM_ANNOTATION_DELETE':\n        this.handleCustomAnnotationDeleteFromSync(syncData);\n        break;\n      case 'CUSTOM_TYPE_CREATE':\n        this.handleCustomTypeCreateFromSync(syncData);\n        break;\n      default:\n        console.warn('🔄 Unknown custom annotation sync event type:', syncData.type);\n    }\n  }\n}"],"names":["CustomAnnotationManager","builtinId","builtinType","typeData","id","name","type","color","description","metadata","customType","updateData","existingType","newId","newType","allowedUpdates","updatedType","annotationData","typeId","x","y","width","height","imageId","imageAnnotations","order","annotation","annotationId","annotations","index","ann","deletedAnnotation","deletedCount","originalLength","filtered","clickData","error","dragData","startX","startY","endX","endY","relevantAnnotations","typeAnnotations","a","b","stats","orders","i","newOrder","conflictAnnotation","oldOrder","customTypes","customAnnotations","importData","version","eventName","handler","data","realTimeSyncManager","context","_a","appState","syncData","totalTypes","totalAnnotations","annotatedImages","savedData","annotationTool","savedCustomAnnotations","savedAnnotation","existingIndex","existing","annotationCopy"],"mappings":"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"}