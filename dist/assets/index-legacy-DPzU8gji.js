System.register([],function(t,e){"use strict";return{execute:function(){var t=document.createElement("style");t.textContent=':root{--primary-color: #2563eb;--primary-hover: #1d4ed8;--primary-active: #1e40af;--success-color: #16a34a;--success-hover: #15803d;--warning-color: #ea580c;--danger-color: #dc2626;--danger-hover: #b91c1c;--text-primary: #111827;--text-secondary: #6b7280;--text-tertiary: #9ca3af;--bg-primary: #ffffff;--bg-secondary: #f9fafb;--bg-tertiary: #f3f4f6;--bg-overlay: rgba(0, 0, 0, .5);--border-color: #e5e7eb;--border-hover: #d1d5db;--border-focus: var(--primary-color);--shadow-sm: 0 1px 2px 0 rgb(0 0 0 / .05);--shadow-md: 0 4px 6px -1px rgb(0 0 0 / .1), 0 2px 4px -2px rgb(0 0 0 / .1);--shadow-lg: 0 10px 15px -3px rgb(0 0 0 / .1), 0 4px 6px -4px rgb(0 0 0 / .1);--spacing-xs: .25rem;--spacing-sm: .7rem;--spacing-md: 1rem;--spacing-lg: 1.5rem;--spacing-xl: 2rem;--spacing-2xl: 3rem;--font-size-xs: .75rem;--font-size-sm: .875rem;--font-size-base: 1rem;--font-size-lg: 1.125rem;--font-size-xl: 1.25rem;--font-size-2xl: 1.5rem;--font-size-3xl: 1.875rem;--transition-fast: .15s ease;--transition-normal: .25s ease;--transition-slow: .5s ease;--sidebar-width: 360px;--header-height: 60px;--panel-padding: var(--spacing-lg)}*{margin:0;padding:0;box-sizing:border-box}body{font-family:Inter,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,sans-serif;font-size:var(--font-size-base);line-height:1.5;color:var(--text-primary);background-color:var(--bg-secondary);overflow:hidden}.loading-screen{position:fixed;top:0;left:0;width:100%;height:100%;background-color:var(--bg-primary);display:flex;flex-direction:column;align-items:center;justify-content:center;z-index:9999}.loading-spinner{width:40px;height:40px;border:4px solid var(--bg-tertiary);border-top:4px solid var(--primary-color);border-radius:50%;animation:spin 1s linear infinite;margin-bottom:var(--spacing-lg)}.main-app{display:flex;flex-direction:column;height:100vh;width:100vw;background-color:var(--bg-secondary)}.app-header{display:flex;justify-content:space-between;align-items:center;padding:0 var(--spacing-xl);height:var(--header-height);background-color:var(--bg-primary);border-bottom:1px solid var(--border-color);box-shadow:var(--shadow-sm);flex-shrink:0}.app-title{font-size:var(--font-size-xl);font-weight:600;color:var(--text-primary)}.header-controls{display:flex;align-items:center;gap:var(--spacing-lg)}.progress-info{font-size:var(--font-size-sm);color:var(--text-secondary)}.app-main{display:grid;grid-template-columns:var(--sidebar-width) 300px 1fr;flex:1;min-height:0;overflow:hidden}.plant-list-panel{width:var(--sidebar-width);background-color:var(--bg-primary);border-right:1px solid var(--border-color);display:flex;flex-direction:column;flex-shrink:0;max-width:var(--sidebar-width);min-width:var(--sidebar-width);overflow:hidden}.panel-header{padding:var(--spacing-lg);border-bottom:1px solid var(--border-color);flex-shrink:0}.panel-header h2{font-size:var(--font-size-lg);font-weight:600;margin-bottom:var(--spacing-md)}.search-controls{display:flex!important;gap:10px!important;width:100%!important}#plant-search,.search-controls input{flex:1 1 auto!important;padding:var(--spacing-sm);border:1px solid var(--border-color);border-radius:.375rem;font-size:var(--font-size-sm);transition:border-color var(--transition-fast)}#status-filter,.search-controls select{min-width:140px!important;max-width:180px!important;flex:0 0 auto!important;padding:var(--spacing-sm);border:1px solid var(--border-color);border-radius:.375rem;font-size:var(--font-size-sm);transition:border-color var(--transition-fast)}.search-controls input:focus,.search-controls select:focus{outline:none;border-color:var(--border-focus);box-shadow:0 0 0 1px var(--border-focus)}.progress-stats-sidebar{padding:var(--spacing-md) var(--spacing-lg);background:linear-gradient(135deg,#f8fafc,#f1f5f9);border-bottom:1px solid var(--border-color);flex-shrink:0}.progress-container{display:flex;flex-direction:column;gap:var(--spacing-sm)}.progress-info-bar{display:flex;justify-content:space-between;align-items:center;margin-bottom:var(--spacing-xs)}.progress-text{display:flex;align-items:center;gap:var(--spacing-xs);font-size:var(--font-size-sm);color:var(--text-secondary)}.progress-percentage{margin-left:var(--spacing-xs);font-size:var(--font-size-lg);font-weight:600;color:var(--primary-color)}.stats-label{font-weight:500;color:var(--text-primary)}.stats-number{font-weight:600;color:var(--primary-color)}.stats-separator{color:var(--text-tertiary)}.stats-unit{color:var(--text-secondary)}.progress-bar-container{margin:var(--spacing-xs) 0}.progress-bar{width:100%;height:6px;background-color:var(--bg-tertiary);border-radius:3px;overflow:hidden}.progress-bar-fill{height:100%;background:linear-gradient(90deg,var(--primary-color) 0%,var(--primary-hover) 100%);border-radius:3px;transition:width var(--transition-normal)}.progress-details{display:flex;justify-content:center;align-items:center;gap:var(--spacing-sm);font-size:var(--font-size-xs);color:var(--text-secondary);margin-top:var(--spacing-xs)}.stats-detail{white-space:nowrap}.plant-list-container{flex:1;overflow-y:auto;overflow-x:hidden;padding:var(--spacing-sm);min-height:0;height:100%}.plant-item{padding:var(--spacing-md);margin-bottom:var(--spacing-sm);background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.5rem;cursor:pointer;transition:all var(--transition-fast)}.plant-item:hover{border-color:var(--border-hover);box-shadow:var(--shadow-sm)}.plant-item.selected{border-color:var(--primary-color);box-shadow:0 0 0 1px var(--primary-color);background-color:rgba(37,99,235,.05)}.plant-item-content{display:flex;flex-direction:column;gap:var(--spacing-sm)}.plant-header{display:flex;align-items:center;gap:var(--spacing-sm)}.plant-status{font-size:var(--font-size-lg);line-height:1}.plant-id{font-weight:600;color:var(--text-primary);font-size:var(--font-size-sm)}.plant-info{display:flex;justify-content:space-between;align-items:center}.image-count{font-size:var(--font-size-xs);color:var(--text-secondary)}.status-text{font-size:var(--font-size-xs);color:var(--text-secondary);font-weight:500}.plant-view-info{font-size:var(--font-size-xs);color:var(--text-tertiary)}.view-angles{margin-bottom:var(--spacing-xs)}.selected-view{color:var(--primary-color);font-weight:500}.thumbnail-panel{width:300px;background-color:var(--bg-primary);border-right:1px solid var(--border-color);display:flex;flex-direction:column;overflow:hidden}.section-header{display:flex;justify-content:space-between;align-items:center;padding:var(--spacing-lg);border-bottom:1px solid var(--border-color);flex-shrink:0}.section-header h3{font-size:var(--font-size-lg);font-weight:600;color:var(--text-primary);flex:1}.view-angle-section{padding:var(--spacing-md) var(--spacing-lg);background-color:var(--bg-secondary);border-bottom:1px solid var(--border-color);flex-shrink:0}.view-angle-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:var(--spacing-md)}.view-angle-header h4{font-size:var(--font-size-base);font-weight:600;color:var(--text-primary)}.view-angle-info{font-size:var(--font-size-sm);color:var(--text-secondary)}.view-angle-buttons{display:flex;flex-direction:column;gap:var(--spacing-xs)}.btn-view-angle{padding:var(--spacing-xs) var(--spacing-sm);font-size:var(--font-size-xs);background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.375rem;cursor:pointer;transition:all var(--transition-fast);text-align:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.btn-view-angle:hover:not(:disabled){border-color:var(--primary-color);background-color:rgba(37,99,235,.05)}.btn-view-angle.selected{background-color:var(--primary-color);color:#fff;border-color:var(--primary-color)}.btn-view-angle:disabled{opacity:.5;cursor:not-allowed;background-color:var(--bg-tertiary)}.thumbnail-container{flex:1;padding:var(--spacing-md);overflow-y:auto;overflow-x:hidden;min-height:0;height:100%}.image-thumbnail{width:100%;margin-bottom:var(--spacing-md);border:2px solid var(--border-color);border-radius:.5rem;background-color:var(--bg-primary);cursor:pointer;transition:all var(--transition-fast);overflow:hidden}.image-thumbnail:hover{border-color:var(--primary-color);box-shadow:var(--shadow-sm)}.image-thumbnail.selected{border-color:var(--primary-color);box-shadow:0 0 0 4px rgba(79,135,254,.4)}.thumbnail-image{position:relative;width:100%;height:120px;background-color:var(--bg-tertiary);display:flex;align-items:center;justify-content:center;overflow:hidden}.thumbnail-image img{width:100%;height:100%;display:none}.thumbnail-loading{position:absolute;font-size:var(--font-size-xs);color:var(--text-secondary);background-color:var(--bg-primary);padding:var(--spacing-xs);border-radius:.25rem;text-align:center}.thumbnail-info{padding:var(--spacing-sm);text-align:center;background-color:var(--bg-primary)}.image-thumbnail.has-annotations{border-color:#10b981;background-color:rgba(16,185,129,.05)}.image-thumbnail.has-annotations:hover{border-color:#059669;box-shadow:0 0 0 2px rgba(16,185,129,.2)}.annotation-badge{position:absolute;top:4px;right:4px;background-color:#10b981;color:#fff;font-size:10px;font-weight:600;padding:2px 6px;border-radius:10px;min-width:16px;text-align:center;box-shadow:0 1px 3px rgba(0,0,0,.3)}.annotation-status{font-size:var(--font-size-xs);color:#10b981;font-weight:500;margin-top:2px}.image-time{font-size:var(--font-size-xs);color:var(--text-secondary);line-height:1.2;word-break:break-all}.no-images{text-align:center;color:var(--text-secondary);padding:var(--spacing-xl);font-style:italic;font-size:var(--font-size-sm)}.annotation-panel{display:flex;flex-direction:column;min-height:0;background-color:var(--bg-primary)}.annotation-workspace{flex:1;display:grid;grid-template-columns:1fr 300px;overflow:hidden;min-height:0;width:100%;max-width:100%}.canvas-container{position:relative;background-color:var(--bg-tertiary);overflow:hidden;display:flex;align-items:center;justify-content:center;min-width:0;width:100%;min-height:300px}.annotation-canvas{border:1px solid var(--border-color);background-color:var(--bg-primary);cursor:crosshair;box-shadow:var(--shadow-md);max-width:100%;max-height:100%}.canvas-overlay{position:absolute;top:0;left:0;right:0;bottom:0;pointer-events:none;z-index:10}.zoom-info{position:absolute;top:var(--spacing-md);right:var(--spacing-md);background-color:rgba(0,0,0,.7);color:#fff;padding:var(--spacing-xs) var(--spacing-sm);border-radius:.25rem;font-size:var(--font-size-sm);font-weight:500;display:flex;align-items:center;gap:var(--spacing-xs);z-index:12}.zoom-indicator{width:8px;height:8px;border-radius:50%;background-color:var(--success-color)}.zoom-indicator.small{background-color:var(--warning-color)}.zoom-indicator.tiny{background-color:var(--danger-color)}.annotation-controls{position:absolute;top:calc(var(--spacing-md) + 40px);right:var(--spacing-md);display:flex;flex-direction:column;gap:var(--spacing-xs);z-index:12}.instruction-panel{padding:var(--spacing-sm);background-color:var(--bg-secondary);border-left:1px solid var(--border-color);overflow-y:auto;width:300px;max-width:300px;min-width:280px;height:100%;display:flex;flex-direction:column;gap:var(--spacing-sm)}.instruction-panel h4{font-size:var(--font-size-sm);font-weight:600;margin-bottom:var(--spacing-xs);color:var(--text-primary);padding:var(--spacing-xs) 0}.annotation-status-section{background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.5rem;padding:var(--spacing-sm);margin-bottom:var(--spacing-sm);flex-shrink:0}.toolbar-section{margin-bottom:var(--spacing-sm);padding:var(--spacing-sm);background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.5rem;flex-shrink:0}.view-controls-section{display:flex;gap:var(--spacing-xs);margin-bottom:var(--spacing-xs)}.direction-controls-section{margin-top:var(--spacing-xs)!important}.zoom-lock-section{padding:var(--spacing-sm);background-color:var(--bg-secondary);border:1px solid var(--border-color);border-radius:.375rem;margin-top:var(--spacing-xs)!important}.instructions-section{padding:var(--spacing-sm);background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.5rem;flex:0 1 auto;min-height:120px;max-height:300px;overflow:hidden}.instruction-panel ul{list-style:none;background:#f8fafc;border:1px solid #e2e8f0;border-radius:.375rem;padding:var(--spacing-xs);margin:0;font-size:var(--font-size-xs);max-height:150px;overflow-y:auto}.annotation-status-section{background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.5rem;padding:var(--spacing-sm);margin-bottom:var(--spacing-sm);flex-shrink:0;min-height:auto}.direction-legend{padding:var(--spacing-sm);background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.5rem;flex-shrink:0;margin-top:auto}.instruction-panel li{padding:var(--spacing-xs);border-bottom:1px solid #e2e8f0;display:flex;align-items:center;gap:var(--spacing-xs)}.instruction-panel li:last-child{border-bottom:none}.annotation-actions{display:flex;flex-direction:column;gap:var(--spacing-xs);margin-top:var(--spacing-sm);flex-shrink:0;padding:var(--spacing-sm);background-color:var(--bg-primary);border:1px solid var(--border-color);border-radius:.5rem}.fullscreen-loading{position:fixed;top:0;left:0;width:100vw;height:100vh;background:linear-gradient(135deg,#667eea,#764ba2);display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:9999;color:#fff;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,sans-serif}.loading-spinner{width:80px;height:80px;border:8px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;margin-bottom:30px}@keyframes spin{to{transform:rotate(360deg)}}.loading-title{font-size:2rem;font-weight:600;margin-bottom:15px;text-align:center}.loading-subtitle{font-size:1.1rem;opacity:.9;text-align:center;margin-bottom:10px}.loading-details{font-size:.9rem;opacity:.7;text-align:center;max-width:400px;line-height:1.5}.loading-progress{margin-top:20px;text-align:center}.progress-bar{width:300px;height:4px;background:rgba(255,255,255,.3);border-radius:2px;overflow:hidden;margin:10px auto}.progress-fill{height:100%;background:linear-gradient(90deg,#4caf50,#8bc34a);width:0%;transition:width .3s ease;border-radius:2px}.header-controls{display:none}.checkbox-label{display:flex;align-items:center;gap:var(--spacing-xs);font-size:var(--font-size-sm);color:var(--text-primary);cursor:pointer;user-select:none}.checkbox-label input[type=checkbox]{width:16px;height:16px;accent-color:var(--primary-color);cursor:pointer}.zoom-lock-controls{display:flex;align-items:center;gap:var(--spacing-xs)}.zoom-lock-controls input[type=number]{padding:2px 6px;border:1px solid var(--border-color);border-radius:.25rem;font-size:var(--font-size-xs);text-align:center}.auto-move-section,.real-time-change-section{padding:var(--spacing-sm);background-color:var(--bg-secondary);border:1px solid var(--border-color);border-radius:.375rem}.plant-item.skipped{background-color:#fef3c7;border-color:#f59e0b;opacity:.8}.plant-item.skipped .plant-id{color:#92400e;text-decoration:line-through}.skip-reason{font-size:var(--font-size-xs);color:#92400e;font-style:italic;margin-top:var(--spacing-xs);padding:var(--spacing-xs);background-color:#fef3c7;border-radius:.25rem;border-left:3px solid #f59e0b}.skip-button{background-color:#f59e0b;color:#fff;border:none;padding:2px 6px;border-radius:.25rem;font-size:var(--font-size-xs);cursor:pointer;transition:background-color var(--transition-fast)}.skip-button:hover{background-color:#d97706}.skip-button.unskip-variant{background-color:#dc2626}.skip-button.unskip-variant:hover{background-color:#b91c1c}.state-buttons{display:flex;align-items:center;gap:5px}.modal-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:var(--spacing-md);padding-bottom:var(--spacing-sm);border-bottom:1px solid var(--border-color)}.modal-close{background:none;border:none;font-size:24px;cursor:pointer;color:var(--text-secondary);padding:0;width:30px;height:30px;display:flex;align-items:center;justify-content:center;border-radius:50%;transition:all var(--transition-fast)}.modal-close:before{content:"✕";font-size:18px;transition:all .2s ease}.modal-close:hover{background-color:var(--bg-secondary);color:var(--text-primary)}.form-group{margin-bottom:var(--spacing-md)}.form-group label{display:block;margin-bottom:var(--spacing-xs);font-weight:500;color:var(--text-primary)}.form-group textarea{width:100%;padding:var(--spacing-sm);border:1px solid var(--border-color);border-radius:.375rem;font-family:inherit;font-size:var(--font-size-sm);resize:vertical;min-height:80px}.form-group textarea:focus{outline:none;border-color:var(--primary-color);box-shadow:0 0 0 1px var(--primary-color)}.modal-footer{display:flex;gap:var(--spacing-sm);justify-content:flex-end;margin-top:var(--spacing-lg);padding-top:var(--spacing-sm);border-top:1px solid var(--border-color)}.instruction-panel h4{font-size:var(--font-size-base);font-weight:600;margin-bottom:var(--spacing-md);color:var(--text-primary)}.instruction-panel ul{list-style:none;background:#f8fafc;border:1px solid #e2e8f0;border-radius:8px;margin:var(--spacing-sm) 0 var(--spacing-lg) 0;padding:var(--spacing-md);flex:1;overflow-y:auto;min-height:0;box-shadow:0 1px 3px rgba(0,0,0,.05)}.instruction-panel ul li{margin-bottom:var(--spacing-xs);padding:var(--spacing-xs) 0;color:var(--text-secondary);font-size:var(--font-size-sm);line-height:1.5;position:relative;padding-left:16px}.instruction-panel ul li:before{content:"•";color:var(--primary-color);font-weight:700;position:absolute;left:0;top:var(--spacing-xs)}.instruction-panel li{padding:var(--spacing-xs) 0;font-size:var(--font-size-sm);color:var(--text-secondary);position:relative;line-height:1.4}.instruction-panel li:before{color:var(--primary-color);font-weight:700;position:absolute;left:0;top:var(--spacing-xs)}.toolbar-section h4{font-size:var(--font-size-sm);font-weight:600;margin-bottom:var(--spacing-sm);color:var(--text-primary)}.view-controls-section{display:flex;gap:var(--spacing-sm);flex-wrap:wrap}.annotation-status-section h4{margin-bottom:var(--spacing-sm);font-size:var(--font-size-sm);font-weight:600}.annotation-metadata{display:flex;flex-direction:column;gap:var(--spacing-xs);margin-bottom:var(--spacing-md)}.status-item{display:flex;justify-content:space-between;font-size:var(--font-size-xs)}.status-label{color:var(--text-secondary)}.status-value{font-weight:500;color:var(--text-primary)}.manual-adjustment-notice{background-color:rgba(251,191,36,.1);border:1px solid rgb(251 191 36 / .2);border-radius:.375rem;padding:var(--spacing-sm);font-size:var(--font-size-xs);color:#92400e}.manual-adjustment-notice p{margin-bottom:var(--spacing-xs)}.manual-adjustment-notice p:last-child{margin-bottom:0}.btn{display:inline-flex;align-items:center;justify-content:center;padding:var(--spacing-sm) var(--spacing-md);font-size:var(--font-size-sm);font-weight:500;border:1px solid transparent;border-radius:.375rem;cursor:pointer;transition:all var(--transition-fast);text-decoration:none;white-space:nowrap}.btn:disabled{opacity:.5;cursor:not-allowed}.btn-primary{background-color:var(--primary-color);color:#fff;border-color:var(--primary-color)}.btn-primary:hover:not(:disabled){background-color:var(--primary-hover);border-color:var(--primary-hover)}.btn-primary:active{background-color:var(--primary-active);border-color:var(--primary-active)}.btn-secondary{background-color:var(--bg-primary);color:var(--text-primary);border-color:var(--border-color)}.btn-secondary:hover:not(:disabled){background-color:var(--bg-tertiary);border-color:var(--border-hover)}.btn-success{background-color:var(--success-color);color:#fff;border-color:var(--success-color)}.btn-success:hover:not(:disabled){background-color:var(--success-hover);border-color:var(--success-hover)}.btn-danger{background-color:var(--danger-color);border-color:var(--danger-color);color:#fff}.btn-danger:hover:not(:disabled){background-color:var(--danger-hover);border-color:var(--danger-hover)}.btn-danger:active{background-color:#991b1b;border-color:#991b1b}.btn-danger:disabled{background-color:#f3f4f6;border-color:#e5e7eb;color:#9ca3af;cursor:not-allowed;opacity:.6}.btn-small{padding:var(--spacing-xs) var(--spacing-sm);font-size:var(--font-size-xs)}.btn-icon{width:32px;height:32px;padding:0;font-size:var(--font-size-base);background-color:rgba(0,0,0,.7);color:#fff;border:none;pointer-events:auto}.btn-icon:hover:not(:disabled){background-color:rgba(0,0,0,.8)}.modal{position:fixed;top:0;left:0;width:100%;height:100%;background-color:var(--bg-overlay);display:flex;align-items:center;justify-content:center;z-index:1000}.modal-content{background-color:var(--bg-primary);border-radius:.5rem;padding:var(--spacing-xl);box-shadow:var(--shadow-lg);max-width:90vw;max-height:90vh;overflow-y:auto}.modal-content h3{font-size:var(--font-size-xl);font-weight:600;margin-bottom:var(--spacing-lg);color:var(--text-primary)}@media (max-width: 1400px){:root{--sidebar-width: 280px}.app-main{grid-template-columns:var(--sidebar-width) 280px 1fr}.thumbnail-panel{width:280px}.annotation-workspace{grid-template-columns:1fr 280px}.instruction-panel{width:280px;max-width:280px;min-width:260px}}@media (max-width: 1200px){:root{--sidebar-width: 260px}.app-main{grid-template-columns:var(--sidebar-width) 260px 1fr}.thumbnail-panel{width:260px}.annotation-workspace{grid-template-columns:1fr 260px}.instruction-panel{width:260px;max-width:260px;min-width:240px;padding:var(--spacing-md)}}@media (max-width: 1024px){:root{--sidebar-width: 240px}.app-main{grid-template-columns:var(--sidebar-width) 240px 1fr}.thumbnail-panel{width:240px}.annotation-workspace{grid-template-columns:1fr 240px}.instruction-panel{width:240px;max-width:240px;min-width:220px;padding:var(--spacing-md)}.thumbnail-image{height:100px}}@media (max-width: 768px){.app-main{grid-template-columns:1fr;grid-template-rows:300px 250px 1fr}.plant-list-panel{width:100%;max-width:100%;min-width:auto;border-right:none;border-bottom:1px solid var(--border-color)}.plant-list-container{height:100%}.thumbnail-panel{width:100%;border-right:none;border-bottom:1px solid var(--border-color)}.thumbnail-container{height:100%}.thumbnail-image{height:80px}.annotation-panel{width:100%}.annotation-workspace{grid-template-columns:1fr;grid-template-rows:1fr auto}.canvas-container{min-height:250px}.instruction-panel{width:100%;max-width:100%;min-width:auto;border-left:none;border-top:1px solid var(--border-color);height:100%}.view-angle-buttons{display:grid;grid-template-columns:1fr 1fr 1fr;gap:var(--spacing-xs)}.btn-view-angle{font-size:10px;padding:var(--spacing-xs)}}.plant-list-container::-webkit-scrollbar,.thumbnail-container::-webkit-scrollbar,.instruction-panel::-webkit-scrollbar{width:6px;height:6px}.plant-list-container::-webkit-scrollbar-track,.thumbnail-container::-webkit-scrollbar-track,.instruction-panel::-webkit-scrollbar-track{background:var(--bg-tertiary);border-radius:3px}.plant-list-container::-webkit-scrollbar-thumb,.thumbnail-container::-webkit-scrollbar-thumb,.instruction-panel::-webkit-scrollbar-thumb{background:var(--border-color);border-radius:3px}.plant-list-container::-webkit-scrollbar-thumb:hover,.thumbnail-container::-webkit-scrollbar-thumb:hover,.instruction-panel::-webkit-scrollbar-thumb:hover{background:var(--border-hover)}.no-data{text-align:center;color:var(--text-secondary);padding:var(--spacing-2xl);font-style:italic}.branch-point-preview{position:absolute;top:var(--spacing-md);left:var(--spacing-md);width:200px;height:150px;background-color:rgba(255,255,255,.95);border:2px solid var(--primary-color);border-radius:.5rem;box-shadow:var(--shadow-lg);overflow:hidden;z-index:15;transition:opacity var(--transition-fast);backdrop-filter:blur(4px);resize:both;min-width:150px;min-height:120px;max-width:400px;max-height:300px}.branch-point-preview.hidden{opacity:0;pointer-events:none}.preview-header{background:linear-gradient(135deg,var(--primary-color) 0%,var(--primary-hover) 100%);color:#fff;padding:var(--spacing-xs) var(--spacing-sm);font-size:var(--font-size-xs);font-weight:600;text-align:center;display:flex;justify-content:space-between;align-items:center;cursor:move;user-select:none}.preview-header .close-btn{background:none;border:none;color:#fff;font-size:16px;cursor:pointer;padding:0;width:20px;height:20px;display:flex;align-items:center;justify-content:center;border-radius:50%;transition:background-color var(--transition-fast)}.preview-header .close-btn:before{content:"✕";font-size:14px;transition:all .2s ease}.preview-header .close-btn:hover{background-color:rgba(255,255,255,.2)}.preview-controls{padding:var(--spacing-xs);background-color:rgba(255,255,255,.1);border-bottom:1px solid rgba(255,255,255,.2);display:flex;align-items:center;gap:var(--spacing-xs);font-size:var(--font-size-xs)}.preview-controls label{color:var(--text-color-secondary);font-weight:500;white-space:nowrap}.zoom-slider{flex:1;height:4px;border-radius:2px;background:rgba(255,255,255,.3);outline:none;-webkit-appearance:none}.zoom-slider::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:12px;height:12px;border-radius:50%;background:var(--primary-color);cursor:pointer;border:2px solid white;box-shadow:0 1px 3px rgba(0,0,0,.3)}.zoom-slider::-moz-range-thumb{width:12px;height:12px;border-radius:50%;background:var(--primary-color);cursor:pointer;border:2px solid white;box-shadow:0 1px 3px rgba(0,0,0,.3)}#zoom-value{color:var(--primary-color);font-weight:600;min-width:24px;text-align:center}.preview-canvas-container{position:relative;width:100%;height:calc(100% - 24px);background-color:var(--bg-tertiary);display:flex;align-items:center;justify-content:center}.preview-canvas{max-width:100%;max-height:100%;border:none;background-color:var(--bg-primary)}.preview-loading{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:var(--font-size-xs);color:var(--text-secondary);text-align:center}.no-preview{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:var(--font-size-xs);color:var(--text-secondary);text-align:center;padding:var(--spacing-sm)}.keypoint-label{position:absolute;background-color:rgba(0,0,0,.6);color:#fff;padding:1px 3px;border-radius:2px;font-size:9px;font-weight:600;pointer-events:none;z-index:20;white-space:nowrap;text-align:center;min-width:12px;line-height:1;border:1px solid rgba(255,255,255,.4);box-shadow:0 1px 2px rgba(0,0,0,.3)}.keypoint-label.left-direction{background-color:rgba(255,68,68,.7);border-color:rgba(255,68,68,.8)}.keypoint-label.right-direction{background-color:rgba(68,68,255,.7);border-color:rgba(68,68,255,.8)}.keypoint-tooltip{position:absolute;background-color:rgba(0,0,0,.9);color:#fff;padding:var(--spacing-xs) var(--spacing-sm);border-radius:.375rem;font-size:var(--font-size-xs);pointer-events:none;z-index:25;white-space:nowrap;max-width:200px;text-align:left}.keypoint-tooltip:before{content:"";position:absolute;top:100%;left:50%;transform:translate(-50%);border:4px solid transparent;border-top-color:rgba(0,0,0,.9)}.annotation-size-info{position:absolute;bottom:var(--spacing-md);left:var(--spacing-md);background-color:rgba(0,0,0,.7);color:#fff;padding:var(--spacing-xs) var(--spacing-sm);border-radius:.25rem;font-size:var(--font-size-xs);display:none}.annotation-size-info.visible{display:block}@media (max-width: 1024px){.branch-point-preview{width:160px;height:120px}}@media (max-width: 768px){.branch-point-preview{width:140px;height:100px;top:var(--spacing-sm);left:var(--spacing-sm)}.keypoint-label{font-size:10px;padding:1px 4px}}.btn-special{background:linear-gradient(135deg,#10b981,#059669);color:#fff;border:none;transition:all .2s ease}.btn-special:hover{background:linear-gradient(135deg,#059669,#047857);transform:translateY(-1px);box-shadow:0 4px 12px rgba(16,185,129,.4)}.btn-special.active{background:linear-gradient(135deg,#f59e0b,#d97706);animation:pulse 2s infinite}.btn-special.active:hover{background:linear-gradient(135deg,#d97706,#b45309)}@keyframes pulse{0%{box-shadow:0 0 rgba(245,158,11,.7)}70%{box-shadow:0 0 0 10px rgba(245,158,11,0)}to{box-shadow:0 0 rgba(245,158,11,0)}}.direction-controls-section{padding:8px 0;border-top:1px solid #e5e7eb}.direction-legend{margin:var(--spacing-md) 0;padding:var(--spacing-sm);background:var(--bg-primary);border:1px solid var(--border-color);border-radius:.375rem;flex-shrink:0}.direction-legend h5{margin:0 0 var(--spacing-xs) 0;font-size:var(--font-size-sm);font-weight:600}.direction-legend .legend-item{display:flex;align-items:center;gap:var(--spacing-sm);margin-bottom:var(--spacing-xs)}.direction-legend .legend-color{display:inline-block;width:12px;height:12px;border-radius:50%;border:1px solid #ffffff}.direction-legend .legend-text{font-size:var(--font-size-xs);color:var(--text-secondary)}.direction-arrow{filter:drop-shadow(1px 1px 2px rgba(0,0,0,.3))}.direction-guide{animation:dash 1.5s linear infinite}@keyframes dash{to{stroke-dashoffset:-20}}.auto-direction-hint{position:absolute;top:10px;left:50%;transform:translate(-50%);background:rgba(245,158,11,.9);color:#fff;padding:8px 16px;border-radius:20px;font-size:12px;font-weight:600;z-index:1000;animation:fadeInOut 3s ease-in-out}@keyframes fadeInOut{0%,to{opacity:0;transform:translate(-50%) translateY(-10px)}10%,90%{opacity:1;transform:translate(-50%) translateY(0)}}#direction-save-options{background:#f9fafb;border:1px solid #e5e7eb;border-radius:6px;margin:20px 0;padding:15px}#direction-save-options h4{margin:0 0 10px;font-size:14px;color:#374151;font-weight:600}#direction-save-options label{display:block;margin-bottom:10px;cursor:pointer;font-size:13px}#direction-save-options input[type=radio]{margin-right:8px}#direction-save-options .option-description{font-size:12px;color:#6b7280;margin-left:25px;margin-top:3px;line-height:1.4}.note-modal-content{max-width:600px;max-height:80vh;overflow-y:auto}.note-list-modal-content{max-width:800px;max-height:80vh;overflow-y:auto}.note-form{display:flex;flex-direction:column;gap:var(--spacing-lg)}.note-form .form-group{display:flex;flex-direction:column;gap:var(--spacing-xs)}.note-form label{font-weight:500;color:var(--text-primary);font-size:var(--font-size-sm)}.note-form .required{color:var(--danger-color)}.note-form input,.note-form textarea,.note-form select{padding:var(--spacing-sm);border:1px solid var(--border-color);border-radius:6px;font-size:var(--font-size-base);transition:border-color .2s,box-shadow .2s}.note-form input:focus,.note-form textarea:focus,.note-form select:focus{outline:none;border-color:var(--border-focus);box-shadow:0 0 0 3px rgba(37,99,235,.1)}.note-form textarea{resize:vertical;min-height:120px}.char-counter{display:flex;justify-content:flex-end;font-size:var(--font-size-xs);color:var(--text-secondary);margin-top:var(--spacing-xs)}.form-help{font-size:var(--font-size-xs);color:var(--text-secondary);margin-top:var(--spacing-xs)}.note-list-controls{display:flex;flex-direction:column;gap:var(--spacing-md);margin-bottom:var(--spacing-lg);padding:var(--spacing-md);background-color:var(--bg-secondary);border-radius:8px}.search-group{display:flex;gap:var(--spacing-sm)}.search-group input{flex:1;padding:var(--spacing-sm);border:1px solid var(--border-color);border-radius:6px;font-size:var(--font-size-sm)}.filter-group{display:flex;justify-content:space-between;align-items:center;gap:var(--spacing-sm)}.filter-group select{padding:var(--spacing-sm);border:1px solid var(--border-color);border-radius:6px;font-size:var(--font-size-sm)}.note-list-container{max-height:400px;overflow-y:auto;border:1px solid var(--border-color);border-radius:8px}.note-item{padding:var(--spacing-md);border-bottom:1px solid var(--border-color);transition:background-color .2s}.note-item:hover{background-color:var(--bg-secondary)}.note-item-header{display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:var(--spacing-sm)}.note-title{font-size:var(--font-size-lg);font-weight:600;color:var(--text-primary);margin:0;flex:1}.note-actions{display:flex;gap:var(--spacing-xs);margin-left:var(--spacing-sm)}.note-item-meta{display:flex;align-items:center;gap:var(--spacing-md);margin-bottom:var(--spacing-sm);font-size:var(--font-size-xs);color:var(--text-secondary)}.note-type{padding:2px 8px;border-radius:12px;font-size:var(--font-size-xs);font-weight:500;text-transform:uppercase}.note-type-general{background-color:#e0e7ff;color:#3730a3}.note-type-observation{background-color:#d1fae5;color:#065f46}.note-type-annotation{background-color:#fef3c7;color:#92400e}.note-timestamp{font-size:var(--font-size-xs);color:var(--text-tertiary)}.note-author{font-size:var(--font-size-xs);color:var(--text-secondary)}.note-content{color:var(--text-primary);line-height:1.5;margin-bottom:var(--spacing-sm)}.note-tags{display:flex;flex-wrap:wrap;gap:var(--spacing-xs)}.tag{padding:2px 6px;background-color:var(--bg-tertiary);border:1px solid var(--border-color);border-radius:4px;font-size:var(--font-size-xs);color:var(--text-secondary)}#plant-note-btn,#image-note-btn{display:inline-flex;align-items:center;gap:var(--spacing-xs);padding:var(--spacing-xs) var(--spacing-sm);background-color:#3b82f6;color:#fff;border:none;border-radius:6px;font-size:var(--font-size-sm);font-weight:500;cursor:pointer;transition:background-color .2s,transform .1s}#plant-note-btn:hover,#image-note-btn:hover{background-color:#2563eb;transform:translateY(-1px)}#plant-note-btn:active,#image-note-btn:active{transform:translateY(0)}.loading-message,.error-message,.empty-message{padding:var(--spacing-xl);text-align:center;color:var(--text-secondary)}.error-message{color:var(--danger-color);background-color:#fef2f2;border:1px solid #fecaca;border-radius:6px}.empty-message{font-style:italic}@media (max-width: 768px){.note-modal-content,.note-list-modal-content{max-width:95vw;margin:10px}.note-item-header{flex-direction:column;align-items:flex-start;gap:var(--spacing-sm)}.note-actions{margin-left:0}.note-item-meta{flex-direction:column;align-items:flex-start;gap:var(--spacing-xs)}.filter-group{flex-direction:column;align-items:stretch}.search-group{flex-direction:column}}.note-counter{display:inline-flex;align-items:center;justify-content:center;min-width:20px;height:20px;background-color:var(--primary-color);color:#fff;border-radius:50%;font-size:11px;font-weight:500;margin-left:var(--spacing-xs)}.note-counter.empty{background-color:var(--text-tertiary)}.note-status{display:inline-flex;align-items:center;gap:var(--spacing-xs);font-size:var(--font-size-xs);color:var(--text-secondary)}.note-status.has-notes{color:var(--success-color)}.note-status.has-notes:before{content:"●";color:var(--success-color)}.note-status.no-notes:before{content:"○";color:var(--text-tertiary)}.note-search-highlight{background-color:#fef08a;padding:1px 2px;border-radius:2px}.note-display{font-family:inherit;backdrop-filter:blur(5px);transition:all .3s ease}.note-display-header{padding:12px 16px;background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;border-radius:8px 8px 0 0;display:flex;justify-content:space-between;align-items:center}.note-display-header h4{margin:0;font-size:var(--font-size-sm);font-weight:600}.note-display-header .close-btn{background:none;border:none;color:#fff;font-size:18px;cursor:pointer;padding:0;width:24px;height:24px;display:flex;align-items:center;justify-content:center;border-radius:50%;transition:background-color .2s}.note-display-header .close-btn:before{content:"✕";font-size:14px;transition:all .2s ease}.note-display-header .close-btn:hover{background-color:rgba(255,255,255,.2)}.note-display-content{padding:8px;max-height:160px;overflow-y:auto}.note-display-header{padding:12px 16px;background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;border-radius:8px 8px 0 0;display:flex;justify-content:space-between;align-items:center;user-select:none}.draggable-header{cursor:move}.draggable-header:active{cursor:grabbing}.note-display-controls{display:flex;gap:4px;align-items:center}.minimize-btn{background:rgba(255,255,255,.15);border:1px solid rgba(255,255,255,.25);color:#fff;font-size:14px;width:24px;height:24px;border-radius:4px;cursor:pointer;display:flex;align-items:center;justify-content:center;transition:all .2s ease;font-weight:700}.minimize-btn:hover{background:rgba(255,255,255,.25);transform:scale(1.1)}.note-display.minimized{max-height:40px;min-height:40px;overflow:hidden}.note-display.minimized .note-display-content{display:none!important}.note-display.collapsible{resize:both;min-width:250px;min-height:100px;max-width:500px;max-height:400px}.note-display{transition:all .3s cubic-bezier(.4,0,.2,1)}.note-display:hover{box-shadow:0 8px 25px rgba(0,0,0,.15)}.note-item-mini{padding:8px;border-bottom:1px solid #f0f0f0;transition:background-color .2s}.note-item-mini:hover{background-color:#f8f9fa}.note-item-mini:last-child{border-bottom:none}.note-title-mini{font-weight:600;font-size:var(--font-size-sm);color:var(--text-primary);margin-bottom:4px;line-height:1.3}.note-content-mini{font-size:var(--font-size-xs);color:var(--text-secondary);line-height:1.4;margin-bottom:4px}.note-time-mini{font-size:10px;color:var(--text-tertiary);text-align:right}.note-loading,.note-empty{padding:20px;text-align:center;color:var(--text-secondary);font-size:var(--font-size-sm)}.note-empty{font-style:italic}.plant-note-container,.image-note-container{animation:fadeIn .3s ease}@keyframes fadeIn{0%{opacity:0;transform:translateY(-10px)}to{opacity:1;transform:translateY(0)}}.note-btn{position:relative;overflow:hidden;transition:all .3s ease}.note-btn:before{content:"";position:absolute;top:0;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,.3),transparent);transition:left .5s}.note-btn:hover:before{left:100%}.note-btn:hover{box-shadow:0 4px 15px rgba(59,130,246,.3)}.note-counter{animation:pulse 2s infinite}@keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.05)}to{transform:scale(1)}}.note-counter.has-new{background-color:#ef4444;animation:bounce 1s infinite}@keyframes bounce{0%,20%,50%,80%,to{transform:translateY(0)}40%{transform:translateY(-3px)}60%{transform:translateY(-2px)}}@media (max-width: 768px){.note-display{width:280px!important;max-height:150px!important}.plant-note-container,.image-note-container{position:relative!important;top:auto!important;right:auto!important;margin:5px 0;background:none!important;padding:0!important;box-shadow:none!important}.note-display-content{max-height:120px}.note-item-mini{padding:6px}}@media (prefers-color-scheme: dark){.note-display{background:rgba(30,30,30,.95)!important;border-color:#4a4a4a!important}.note-display-header{background:linear-gradient(135deg,#4a5568,#2d3748)!important}.note-item-mini:hover{background-color:#2d3748!important}.note-title-mini{color:#e2e8f0!important}.note-content-mini{color:#a0aec0!important}.note-time-mini{color:#718096!important}}.note-display,.note-btn,.note-item-mini{transform:translateZ(0);will-change:transform}.right-box{margin-left:auto;width:auto;display:flex;align-items:center;gap:8px}.plant-note-badge{display:inline-flex;align-items:center;margin-left:auto;padding:2px 6px;background:linear-gradient(135deg,#10b981,#059669);color:#fff;border-radius:12px;font-size:10px;font-weight:600;box-shadow:0 1px 3px rgba(0,0,0,.2);transition:all var(--transition-fast)}.plant-note-badge:hover{background:linear-gradient(135deg,#059669,#047857);transform:scale(1.05)}.note-count{display:flex;align-items:center;gap:2px}.image-note-badge{position:absolute;top:4px;left:4px;background:linear-gradient(135deg,#8b5cf6,#7c3aed);color:#fff;padding:2px 6px;border-radius:10px;font-size:9px;font-weight:600;box-shadow:0 1px 3px rgba(0,0,0,.3);z-index:2;transition:all var(--transition-fast)}.image-note-badge:hover{background:linear-gradient(135deg,#7c3aed,#6d28d9);transform:scale(1.1)}.image-note-count{display:flex;align-items:center;gap:2px}.plant-notes-section{border-top:1px solid var(--border-color);margin-top:var(--spacing-sm);padding-top:var(--spacing-sm)}.plant-notes-section .btn{width:100%;justify-content:center;font-size:var(--font-size-xs);padding:var(--spacing-xs) var(--spacing-sm)}.modal{animation:modalFadeIn .25s cubic-bezier(.4,0,.2,1) forwards;backdrop-filter:blur(8px);background-color:rgba(0,0,0,.6)}.modal.closing{animation:modalFadeOut .2s cubic-bezier(.4,0,.2,1) forwards}@keyframes modalFadeIn{0%{opacity:0;backdrop-filter:blur(0px)}to{opacity:1;backdrop-filter:blur(8px)}}@keyframes modalFadeOut{0%{opacity:1;backdrop-filter:blur(8px)}to{opacity:0;backdrop-filter:blur(0px)}}@keyframes modalSlideIn{0%{transform:scale(.9) translateY(-20px);opacity:0}to{transform:scale(1) translateY(0);opacity:1}}@keyframes modalSlideOut{0%{transform:scale(1) translateY(0);opacity:1}to{transform:scale(.95) translateY(10px);opacity:0}}.note-modal-content{width:95%;max-width:650px;border-radius:20px;box-shadow:0 32px 64px -12px rgba(0,0,0,.25),0 25px 45px -5px rgba(0,0,0,.15),0 0 0 1px rgba(255,255,255,.1);border:none;backdrop-filter:blur(16px);background:rgba(255,255,255,.95);transform:scale(1) translateY(0);transition:all .3s cubic-bezier(.34,1.56,.64,1);animation:modalSlideIn .3s cubic-bezier(.34,1.56,.64,1) forwards;overflow:hidden;position:relative}.note-modal-content.closing{animation:modalSlideOut .2s cubic-bezier(.4,0,.2,1) forwards}.note-list-modal-content{width:95%;max-width:900px;height:85vh;max-height:750px;min-height:500px;border-radius:20px;box-shadow:0 32px 64px -12px rgba(0,0,0,.25),0 25px 45px -5px rgba(0,0,0,.15),0 0 0 1px rgba(255,255,255,.1);border:none;backdrop-filter:blur(16px);background:rgba(255,255,255,.95);transform:scale(1) translateY(0);transition:all .3s cubic-bezier(.34,1.56,.64,1);animation:modalSlideIn .3s cubic-bezier(.34,1.56,.64,1) forwards;overflow:hidden;display:flex;flex-direction:column}.note-list-modal-content.closing{animation:modalSlideOut .2s cubic-bezier(.4,0,.2,1) forwards}.modal-header{background:linear-gradient(135deg,#667eea,#764ba2,#667eea);background-size:200% 200%;animation:gradientShift 8s ease infinite;border-radius:20px 20px 0 0;padding:24px 28px;border-bottom:1px solid rgba(255,255,255,.1);position:relative;overflow:hidden;display:flex;align-items:center;justify-content:space-between;min-height:80px}@keyframes gradientShift{0%{background-position:0% 50%}50%{background-position:100% 50%}to{background-position:0% 50%}}.modal-header:before{content:"";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(45deg,rgba(255,255,255,.15) 0%,transparent 50%,rgba(255,255,255,.15) 100%),radial-gradient(circle at 30% 30%,rgba(255,255,255,.1) 0%,transparent 50%);pointer-events:none;transition:opacity .3s ease}.modal-header:hover:before{opacity:1.2}.modal-header h2{margin:0;color:#fff;font-weight:700;font-size:1.5rem;letter-spacing:-.025em;text-shadow:0 2px 4px rgba(0,0,0,.3),0 1px 2px rgba(0,0,0,.2);position:relative;z-index:1;display:flex;align-items:center;gap:12px;flex:1}.modal-header h2:before{content:"";width:4px;height:24px;background:rgba(255,255,255,.6);border-radius:2px;transition:all .3s ease}.modal-header:hover h2:before{background:rgba(255,255,255,.9);height:28px}.close-button{background:rgba(255,255,255,.15);border:1px solid rgba(255,255,255,.25);font-size:18px;cursor:pointer;color:rgba(255,255,255,.9);padding:0;border-radius:12px;width:40px;height:40px;display:flex;align-items:center;justify-content:center;transition:all .3s cubic-bezier(.4,0,.2,1);backdrop-filter:blur(10px);position:relative;z-index:1;font-weight:400}.close-button:before{content:"✕";font-size:16px;transition:all .2s ease}.close-button:hover{background:rgba(239,68,68,.9);border-color:#ef4444;color:#fff;transform:scale(1.05) rotate(90deg);box-shadow:0 8px 25px rgba(239,68,68,.4),0 0 0 2px rgba(255,255,255,.2)}.close-button:active{transform:scale(.95) rotate(90deg)}.close-button:focus{outline:none;box-shadow:0 0 0 3px rgba(239,68,68,.3),0 8px 25px rgba(239,68,68,.4)}.modal-body{padding:28px 32px;max-height:60vh;overflow-y:auto;background:rgba(255,255,255,.98);backdrop-filter:blur(8px);flex:1;position:relative}.modal-body::-webkit-scrollbar{width:8px}.modal-body::-webkit-scrollbar-track{background:rgba(0,0,0,.05);border-radius:4px}.modal-body::-webkit-scrollbar-thumb{background:linear-gradient(135deg,#667eea,#764ba2);border-radius:4px;transition:all .3s ease}.modal-body::-webkit-scrollbar-thumb:hover{background:linear-gradient(135deg,#5a67d8,#6b46c1)}.modal-body{scrollbar-width:thin;scrollbar-color:#667eea rgba(0,0,0,.05)}.modal-footer{padding:20px 32px 28px;border-top:1px solid rgba(229,231,235,.3);display:flex;gap:16px;justify-content:flex-end;align-items:center;background:linear-gradient(135deg,rgba(248,250,252,.95),rgba(241,245,249,.95));border-radius:0 0 20px 20px;backdrop-filter:blur(12px);position:relative;min-height:70px}.modal-footer:before{content:"";position:absolute;top:0;left:32px;right:32px;height:1px;background:linear-gradient(90deg,transparent 0%,rgba(229,231,235,.6) 20%,rgba(229,231,235,.6) 80%,transparent 100%)}.form-group{margin-bottom:24px;position:relative}.form-group label{display:block;margin-bottom:8px;font-weight:600;color:var(--text-primary);font-size:.875rem;letter-spacing:.025em;transition:color .2s ease}.form-group label:hover{color:#667eea}.required{color:#ef4444;font-weight:700}.form-group input,.form-group textarea,.form-group select{width:100%;padding:16px 18px;border:2px solid rgba(229,231,235,.8);border-radius:14px;font-size:.875rem;font-family:inherit;background:linear-gradient(135deg,rgba(255,255,255,.95),rgba(248,250,252,.95));backdrop-filter:blur(5px);box-shadow:0 1px 3px rgba(0,0,0,.08),inset 0 1px 2px rgba(255,255,255,.9);transition:all .3s cubic-bezier(.4,0,.2,1);position:relative}.form-group input::placeholder,.form-group textarea::placeholder{color:rgba(107,114,128,.6);transition:opacity .3s ease}.form-group input:focus::placeholder,.form-group textarea:focus::placeholder{opacity:.4}.form-group input:focus,.form-group textarea:focus,.form-group select:focus{outline:none;border-color:#667eea;box-shadow:0 0 0 4px rgba(102,126,234,.15),0 8px 25px rgba(102,126,234,.1),inset 0 1px 2px rgba(255,255,255,.9);transform:translateY(-1px);background:linear-gradient(135deg,#fff,rgba(248,250,252,.98))}.form-group input:hover:not(:focus),.form-group textarea:hover:not(:focus),.form-group select:hover:not(:focus){border-color:rgba(102,126,234,.3);box-shadow:0 2px 8px rgba(0,0,0,.1),inset 0 1px 2px rgba(255,255,255,.9)}.form-group textarea{resize:vertical;min-height:140px;font-family:inherit;line-height:1.6}.form-group select{background-image:url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'none\' viewBox=\'0 0 20 20\'%3e%3cpath stroke=\'%236b7280\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'1.5\' d=\'m6 8 4 4 4-4\'/%3e%3c/svg%3e");background-position:right 12px center;background-repeat:no-repeat;background-size:16px;padding-right:44px;-webkit-appearance:none;appearance:none}.char-counter{text-align:right;font-size:.75rem;color:var(--text-secondary);margin-top:6px;transition:all .3s ease;font-weight:500;display:flex;align-items:center;justify-content:space-between;padding:0 4px}.char-counter:before{content:"";flex:1;height:1px;background:linear-gradient(90deg,transparent 0%,rgba(229,231,235,.6) 50%,transparent 100%);margin-right:12px}.char-counter.warning{color:#f59e0b;font-weight:600}.char-counter.danger{color:#ef4444;font-weight:700;animation:pulse 2s infinite}@keyframes pulse{0%,to{opacity:1}50%{opacity:.6}}.form-help{font-size:.75rem;color:rgba(107,114,128,.8);margin-top:6px;font-style:italic;display:flex;align-items:center;gap:6px}.form-help:before{content:"Ὤ8";font-style:normal}.note-list-controls{display:flex;flex-direction:column;gap:16px;margin-bottom:24px;padding:20px;background:linear-gradient(135deg,rgba(248,250,252,.8),rgba(241,245,249,.8));border-radius:16px;border:1px solid rgba(229,231,235,.5);backdrop-filter:blur(8px);position:relative;overflow:hidden}.note-list-controls:before{content:"";position:absolute;top:0;left:0;right:0;height:2px;background:linear-gradient(90deg,#667eea,#764ba2,#667eea);background-size:200% 100%;animation:shimmer 3s linear infinite}@keyframes shimmer{0%{background-position:-200% 0}to{background-position:200% 0}}.search-group{flex:1;display:flex;gap:12px;align-items:stretch}.search-group input{padding:12px 16px;border:2px solid rgba(229,231,235,.6);border-radius:12px;font-size:.875rem;background:rgba(255,255,255,.9);transition:all .3s ease;flex:1}.search-group input:focus{border-color:#667eea;box-shadow:0 0 0 3px rgba(102,126,234,.1);background:#fff}.search-group button{padding:12px 20px;border:none;border-radius:12px;background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;font-weight:600;cursor:pointer;transition:all .3s ease;white-space:nowrap}.search-group button:hover{transform:translateY(-1px);box-shadow:0 8px 25px rgba(102,126,234,.3)}.filter-group{display:flex;gap:12px;align-items:stretch;justify-content:space-between}.filter-group select{padding:12px 16px;border:2px solid rgba(229,231,235,.6);border-radius:12px;font-size:.875rem;background:rgba(255,255,255,.9);min-width:140px}.note-list-container{max-height:calc(100% - 200px);overflow-y:auto;border:1px solid rgba(229,231,235,.4);border-radius:16px;background:rgba(255,255,255,.6);backdrop-filter:blur(8px);flex:1;position:relative}.note-list-container::-webkit-scrollbar{width:8px}.note-list-container::-webkit-scrollbar-track{background:rgba(0,0,0,.05);border-radius:4px}.note-list-container::-webkit-scrollbar-thumb{background:linear-gradient(135deg,#667eea,#764ba2);border-radius:4px;transition:all .3s ease}.note-list-container::-webkit-scrollbar-thumb:hover{background:linear-gradient(135deg,#5a67d8,#6b46c1)}.note-item{padding:20px;border-bottom:1px solid rgba(229,231,235,.3);transition:all .3s cubic-bezier(.4,0,.2,1);position:relative;background:rgba(255,255,255,.4);backdrop-filter:blur(4px)}.note-item:before{content:"";position:absolute;left:0;top:0;bottom:0;width:0;background:linear-gradient(135deg,#667eea,#764ba2);transition:width .3s ease}.note-item:hover{background:rgba(255,255,255,.8);transform:translate(4px);box-shadow:0 8px 25px rgba(0,0,0,.08),0 2px 8px rgba(0,0,0,.06)}.note-item:hover:before{width:4px}.note-item:last-child{border-bottom:none}.note-item-header{display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:12px;gap:16px}.note-title{font-weight:700;color:var(--text-primary);margin:0;font-size:1rem;line-height:1.4;flex:1}.note-actions{display:flex;gap:8px;opacity:0;transition:opacity .3s ease}.note-item:hover .note-actions{opacity:1}.note-actions .btn{padding:6px 12px;font-size:.75rem;border-radius:8px;font-weight:600;transition:all .3s ease}.note-actions .btn:hover{transform:translateY(-1px);box-shadow:0 4px 12px rgba(0,0,0,.15)}.note-item-meta{display:flex;gap:12px;align-items:center;margin-bottom:12px;font-size:.75rem;flex-wrap:wrap}.note-type{padding:4px 10px;border-radius:16px;font-weight:600;text-transform:uppercase;font-size:.625rem;letter-spacing:.05em;position:relative;overflow:hidden}.note-type:before{content:"";position:absolute;top:0;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,.3),transparent);transition:left .5s ease}.note-type:hover:before{left:100%}.note-type-general{background:linear-gradient(135deg,#dbeafe,#bfdbfe);color:#1e40af;border:1px solid rgba(30,64,175,.2)}.note-type-observation{background:linear-gradient(135deg,#dcfce7,#bbf7d0);color:#166534;border:1px solid rgba(22,101,52,.2)}.note-type-annotation{background:linear-gradient(135deg,#fef3c7,#fde68a);color:#92400e;border:1px solid rgba(146,64,14,.2)}.note-timestamp,.note-author{color:var(--text-secondary);font-weight:500}.note-content{color:var(--text-primary);line-height:1.6;margin-bottom:12px;font-size:.875rem}.note-tags{display:flex;gap:6px;flex-wrap:wrap;margin-top:8px}.tag{background:linear-gradient(135deg,#f3f4f6,#e5e7eb);color:#374151;padding:4px 8px;border-radius:12px;font-size:.625rem;font-weight:600;transition:all .3s ease;border:1px solid rgba(229,231,235,.6)}.tag:hover{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;transform:translateY(-1px);box-shadow:0 4px 8px rgba(102,126,234,.3)}.loading-message,.empty-message,.error-message{text-align:center;padding:var(--spacing-xl);color:var(--text-secondary);font-style:italic}.error-message{color:#dc2626}@media print{.note-display,.plant-note-container,.image-note-container,.plant-note-badge,.image-note-badge{display:none!important}}.note-count-display{color:#059669;font-weight:700;margin-left:5px;font-size:var(--font-size-sm)}.note-count-overlay{position:absolute;top:-5px;right:-5px;background:#dc2626;color:#fff;border-radius:50%;width:16px;height:16px;font-size:10px;display:flex;align-items:center;justify-content:center;font-weight:700;line-height:1}.image-note-badge{position:absolute;z-index:10;pointer-events:none;max-width:calc(100% - 8px);overflow:hidden}.image-note-count{color:#fff;padding:2px 6px;border-radius:12px;font-size:11px;font-weight:700;display:inline-block;white-space:nowrap;line-height:1;max-width:100%;box-sizing:border-box}#plant-note-btn,#image-note-btn{position:relative}.deletion-stats .stat-item{display:flex;justify-content:space-between;align-items:center;padding:8px 0;border-bottom:1px solid #f3f4f6}.deletion-stats .stat-item:last-child{border-bottom:none}.deletion-stats .stat-label{color:var(--text-secondary);font-size:var(--font-size-sm)}.deletion-stats .stat-value{font-weight:600;color:var(--text-primary);font-size:var(--font-size-sm)}#unskip-plant-modal .plant-info,#uncomplete-plant-modal .plant-info{max-width:100%;overflow:hidden;word-wrap:break-word}#unskip-plant-modal .modal-content,#uncomplete-plant-modal .modal-content{max-width:500px;width:90vw;box-sizing:border-box}#unskip-plant-modal .plant-info,#uncomplete-plant-modal .plant-info{display:flex!important;flex-direction:column!important;gap:8px!important;width:100%!important}#unskip-plant-modal .info-row,#uncomplete-plant-modal .info-row,.modal .plant-info .info-row{display:flex!important;flex-direction:column!important;align-items:flex-start!important;padding:5px 0!important;white-space:normal!important;word-wrap:break-word!important;width:100%!important}#unskip-plant-modal .info-label,#uncomplete-plant-modal .info-label,.modal .plant-info .info-label{color:var(--text-secondary)!important;font-size:var(--font-size-sm)!important;flex-shrink:0;min-width:100px;max-width:40%}#unskip-plant-modal .info-value,#uncomplete-plant-modal .info-value,.modal .plant-info .info-value{color:var(--text-primary)!important;font-size:var(--font-size-sm)!important;flex:1;word-wrap:break-word!important;word-break:break-word!important;white-space:normal!important;text-align:right;max-width:60%;overflow-wrap:break-word}.modal .info-row{display:flex;justify-content:space-between;align-items:flex-start;padding:5px 0;gap:10px}.modal .info-label{color:var(--text-secondary);font-size:var(--font-size-sm);flex-shrink:0;min-width:100px}.modal .info-value{color:var(--text-primary);font-size:var(--font-size-sm);flex:1;word-wrap:break-word;word-break:break-word;white-space:normal;text-align:right}.deletion-stats .info-row{display:flex;justify-content:space-between;align-items:center;padding:5px 0}.deletion-stats .info-label{color:var(--text-secondary);font-size:var(--font-size-sm)}.deletion-stats .info-value{color:var(--text-primary);font-size:var(--font-size-sm)}.deletion-stats .loading-spinner{width:16px;height:16px;border:2px solid #f3f4f6;border-top:2px solid var(--primary-color);border-radius:50%;animation:spin 1s linear infinite}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.warning-notice{background:#fef2f2;border:1px solid #fecaca;border-radius:8px;padding:15px}.backup-notice{background:#ecfdf5;border:1px solid #a7f3d0;border-radius:8px;padding:15px}.checkbox-label{display:flex;align-items:center;cursor:pointer;user-select:none}.checkbox-label input[type=checkbox]{margin-right:10px;transform:scale(1.2);cursor:pointer}.modal-content h3{margin:0 0 15px;color:var(--text-primary);display:flex;align-items:center;gap:10px}.modal-content h4{margin:0 0 10px;color:var(--text-primary);font-size:var(--font-size-base);font-weight:600}.modal-footer{display:flex;gap:10px;justify-content:flex-end;margin-top:20px}.modal-footer .btn{min-width:120px}.settings-tabs{display:flex;gap:2px;border-bottom:2px solid var(--border-color);margin-bottom:20px}.tab-button{padding:12px 20px;border:none;background:var(--bg-secondary);color:var(--text-secondary);cursor:pointer;font-weight:500;transition:all .2s ease;border-top-left-radius:6px;border-top-right-radius:6px;position:relative}.tab-button:hover{background:var(--bg-primary);color:var(--text-primary)}.tab-button.active{background:var(--bg-primary);color:var(--primary-color);font-weight:600}.tab-button.active:after{content:"";position:absolute;bottom:-2px;left:0;right:0;height:2px;background:var(--primary-color)}.tab-content{display:none}.tab-content.active{display:block}.section-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}.section-header h4{margin:0;font-size:1.1rem;font-weight:600;color:var(--text-primary)}.custom-types-list{min-height:200px;max-height:400px;overflow-y:auto;border:1px solid var(--border-color);border-radius:8px;padding:16px;background:var(--bg-secondary)}.custom-type-item{display:flex;align-items:center;justify-content:space-between;padding:16px;border:1px solid var(--border-color);border-radius:8px;background:var(--bg-primary);margin-bottom:12px;transition:all .2s ease}.custom-type-item:hover{border-color:var(--primary-color);box-shadow:0 2px 4px rgba(0,0,0,.1)}.custom-type-info{display:flex;align-items:center;gap:16px;flex:1}.type-color-preview{width:24px;height:24px;border-radius:50%;border:2px solid var(--border-color);flex-shrink:0}.type-details{flex:1}.type-name{font-weight:600;color:var(--text-primary);margin-bottom:4px}.type-meta{display:flex;gap:16px;font-size:.875rem;color:var(--text-secondary)}.type-badge{padding:2px 8px;border-radius:4px;font-size:.75rem;font-weight:500;text-transform:uppercase;letter-spacing:.05em}.type-badge.point{background:#dbeafe;color:#1e40af}.type-badge.region{background:#dcfce7;color:#166534}.type-actions{display:flex;gap:8px}.type-action-btn{padding:6px 12px;border:none;border-radius:4px;font-size:.875rem;cursor:pointer;transition:all .2s ease}.type-action-btn.edit{background:#f3f4f6;color:var(--text-primary)}.type-action-btn.edit:hover{background:#e5e7eb}.type-action-btn.delete{background:#fef2f2;color:#dc2626}.type-action-btn.delete:hover{background:#fecaca}.type-form-section{margin-top:20px;padding:20px;border:1px solid var(--border-color);border-radius:8px;background:var(--bg-secondary)}.type-form-section h4{margin:0 0 20px;color:var(--text-primary);font-size:1.1rem;font-weight:600}.form-row{display:grid;grid-template-columns:1fr 1fr;gap:16px;margin-bottom:16px}.form-group{display:flex;flex-direction:column;gap:8px}.form-group label{font-weight:500;color:var(--text-primary);font-size:.875rem}.form-group input,.form-group textarea,.form-group select{padding:8px 12px;border:1px solid var(--border-color);border-radius:6px;font-size:.875rem;transition:border-color .2s,box-shadow .2s}.form-group input:focus,.form-group textarea:focus,.form-group select:focus{outline:none;border-color:var(--primary-color);box-shadow:0 0 0 3px rgba(37,99,235,.1)}.form-group textarea{resize:vertical;min-height:80px}.form-group small{color:var(--text-secondary);font-size:.75rem}.color-input-container{display:flex;gap:8px;align-items:center}.color-input-container input[type=color]{width:40px;height:40px;border:1px solid var(--border-color);border-radius:6px;cursor:pointer;padding:0}.color-input-container input[type=text]{flex:1;font-family:monospace}.form-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:20px}.mode-display{background:var(--bg-secondary);border:1px solid var(--border-color);border-radius:8px;padding:16px;margin-bottom:20px}.mode-info{display:flex;align-items:center;gap:8px;margin-bottom:8px}.mode-info:last-child{margin-bottom:0}.mode-label{font-weight:500;color:var(--text-secondary);min-width:120px}.mode-value{font-weight:600;color:var(--text-primary)}.mode-actions{display:flex;flex-direction:column;gap:16px}.custom-type-selector{display:flex;align-items:center;gap:12px;flex-wrap:wrap}.custom-type-selector label{font-weight:500;color:var(--text-primary);white-space:nowrap}.custom-type-selector select{flex:1;min-width:200px;padding:8px 12px;border:1px solid var(--border-color);border-radius:6px;font-size:.875rem}.usage-instructions{border-top:1px solid var(--border-color);padding-top:20px}.usage-instructions h4{margin:0 0 16px;color:var(--text-primary);font-size:1.1rem;font-weight:600}.instruction-group{margin-bottom:20px}.instruction-group h5{margin:0 0 8px;color:var(--text-primary);font-size:.95rem;font-weight:600}.instruction-group ul{margin:0;padding-left:20px;color:var(--text-secondary)}.instruction-group li{margin-bottom:4px}.section-group{padding:20px;border:1px solid var(--border-color);border-radius:8px;background:var(--bg-secondary)}.section-group h4{margin:0 0 12px;color:var(--text-primary);font-size:1.1rem;font-weight:600}.section-group p{margin:0 0 16px;color:var(--text-secondary);font-size:.875rem}.export-stats{display:flex;gap:24px;margin-bottom:16px;padding:12px 16px;background:var(--bg-primary);border:1px solid var(--border-color);border-radius:6px}.stat-item{display:flex;align-items:center;gap:8px}.stat-label{font-weight:500;color:var(--text-secondary);font-size:.875rem}.stat-value{font-weight:600;color:var(--text-primary);font-size:.875rem}.import-area{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:16px}.file-info{display:flex;align-items:center;gap:12px;padding:8px 12px;background:var(--bg-primary);border:1px solid var(--border-color);border-radius:6px}.file-name{font-weight:500;color:var(--text-primary);font-size:.875rem}.import-results{padding:16px;background:var(--bg-primary);border:1px solid var(--border-color);border-radius:6px;margin-top:16px}.import-results h5{margin:0 0 12px;color:var(--text-primary);font-size:.95rem;font-weight:600}.placeholder-message{display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;padding:40px 20px;color:var(--text-secondary)}.placeholder-message h4{margin:0 0 8px;color:var(--text-primary);font-size:1.1rem;font-weight:600}.placeholder-message p{margin:0;font-size:.875rem}.sift-calibration-dialog{position:fixed;top:0;left:0;right:0;bottom:0;z-index:9999;display:flex;align-items:center;justify-content:center;animation:fadeIn .3s ease-out}.sift-calibration-dialog .dialog-overlay{position:absolute;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.6);backdrop-filter:blur(2px)}.sift-calibration-dialog .dialog-content{position:relative;background:var(--bg-primary);border-radius:12px;padding:24px;max-width:500px;width:90%;max-height:80vh;overflow-y:auto;box-shadow:0 20px 25px -5px rgba(0,0,0,.1),0 10px 10px -5px rgba(0,0,0,.04);animation:slideIn .3s ease-out}.sift-calibration-dialog h3{margin:0 0 16px;color:var(--text-primary);font-size:1.25rem;font-weight:600;text-align:center}.sift-calibration-dialog .quality-info{background:var(--bg-secondary);border:1px solid var(--border-color);border-radius:8px;padding:16px;margin-bottom:20px}.sift-calibration-dialog .quality-info p{margin:0 0 8px;display:flex;justify-content:space-between;align-items:center;font-size:.875rem;color:var(--text-primary)}.sift-calibration-dialog .quality-info p:last-child{margin-bottom:0}.sift-calibration-dialog .quality-info strong{color:var(--text-primary);font-weight:600}.sift-calibration-dialog .preview-controls{background:var(--bg-tertiary);border:1px solid var(--border-color);border-radius:8px;padding:16px;margin-bottom:20px}.sift-calibration-dialog .preview-controls label{display:block;margin-bottom:8px;font-size:.875rem;color:var(--text-primary);cursor:pointer;user-select:none}.sift-calibration-dialog .preview-controls label:last-child{margin-bottom:0}.sift-calibration-dialog .preview-controls input[type=checkbox]{margin-right:8px;accent-color:var(--primary-color)}.sift-calibration-dialog .dialog-actions{display:flex;gap:12px;margin-bottom:12px}.sift-calibration-dialog .btn-accept{flex:1;padding:12px 16px;background:var(--success-color);color:#fff;border:none;border-radius:6px;font-size:.875rem;font-weight:500;cursor:pointer;transition:background-color .2s ease}.sift-calibration-dialog .btn-accept:hover{background:var(--success-hover)}.sift-calibration-dialog .btn-reject{flex:1;padding:12px 16px;background:var(--danger-color);color:#fff;border:none;border-radius:6px;font-size:.875rem;font-weight:500;cursor:pointer;transition:background-color .2s ease}.sift-calibration-dialog .btn-reject:hover{background:var(--danger-hover)}.sift-calibration-dialog .dialog-help{text-align:center;color:var(--text-secondary);font-size:.75rem;margin-top:8px}.sift-calibration-dialog .dialog-help small{font-size:inherit}#sift-match-btn{background:var(--primary-color);color:#fff;border:none;position:relative;overflow:hidden}#sift-match-btn:hover{background:var(--primary-hover)}#sift-match-btn:disabled{background:var(--text-tertiary);cursor:not-allowed}#sift-match-btn:before{content:"";position:absolute;top:0;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,.2),transparent);transition:left .5s ease}#sift-match-btn:hover:before{left:100%}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes slideIn{0%{transform:translateY(-20px);opacity:0}to{transform:translateY(0);opacity:1}}@media (max-width: 768px){.sift-calibration-dialog .dialog-content{padding:16px;max-width:95%}.sift-calibration-dialog .dialog-actions{flex-direction:column}.sift-calibration-dialog .btn-accept,.sift-calibration-dialog .btn-reject{width:100%}}.fullscreen-loading{position:fixed;top:0;left:0;width:100vw;height:100vh;background:linear-gradient(135deg,#667eea,#764ba2);display:flex;flex-direction:column;align-items:center;justify-content:center;z-index:10000;color:#fff;font-family:Inter,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,sans-serif}.loading-title{font-size:2.5rem;font-weight:700;margin-bottom:1rem;text-align:center;color:#fff;text-shadow:0 2px 4px rgba(0,0,0,.3)}.loading-subtitle{font-size:1.25rem;font-weight:500;margin-bottom:.5rem;text-align:center;color:rgba(255,255,255,.9)}.loading-details{font-size:1rem;font-weight:400;margin-bottom:2rem;text-align:center;color:rgba(255,255,255,.8)}.loading-progress{width:100%;max-width:400px;display:flex;flex-direction:column;align-items:center;gap:1rem}.fullscreen-loading .progress-bar{width:100%;height:8px;background-color:rgba(255,255,255,.2);border-radius:4px;overflow:hidden;box-shadow:0 2px 4px rgba(0,0,0,.2)}.fullscreen-loading .progress-fill{height:100%;background:linear-gradient(90deg,#10b981,#059669,#047857);border-radius:4px;transition:width .3s ease;width:0%;box-shadow:0 0 10px rgba(16,185,129,.5)}.fullscreen-loading #progress-text{font-size:1.125rem;font-weight:600;color:#fff;text-shadow:0 1px 2px rgba(0,0,0,.3);margin:0}.fullscreen-loading .loading-spinner{width:60px;height:60px;border:6px solid rgba(255,255,255,.3);border-top:6px solid white;border-radius:50%;animation:spin 1s linear infinite;margin-bottom:2rem;box-shadow:0 4px 8px rgba(0,0,0,.2)}@media (max-width: 768px){.loading-title{font-size:2rem}.loading-subtitle{font-size:1.125rem}.loading-details{font-size:.875rem;margin-bottom:1.5rem}.loading-progress{max-width:300px;padding:0 1rem}}.auto-direction-controls{display:flex;align-items:center;gap:var(--spacing-sm);margin-bottom:var(--spacing-sm)}.mode-selector{padding:6px 12px;border:1px solid var(--border-color);border-radius:var(--border-radius);background:var(--bg-surface);color:var(--text-primary);font-size:var(--font-size-xs);font-family:var(--font-family);min-width:120px;transition:all .2s ease;outline:none}.mode-selector:hover{border-color:var(--primary-color);background:var(--bg-hover)}.mode-selector:focus{border-color:var(--primary-color);box-shadow:0 0 0 2px rgba(59,130,246,.2);background:var(--bg-surface)}.progress-indicator{padding:var(--spacing-sm);background:var(--bg-surface);border:1px solid var(--border-color);border-radius:var(--border-radius);margin-top:var(--spacing-xs)}.progress-text{font-size:var(--font-size-xs);color:var(--text-secondary);margin-bottom:var(--spacing-xs);display:flex;justify-content:space-between;align-items:center}.progress-bar{width:100%;height:6px;background:var(--bg-muted);border-radius:3px;overflow:hidden;position:relative}.progress-fill{height:100%;background:linear-gradient(90deg,var(--primary-color),var(--accent-color));border-radius:3px;transition:width .3s ease;width:0%}#progress-mode-info{font-weight:500;color:var(--text-primary)}.cross-sectional-indicator{background:linear-gradient(135deg,#8b5cf6,#06b6d4)}.longitudinal-indicator{background:linear-gradient(135deg,#10b981,#3b82f6)}.mode-switching{animation:modeSwitchPulse .6s ease-in-out}@keyframes modeSwitchPulse{0%,to{transform:scale(1);opacity:1}50%{transform:scale(1.05);opacity:.8}}#auto-direction-btn.cross-sectional-mode{background:linear-gradient(135deg,#8b5cf6,#06b6d4);border-color:#8b5cf6}#auto-direction-btn.cross-sectional-mode:hover{background:linear-gradient(135deg,#7c3aed,#0891b2);transform:translateY(-1px);box-shadow:0 8px 25px rgba(139,92,246,.3)}#auto-direction-btn.longitudinal-mode{background:linear-gradient(135deg,#10b981,#3b82f6);border-color:#10b981}#auto-direction-btn.longitudinal-mode:hover{background:linear-gradient(135deg,#059669,#2563eb);transform:translateY(-1px);box-shadow:0 8px 25px rgba(16,185,129,.3)}.progress-status{display:flex;align-items:center;gap:var(--spacing-xs);font-size:var(--font-size-xs);color:var(--text-secondary)}.status-dot{width:6px;height:6px;border-radius:50%;background:var(--success-color);animation:statusPulse 2s infinite}@keyframes statusPulse{0%,to{opacity:1;transform:scale(1)}50%{opacity:.6;transform:scale(1.2)}}@media (max-width: 768px){.auto-direction-controls{flex-direction:column;align-items:stretch;gap:var(--spacing-xs)}.mode-selector{min-width:unset;width:100%}}\n/*$vite$:1*/',document.head.appendChild(t);class n{constructor(){this.baseUrl="http://localhost:3003/api",this.datasetPath="/Users/tshoiasc/Brassica napus dataset/dataset",this.isInitialized=!1,this.maxRetries=3,this.retryDelay=1e3,this.connectionTimeout=5e3,this.lastConnectionCheck=0,this.connectionCheckInterval=3e4}async initialize(){return this.withRetry(async()=>{const t=new AbortController,e=setTimeout(()=>t.abort(),this.connectionTimeout);try{const n=await fetch(`${this.baseUrl}/health`,{signal:t.signal,headers:{"Cache-Control":"no-cache"}});if(clearTimeout(e),!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);if((await n.json()).success)return this.isInitialized=!0,this.lastConnectionCheck=Date.now(),console.log("HttpFileSystemManager 初始化成功"),!0;throw new Error("Backend server responded but reported failure")}catch(n){if(clearTimeout(e),"AbortError"===n.name)throw new Error(`连接超时 (${this.connectionTimeout}ms)`);throw n}},"初始化管理器")}static isSupported(){return!0}async withRetry(t,e="操作",n=this.maxRetries){let o;for(let a=1;a<=n;a++)try{return a>1&&(console.log(`${e} 重试第 ${a-1} 次...`),await this.delay(this.retryDelay*a)),await t()}catch(i){if(o=i,this.isConnectionError(i)&&a<n){console.warn(`${e} 失败 (尝试 ${a}/${n}):`,i.message);continue}throw console.error(`${e} 最终失败:`,i),i}throw o}isConnectionError(t){return t.message.includes("Failed to fetch")||t.message.includes("ERR_CONNECTION_REFUSED")||t.message.includes("网络错误")||t.message.includes("连接超时")||"TypeError"===t.name&&t.message.includes("fetch")}delay(t){return new Promise(e=>setTimeout(e,t))}async checkConnection(){const t=Date.now();if(t-this.lastConnectionCheck<this.connectionCheckInterval)return this.isInitialized;try{const e=new AbortController;setTimeout(()=>e.abort(),2e3);const n=(await fetch(`${this.baseUrl}/health`,{signal:e.signal,headers:{"Cache-Control":"no-cache"}})).ok;return this.isInitialized=n,this.lastConnectionCheck=t,n}catch(e){return this.isInitialized=!1,this.lastConnectionCheck=t,!1}}async getDatasetInfo(){return await this.ensureConnection(),this.withRetry(async()=>{const t=await fetch(`${this.baseUrl}/dataset-info`);if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const e=await t.json();if(e.success)return e.data;throw new Error(e.error||"获取数据集信息失败")},"获取数据集信息")}async ensureConnection(){if(!(await this.checkConnection()))throw new Error("后端服务连接不可用，请确保服务器正在运行在 http://localhost:3003")}async traversePlantDirectories(){return await this.ensureConnection(),this.withRetry(async()=>{const t=await fetch(`${this.baseUrl}/plant-directories`);if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const e=await t.json();if(e.success)return console.log(`找到 ${e.data.length} 个有效植物文件夹`),e.data;throw new Error(e.error||"遍历植物文件夹失败")},"遍历植物文件夹")}async readPlantImages(t){if(!t)throw new Error("植物ID不能为空");return await this.ensureConnection(),this.withRetry(async()=>{const e=await fetch(`${this.baseUrl}/plant-images/${encodeURIComponent(t)}`);if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const n=await e.json();if(n.success){const e=n.data,o=Object.values(e).reduce((t,e)=>t+e.length,0);return console.log(`植物 ${t} 总共 ${o} 张图像`),e}throw new Error(n.error||"读取植物图像失败")},`读取植物 ${t} 图像`)}getImageUrl(t,e,n){return`${this.baseUrl}/image/${t}/${e}/${n}`}async createImageURL(t){try{console.log("创建图像URL，imageData:",t);const e=t.id.split("_");if(console.log("图像ID分割结果:",e),e.length>=3){const t=e[0],n=e[1],o=e.slice(2).join("_"),i=this.getImageUrl(t,n,o);return console.log("生成的图像URL:",i),i}throw new Error(`Invalid image data format. ID: ${t.id}, expected format: plantId_viewAngle_imageName`)}catch(e){throw console.error(`创建图像URL失败 ${t.name}:`,e),console.error("imageData:",t),e}}async saveAnnotationFile(t,e){if(!t)throw new Error("图像ID不能为空");if(!e)throw new Error("标注数据不能为空");return await this.ensureConnection(),this.withRetry(async()=>{const n=await fetch(`${this.baseUrl}/annotation/${encodeURIComponent(t)}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({annotationData:e})});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const o=await n.json();if(o.success)return console.log(`保存标注文件: ${t}`),!0;throw new Error(o.error||"保存标注文件失败")},`保存标注文件 ${t}`)}async loadAnnotationFile(t){try{const e=await fetch(`${this.baseUrl}/annotation/${t}`),n=await e.json();if(n.success)return n.data&&console.log(`[标注] 成功读取 ${t}, 包含 ${n.data.annotations?.length||0} 个标注点`),n.data;throw new Error(n.error||"读取标注文件失败")}catch(e){return console.error(`[标注] 读取标注文件失败 (${t}):`,e),null}}async getAllAnnotationFiles(){try{const t=await fetch(`${this.baseUrl}/annotations`),e=await t.json();if(e.success)return console.log(`[标注] 扫描完成，找到 ${e.data.length} 个标注文件`),e.data;throw new Error(e.error||"获取标注文件列表失败")}catch(t){return console.error("[标注] 获取标注文件列表失败:",t),[]}}async deleteAnnotationFile(t){try{const e=await fetch(`${this.baseUrl}/annotation/${t}`,{method:"DELETE"}),n=await e.json();if(n.success)return console.log(`删除标注文件: ${t}`),!0;throw new Error(n.error||"删除标注文件失败")}catch(e){return console.error(`删除标注文件失败 (${t}):`,e),!1}}async getDirectoryStats(t=null){try{const e=t?`${this.baseUrl}/directory-stats?dirPath=${encodeURIComponent(t)}`:`${this.baseUrl}/directory-stats`,n=await fetch(e),o=await n.json();if(o.success)return o.data;throw new Error(o.error||"获取目录统计失败")}catch(e){throw console.error("获取目录统计失败:",e),e}}isImageFile(t){const e=t.toLowerCase().substring(t.lastIndexOf("."));return[".png",".jpg",".jpeg",".bmp",".tiff",".webp"].includes(e)}parseImageDateTime(t){const e=t.match(/BR\d+-\d+-(\d{4}-\d{2}-\d{2})_(\d{2})_VIS_sv_\d+/);if(e){const t=e[1],n=e[2];return new Date(`${t}T${n}:00:00`)}return console.warn(`无法解析文件名时间信息: ${t}`),new Date(0)}formatImageTime(t){const e=t.match(/BR\d+-\d+-(\d{4}-\d{2}-\d{2})_(\d{2})_VIS_sv_\d+/);if(e){const t=e[1],n=e[2],o=new Date(`${t}T${n}:00:00`);return`${o.getFullYear()}/${o.getMonth()+1}/${o.getDate()}`}return t}async getAllSkipInfo(){try{const t=await fetch(`${this.baseUrl}/skip-info`),e=await t.json();if(e.success)return e.data;throw new Error(e.error||"获取跳过信息失败")}catch(t){return console.error("获取跳过信息失败:",t),{}}}async getSkipInfo(t){try{const e=await fetch(`${this.baseUrl}/skip-info/${t}`),n=await e.json();if(n.success)return n.data;throw new Error(n.error||"获取跳过信息失败")}catch(e){return console.error(`获取植物 ${t} 跳过信息失败:`,e),null}}async saveSkipInfo(t,e){try{const n=await fetch(`${this.baseUrl}/skip-info/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({skipData:e})}),o=await n.json();if(o.success)return console.log(`保存跳过信息: ${t}`),!0;throw new Error(o.error||"保存跳过信息失败")}catch(n){throw console.error(`保存植物 ${t} 跳过信息失败:`,n),n}}async deleteSkipInfo(t){try{const e=await fetch(`${this.baseUrl}/skip-info/${t}`,{method:"DELETE"}),n=await e.json();if(n.success)return console.log(`删除跳过信息: ${t}`),!0;throw new Error(n.error||"删除跳过信息失败")}catch(e){return console.error(`删除植物 ${t} 跳过信息失败:`,e),!1}}async getPlantStatus(t){try{const e=await fetch(`${this.baseUrl}/plant-status/${t}`),n=await e.json();if(n.success)return console.log(`[植物状态] 从API获取植物 ${t} 状态: ${n.data?.status||"null"}`),n.data;if(404===e.status||n.message?.includes("未找到"))return console.log(`[植物状态] 植物 ${t} 无状态信息`),null;throw new Error(n.error||"获取植物状态失败")}catch(e){return console.error(`获取植物 ${t} 状态失败:`,e),null}}async savePlantStatus(t,e){try{const n=await fetch(`${this.baseUrl}/plant-status/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({status:e,lastModified:(new Date).toISOString()})}),o=await n.json();if(o.success)return console.log(`[植物状态] 保存植物 ${t} 状态: ${e}`),!0;throw new Error(o.error||"保存植物状态失败")}catch(n){throw console.error(`保存植物 ${t} 状态失败:`,n),n}}async deletePlantStatus(t){try{const e=await fetch(`${this.baseUrl}/plant-status/${t}`,{method:"DELETE"}),n=await e.json();if(n.success)return console.log(`[植物状态] 删除植物 ${t} 状态`),!0;throw new Error(n.error||"删除植物状态失败")}catch(e){return console.error(`删除植物 ${t} 状态失败:`,e),!1}}cleanup(){console.log("HttpFileSystemManager 清理完成")}getAnnotationsDirectory(){return this.isInitialized?{exists:!0}:null}async ensureAnnotationsDirectory(){return{exists:!0}}}class o{constructor(){this.apiBaseUrl="http://localhost:3002/api",this.annotations=new Map,this.imageAnnotations=new Map,this.isInitialized=!1,this.fileSystemManager=null,this.useFileSystem=!1}setFileSystemManager(t){if(this.fileSystemManager=t,this.useFileSystem=!!t,console.log("[标注] 文件系统存储已启用"),t){const e=t.getAnnotationsDirectory();console.log("[标注] setFileSystemManager: annotations句柄"+(e?"存在":"不存在"))}}async initialize(){try{if(this.useFileSystem&&this.fileSystemManager)return await this.scanAnnotationFiles(),console.log("AnnotationStorageManager 初始化完成 (文件系统模式)"),void(this.isInitialized=!0);try{await this.loadAnnotationsFromServer(),await this.loadImageAnnotationsFromServer(),console.log("AnnotationStorageManager 初始化完成 (服务器模式)")}catch(t){console.warn("服务器模式初始化失败，使用localStorage模式:",t.message),this.loadFromLocalStorage(),this.loadImageAnnotationsFromLocalStorage(),console.log("AnnotationStorageManager 初始化完成 (localStorage模式)")}this.isInitialized=!0}catch(e){console.error("初始化标注存储管理器失败:",e),this.isInitialized=!0}}async loadAnnotationsFromServer(){try{const t=await fetch(`${this.apiBaseUrl}/load-annotations`),e=await t.json();if(e.success&&e.data){for(const[t,n]of Object.entries(e.data.annotations||{}))this.annotations.set(t,n);return console.log(`从服务器加载了 ${this.annotations.size} 个植物的标注数据`),e.data}throw new Error(e.error||"加载标注数据失败")}catch(t){return console.warn("从服务器加载标注数据失败，尝试从localStorage恢复:",t.message),this.loadFromLocalStorage(),{annotations:{}}}}async saveAnnotationsToServer(){try{const t={saveTime:(new Date).toISOString(),totalPlants:this.annotations.size,annotations:{}};for(const[o,i]of this.annotations)t.annotations[o]=i;const e=await fetch(`${this.apiBaseUrl}/save-annotations`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),n=await e.json();if(n.success)return console.log(`成功保存 ${this.annotations.size} 个植物的标注数据到服务器`),this.saveToLocalStorage(),!0;throw new Error(n.error||"服务器保存失败")}catch(t){return console.error("保存标注数据到服务器失败:",t),this.saveToLocalStorage(),!1}}saveToLocalStorage(){try{const t={};for(const[e,n]of this.annotations)t[e]=n;localStorage.setItem("plant_annotations_backup",JSON.stringify({saveTime:(new Date).toISOString(),annotations:t})),console.log("标注数据已备份到localStorage")}catch(t){console.error("备份到localStorage失败:",t)}}loadFromLocalStorage(){try{const t=localStorage.getItem("plant_annotations_backup");if(t){const e=JSON.parse(t);for(const[t,n]of Object.entries(e.annotations||{}))this.annotations.has(t)||this.annotations.set(t,n);console.log("从localStorage恢复了备份数据")}}catch(t){console.error("从localStorage恢复数据失败:",t)}}async savePlantAnnotations(t,e,n={}){const o={plantId:t,annotations:e,selectedImage:n.selectedImage?.name||null,selectedImagePath:n.selectedImage?.id||null,viewAngle:n.selectedViewAngle||null,status:e.length>0?"completed":"in-progress",lastModified:(new Date).toISOString(),imageDateTime:n.selectedImage?.dateTime||null,keypointCount:e.length,timeSeriesData:n.timeSeriesData||null,isTimeSeriesEnabled:!!n.timeSeriesData,plantViewAngles:n.plantViewAngles||[],selectedViewAngleHistory:n.selectedViewAngleHistory||{},timeSeriesMetadata:n.timeSeriesMetadata||{}};return this.annotations.set(t,o),await this.saveAnnotationsToServer(),o}getPlantAnnotations(t){const e=this.annotations.get(t);return e?e.annotations:[]}getPlantStatus(t){const e=this.annotations.get(t);return e?e.annotations.length>0?"completed":"in-progress":"pending"}getAnnotatedPlantIds(){return Array.from(this.annotations.keys())}async saveSkipInfo(t,e){try{let i=this.annotations.get(t);if(i||(i={plantId:t,annotations:[],lastModified:(new Date).toISOString(),createdAt:(new Date).toISOString(),selectedViewAngle:null,selectedImage:null,plantViewAngles:[],selectedViewAngleHistory:{},timeSeriesMetadata:{}}),i.status=e.status,i.skipReason=e.skipReason,i.skipDate=e.skipDate,i.lastModified=e.lastModified,this.annotations.set(t,i),this.useFileSystem&&this.fileSystemManager.saveSkipInfo)try{await this.fileSystemManager.saveSkipInfo(t,i),console.log(`植株 ${t} 跳过信息已保存到后端`)}catch(n){console.warn("后端保存失败，使用localStorage备份:",n),this.saveToLocalStorage(),console.log(`植株 ${t} 跳过信息已备份到localStorage`)}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const e=`${t}_skip_info.json`,n=this.fileSystemManager.getAnnotationsDirectory(),o=await n.getFileHandle(e,{create:!0}),a=await o.createWritable();await a.write(JSON.stringify(i,null,2)),await a.close(),console.log(`植株 ${t} 跳过信息已保存到文件系统: ${e}`)}catch(o){console.warn("文件系统保存失败，使用localStorage备份:",o),this.saveToLocalStorage(),console.log(`植株 ${t} 跳过信息已备份到localStorage`)}else this.saveToLocalStorage(),console.log(`植株 ${t} 跳过信息已保存到localStorage`)}catch(i){throw console.error(`保存植株 ${t} 跳过信息失败:`,i),i}}async removeSkipInfo(t){try{const i=this.annotations.get(t);if(i&&(delete i.status,delete i.skipReason,delete i.skipDate,i.lastModified=(new Date).toISOString(),i.annotations&&0!==i.annotations.length||this.annotations.delete(t)),this.useFileSystem&&this.fileSystemManager.deleteSkipInfo)try{await this.fileSystemManager.deleteSkipInfo(t),console.log(`植株 ${t} 跳过信息已从后端移除`)}catch(e){console.warn("后端移除失败，使用localStorage清理:",e),this.saveToLocalStorage(),console.log(`植株 ${t} 跳过信息已从localStorage清理`)}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const e=`${t}_skip_info.json`,o=this.fileSystemManager.getAnnotationsDirectory();try{await o.removeEntry(e),console.log(`植株 ${t} 跳过信息文件已删除: ${e}`)}catch(n){if("NotFoundError"!==n.name)throw n;console.log(`植株 ${t} 跳过信息文件不存在，无需删除`)}}catch(o){console.warn("文件系统删除失败，使用localStorage清理:",o),this.saveToLocalStorage(),console.log(`植株 ${t} 跳过信息已从localStorage清理`)}else this.saveToLocalStorage(),console.log(`植株 ${t} 跳过信息已从localStorage清理`)}catch(i){throw console.error(`移除植株 ${t} 跳过信息失败:`,i),i}}async savePlantStatus(t,e){try{let i=this.annotations.get(t);if(i||(i={plantId:t,annotations:[],lastModified:(new Date).toISOString(),createdAt:(new Date).toISOString(),selectedViewAngle:null,selectedImage:null,plantViewAngles:[],selectedViewAngleHistory:{},timeSeriesMetadata:{}}),i.status=e,i.lastModified=(new Date).toISOString(),this.annotations.set(t,i),this.useFileSystem&&this.fileSystemManager.savePlantStatus)try{await this.fileSystemManager.savePlantStatus(t,e),console.log(`植株 ${t} 状态 ${e} 已保存到专用API`)}catch(n){console.warn("植物状态API保存失败，使用localStorage备份:",n),this.saveToLocalStorage(),console.log(`植株 ${t} 状态已备份到localStorage`)}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const n=`${t}_status.json`,o=this.fileSystemManager.getAnnotationsDirectory(),i=await o.getFileHandle(n,{create:!0}),a=await i.createWritable(),s={plantId:t,status:e,lastModified:(new Date).toISOString(),timestamp:(new Date).toISOString()};await a.write(JSON.stringify(s,null,2)),await a.close(),console.log(`植株 ${t} 状态 ${e} 已保存到文件系统: ${n}`)}catch(o){console.warn("文件系统保存状态失败，使用localStorage备份:",o),this.saveToLocalStorage(),console.log(`植株 ${t} 状态已备份到localStorage`)}else this.saveToLocalStorage(),console.log(`植株 ${t} 状态 ${e} 已保存到localStorage`);console.log(`[植物状态] ${t}: ${e} (独立保存完成)`)}catch(i){throw console.error(`保存植株 ${t} 状态失败:`,i),i}}async loadPlantStatus(t){try{console.log(`[状态加载] 开始为植物 ${t} 加载状态...`),console.log(`[状态加载] useFileSystem: ${this.useFileSystem}, fileSystemManager存在: ${!!this.fileSystemManager}`);const a=this.annotations.get(t);if(a&&a.status)return console.log(`[植物状态] ${t}: 从内存加载状态 ${a.status}`),a.status;if(this.useFileSystem&&this.fileSystemManager.getPlantStatus)try{console.log(`[状态加载] 尝试从专用API加载植物 ${t} 状态...`);const e=await this.fileSystemManager.getPlantStatus(t);if(console.log("[状态加载] 专用API响应:",e),e&&e.status)return console.log(`[植物状态] ${t}: 从专用API加载状态 ${e.status}`),e.status}catch(e){console.warn(`从专用API加载植株 ${t} 状态失败:`,e)}else console.log(`[状态加载] 跳过专用API: useFileSystem=${this.useFileSystem}, getPlantStatus存在=${!!this.fileSystemManager?.getPlantStatus}`);if(this.useFileSystem&&this.fileSystemManager.getSkipInfo)try{const e=await this.fileSystemManager.getSkipInfo(t);if(e&&e.status)return console.log(`[植物状态] ${t}: 从skip-info API加载状态 ${e.status} (向后兼容)`),e.status}catch(n){console.warn(`从skip-info API加载植株 ${t} 状态失败:`,n)}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const e=`${t}_status.json`,n=this.fileSystemManager.getAnnotationsDirectory(),o=await n.getFileHandle(e),i=await o.getFile(),a=await i.text(),s=JSON.parse(a);if(s.status)return console.log(`[植物状态] ${t}: 从文件系统加载状态 ${s.status}`),s.status}catch(o){console.log(`[植物状态] ${t}: 无状态文件，使用默认状态`)}try{const e=localStorage.getItem("plantAnnotations");if(e){const n=JSON.parse(e);if(n[t]&&n[t].status)return console.log(`[植物状态] ${t}: 从localStorage加载状态 ${n[t].status}`),n[t].status}}catch(i){console.warn("从localStorage加载状态失败:",i)}return console.log(`[植物状态] ${t}: 未找到持久化状态`),null}catch(a){return console.error(`加载植株 ${t} 状态失败:`,a),null}}hasAnnotations(t){const e=this.annotations.get(t);return e&&e.annotations.length>0}async deletePlantAnnotations(t){this.annotations.delete(t),await this.saveAnnotationsToServer()}getAnnotationStats(t){const e=this.getAnnotatedPlantIds().length,n=Array.from(this.annotations.values()).filter(t=>t.annotations.length>0).length;return{total:t,annotated:e,completed:n,pending:t-e,completionRate:t>0?(n/t*100).toFixed(1):0}}exportAllAnnotations(){const t={exportTime:(new Date).toISOString(),version:"1.0",totalPlants:this.annotations.size,annotations:{}};for(const[e,n]of this.annotations)t.annotations[e]={...n,exportedAt:(new Date).toISOString()};return t}downloadAnnotationsAsJSON(){const t=this.exportAllAnnotations(),e=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),n=URL.createObjectURL(e),o=document.createElement("a");return o.href=n,o.download=`plant_annotations_${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n),t}async exportPureImageAnnotations(){const t={};for(const[e,n]of this.imageAnnotations)n.annotations&&n.annotations.length>0&&(t[e]=n.annotations.map(t=>({id:t.id,x:t.x,y:t.y,timestamp:t.timestamp,direction:t.direction||"right",order:t.order||0})));return console.log(`导出 ${Object.keys(t).length} 张图像的纯净标注数据`),t}async downloadPureImageAnnotationsAsJSON(){const t=await this.exportPureImageAnnotations(),e=this.getPureAnnotationsStats(t),n={exportTime:(new Date).toISOString(),version:"2.0",format:"pure_image_annotations",description:"每张图像对应的标注点数据，不包含内部管理信息",stats:{totalImages:e.totalImages,annotatedImages:e.annotatedImages,totalKeypoints:e.totalKeypoints,completionRate:e.completionRate},annotations:t},o=new Blob([JSON.stringify(n,null,2)],{type:"application/json"}),i=URL.createObjectURL(o),a=document.createElement("a");return a.href=i,a.download=`pure_image_annotations_${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(i),console.log(`导出了 ${e.annotatedImages} 张图像的纯净标注数据，共 ${e.totalKeypoints} 个关键点`),n}getPureAnnotationsStats(t){const e=Object.keys(t).length;let n=0;for(const o of Object.values(t))n+=o.length;return{totalImages:e,annotatedImages:e,totalKeypoints:n,averageKeypointsPerImage:e>0?(n/e).toFixed(2):0,completionRate:"100.0"}}setTimeSeriesManager(t){this.timeSeriesManager=t}async clearAllAnnotations(){this.annotations.clear(),await this.saveAnnotationsToServer()}getSummary(){const t={totalAnnotations:this.annotations.size,completedPlants:0,totalKeypoints:0,lastModified:null};for(const[e,n]of this.annotations)n.annotations.length>0&&(t.completedPlants++,t.totalKeypoints+=n.annotations.length,(!t.lastModified||n.lastModified>t.lastModified)&&(t.lastModified=n.lastModified));return t}restoreTimeSeriesData(t){for(const[n,o]of this.annotations)if(o.isTimeSeriesEnabled&&o.timeSeriesData)try{this.restorePlantTimeSeriesData(t,n,o),console.log(`恢复植株 ${n} 的时间序列数据`)}catch(e){console.error(`恢复植株 ${n} 时间序列数据失败:`,e)}}restorePlantTimeSeriesData(t,e,n){const{timeSeriesData:o,viewAngle:i}=n;if(!o||!i)return;t.timeSequences.has(e)||t.timeSequences.set(e,new Map),t.timeSeriesAnnotations.has(e)||t.timeSeriesAnnotations.set(e,new Map);const a=o.annotationData.map(t=>t.imageId);t.timeSequences.get(e).set(i,a);const s=new Map;for(const c of o.annotationData)s.set(c.imageId,{annotations:c.annotations,timestamp:c.metadata.timestamp,isManualAdjustment:c.metadata.isManualAdjustment,inheritedFrom:c.metadata.inheritedFrom});t.timeSeriesAnnotations.get(e).set(i,s);const r=`${e}_${i}`;t.manualAdjustments.has(r)||t.manualAdjustments.set(r,new Set);const l=t.manualAdjustments.get(r);for(const c of o.annotationData)c.metadata.isManualAdjustment&&l.add(c.imageId)}getPlantViewAngleHistory(t){const e=this.annotations.get(t);return e?.selectedViewAngleHistory||{}}getPlantAnnotationSummary(t){const e=this.annotations.get(t);if(!e)return null;const n={plantId:t,status:e.status,lastModified:e.lastModified,selectedViewAngle:e.viewAngle,availableViewAngles:e.plantViewAngles||[],isTimeSeriesEnabled:e.isTimeSeriesEnabled,currentImageInfo:{imageName:e.selectedImage,imageId:e.selectedImagePath,dateTime:e.imageDateTime}};return e.timeSeriesData&&(n.timeSeriesStats={totalImages:e.timeSeriesData.totalImages,annotatedImages:e.timeSeriesData.annotationData.length,manualAdjustments:e.timeSeriesData.annotationData.filter(t=>t.metadata.isManualAdjustment).length}),n}async saveImageAnnotation(t,e){if(this.useFileSystem)try{if(await this.saveImageAnnotationToFileSystem(t,e))return console.log(`成功保存图像 ${t} 的标注数据到文件系统`),this.imageAnnotations.set(t,e),this.saveImageAnnotationsToLocalStorage(),!0}catch(n){console.error(`保存图像 ${t} 标注数据到文件系统失败:`,n)}else this.imageAnnotations.set(t,e);try{const n=await fetch(`${this.apiBaseUrl}/save-image-annotation`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({imageId:t,annotationData:e})}),o=await n.json();if(o.success)return console.log(`成功保存图像 ${t} 的标注数据到服务器`),this.saveImageAnnotationsToLocalStorage(),!0;throw new Error(o.error||"服务器保存失败")}catch(n){return console.error(`保存图像 ${t} 标注数据到服务器失败:`,n),this.saveImageAnnotationsToLocalStorage(),!1}}async getImageAnnotation(t){if(this.useFileSystem&&this.fileSystemManager)try{const e=await this.fileSystemManager.loadAnnotationFile(t);return e&&console.log(`[标注] 读取成功 ${t}: ${e.annotations?.length||0} 个标注点`),e}catch(e){return console.warn(`从文件系统加载标注失败 (${t}):`,e),null}return this.imageAnnotations.get(t)||null}async loadImageAnnotationsFromServer(){try{const t=await fetch(`${this.apiBaseUrl}/load-image-annotations`),e=await t.json();if(e.success&&e.data){for(const[t,n]of Object.entries(e.data.imageAnnotations||{}))this.imageAnnotations.set(t,n);return console.log(`从服务器加载了 ${this.imageAnnotations.size} 张图像的标注数据`),e.data}return console.log("服务器没有图像标注数据或加载失败"),{imageAnnotations:{}}}catch(t){return console.warn("从服务器加载图像标注数据失败，尝试从localStorage恢复:",t.message),this.loadImageAnnotationsFromLocalStorage(),{imageAnnotations:{}}}}saveImageAnnotationsToLocalStorage(){try{const t={};for(const[e,n]of this.imageAnnotations)t[e]=n;localStorage.setItem("image_annotations_backup",JSON.stringify({saveTime:(new Date).toISOString(),imageAnnotations:t})),console.log("图像标注数据已备份到localStorage")}catch(t){console.error("备份图像标注到localStorage失败:",t)}}loadImageAnnotationsFromLocalStorage(){try{const t=localStorage.getItem("image_annotations_backup");if(t){const e=JSON.parse(t);for(const[t,n]of Object.entries(e.imageAnnotations||{}))this.imageAnnotations.has(t)||this.imageAnnotations.set(t,n);console.log("从localStorage恢复了图像标注备份数据")}}catch(t){console.error("从localStorage恢复图像标注数据失败:",t)}}exportAllImageAnnotations(){const t={exportTime:(new Date).toISOString(),version:"2.0",format:"simple_image_annotations",totalImages:this.imageAnnotations.size,annotations:{}};for(const[e,n]of this.imageAnnotations)n.annotations&&n.annotations.length>0&&(t.annotations[e]=n.annotations);return t}getImageAnnotationStats(){let t=0,e=0;for(const[n,o]of this.imageAnnotations)o.annotations&&o.annotations.length>0&&(t++,e+=o.annotations.length);return{totalImages:this.imageAnnotations.size,annotatedImages:t,totalKeypoints:e,averageKeypointsPerImage:t>0?(e/t).toFixed(2):0}}async loadAnnotationsFromFileSystem(){if(!this.fileSystemManager)throw new Error("文件系统管理器未设置");console.log("开始从文件系统加载标注数据...");try{const e=await this.fileSystemManager.getAllAnnotationFiles();console.log(`发现 ${e.length} 个标注文件:`,e);let n=0;for(const o of e)try{const t=await this.fileSystemManager.loadAnnotationFile(o);t&&(this.imageAnnotations.set(o,t),n++,console.log(`成功加载标注文件: ${o}, 包含 ${t.annotations?.length||0} 个标注点`))}catch(t){console.error(`加载标注文件失败 (${o}):`,t)}console.log(`从文件系统加载了 ${n} 个图像的标注数据，总计 ${this.imageAnnotations.size} 个图像在内存中`)}catch(t){throw console.error("从文件系统加载标注数据失败:",t),t}}async saveImageAnnotationToFileSystem(t,e){if(!this.fileSystemManager)return console.warn("文件系统管理器未设置，跳过文件系统保存"),!1;try{return await this.fileSystemManager.saveAnnotationFile(t,e),!0}catch(n){return console.error(`保存标注到文件系统失败 (${t}):`,n),!1}}async deleteImageAnnotationFromFileSystem(t){if(!this.fileSystemManager)return!1;try{return await this.fileSystemManager.deleteAnnotationFile(t)}catch(e){return console.error(`从文件系统删除标注失败 (${t}):`,e),!1}}async scanAnnotationFiles(){if(this.fileSystemManager)try{const t=await this.fileSystemManager.getAllAnnotationFiles();console.log(`[标注] 扫描完成，发现 ${t.length} 个标注文件`),await this.scanSkipInfoFiles()}catch(t){console.error("[标注] 扫描标注文件失败:",t)}}async scanSkipInfoFiles(){if(this.fileSystemManager)try{if(this.useFileSystem&&this.fileSystemManager.getAllSkipInfo){const t=await this.fileSystemManager.getAllSkipInfo();let e=0;for(const[n,o]of Object.entries(t))this.annotations.set(n,o),e++,console.log(`[标注] 加载跳过信息: ${n} - ${o.skipReason}`);e>0&&console.log(`[标注] 成功加载 ${e} 个植株的跳过信息`)}else{const e=this.fileSystemManager.getAnnotationsDirectory();if(!e)return;let n=0;for await(const[o,i]of e.entries())if("file"===i.kind&&o.endsWith("_skip_info.json"))try{const t=await i.getFile(),e=await t.text(),o=JSON.parse(e);this.annotations.set(o.plantId,o),n++,console.log(`[标注] 加载跳过信息: ${o.plantId} - ${o.skipReason}`)}catch(t){console.warn(`[标注] 加载跳过信息文件失败 (${o}):`,t)}n>0&&console.log(`[标注] 成功加载 ${n} 个植株的跳过信息`)}}catch(t){console.error("[标注] 扫描跳过信息文件失败:",t)}}}class i{constructor(){this.timeSeriesAnnotations=new Map,this.timeSequences=new Map,this.manualAdjustments=new Map}initializePlantTimeSeries(t,e,n){const o=n.sort((t,e)=>t.dateTime-e.dateTime).map(t=>t.id);return this.timeSequences.has(t)||this.timeSequences.set(t,new Map),this.timeSequences.get(t).set(e,o),this.timeSeriesAnnotations.has(t)||this.timeSeriesAnnotations.set(t,new Map),this.timeSeriesAnnotations.get(t).has(e)||this.timeSeriesAnnotations.get(t).set(e,new Map),console.log(`初始化植株 ${t} 视角 ${e} 的时间序列，共 ${o.length} 个时间点`),{plantId:t,viewAngle:e,imageIds:o,totalImages:o.length,firstImageId:o[0],lastImageId:o[o.length-1]}}saveAnnotations(t,e,n,o,i=!1){const a=this.timeSeriesAnnotations.get(t);if(!a)throw new Error(`植株 ${t} 未初始化`);const s=a.get(e);if(!s)throw new Error(`植株 ${t} 视角 ${e} 未初始化`);const r=this.timeSequences.get(t)?.get(e);if(!r)throw new Error(`植株 ${t} 视角 ${e} 时间序列未初始化`);const l=r.indexOf(n);if(-1===l)throw new Error(`图像 ${n} 不在时间序列中`);if(s.set(n,{annotations:o,timestamp:(new Date).toISOString(),isManualAdjustment:i}),i){const o=`${t}_${e}`;this.manualAdjustments.has(o)||this.manualAdjustments.set(o,new Set),this.manualAdjustments.get(o).add(n)}return this.propagateAnnotations(t,e,n,o,l),console.log(`保存植株 ${t} 视角 ${e} 图像 ${n} 的标注，包含 ${o.length} 个关键点`),{savedImageId:n,propagatedCount:this.getPropagationCount(t,e,l),isFirstAnnotation:0===l&&!i,isManualAdjustment:i}}propagateAnnotations(t,e,n,o,i){const a=this.timeSequences.get(t).get(e),s=this.timeSeriesAnnotations.get(t).get(e),r=`${t}_${e}`,l=this.manualAdjustments.get(r)||new Set;if(0===i){for(let t=1;t<a.length;t++){const e=a[t];l.has(e)||s.set(e,{annotations:this.deepCloneAnnotations(o),timestamp:(new Date).toISOString(),isManualAdjustment:!1,inheritedFrom:n})}console.log(`从首个图像 ${n} 传播标注到后续 ${a.length-1} 个时间点`)}else{let t=0;for(let e=i+1;e<a.length;e++){const i=a[e];if(l.has(i))break;s.set(i,{annotations:this.deepCloneAnnotations(o),timestamp:(new Date).toISOString(),isManualAdjustment:!1,inheritedFrom:n}),t++}t>0&&console.log(`从时间点 ${i} 向后传播标注到 ${t} 个时间点`)}}getAnnotations(t,e,n){const o=this.timeSeriesAnnotations.get(t)?.get(e);if(!o)return[];const i=o.get(n);return i?i.annotations:[]}getAnnotationMetadata(t,e,n){const o=this.timeSeriesAnnotations.get(t)?.get(e);if(!o)return null;const i=o.get(n);if(!i)return null;const a=this.timeSequences.get(t)?.get(e),s=a?a.indexOf(n):-1;return{hasAnnotations:i.annotations.length>0,isManualAdjustment:i.isManualAdjustment,inheritedFrom:i.inheritedFrom,timestamp:i.timestamp,imageIndex:s,isFirstImage:0===s,isLastImage:s===a.length-1}}getPropagationCount(t,e,n){const o=this.timeSequences.get(t)?.get(e);if(!o)return 0;if(0===n)return o.length-1;{const i=`${t}_${e}`,a=this.manualAdjustments.get(i)||new Set;let s=0;for(let t=n+1;t<o.length&&!a.has(o[t]);t++)s++;return s}}hasAnnotations(t,e,n){return this.getAnnotations(t,e,n).length>0}getAnnotationStats(t,e){const n=this.timeSequences.get(t)?.get(e);if(!n)return{total:0,annotated:0,manual:0,inherited:0};const o=this.timeSeriesAnnotations.get(t)?.get(e);if(!o)return{total:n.length,annotated:0,manual:0,inherited:0};let i=0,a=0,s=0;for(const r of n){const t=o.get(r);t&&t.annotations.length>0&&(i++,t.isManualAdjustment?a++:t.inheritedFrom&&s++)}return{total:n.length,annotated:i,manual:a,inherited:s,coverage:(i/n.length*100).toFixed(1)}}deepCloneAnnotations(t){return t.map(t=>({...t,x:t.x,y:t.y}))}clearPlantAnnotations(t,e){const n=this.timeSeriesAnnotations.get(t);n&&n.has(e)&&n.get(e).clear();const o=`${t}_${e}`;this.manualAdjustments.has(o)&&this.manualAdjustments.get(o).clear(),console.log(`清除植株 ${t} 视角 ${e} 的所有标注`)}exportTimeSeriesData(t,e){const n=this.timeSequences.get(t)?.get(e),o=this.timeSeriesAnnotations.get(t)?.get(e);if(!n||!o)return null;const i={plantId:t,viewAngle:e,totalImages:n.length,annotationData:[]};for(const a of n){const t=o.get(a);t&&i.annotationData.push({imageId:a,annotations:t.annotations,metadata:{timestamp:t.timestamp,isManualAdjustment:t.isManualAdjustment,inheritedFrom:t.inheritedFrom}})}return i}exportAllImageAnnotations(){const t={};for(const[e,n]of this.timeSeriesAnnotations)for(const[o,i]of n)for(const[e,n]of i)n.annotations&&n.annotations.length>0&&(t[e]=n.annotations.map(t=>({id:t.id,x:t.x,y:t.y,timestamp:t.timestamp})));return t}exportPlantImageAnnotations(t){const e={},n=this.timeSeriesAnnotations.get(t);if(!n)return e;for(const[o,i]of n)for(const[t,n]of i)n.annotations&&n.annotations.length>0&&(e[t]=n.annotations.map(t=>({id:t.id,x:t.x,y:t.y,timestamp:t.timestamp})));return e}getExportStats(){let t=0,e=0,n=0;const o={};for(const[i,a]of this.timeSeriesAnnotations){let s=0,r=0,l=0;for(const[o,i]of a)for(const[a,c]of i)s++,t++,c.annotations&&c.annotations.length>0&&(r++,e++,l+=c.annotations.length,n+=c.annotations.length);o[i]={totalImages:s,annotatedImages:r,totalKeypoints:l,completionRate:s>0?(r/s*100).toFixed(1):0}}return{totalImages:t,annotatedImages:e,totalKeypoints:n,completionRate:t>0?(e/t*100).toFixed(1):0,plantStats:o}}getDebugStatus(){const t={plantsCount:this.timeSeriesAnnotations.size,totalSequences:0,totalAnnotatedImages:0,plantDetails:{}};for(const[e,n]of this.timeSeriesAnnotations){const o={viewAnglesCount:n.size,viewAngles:{}};for(const[e,i]of n){t.totalSequences++;const n=Array.from(i.values()).filter(t=>t.annotations&&t.annotations.length>0).length;t.totalAnnotatedImages+=n,o.viewAngles[e]={totalImages:i.size,annotatedImages:n,imageIds:Array.from(i.keys())}}t.plantDetails[e]=o}return console.log("时间序列管理器状态:",t),t}exportAllTimeSeriesDataDebug(){const t={managedPlants:this.timeSeriesAnnotations.size,allData:{}};for(const[e,n]of this.timeSeriesAnnotations){t.allData[e]={};for(const[o,i]of n){t.allData[e][o]={};for(const[n,a]of i)t.allData[e][o][n]={hasAnnotations:!!(a.annotations&&a.annotations.length>0),annotationCount:a.annotations?.length||0,annotations:a.annotations||[],metadata:{timestamp:a.timestamp,isManualAdjustment:a.isManualAdjustment,inheritedFrom:a.inheritedFrom}}}}return console.log("时间序列详细数据:",t),t}}class a{constructor(){this.fileSystemManager=new n,this.annotationStorage=new o,this.timeSeriesManager=new i,this.plants=new Map,this.plantImages=new Map,this.annotationStatus=new Map,this.loadingPlants=new Set}async initialize(){try{await this.fileSystemManager.initialize(),await this.annotationStorage.initialize(),this.annotationStorage.restoreTimeSeriesData(this.timeSeriesManager),this.annotationStorage.setTimeSeriesManager(this.timeSeriesManager),console.log("PlantDataManager 初始化完成")}catch(t){console.error("PlantDataManager 初始化失败:",t)}}async loadDataset(){console.log("开始加载数据集...");try{this.plants.clear(),this.plantImages.clear(),this.annotationStatus.clear(),this.loadingPlants.clear(),this.annotationStorage.setFileSystemManager(this.fileSystemManager),this.annotationStorage.isInitialized=!1,await this.annotationStorage.initialize(),this.annotationStorage.restoreTimeSeriesData(this.timeSeriesManager),this.annotationStorage.setTimeSeriesManager(this.timeSeriesManager);const t=await this.fileSystemManager.traversePlantDirectories();if(0===t.length)throw new Error("数据集中未找到有效的植物文件夹");const e=[];for(const n of t){const t=await this.createPlantData(n);e.push(t),this.plants.set(t.id,t)}return await this.restoreAnnotationStatus(e),e.sort((t,e)=>t.id.localeCompare(e.id)),console.log(`成功加载 ${e.length} 个植物`),e}catch(t){throw console.error("加载数据集失败:",t),t}}async restoreAnnotationStatus(t){if(this.annotationStorage.useFileSystem)await this.restoreAnnotationStatusFromFileSystem(t);else{const e=this.annotationStorage.getAnnotatedPlantIds();for(const n of t)if(e.includes(n.id)){const t=this.annotationStorage.getPlantStatus(n.id),e=this.annotationStorage.getPlantAnnotations(n.id),o=this.annotationStorage.getPlantAnnotationSummary(n.id);n.status=t,n.annotations=e;const i=this.annotationStorage.annotations.get(n.id);if(i&&"skipped"===i.status&&(n.skipReason=i.skipReason,n.skipDate=i.skipDate),o){n.selectedViewAngle=o.selectedViewAngle,n.viewAngles=o.availableViewAngles;const i="skipped"===n.status?` (跳过: ${n.skipReason})`:"";console.log(`恢复植株 ${n.id} 的标注状态: ${t}, 视角: ${o.selectedViewAngle}, ${e.length} 个标注点${i}`)}this.annotationStatus.set(n.id,e)}}}async restoreAnnotationStatusFromFileSystem(t){console.log("[标注] 开始从文件系统恢复植物状态...");let e=null;try{if(window.PlantAnnotationTool?.annotationManager&&(console.log("[标注] 尝试使用批量标注数据进行快速状态恢复..."),e=await window.PlantAnnotationTool.annotationManager.getAllAnnotationsInBulk(),e))return console.log("[标注] 批量标注数据获取成功，使用高性能模式"),void(await this.restoreStatusFromBulkData(t,e))}catch(n){console.warn("[标注] 批量加载失败，回退到单独文件读取模式:",n)}console.log("[标注] 使用传统单独文件读取模式"),await this.restoreStatusFromIndividualFiles(t)}async restoreStatusFromBulkData(t,e){console.log("[标注] 使用批量数据进行快速状态恢复...");const n=performance.now(),o=e.imageAnnotations||{},i=e.plantAnnotations||{};for(const r of t)try{let t=!1,e=0,n=null;const a={};if(!this.plantImages.has(r.id)){const t=await this.fileSystemManager.readPlantImages(r.id);this.plantImages.set(r.id,t)}const s=this.plantImages.get(r.id);for(const[i,r]of Object.entries(s)){let s=0;for(const l of r){const r=o[l.id];if(r&&r.length>0){t=!0;const o=r.length;e+=o,s+=o,(!n||s>(a[n]||0))&&(n=i)}}s>0&&(a[i]=s)}const l=i[r.id];l&&l.length>0&&(t=!0,e+=l.length);const c=this.annotationStorage.annotations.get(r.id);if(c&&"skipped"===c.status)r.status="skipped",r.skipReason=c.skipReason,r.skipDate=c.skipDate;else{console.log(`[批量恢复] 检查植物 ${r.id} 的专用状态API...`);const e=await this.annotationStorage.loadPlantStatus(r.id);console.log(`[批量恢复] 植物 ${r.id} 专用API状态: ${e}`),"completed"===e?(r.status="completed",r.selectedViewAngle=n,console.log(`[批量恢复] 植物 ${r.id}: completed (从专用API恢复)`)):t?(r.status="in-progress",r.selectedViewAngle=n,console.log(`[批量恢复] 植物 ${r.id}: in-progress (有标注数据)`)):(r.status="pending",console.log(`[批量恢复] 植物 ${r.id}: pending (无数据)`))}}catch(s){console.warn(`[标注] 检查植物 ${r.id} 状态失败:`,s),r.status="pending"}const a=performance.now();console.log(`[标注] 批量状态恢复完成，耗时: ${(a-n).toFixed(2)}ms`)}async restoreStatusFromIndividualFiles(t){console.log("[标注] 使用传统文件读取模式恢复状态...");const e=await this.annotationStorage.fileSystemManager.getAllAnnotationFiles(),n=new Set(e);for(const i of t)try{let t=!1,e=0,o=null;const a={};if(!this.plantImages.has(i.id)){const t=await this.fileSystemManager.readPlantImages(i.id);this.plantImages.set(i.id,t)}const s=this.plantImages.get(i.id);for(const[i,l]of Object.entries(s)){let s=0;for(const r of l)if(n.has(r.id)){const n=await this.annotationStorage.getImageAnnotation(r.id);if(n&&n.annotations&&n.annotations.length>0){t=!0;const r=n.annotations.length;e+=r,s+=r,(!o||s>(a[o]||0))&&(o=i)}}s>0&&(a[i]=s)}const r=this.annotationStorage.annotations.get(i.id);if(r&&"skipped"===r.status)i.status="skipped",i.skipReason=r.skipReason,i.skipDate=r.skipDate,console.log(`[标注] 植物 ${i.id}: skipped (${r.skipReason})`);else{console.log(`[状态恢复] 开始检查植物 ${i.id} 的持久化状态...`);const n=await this.annotationStorage.loadPlantStatus(i.id);console.log(`[状态恢复] 植物 ${i.id} 持久化状态结果: ${n}`),"completed"===n?(i.status="completed",i.selectedViewAngle=o,console.log(`[标注] 植物 ${i.id}: completed (从持久化存储恢复)`)):t?(i.status="in-progress",i.selectedViewAngle=o,console.log(`[标注] 植物 ${i.id}: in-progress, 选中视角: ${o} (${e} 个标注点)`)):(i.status="pending",console.log(`[标注] 植物 ${i.id}: pending (无标注数据且无持久化状态)`))}}catch(o){console.warn(`[标注] 检查植物 ${i.id} 状态失败:`,o),i.status="pending"}console.log("[标注] 植物状态恢复完成")}async createPlantData(t){const e={id:t.id,name:t.name,path:t.path,status:"pending",imageCount:0,hasImages:!1,viewAngles:[],selectedViewAngle:null,selectedImage:null,annotations:[],lastModified:null,loadedAt:(new Date).toISOString()};return this.loadPlantImageCount(e),e}async loadPlantImageCount(t){if(!this.loadingPlants.has(t.id)){this.loadingPlants.add(t.id);try{const e=await this.fileSystemManager.readPlantImages(t.id),n=Object.keys(e).filter(t=>e[t].length>0),o=Object.values(e).reduce((t,e)=>t+e.length,0);t.viewAngles=n,t.imageCount=o,t.hasImages=o>0,o>0&&this.plantImages.set(t.id,e),console.log(`植物 ${t.id} 包含 ${o} 张图像，视角: ${n.join(", ")}`),this.emitPlantUpdated(t)}catch(e){console.error(`加载植物 ${t.id} 图像信息失败:`,e),t.hasImages=!1,t.imageCount=0,t.viewAngles=[]}finally{this.loadingPlants.delete(t.id)}}}getPlantList(){return Array.from(this.plants.values()).sort((t,e)=>t.id.localeCompare(e.id))}getPlant(t){return this.plants.get(t)}async getPlantImages(t,e=null){if(this.plantImages.has(t)){const n=this.plantImages.get(t);return e?n[e]||[]:n}if(this.loadingPlants.has(t))return new Promise(n=>{const o=()=>{if(this.loadingPlants.has(t))setTimeout(o,100);else{const o=this.plantImages.get(t)||{};n(e?o[e]||[]:o)}};o()});const n=this.plants.get(t);if(!n)throw new Error(`植物 ${t} 不存在`);try{const o=await this.fileSystemManager.readPlantImages(n.id);return this.plantImages.set(t,o),e?o[e]||[]:o}catch(o){return console.error(`获取植物 ${t} 图像失败:`,o),e?[]:{}}}updatePlantStatus(t,e){const n=this.plants.get(t);n&&(n.status=e,n.lastModified=(new Date).toISOString(),this.annotationStorage&&this.annotationStorage.savePlantStatus(t,e).then(()=>{console.log(`[状态更新] ${t}: ${e} - 已保存到持久化存储`)}).catch(e=>{console.error("保存植物状态失败:",e);const o=this.getPlantAnnotations(t);if(o.length>0){const e={selectedImage:n.selectedImage,selectedViewAngle:n.selectedViewAngle};return this.annotationStorage.savePlantAnnotations(t,o,e)}}),this.emitPlantUpdated(n))}async skipPlant(t,e){const n=this.plants.get(t);if(!n)throw new Error(`植株 ${t} 不存在`);n.status="skipped",n.skipReason=e,n.skipDate=(new Date).toISOString(),n.lastModified=(new Date).toISOString();try{const o={status:"skipped",skipReason:e,skipDate:n.skipDate,lastModified:n.lastModified};await this.annotationStorage.saveSkipInfo(t,o),console.log(`植株 ${t} 已标记为跳过: ${e}`),this.emitPlantUpdated(n)}catch(o){throw console.error(`保存植株 ${t} 跳过信息失败:`,o),o}}async unskipPlant(t){const e=this.plants.get(t);if(!e)throw new Error(`植株 ${t} 不存在`);if("skipped"!==e.status)throw new Error(`植株 ${t} 当前状态不是跳过状态`);try{const n=await this.getPlantAnnotations(t),o=n&&n.length>0?"in-progress":"pending";e.status=o,e.lastModified=(new Date).toISOString(),delete e.skipReason,delete e.skipDate,await this.annotationStorage.removeSkipInfo(t),await this.annotationStorage.savePlantStatus(t,o),console.log(`植株 ${t} 已撤销跳过状态，新状态: ${o}`),this.emitPlantUpdated(e)}catch(n){throw console.error(`撤销植株 ${t} 跳过状态失败:`,n),n}}async uncompletePlant(t){const e=this.plants.get(t);if(!e)throw new Error(`植株 ${t} 不存在`);if("completed"!==e.status)throw new Error(`植株 ${t} 当前状态不是已完成状态`);try{const n=await this.getPlantAnnotations(t),o=n&&n.length>0?"in-progress":"pending";e.status=o,e.lastModified=(new Date).toISOString(),await this.annotationStorage.savePlantStatus(t,o),console.log(`植株 ${t} 已撤销完成状态，新状态: ${o}`),this.emitPlantUpdated(e)}catch(n){throw console.error(`撤销植株 ${t} 完成状态失败:`,n),n}}setSelectedViewAngle(t,e){const n=this.plants.get(t);n&&(n.selectedViewAngle=e,n.selectedImage=null,"pending"===n.status&&this.updatePlantStatus(t,"in-progress"),this.emitPlantUpdated(n))}setSelectedImage(t,e){const n=this.plants.get(t);n&&(n.selectedImage=e,!n.selectedViewAngle&&e.viewAngle&&(n.selectedViewAngle=e.viewAngle),n.selectedViewAngle&&this.initializeTimeSeriesIfNeeded(t,n.selectedViewAngle),"pending"===n.status&&this.updatePlantStatus(t,"in-progress"),this.emitPlantUpdated(n))}async initializeTimeSeriesIfNeeded(t,e){try{const n=await this.getPlantImages(t,e);if(n.length>0){const o=this.timeSeriesManager.initializePlantTimeSeries(t,e,n);return console.log(`初始化时间序列: ${o.totalImages} 张图像`),o}}catch(n){console.error("初始化时间序列失败:",n)}return null}async savePlantAnnotations(t,e,n=!1,o={}){const i=this.plants.get(t);if(!i)throw new Error(`植株 ${t} 不存在`);if(!i.selectedImage||!i.selectedViewAngle)throw new Error("请先选择图像和视角");const a=i.selectedImage.id,s=i.selectedViewAngle;try{const r=await this.getPlantImages(t,s),l=r.findIndex(t=>t.id===a);if(-1===l)throw new Error("当前图像不在图像列表中");let c=0;if(n)await this.saveAnnotationToFile(t,a,e,o),c=1,console.log(`保存标注到当前图像: ${a}`);else{for(let n=l;n<r.length;n++){const i=r[n].id;await this.saveAnnotationToFile(t,i,e,o),c++}console.log(`向后传播保存标注到 ${c} 张图像`)}i.annotations=e,i.lastModified=(new Date).toISOString(),i.status=e.length>0?"in-progress":"pending",this.annotationStatus.set(t,e),this.emitPlantUpdated(i);const d=o.saveDirectionsOnly?" (仅方向信息)":"";return{success:!0,savedCount:c,message:n?`已保存到当前图像${d}`:`已传播保存到 ${c} 张图像${d}`,viewAngle:s,isManualAdjustment:n,saveDirectionsOnly:o.saveDirectionsOnly}}catch(r){throw console.error(`保存植株 ${t} 标注数据失败:`,r),r}}async saveAnnotationToFile(t,e,n,o={}){let i=n;if(o.saveDirectionsOnly){const t=await this.annotationStorage.getImageAnnotation(e);t&&t.annotations&&(i=this.mergeDirectionData(t.annotations,n))}const a={plantId:t,imageId:e,annotations:i,timestamp:(new Date).toISOString(),version:"2.0"};await this.annotationStorage.saveImageAnnotation(e,a)}mergeDirectionData(t,e){const n=[...t];return e.forEach(t=>{const e=n.findIndex(e=>e.order===t.order);-1!==e?n[e]={...n[e],direction:t.direction,directionType:t.directionType,timestamp:(new Date).toISOString()}:n.push(t)}),n}async saveImageAnnotations(t,e){try{const n=window.appState?.currentPlant?.id||this.getCurrentPlantIdFromImage(t),o={imageId:t,plantId:n,annotations:e,timestamp:(new Date).toISOString(),version:"2.0"};await this.annotationStorage.saveImageAnnotation(t,o),console.log(`自动保存完成：图像 ${t} (植株: ${n}) 的 ${e.length} 个标注点`)}catch(n){throw console.error("自动保存图像标注失败:",n),n}}getCurrentPlantIdFromImage(t){if(t.includes("_")){const e=t.split("_");if(e.length>0)return e[0]}if(t.includes("-")){const e=t.split("-");if(e.length>=2)return`${e[0]}-${e[1]}`}return t.split(".")[0].split("_")[0]}async getImageAnnotations(t){try{const e=await this.annotationStorage.getImageAnnotation(t);if(!e||!e.annotations)return[];const n=e.annotations;return console.log(`🔄 Loaded ${n.length} annotations for image ${t} (auto-renumbering disabled)`),n}catch(e){return console.error("获取图像标注失败:",e),[]}}getPlantAnnotations(t,e=null){return e?this.getImageAnnotations(e):this.annotationStatus.get(t)||[]}getCurrentImageAnnotationMetadata(t){const e=this.plants.get(t);return e&&e.selectedImage&&e.selectedViewAngle?this.timeSeriesManager.getAnnotationMetadata(t,e.selectedViewAngle,e.selectedImage.id):null}getPlantTimeSeriesStats(t,e){return this.timeSeriesManager.getAnnotationStats(t,e)}shouldShowManualAdjustmentMode(t){const e=this.getCurrentImageAnnotationMetadata(t);return!!e&&!e.isFirstImage&&e.hasAnnotations}getNextPendingPlant(t=null){const e=this.getPlantList();if(!t)return e.find(t=>"completed"!==t.status);const n=e.findIndex(e=>e.id===t);if(-1===n)return e.find(t=>"completed"!==t.status);for(let o=n+1;o<e.length;o++)if("completed"!==e[o].status)return e[o];for(let o=0;o<n;o++)if("completed"!==e[o].status)return e[o];return null}getDetailedImageStats(){const t=this.getPlantList();let e=0,n=0,o=t.length,i=0;const a=[];for(const r of t){const t=r.imageCount||0;e+=t;const o={plantId:r.id,imageCount:t,status:r.status,isCompleted:"completed"===r.status};"completed"===r.status&&(i++,n+=t),a.push(o)}const s=o>0?i/o*100:0;return{totalImages:e,completedImages:n,totalPlants:o,completedPlants:i,completionRate:(e>0?n/e*100:0).toFixed(1),plantCompletionRate:s.toFixed(1),pendingImages:e-n,plantStats:a}}getImageStats(){const t=this.getDetailedImageStats();return{totalImages:t.totalImages,completedImages:t.completedImages,totalPlants:t.totalPlants,completedPlants:t.completedPlants,completionRate:t.completionRate}}getProgress(){const t=this.getPlantList(),e=t.length,n=this.annotationStorage.getAnnotationStats(e),o=t.filter(t=>"completed"===t.status).length,i=t.filter(t=>"in-progress"===t.status).length,a=t.filter(t=>"pending"===t.status).length,s=t.filter(t=>"skipped"===t.status).length,r=o+s,l=this.getImageStats();return{total:e,completed:Math.max(o,n.completed),inProgress:i,pending:a,skipped:s,totalCompleted:r,completionRate:e>0?(Math.max(r,n.completed+s)/e*100).toFixed(1):0,persistent:n,images:l}}searchPlants(t){if(!t)return this.getPlantList();const e=t.toLowerCase();return this.getPlantList().filter(t=>t.id.toLowerCase().includes(e)||t.name.toLowerCase().includes(e))}filterPlantsByStatus(t){return"all"===t?this.getPlantList():this.getPlantList().filter(e=>e.status===t)}emitPlantUpdated(t){const e=new CustomEvent("plantUpdated",{detail:{plant:t}});document.dispatchEvent(e)}cleanup(){this.plants.clear(),this.plantImages.clear(),this.annotationStatus.clear(),this.loadingPlants.clear(),this.fileSystemManager&&this.fileSystemManager.cleanup()}exportAllAnnotations(){return this.annotationStorage.exportAllAnnotations()}downloadAnnotationsAsJSON(){return this.annotationStorage.downloadAnnotationsAsJSON()}async exportPureImageAnnotations(){return await this.annotationStorage.exportPureImageAnnotations()}async downloadPureImageAnnotationsAsJSON(){return await this.annotationStorage.downloadPureImageAnnotationsAsJSON()}async getExportStats(){const t=await this.exportPureImageAnnotations(),e=this.timeSeriesManager.getExportStats();return{pureFormat:this.annotationStorage.getPureAnnotationsStats(t),timeSeriesFormat:e,recommendation:"建议使用纯净格式进行数据分析和处理"}}async debugTimeSeriesExport(){console.log("=== 时间序列导出调试 ===");const t=this.timeSeriesManager.getDebugStatus(),e=this.timeSeriesManager.exportAllTimeSeriesDataDebug(),n=await this.exportPureImageAnnotations();console.log("导出的纯净标注数据:",n);const o=this.annotationStorage.annotations;console.log("存储管理器中的数据:",Array.from(o.entries()));const i={timeSeriesManagerImages:t.totalAnnotatedImages,pureExportImages:Object.keys(n).length,storageManagerPlants:o.size};return console.log("数据比较:",i),{timeSeriesStatus:t,timeSeriesData:e,pureAnnotations:n,storageData:Array.from(o.entries()),comparison:i}}saveAnnotationStatus(t,e){try{const n=`plant_annotation_${t}`,o={...e,savedAt:(new Date).toISOString()};localStorage.setItem(n,JSON.stringify(o))}catch(n){console.error("保存标注状态失败:",n)}}loadAnnotationStatus(t){try{const e=`plant_annotation_${t}`,n=localStorage.getItem(e);if(n)return JSON.parse(n)}catch(e){console.error("加载标注状态失败:",e)}return null}ensureAnnotationOrders(t){if(!t||0===t.length)return;const e={};t.forEach(t=>{t.annotationType||(t.customTypeId?t.annotationType="custom":(t.annotationType="custom",t.customTypeId=t.customTypeId||"builtin-regular-keypoint"));const n="custom"===t.annotationType?`custom:${t.customTypeId||"unknown"}`:"custom:builtin-regular-keypoint";e[n]||(e[n]=[]),e[n].push(t)});let n=0;Object.entries(e).forEach(([t,e])=>{let o=!1;for(let n=0;n<e.length;n++)if("number"!=typeof e[n].order||e[n].order<=0){o=!0;break}if(!o){const t=e.map(t=>t.order);[...new Set(t)].length!==t.length&&(o=!0)}if(o){console.log(`发现 ${t} 类型标注序号问题，正在为 ${e.length} 个标注点分配序号...`);for(let t=0;t<e.length;t++)e[t].order=t+1;n+=e.length,console.log(`已为 ${t} 类型分配序号：1-${e.length}`)}}),n>0&&console.log(`序号修复完成：共修复 ${n} 个标注点，保持类型特定编号系统`)}}const s=function(t,e,n){let o=Promise.resolve();function i(t){const e=new Event("vite:preloadError",{cancelable:!0});if(e.payload=t,window.dispatchEvent(e),!e.defaultPrevented)throw t}return o.then(e=>{for(const t of e||[])"rejected"===t.status&&i(t.reason);return t().catch(i)})};class r{constructor(t,e={}){if(console.log("[调试] AnnotationTool 构造函数被调用",{canvasId:t,timestamp:Date.now()}),this.canvas=document.getElementById(t),!this.canvas)throw new Error(`Canvas element with id "${t}" not found`);this.ctx=this.canvas.getContext("2d"),this.options={minZoom:.1,maxZoom:10,zoomSpeed:.1,baseKeypointRadius:8,minKeypointRadius:4,maxKeypointRadius:20,keypointScaleFactor:.8,keypointLeftColor:"#ff4444",keypointRightColor:"#4444ff",keypointHoverColor:"#ff6666",keypointSelectedColor:"#ffaa00",keypointBorderColor:"#ffffff",keypointBorderWidth:2,labelThresholdScale:.6,tinyThresholdScale:.3,labelOffset:15,directionThreshold:20,directionArrowLength:40,...e},this.state={scale:1,translateX:0,translateY:0,isDragging:!1,isPanning:!1,lastPanPoint:null,isDirectionDragging:!1,dragStartPoint:null,currentDragPoint:null,previewKeypoint:null,selectedKeypoint:null,isDirectionSelectionMode:!1,directionSelectionPoint:null,isAutoDirectionMode:!1,autoDirectionIndex:0,autoDirectionKeypoints:[],isDirectionCountMode:!1,currentDirectionCount:1,directionsSet:0,autoMoveToExpectedPosition:!1,isCustomRegionDragging:!1,customRegionStartPoint:null,customRegionCurrentPoint:null},this.currentImage=null,this.imageElement=null,this.imageLoaded=!1,this.keypoints=[],this.hoveredKeypoint=null,this.draggedKeypoint=null,this.history=[],this.historyIndex=-1,this.maxHistorySize=50,this.customAnnotationManager=null,this.customAnnotationRenderer=null,this.customAnnotationDragState={isDragging:!1,draggedAnnotation:null,startPosition:null},this.imageSwitchLock={isLocked:!1,currentLoadingImageId:null,lockStartTime:null},this.autoDirectionMode="longitudinal",this.crossSectionalState=null,this.crossSectionalMap=new Map,this.bindEvents(),this.initializeCanvas(),this.initializeCustomAnnotationSystem(),this.initializeAutoDirectionModeFromUI(),console.log("AnnotationTool initialized with advanced direction annotation support and custom annotations")}initializeAutoDirectionModeFromUI(){setTimeout(()=>{const t=document.getElementById("auto-direction-mode-selector");t&&t.value?(this.autoDirectionMode=t.value,console.log("[调试] 从UI选择器初始化自动方向模式:",this.autoDirectionMode)):(this.autoDirectionMode="longitudinal",t&&(t.value="longitudinal",console.log("[调试] 设置UI选择器默认值为: longitudinal")))},100)}initializeCanvas(){this.resizeState={isResizing:!1,lastResizeTime:0,debounceTimeout:null,dimensionsHistory:[]},setTimeout(()=>{this.resizeCanvasWithRetry()},200),this.canvas.style.cursor="crosshair",window.addEventListener("resize",()=>{this.debouncedResize()})}resizeCanvasWithRetry(t=0){const e=this.canvas.parentElement.getBoundingClientRect();if(0===e.width||0===e.height)return t<10?(console.warn(`Canvas容器尺寸为0，延迟重试... (${t+1}/10)`),void setTimeout(()=>{this.resizeCanvasWithRetry(t+1)},300)):(console.error("Canvas容器尺寸始终为0，使用默认尺寸"),this.canvas.width=600,this.canvas.height=400,this.canvas.style.width="600px",this.canvas.style.height="400px",void this.render());this.resizeCanvas(),this.render()}debouncedResize(){const t=Date.now();this.resizeState.isResizing&&t-this.resizeState.lastResizeTime<100?console.debug("Resize loop detected, skipping resize"):(this.resizeState.debounceTimeout&&clearTimeout(this.resizeState.debounceTimeout),this.resizeState.debounceTimeout=setTimeout(()=>{this.resizeCanvas(),this.render()},150))}resizeCanvas(){const t=this.canvas.parentElement.getBoundingClientRect();if(0===t.width||0===t.height)return void console.warn("Canvas容器尺寸无效，跳过调整");const e=`${t.width}x${t.height}`,n=this.resizeState.dimensionsHistory;if(n.length>=3){const t=n.slice(-3);if(t.includes(e)&&t.filter(t=>t===e).length>=2)return void console.warn(`Canvas resize oscillation detected (${e}), stabilizing...`)}n.push(e),n.length>5&&n.shift(),this.resizeState.isResizing=!0,this.resizeState.lastResizeTime=Date.now();try{this.canvas.width=t.width,this.canvas.height=t.height,this.canvas.style.width=t.width+"px",this.canvas.style.height=t.height+"px",console.log(`Canvas resized to ${t.width}x${t.height}`),this.imageLoaded&&this.imageElement&&!this.resizeState.fittingToScreen&&this.safeFitToScreen()}finally{setTimeout(()=>{this.resizeState.isResizing=!1},200)}}bindEvents(){console.log("[调试] bindEvents 被调用，绑定鼠标事件监听器",{timestamp:Date.now()}),this.canvas.addEventListener("mousedown",t=>this.handleMouseDown(t)),this.canvas.addEventListener("mousemove",t=>this.handleMouseMove(t)),this.canvas.addEventListener("mouseup",t=>this.handleMouseUp(t)),this.canvas.addEventListener("contextmenu",t=>this.handleContextMenu(t)),this.canvas.addEventListener("wheel",t=>this.handleWheel(t),{passive:!1}),document.addEventListener("keydown",t=>this.handleKeyDown(t)),document.addEventListener("keyup",t=>this.handleKeyUp(t)),this.canvas.addEventListener("contextmenu",t=>t.preventDefault())}async loadImage(t,e=!1){try{if(console.log("Loading image:",t.name),this.setImageSwitchLock(!0,t.id),this.interruptAllDirectionModes("image_switch"),this.currentImage=t,this.imageLoaded=!1,!window.PlantAnnotationTool||!window.PlantAnnotationTool.plantDataManager)throw this.setImageSwitchLock(!1),new Error("PlantDataManager未初始化，请刷新页面重试");const n=window.PlantAnnotationTool.plantDataManager;if(!n.fileSystemManager)throw this.setImageSwitchLock(!1),new Error("FileSystemManager未初始化，请刷新页面重试");const o=await n.fileSystemManager.createImageURL(t);return this.imageElement=new Image,this.imageElement.crossOrigin="anonymous",new Promise((t,n)=>{this.imageElement.onload=()=>{this.imageLoaded=!0,console.log(`Image loaded: ${this.imageElement.width}x${this.imageElement.height}`),e?console.log("保持当前视图状态"):(this.safeFitToScreen(),console.log("重置视图到适合屏幕")),this.render(),this.setImageSwitchLock(!1),t()},this.imageElement.onerror=()=>{this.setImageSwitchLock(!1),n(new Error("Failed to load image"))},this.imageElement.src=o})}catch(n){throw console.error("Error loading image:",n),this.setImageSwitchLock(!1),n}}safeFitToScreen(){if(this.resizeState.fittingToScreen)console.debug("fitToScreen already in progress, skipping");else{this.resizeState.fittingToScreen=!0;try{this.fitToScreen()}finally{setTimeout(()=>{this.resizeState.fittingToScreen=!1},50)}}}fitToScreen(){if(!this.imageElement||!this.imageLoaded)return;const t=this.canvas.width,e=this.canvas.height,n=this.imageElement.width,o=this.imageElement.height;if(t<=0||e<=0||n<=0||o<=0)return void console.warn("Invalid dimensions for fit to screen, skipping");const i=.9*t/n,a=.9*e/o,s=Math.min(i,a),r=Math.max(this.options.minZoom,Math.min(this.options.maxZoom,s)),l=Math.abs(r-this.state.scale);l>.01?(this.state.scale=r,this.state.translateX=(t-n*this.state.scale)/2,this.state.translateY=(e-o*this.state.scale)/2,this.updateZoomInfo(),console.log(`Fit to screen: scale=${this.state.scale.toFixed(2)} (change: ${l.toFixed(3)})`)):console.debug(`Scale change too small (${l.toFixed(3)}), skipping update`)}resetView(){this.imageElement&&this.imageLoaded&&(this.state.scale=1,this.state.translateX=0,this.state.translateY=0,this.updateZoomInfo(),this.render())}clearImage(){console.log("清空图像和重置视图"),this.interruptAllDirectionModes("plant_switch"),this.currentImage=null,this.imageElement=null,this.imageLoaded=!1,this.state.scale=1,this.state.translateX=0,this.state.translateY=0,this.clearKeypointsWithoutSave(),this.clearKeypointLabels(),this.updateZoomInfo(),this.render()}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.imageElement&&this.imageLoaded?(this.ctx.save(),this.ctx.translate(this.state.translateX,this.state.translateY),this.ctx.scale(this.state.scale,this.state.scale),this.ctx.drawImage(this.imageElement,0,0),this.ctx.restore(),this.calibrationPreviewState?.isActive?this.renderCalibrationPreview():this.renderKeypoints(),this.renderCustomAnnotations()):this.renderPlaceholder()}renderPlaceholder(){const t=this.canvas.width/2,e=this.canvas.height/2;this.ctx.fillStyle="#f3f4f6",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.fillStyle="#6b7280",this.ctx.font="16px Inter, sans-serif",this.ctx.textAlign="center",this.ctx.fillText("Please choose image to annotate",t,e)}renderKeypoints(){if(!this.imageElement||!this.imageLoaded)return void console.log("[AnnotationTool] Skipping keypoint render - no image loaded");this.clearKeypointLabels();const t=this.getKeypointDisplayStrategy();if(this.keypoints.forEach((e,n)=>{const o=this.imageToScreen(e.x,e.y);if("custom"===e.annotationType)this.renderCustomKeypoint(e,o,t);else{const n={...e,annotationType:"custom",customTypeId:"builtin-regular-keypoint"};this.renderCustomKeypoint(n,o,t)}}),this.state.isDirectionDragging&&this.state.previewKeypoint){const e=this.imageToScreen(this.state.previewKeypoint.x,this.state.previewKeypoint.y),n=this.state.previewKeypoint.direction,o="left"===n?this.options.keypointLeftColor:this.options.keypointRightColor;this.ctx.globalAlpha=.7,this.renderSingleKeypoint(e.x,e.y,o,"?",n,t),this.ctx.globalAlpha=1,this.renderDragIndicator()}this.state.isCustomRegionDragging&&this.renderCustomRegionPreview(),this.state.isDirectionSelectionMode&&this.state.selectedKeypoint&&this.state.directionSelectionPoint&&this.renderDirectionSelectionGuide(),this.updateZoomIndicator(t),this.updateAnnotationSizeInfo(t)}renderRegularKeypoint(t,e,n,o){const i=this.hoveredKeypoint===t;let a;a=this.state.selectedKeypoint===t?this.options.keypointSelectedColor:i?this.options.keypointHoverColor:"angle"===t.directionType||"number"==typeof t.direction?"#00aa00":"left"===t.direction?this.options.keypointLeftColor:"right"===t.direction?this.options.keypointRightColor:"#9333ea";const s=t.order||o+1;this.renderSingleKeypoint(e.x,e.y,a,s,t.direction,n,t),t.directions&&t.directions.length>1?this.renderMultipleDirections(t):this.renderDirectionIndicator(e.x,e.y,t.direction,t)}renderCustomKeypoint(t,e,n){const o=this.getCustomType(t.customTypeId);if(!o)return void console.warn(`Custom type ${t.customTypeId} not found`);const i=this.hoveredKeypoint===t;let a=1;this.state.selectedKeypoint===t?a=.9:i&&(a=.8),this.ctx.save(),this.ctx.globalAlpha=a,t.width&&t.height?this.renderCustomRegion(t,e,o,n):this.renderCustomPoint(t,e,o,n),this.ctx.restore()}renderCustomPoint(t,e,n,o){this.ctx.beginPath(),this.ctx.arc(e.x,e.y,o.radius,0,2*Math.PI),this.ctx.fillStyle=n.color,this.ctx.fill(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=o.borderWidth,this.ctx.stroke(),o.showInternalLabel?(this.ctx.fillStyle="#ffffff",this.ctx.font=`bold ${o.fontSize}px Arial`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(t.order.toString(),e.x,e.y)):o.showExternalLabel&&this.renderCustomPointLabel(t,e,n,o),n&&n.metadata&&!1===n.metadata.isDirectional||this.renderDirectionIndicator(e.x,e.y,t.direction,t)}renderCustomRegion(t,e,n,o){const i=this.imageToScreen(t.x+t.width,t.y+t.height),a=i.x-e.x,s=i.y-e.y;this.ctx.fillStyle=n.color,this.ctx.globalAlpha=.2,this.ctx.fillRect(e.x,e.y,a,s),this.ctx.globalAlpha=1,this.ctx.strokeStyle=n.color,this.ctx.lineWidth=o.borderWidth,this.ctx.strokeRect(e.x,e.y,a,s);const r=e.x+a/2,l=e.y+s/2;o.showInternalLabel&&Math.min(a,s)>20&&(this.ctx.fillStyle=n.color,this.ctx.font=`bold ${o.fontSize}px Arial`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(t.order.toString(),r,l)),o.showExternalLabel&&this.renderCustomRegionLabel(t,{x:r,y:e.y},n,o),n&&n.metadata&&!1===n.metadata.isDirectional||this.renderDirectionIndicator(r,l,t.direction,t)}renderCustomPointLabel(t,e,n,o){const i=e.y-o.radius-o.labelOffset;this.ctx.save();const a=`${n.name} #${t.order}`;this.ctx.font=`${o.fontSize}px Arial`;const s=this.ctx.measureText(a).width;this.ctx.fillStyle=n.color,this.ctx.fillRect(e.x-s/2-4,i-o.fontSize/2-4,s+8,o.fontSize+8),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(a,e.x,i),this.ctx.restore()}renderCustomRegionLabel(t,e,n,o){const i=e.y-o.labelOffset;this.ctx.save();const a=`${n.name} #${t.order}`;this.ctx.font=`${o.fontSize}px Arial`;const s=this.ctx.measureText(a).width;this.ctx.fillStyle=n.color,this.ctx.fillRect(e.x-s/2-4,i-o.fontSize/2-4,s+8,o.fontSize+8),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(a,e.x,i),this.ctx.restore()}renderCustomRegionPreview(){if(!this.state.isCustomRegionDragging)return;const t=this.state.customRegionStartPoint,e=this.state.customRegionCurrentPoint;if(!t||!e)return;const n=this.customAnnotationManager?.getCurrentCustomType();if(!n||"region"!==n.type)return;const o=Math.min(t.x,e.x),i=Math.min(t.y,e.y),a=Math.abs(e.x-t.x),s=Math.abs(e.y-t.y);this.ctx.save(),this.ctx.globalAlpha=.5,this.ctx.fillStyle=n.color,this.ctx.fillRect(o,i,a,s),this.ctx.strokeStyle=n.color,this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]),this.ctx.strokeRect(o,i,a,s),this.ctx.globalAlpha=.8,this.ctx.fillStyle="#000000",this.ctx.font="12px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle";const r=`${Math.round(a)}x${Math.round(s)}`;this.ctx.fillText(r,o+a/2,i+s/2),this.ctx.restore()}renderSingleKeypoint(t,e,n,o,i,a,s=null){this.ctx.beginPath(),this.ctx.arc(t,e,a.radius,0,2*Math.PI),this.ctx.fillStyle=n,this.ctx.fill(),this.ctx.strokeStyle=this.options.keypointBorderColor,this.ctx.lineWidth=a.borderWidth,this.ctx.stroke(),a.showInternalLabel?(this.ctx.fillStyle=this.options.keypointBorderColor,this.ctx.font=`bold ${a.fontSize}px Inter, sans-serif`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o.toString(),t,e)):a.showExternalLabel?this.createExternalLabel(t,e,o,i,n,a):a.showMinimalMode&&s&&this.hoveredKeypoint===s&&this.createTooltip(t,e,o,i,s)}renderDragIndicator(){if(!this.state.dragStartPoint||!this.state.currentDragPoint)return;const t=this.state.dragStartPoint.x,e=this.state.dragStartPoint.y,n=this.state.currentDragPoint.x,o=this.state.currentDragPoint.y,i=n-t;if(Math.sqrt(i*i+(o-e)*(o-e))>=this.options.directionThreshold){this.ctx.strokeStyle=i<0?this.options.keypointLeftColor:this.options.keypointRightColor,this.ctx.lineWidth=3,this.ctx.setLineDash([5,5]),this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,o),this.ctx.stroke(),this.ctx.setLineDash([]);const a=(t+n)/2,s=(e+o)/2-20;this.ctx.fillStyle=i<0?this.options.keypointLeftColor:this.options.keypointRightColor,this.ctx.font="bold 14px Inter, sans-serif",this.ctx.textAlign="center",this.ctx.fillText(i<0?"← Left":"Right →",a,s)}}imageToScreen(t,e){return{x:t*this.state.scale+this.state.translateX,y:e*this.state.scale+this.state.translateY}}screenToImage(t,e){return{x:(t-this.state.translateX)/this.state.scale,y:(e-this.state.translateY)/this.state.scale}}getMousePos(t){const e=this.canvas.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}getVisibleImageBounds(){if(!this.imageElement||!this.imageLoaded)return null;const t=this.imageElement.width*this.state.scale,e=this.imageElement.height*this.state.scale,n=this.state.translateX,o=this.state.translateY,i={left:Math.max(0,n),top:Math.max(0,o),right:Math.min(this.canvas.width,n+t),bottom:Math.min(this.canvas.height,o+e),imageLeft:n,imageTop:o,imageRight:n+t,imageBottom:o+e};return Math.random()<.001&&console.log("[AnnotationTool] Image bounds debug:",{imageSize:{width:this.imageElement.width,height:this.imageElement.height},canvasSize:{width:this.canvas.width,height:this.canvas.height},scale:this.state.scale,translate:{x:this.state.translateX,y:this.state.translateY},visibleBounds:i,imageLoaded:this.imageLoaded}),i}isPointInVisibleImage(t,e){const n=this.getVisibleImageBounds();return!!n&&t>=n.left&&t<=n.right&&e>=n.top&&e<=n.bottom}isImageCoordinateValid(t,e){return!(!this.imageElement||!this.imageLoaded)&&t>=0&&t<=this.imageElement.width&&e>=0&&e<=this.imageElement.height}canCreateAnnotationAt(t,e){if(!this.imageElement||!this.imageLoaded)return console.warn("[AnnotationTool] Cannot create annotation: no image loaded"),!1;if(!this.isPointInVisibleImage(t,e))return console.warn("[AnnotationTool] Cannot create annotation: position is outside visible image area"),!1;const n=this.screenToImage(t,e);return!!this.isImageCoordinateValid(n.x,n.y)||(console.warn("[AnnotationTool] Cannot create annotation: position is outside image boundaries"),!1)}canAnnotateAtSilent(t,e){if(!this.imageElement||!this.imageLoaded)return!1;if(!this.isPointInVisibleImage(t,e))return!1;const n=this.screenToImage(t,e);return!!this.isImageCoordinateValid(n.x,n.y)}debugBoundsAt(t,e){if(console.log("[AnnotationTool] Debug bounds check at:",{screenX:t,screenY:e}),!this.imageElement||!this.imageLoaded)return console.log("❌ Image not loaded"),!1;const n=this.getVisibleImageBounds();console.log("📐 Visible bounds:",n);const o=this.isPointInVisibleImage(t,e);console.log("🎯 In visible area:",o);const i=this.screenToImage(t,e),a=this.isImageCoordinateValid(i.x,i.y);console.log("📍 Image coords:",i,"Valid:",a);const s=this.canAnnotateAtSilent(t,e);return console.log("✅ Final result:",s),s}async handleMouseDown(t){console.log("[调试] handleMouseDown 被调用",{button:t.button,timestamp:Date.now(),target:t.target.tagName,isTrusted:t.isTrusted,type:t.type,eventPhase:t.eventPhase,bubbles:t.bubbles,cancelable:t.cancelable,stackTrace:(new Error).stack});const e=this.getMousePos(t);if(0===t.button){if(!t.shiftKey){const t=this.getCustomAnnotationAt(e);if(t)return this.handleCustomAnnotationClick(t,e),void this.startCustomAnnotationDrag(t,e);const o=this.getKeypointAt(e);if(o){if(console.log("[调试] 点击了标注点",{clickedKeypoint:o.order,isDirectionSelectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:this.state.selectedKeypoint?.order,isSameKeypoint:this.state.selectedKeypoint===o}),this.state.isDirectionSelectionMode&&this.state.selectedKeypoint===o){console.log("[调试] 处理方向选择");try{await this.handleDirectionSelection(e)}catch(n){console.error("[方向选择] 处理方向选择失败:",n)}return}return this.draggedKeypoint=o,this.state.dragStartPoint=e,this.state.mouseDownTime=Date.now(),this.state.wasDraggedDuringSession=!1,void(this.canvas.style.cursor="grabbing")}if(this.state.isDirectionSelectionMode){console.log("[调试] 方向选择模式下点击，处理方向选择");try{await this.handleDirectionSelection(e)}catch(n){console.error("[方向选择] 处理方向选择失败:",n)}return}if(!this.imageElement||!this.imageLoaded)return console.warn("[AnnotationTool] Cannot create annotation: no image loaded"),void(window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("No Image Loaded","Please select and load an image before creating annotations."));if(this.customAnnotationManager&&this.customAnnotationManager.isInCustomMode()){const t=this.customAnnotationManager.getCurrentCustomType();if(!t)return void console.warn("No custom type selected");if("region"===t.type)return void this.handleCustomAnnotationMode(e);if("point"===t.type)return this.state.blankAreaClickStart=e,this.state.mouseDownTime=Date.now(),void(this.state.wasDraggedDuringSession=!1)}return console.warn("[AnnotationTool] Annotation disabled: please select an Annotation Type to start annotating."),void(window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Annotation Disabled","Please open Annotation Type Setting and select a type before annotating."))}this.state.isPanning=!0,this.state.lastPanPoint=e,this.canvas.style.cursor="grabbing"}else 2===t.button?this.state.isAutoDirectionMode?this.pauseAutoDirectionMode():this.state.isDirectionSelectionMode&&this.cancelDirectionSelection(!0):1===t.button&&this.handleMiddleMouseButton(e)}handleMouseMove(t){const e=this.getMousePos(t);if(this.state.isPanning&&this.state.lastPanPoint){const t=e.x-this.state.lastPanPoint.x,n=e.y-this.state.lastPanPoint.y;this.state.translateX+=t,this.state.translateY+=n,this.state.lastPanPoint=e,this.render()}else if(this.draggedKeypoint){const t=this.screenToImage(e.x,e.y);this.isImageCoordinateValid(t.x,t.y)&&(this.draggedKeypoint.x=t.x,this.draggedKeypoint.y=t.y,this.state.wasDraggedDuringSession=!0,this.render(),this.notifyDraggedKeypointPreview(this.draggedKeypoint))}else if(this.customAnnotationDragState.isDragging)this.updateCustomAnnotationDrag(e);else if(this.state.blankAreaClickStart)Math.sqrt(Math.pow(e.x-this.state.blankAreaClickStart.x,2)+Math.pow(e.y-this.state.blankAreaClickStart.y,2))>=this.options.directionThreshold&&(this.state.wasDraggedDuringSession=!0,this.startDirectionAnnotation(this.state.blankAreaClickStart),this.state.blankAreaClickStart=null,this.updateDirectionDragging(e));else if(this.state.isDirectionDragging)this.updateDirectionDragging(e);else if(this.state.isCustomRegionDragging)this.updateCustomRegionDrag(e);else if(this.state.isDirectionSelectionMode){this.state.directionSelectionPoint=e;let t="crosshair";if(this.state.selectedKeypoint){const n=this.imageToScreen(this.state.selectedKeypoint.x,this.state.selectedKeypoint.y);Math.sqrt(Math.pow(e.x-n.x,2)+Math.pow(e.y-n.y,2))<=2*this.options.baseKeypointRadius&&(t="pointer")}this.canvas.style.cursor!==t&&(this.canvas.style.cursor=t),this.render()}else{const t=this.getCustomAnnotationAt(e);if(t)return this.canvas.style.cursor="pointer",this.customAnnotationRenderer&&this.customAnnotationRenderer.setHoveredAnnotation(t),void this.render();this.customAnnotationRenderer&&this.customAnnotationRenderer.setHoveredAnnotation(null);const n=this.getKeypointAt(e);let o="crosshair";o=this.state.isAutoDirectionMode?n?"pointer":"crosshair":(this.customAnnotationManager&&this.customAnnotationManager.isInCustomMode(),n?"pointer":this.canAnnotateAtSilent(e.x,e.y)?"crosshair":"not-allowed"),this.canvas.style.cursor!==o&&(this.canvas.style.cursor=o),n!==this.hoveredKeypoint&&(this.hoveredKeypoint=n,this.render())}}handleMouseUp(t){const e=this.getMousePos(t);if(this.state.isPanning&&(this.state.isPanning=!1,this.state.lastPanPoint=null,this.canvas.style.cursor="crosshair"),this.draggedKeypoint){const t=this.state.dragStartPoint||e,n=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),o=Date.now(),i=o-(this.state.mouseDownTime||o),a=this.state.wasDraggedDuringSession||!1;n<8&&i<200&&!a?this.handleKeypointClick(this.draggedKeypoint):(this.saveState(),this.autoSaveCurrentImage(),this.triggerRealTimeSync("MOVE_KEYPOINT",this.draggedKeypoint,this.state.dragStartPoint)),this.draggedKeypoint=null,this.state.wasDraggedDuringSession=!1,this.state.mouseDownTime=null,this.canvas.style.cursor="crosshair",this.restoreNormalPreview()}if(this.state.blankAreaClickStart){const t=Math.sqrt(Math.pow(e.x-this.state.blankAreaClickStart.x,2)+Math.pow(e.y-this.state.blankAreaClickStart.y,2)),n=Date.now(),o=n-(this.state.mouseDownTime||n),i=this.state.wasDraggedDuringSession||!1;if(t<8&&o<300&&!i)if(this.customAnnotationManager?.isInCustomMode()&&"point"===this.customAnnotationManager.getCurrentCustomType()?.type){const t=this.screenToImage(this.state.blankAreaClickStart.x,this.state.blankAreaClickStart.y),e=this.customAnnotationManager.getCurrentCustomType(),n=this.addKeypointWithDirection(t.x,t.y,void 0,e.id);n&&(delete n.direction,delete n.directionType,this.render(),this.autoSaveCurrentImage())}else this.createNoDirectionKeypoint(this.state.blankAreaClickStart);this.state.blankAreaClickStart=null,this.state.mouseDownTime=null,this.state.wasDraggedDuringSession=!1}this.customAnnotationDragState.isDragging&&this.finishCustomAnnotationDrag(),this.state.isDirectionDragging&&this.finishDirectionAnnotation(),this.state.isCustomRegionDragging&&this.finishCustomRegionDrag()}createNoDirectionKeypoint(t){if(!this.customAnnotationManager||!this.customAnnotationManager.isInCustomMode())return void(window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Annotation Disabled","Please select an Annotation Type before creating keypoints."));if(!this.canCreateAnnotationAt(t.x,t.y))return void(window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Invalid Position","Annotations can only be placed within the image area. Please click directly on the image."));const e=this.screenToImage(t.x,t.y),n=this.customAnnotationManager.getCurrentCustomType();if(n){if("region"!==n.type)return"number"==typeof n.metadata?.defaultAngle&&n.metadata.defaultAngle,this.addCustomPointAnnotation(e.x,e.y,n.id);this.startUnifiedCustomRegionDrag(t,n.id)}else window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("No Type Selected","Please select an Annotation Type before annotating.")}selectKeypoint(t){console.log("[调试] selectKeypoint 被调用",{keypoint:t.order,currentDirection:t.direction,directionType:t.directionType}),this.ensureMultiDirectionSupport(t),this.state.selectedKeypoint=t,this.state.isDirectionSelectionMode=!0,this.state.directionSelectionPoint=null,console.log("[调试] 方向选择模式状态",{isDirectionSelectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:this.state.selectedKeypoint?.order,isAutoDirectionMode:this.state.isAutoDirectionMode}),this.canvas.style.cursor="crosshair",this.notifySelectedKeypointPreview(t),this.render(),console.log(`Selected keypoint #${t.order} for direction selection`)}handleKeypointClick(t){console.log("[调试] handleKeypointClick 被调用",{keypoint:t.order,isAutoDirectionMode:this.state.isAutoDirectionMode,isDirectionSelectionMode:this.state.isDirectionSelectionMode,currentSelectedKeypoint:this.state.selectedKeypoint?.order}),this.state.isAutoDirectionMode,this.selectKeypoint(t)}async handleDirectionSelection(t){if(console.log("[调试] handleDirectionSelection 被调用",{selectedKeypoint:this.state.selectedKeypoint,mousePos:t,isAutoDirectionMode:this.state.isAutoDirectionMode}),!this.state.selectedKeypoint)return void console.log("[调试] 没有选中的标注点，退出方向选择");const e=this.imageToScreen(this.state.selectedKeypoint.x,this.state.selectedKeypoint.y),n=t.x-e.x,o=t.y-e.y,i=180*Math.atan2(o,n)/Math.PI,a=(i+360)%360,s=this.screenToImage(t.x,t.y),r={x:s.x,y:s.y,screenX:t.x,screenY:t.y,timestamp:Date.now()};if(console.log("[调试] 计算的角度信息",{deltaX:n,deltaY:o,angle:i,normalizedAngle:a,clickData:r,keypointBefore:{...this.state.selectedKeypoint}}),this.state.selectedKeypoint.maxDirections>1){const t={angle:a,type:"angle",clickPosition:r};this.addDirectionToKeypoint(this.state.selectedKeypoint,t)&&(this.state.directionsSet++,console.log(`[多方向] 设置方向 ${this.state.directionsSet}/${this.state.selectedKeypoint.maxDirections}: ${a.toFixed(1)}°`),this.showMultiDirectionProgress(),this.triggerRealTimeSync("EDIT_DIRECTION",this.state.selectedKeypoint),this.state.selectedKeypoint.directions.length>=this.state.selectedKeypoint.maxDirections&&(console.log("[多方向] 所有方向设置完成"),this.finishMultiDirectionSetting()))}else{const t=this.state.selectedKeypoint.direction;this.state.selectedKeypoint.direction=a,this.state.selectedKeypoint.directionType="angle",this.state.selectedKeypoint.directionClick=r,this.state.selectedKeypoint.directions=[{angle:a,type:"angle",clickPosition:r}],console.log("[调试] 方向更新",{keypointId:this.state.selectedKeypoint.id,order:this.state.selectedKeypoint.order,oldDirection:t,newDirection:a,clickData:r,keypointAfter:{...this.state.selectedKeypoint}}),this.triggerRealTimeSync("EDIT_DIRECTION",this.state.selectedKeypoint),this.state.isAutoDirectionMode?(console.log("[调试] 自动模式，处理下一步:",this.autoDirectionMode),"cross-sectional"===this.autoDirectionMode?await this.handleCrossSectionalDirectionSet(a):this.selectNextAutoDirectionKeypoint()):(console.log("[调试] 非自动模式，取消方向选择"),this.cancelDirectionSelection(!0),this.state.autoMoveToExpectedPosition&&this.justCreatedNewPoint?(console.log("[自动移动] 检测到新建标注点，移动到下一个预期位置"),this.moveToNextExpectedPosition(),this.justCreatedNewPoint=!1):console.log("[自动移动] 跳过移动 - 仅为现有标注点设置方向或auto-move已关闭"))}}async handleCrossSectionalDirectionSet(t){if(this.crossSectionalState)try{if(console.log(`[Cross-Sectional] Setting direction ${t.toFixed(1)}° for current point`),!this.crossSectionalState)return void console.warn("[Cross-Sectional] State is null, cannot process direction");if(await this.processCurrentCrossSectionalPoint(t),this.saveState(),this.autoSaveCurrentImage(),!this.crossSectionalState)return void console.warn("[Cross-Sectional] State became null during processing");this.crossSectionalState.processedCount>=this.crossSectionalState.totalCount?(console.log("[Cross-Sectional] All annotations processed, completing mode"),this.completeCrossSectionalMode()):console.log("[Cross-Sectional] Continuing to next annotation")}catch(e){console.error("[Cross-Sectional] Failed to handle direction set:",e),window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Cross-Sectional Error",`Failed to process direction: ${e.message}`);try{console.log("[Cross-Sectional] Attempting to continue despite error..."),this.crossSectionalState?(this.crossSectionalState.processedCount++,await this.advanceCrossSectionalProgress()):console.warn("[Cross-Sectional] Cannot continue - state is null")}catch(n){console.error("[Cross-Sectional] Failed to advance after error:",n),this.crossSectionalState?this.completeCrossSectionalMode():(console.warn("[Cross-Sectional] Cannot complete - state is null, forcing exit"),this.exitAutoDirectionMode())}}else console.error("[Cross-Sectional] No cross-sectional state available")}cancelDirectionSelection(t=!1){console.log("[调试] cancelDirectionSelection 被调用",{wasInDirectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:this.state.selectedKeypoint?.order,isAutoMode:this.state.isAutoDirectionMode,forceExit:t}),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null,this.state.isAutoDirectionMode&&t?(console.log("[调试] 强制退出自动模式"),this.exitAutoDirectionMode()):this.state.isAutoDirectionMode&&console.log("[调试] 自动模式中取消方向选择，但保持自动模式"),this.state.isAutoDirectionMode,this.canvas.style.cursor="crosshair",this.restoreNormalPreview(),this.render(),console.log("Direction selection cancelled")}async startAutoDirectionMode(){console.log("[调试] startAutoDirectionMode 被调用，当前模式:",this.autoDirectionMode),(this.state.isDirectionSelectionMode||this.state.isAutoDirectionMode)&&(console.log("[调试] 清理之前的方向选择状态"),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null,this.state.isAutoDirectionMode=!1),this.crossSectionalState=null,this.crossSectionalMap.clear();try{if(this.customAnnotationManager){const t=this.customAnnotationManager.getCurrentCustomType?.();if(t&&t.metadata&&!1===t.metadata.isDirectional)return window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Auto Direction Disabled","当前选择的类型未启用方向功能"),!1}if("cross-sectional"===this.autoDirectionMode){const t=await this.startCrossSectionalMode();return t||(this.exitAutoDirectionMode(),this.resetAutoDirectionButton()),t}{const t=this.startLongitudinalMode();return t||(this.exitAutoDirectionMode(),this.resetAutoDirectionButton()),t}}catch(t){return console.error("[Auto Direction] Failed to start auto direction mode:",t),window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Auto Direction Error",t.message),!1}}async startCrossSectionalMode(){console.log("[Cross-Sectional] Starting cross-sectional mode");try{if(this.crossSectionalMap=await this.buildCrossSectionalMap(),0===this.crossSectionalMap.size)return console.log("[Cross-Sectional] No directionless annotations found across all images"),window.PlantAnnotationTool?.showInfo&&window.PlantAnnotationTool.showInfo("No Work Needed","No directionless annotations found across all images in current view angle."),!1;this.initializeCrossSectionalState(),this.state.isAutoDirectionMode=!0,this.updateAutoDirectionModeUI();const t=this.getCurrentCrossSectionalPoint();if(t)return console.log(`[Cross-Sectional] Starting with annotation #${t.annotation.order} in ${t.imageName}`),await this.switchToImageForCrossSectional(t.imageId),this.updateCrossSectionalProgressUI(),window.PlantAnnotationTool?.showInfo&&window.PlantAnnotationTool.showInfo("Cross-Sectional Mode",`Processing ${this.crossSectionalState.totalCount} annotations across ${this.crossSectionalState.availableOrders.length} order numbers. Click to set directions.`),!0;throw new Error("No annotations to process in cross-sectional mode")}catch(t){throw console.error("[Cross-Sectional] Failed to start cross-sectional mode:",t),t}}startLongitudinalMode(){console.log("[Longitudinal] Starting longitudinal mode");const t=this.keypoints.filter(t=>{const e=("left"===t.direction||"right"===t.direction)&&"angle"!==t.directionType&&"number"!=typeof t.direction,n=null===t.direction||void 0===t.direction;return e||n});return console.log("[Longitudinal] 找到需要设置方向的标注点",t.map(t=>({order:t.order,direction:t.direction,directionType:t.directionType,type:null===t.direction?"无方向":"传统方向"}))),0===t.length?(console.log("[Longitudinal] 没有需要设置方向的标注点"),window.PlantAnnotationTool?.showInfo&&window.PlantAnnotationTool.showInfo("无需设置","当前图像没有需要设置方向的标注点"),this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),!1):(t.sort((t,e)=>(t.order||0)-(e.order||0)),this.state.isAutoDirectionMode=!0,this.state.autoDirectionKeypoints=t,this.state.autoDirectionIndex=0,console.log("[Longitudinal] 设置自动模式状态",{isAutoDirectionMode:this.state.isAutoDirectionMode,autoDirectionKeypoints:this.state.autoDirectionKeypoints.length,autoDirectionIndex:this.state.autoDirectionIndex}),this.updateAutoDirectionModeUI(),this.selectKeypointWithZoom(t[0]),console.log(`[Longitudinal] 开始自动化方向设置模式，共 ${t.length} 个标注点需要设置方向`),window.PlantAnnotationTool?.showInfo&&window.PlantAnnotationTool.showInfo("Longitudinal Mode",`Setting directions for ${t.length} annotations in current image. Move mouse to select direction, click to confirm, right-click to pause.`),!0)}selectKeypointWithZoom(t){console.log("[调试] selectKeypointWithZoom 开始",{keypoint:t.order,isAutoMode:this.state.isAutoDirectionMode,isDirectionMode:this.state.isDirectionSelectionMode}),this.selectKeypoint(t),console.log("[调试] selectKeypoint 完成后状态",{isAutoMode:this.state.isAutoDirectionMode,isDirectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:this.state.selectedKeypoint?.order});const e=this.state.scale,n=Math.max(e,2.5),o=Math.min(n,this.options.maxZoom),i=this.canvas.width/2,a=this.canvas.height/2;this.state.scale=o,this.state.translateX=i-t.x*o,this.state.translateY=a-t.y*o,this.constrainView(),this.updateZoomInfo(),this.render();const s=e>=2.5?"保持当前缩放":"使用默认缩放";console.log(`自动居中到标注点 #${t.order}，缩放: ${o.toFixed(1)}x (${s})`),this.showKeypointFocusHint(t),console.log("[调试] selectKeypointWithZoom 完成后状态",{isAutoMode:this.state.isAutoDirectionMode,isDirectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:this.state.selectedKeypoint?.order})}showKeypointFocusHint(t){this.render.bind(this);let e=0;const n=()=>{if(e>=3)return;const o=this.imageToScreen(t.x,t.y),i=this.ctx;i.save(),i.globalAlpha=.6-.2*e,i.strokeStyle="#f59e0b",i.lineWidth=3,i.setLineDash([]);const a=30+10*e;i.beginPath(),i.arc(o.x,o.y,a,0,2*Math.PI),i.stroke(),i.restore(),e++,e<3&&setTimeout(n,200)};setTimeout(n,100)}constrainView(){if(!this.imageElement)return;const t=this.imageElement.width*this.state.scale,e=this.imageElement.height*this.state.scale,n=this.canvas.width,o=this.canvas.height;if(t<n)this.state.translateX=(n-t)/2;else{const e=0,o=n-t;this.state.translateX=Math.max(o,Math.min(e,this.state.translateX))}if(e<o)this.state.translateY=(o-e)/2;else{const t=0,n=o-e;this.state.translateY=Math.max(n,Math.min(t,this.state.translateY))}}selectNextAutoDirectionKeypoint(){if(this.state.autoDirectionIndex++,this.state.autoDirectionIndex>=this.state.autoDirectionKeypoints.length){const t=this.state.autoDirectionKeypoints.length;return console.log(`当前图片方向设置完成，共设置了 ${t} 个标注点`),this.tryAutoSwitchToNextImage()?void console.log("自动切换到下一张图片继续方向设置"):(this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),void(window.showSuccess&&window.showSuccess("全部完成","自动化方向设置已完成！")))}const t=this.state.autoDirectionKeypoints[this.state.autoDirectionIndex];this.selectKeypointWithZoom(t);const e=`${this.state.autoDirectionIndex+1}/${this.state.autoDirectionKeypoints.length}`;console.log(`自动选择下一个传统标注点 #${t.order} (${e})`),window.showInfo&&window.showInfo("升级进度",`正在升级第 ${this.state.autoDirectionIndex+1} 个，共 ${this.state.autoDirectionKeypoints.length} 个传统标注点`)}showAutoModeCompletionHint(){const t=document.createElement("div");if(t.className="auto-direction-completion-hint",t.textContent="🎉 自动化方向选择已完成！",t.style.cssText="\n      position: absolute;\n      top: 50px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n      color: white;\n      padding: 12px 24px;\n      border-radius: 25px;\n      font-size: 14px;\n      font-weight: 600;\n      z-index: 1000;\n      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);\n      animation: completionBounce 0.6s ease-out;\n    ",!document.getElementById("completion-animation-style")){const t=document.createElement("style");t.id="completion-animation-style",t.textContent="\n        @keyframes completionBounce {\n          0% {\n            opacity: 0;\n            transform: translateX(-50%) translateY(-20px) scale(0.8);\n          }\n          50% {\n            transform: translateX(-50%) translateY(0) scale(1.1);\n          }\n          100% {\n            opacity: 1;\n            transform: translateX(-50%) translateY(0) scale(1);\n          }\n        }\n      ",document.head.appendChild(t)}const e=document.getElementById("canvas-container");e&&(e.appendChild(t),setTimeout(()=>{t.parentElement&&t.remove()},3e3))}setAutoDirectionMode(t){if(!["longitudinal","cross-sectional"].includes(t))throw new Error("Invalid auto direction mode: "+t);this.autoDirectionMode=t,console.log(`Auto Direction mode set to: ${t}`),this.updateAutoDirectionModeUI()}updateAutoDirectionModeUI(){const t=document.getElementById("auto-direction-btn"),e=document.getElementById("auto-direction-mode-selector");if(t&&this.autoDirectionMode)if(t.classList.remove("longitudinal-mode","cross-sectional-mode"),t.classList.add(`${this.autoDirectionMode}-mode`),this.state.isAutoDirectionMode){const e="cross-sectional"===this.autoDirectionMode?"Exit Vertical Mode":"Exit Horizontal Mode";t.textContent=e}else t.textContent="Auto Direction";e&&this.autoDirectionMode&&(e.value=this.autoDirectionMode,console.log("[调试] 更新UI选择器为:",this.autoDirectionMode))}async buildCrossSectionalMap(){const t=window.PlantAnnotationTool?.plantDataManager,e=window.PlantAnnotationTool?.appState;if(!t||!e?.currentPlant)throw new Error("Plant data manager or current plant not available");const n=new Map;try{const i=await t.getPlantImages(e.currentPlant.id,e.currentPlant.selectedViewAngle);if(!i||0===i.length)throw new Error("No images found for current plant and view angle");console.log(`[Cross-Sectional] Analyzing ${i.length} images for directionless annotations`);for(const e of i)try{const o=await t.getImageAnnotations(e.id);if(o&&o.length>0){const t=o.filter(t=>!t.direction||"none"===t.direction||null===t.direction);for(const o of t){const t=o.order||1;n.has(t)||n.set(t,[]),n.get(t).push({imageId:e.id,imageName:e.name,annotation:o})}}}catch(o){console.warn(`[Cross-Sectional] Failed to load annotations for image ${e.id}:`,o)}for(const[t,e]of n)e.sort((t,e)=>t.imageName.localeCompare(e.imageName));return console.log(`[Cross-Sectional] Built map with ${n.size} order numbers`,Array.from(n.keys()).sort((t,e)=>t-e)),n}catch(o){throw console.error("[Cross-Sectional] Failed to build cross-sectional map:",o),o}}getAvailableOrderNumbers(){return this.crossSectionalMap?Array.from(this.crossSectionalMap.keys()).sort((t,e)=>t-e):[]}getImagesWithOrder(t){return this.crossSectionalMap&&this.crossSectionalMap.has(t)?this.crossSectionalMap.get(t):[]}initializeCrossSectionalState(){const t=this.getAvailableOrderNumbers();if(0===t.length)throw new Error("No directionless annotations found across all images");this.crossSectionalState={currentOrder:t[0],currentImageIndex:0,processedCount:0,totalCount:this.getAllCrossSectionalPoints().length,availableOrders:t,startTime:Date.now()},console.log("[Cross-Sectional] Initialized state:",this.crossSectionalState)}getAllCrossSectionalPoints(){const t=[];if(!this.crossSectionalMap)return t;for(const e of this.crossSectionalMap.values())t.push(...e);return t}getCurrentCrossSectionalPoint(){if(!this.crossSectionalState)return null;const{currentOrder:t,currentImageIndex:e}=this.crossSectionalState,n=this.getImagesWithOrder(t);return e>=n.length?null:n[e]}async processCurrentCrossSectionalPoint(t){if(!this.crossSectionalState)return void console.warn("[Cross-Sectional] Cannot process point - state is null");const e=this.getCurrentCrossSectionalPoint();if(e)try{e.annotation.direction=t;const n=window.PlantAnnotationTool?.plantDataManager;if(n){const t=await n.getImageAnnotations(e.imageId);await n.saveImageAnnotations(e.imageId,t)}if(!this.crossSectionalState)return void console.warn("[Cross-Sectional] State became null during processing");this.crossSectionalState.processedCount++,console.log(`[Cross-Sectional] Processed annotation #${e.annotation.order} in ${e.imageName} with direction: ${t}`),await this.advanceCrossSectionalProgress()}catch(n){throw console.error("[Cross-Sectional] Failed to process point:",n),n}else console.warn("[Cross-Sectional] No current point to process")}async advanceCrossSectionalProgress(){if(!this.crossSectionalState)return;const{currentOrder:t,currentImageIndex:e,availableOrders:n}=this.crossSectionalState,o=this.getImagesWithOrder(t);if(e+1<o.length){if(!this.crossSectionalState)return void console.warn("[Cross-Sectional] State became null during advance, cannot continue");this.crossSectionalState.currentImageIndex++;const e=o[this.crossSectionalState.currentImageIndex];console.log(`[Cross-Sectional] Moving to next image for order ${t}: ${e.imageName}`),await this.switchToImageForCrossSectional(e.imageId)}else{const e=n.indexOf(t);if(e+1<n.length){if(!this.crossSectionalState)return void console.warn("[Cross-Sectional] State became null during advance, cannot continue");const t=n[e+1];this.crossSectionalState.currentOrder=t,this.crossSectionalState.currentImageIndex=0;const o=this.getImagesWithOrder(t);o.length>0&&(console.log(`[Cross-Sectional] Moving to next order ${t}, starting with: ${o[0].imageName}`),await this.switchToImageForCrossSectional(o[0].imageId))}else console.log("[Cross-Sectional] All orders processed, completing mode"),this.completeCrossSectionalMode()}this.updateCrossSectionalProgressUI()}async switchToImageForCrossSectional(t){try{console.log(`[Cross-Sectional] Starting image switch to: ${t}`);const e=window.PlantAnnotationTool?.plantDataManager,n=window.PlantAnnotationTool?.appState;if(!e||!n?.currentPlant)throw new Error("Plant data manager or current plant not available");const o=(await e.getPlantImages(n.currentPlant.id,n.currentPlant.selectedViewAngle)).find(e=>e.id===t);if(!o)throw new Error(`Image not found: ${t}`);if(console.log(`[Cross-Sectional] Switching to image: ${o.name}`),!window.handleImageSelect)throw new Error("Global image selection function not available");console.log("[Cross-Sectional] Calling handleImageSelect..."),await window.handleImageSelect(o,!0),console.log("[Cross-Sectional] handleImageSelect completed successfully"),console.log("[Cross-Sectional] Waiting for image to load..."),await this.waitForImageLoad(),console.log("[Cross-Sectional] Image loaded successfully");const i=this.getCurrentCrossSectionalPoint();if(i&&i.annotation){console.log(`[Cross-Sectional] Looking for annotation #${i.annotation.order} in loaded keypoints`);const t=this.keypoints.find(t=>t.order===i.annotation.order);t?(console.log(`[Cross-Sectional] Found annotation #${t.order}, selecting it`),this.state.selectedKeypoint=t,this.state.isDirectionSelectionMode=!0,this.selectKeypointWithZoom(t)):console.warn(`[Cross-Sectional] Could not find annotation #${i.annotation.order} in loaded keypoints`)}else console.warn("[Cross-Sectional] No current point available after image switch")}catch(e){console.error("[Cross-Sectional] Failed to switch image:",e),window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Image Switch Failed",e.message)}}async waitForImageLoad(t=5e3){const e=Date.now();for(console.log(`[Cross-Sectional] Waiting for image load... (max ${t}ms)`);!this.imageLoaded&&Date.now()-e<t;)await new Promise(t=>setTimeout(t,100));return this.imageLoaded?(console.log(`[Cross-Sectional] Image loaded in ${Date.now()-e}ms`),!0):(console.warn(`[Cross-Sectional] Image load timeout after ${t}ms`),!1)}completeCrossSectionalMode(){if(!this.crossSectionalState)return console.warn("[Cross-Sectional] Cannot complete - state is null"),void this.exitAutoDirectionMode();const t=Date.now()-this.crossSectionalState.startTime,e=this.crossSectionalState.processedCount;console.log(`[Cross-Sectional] Mode completed! Processed ${e} annotations in ${t}ms`),window.updateProgressInfo&&window.updateProgressInfo(`Cross-Sectional mode completed! Processed ${e} annotations across all images.`),this.crossSectionalState=null,this.crossSectionalMap.clear(),this.exitAutoDirectionMode()}updateCrossSectionalProgressUI(){const t=document.getElementById("auto-direction-progress"),e=document.getElementById("progress-current"),n=document.getElementById("progress-total"),o=document.getElementById("auto-direction-progress-fill"),i=document.getElementById("progress-mode-info");if(!this.crossSectionalState)return void(t&&(t.style.display="none"));const{processedCount:a,totalCount:s,currentOrder:r,availableOrders:l}=this.crossSectionalState,c=s>0?a/s*100:0;if(t&&(t.style.display="block"),e&&(e.textContent=a),n&&(n.textContent=s),o&&(o.style.width=`${c}%`,o.className="progress-fill cross-sectional-indicator"),i){const t=l.indexOf(r);i.textContent=`Order ${r} (${t+1}/${l.length})`}}getAutoDirectionProgress(){if("cross-sectional"===this.autoDirectionMode&&this.crossSectionalState){const{processedCount:t,totalCount:e,currentOrder:n,availableOrders:o}=this.crossSectionalState;return{total:e,completed:t,percentage:e>0?Math.round(t/e*100):0,currentOrder:n,totalOrders:o.length,mode:"cross-sectional"}}if("longitudinal"===this.autoDirectionMode&&this.state.isAutoDirectionMode){const t=this.state.autoDirectionKeypoints.length,e=this.state.autoDirectionIndex;return{total:t,completed:e,percentage:t>0?Math.round(e/t*100):0,mode:"longitudinal"}}return{total:0,completed:0,percentage:0,mode:this.autoDirectionMode}}exitAutoDirectionMode(){console.log("[调试] exitAutoDirectionMode 被调用",{stackTrace:(new Error).stack});const t=this.autoDirectionMode;console.log("[调试] 保存用户模式偏好:",t),this.state.isAutoDirectionMode=!1,this.state.autoDirectionKeypoints=[],this.state.autoDirectionIndex=0,this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null,"cross-sectional"===this.autoDirectionMode&&this.crossSectionalState?(console.log("[调试] 延迟清理 cross-sectional 状态，让完成流程处理"),this.autoDirectionMode=t):(this.crossSectionalState=null,this.autoDirectionMode=t),this.restoreNormalPreview(),this.render(),this.resetAutoDirectionButton();const e=document.getElementById("auto-direction-mode-selector");e&&t&&(e.value=t,console.log("[调试] 恢复UI选择器状态:",t)),console.log("Exited auto direction mode, preserved mode preference:",t)}notifySelectedKeypointPreview(t){const e=window.PlantAnnotationTool?.branchPointPreviewManager;e&&t&&t.order&&e.showSpecificOrderPreview(t.order)}restoreNormalPreview(){const t=window.PlantAnnotationTool?.branchPointPreviewManager;t&&t.restoreNormalPreview()}handleContextMenu(t){t.preventDefault();const e=this.getMousePos(t),n=this.getCustomAnnotationAt(e);if(n)return void this.removeCustomAnnotation(n);const o=this.getKeypointAt(e);o&&this.removeKeypoint(o)}handleWheel(t){if(t.preventDefault(),this.state.isDirectionCountMode)return void this.handleScrollWheel(t);const e=this.getMousePos(t),n=1+(-t.deltaY>0?this.options.zoomSpeed:-this.options.zoomSpeed);this.zoomAt(e.x,e.y,n)}zoomAt(t,e,n){const o=this.state.scale*n;o<this.options.minZoom||o>this.options.maxZoom||(this.state.translateX=t-(t-this.state.translateX)*n,this.state.translateY=e-(e-this.state.translateY)*n,this.state.scale=o,this.updateZoomInfo(),this.render())}handleKeyDown(t){if("INPUT"!==t.target.tagName&&"TEXTAREA"!==t.target.tagName)switch(t.key){case" ":t.preventDefault();break;case"r":case"R":t.preventDefault(),this.resetView();break;case"1":t.preventDefault(),this.setZoom(1);break;case"z":(t.ctrlKey||t.metaKey)&&(t.preventDefault(),t.shiftKey?this.redo():this.undo());break;case"y":(t.ctrlKey||t.metaKey)&&(t.preventDefault(),this.redo())}}handleKeyUp(t){}setZoom(t){if(!this.imageElement||!this.imageLoaded)return;const e=this.canvas.width/2,n=this.canvas.height/2;this.zoomAt(e,n,t/this.state.scale)}updateZoomInfo(){const t=document.getElementById("zoom-level");t&&(t.textContent=Math.round(100*this.state.scale)+"%")}getKeypointAt(t){const e=this.options.baseKeypointRadius+5;return this.keypoints.find(n=>{const o=this.imageToScreen(n.x,n.y);return Math.sqrt(Math.pow(t.x-o.x,2)+Math.pow(t.y-o.y,2))<=e})}addKeypoint(t,e="right"){if(!this.canCreateAnnotationAt(t.x,t.y))return void console.warn("[AnnotationTool] Cannot add keypoint: position is outside valid annotation area");const n=this.screenToImage(t.x,t.y);this.addKeypointWithDirection(n.x,n.y,e)}addKeypointWithDirection(t,e,n,o=null,i=null,a=null){if(!this.imageElement||!this.imageLoaded)return void console.warn("[AnnotationTool] Cannot add keypoint: no image loaded");if(!o&&this.customAnnotationManager&&this.customAnnotationManager.isInCustomMode()){const t=this.customAnnotationManager.getCurrentCustomType();!t||"point"!==t.type&&"region"!==t.type||(o=t.id,t.metadata&&!1!==t.metadata.isDirectional||(n=null))}const s=o?this.findNextAvailableOrderForType(o):this.findNextAvailableOrder();let r=n;r="left"===n?180:"right"===n?0:"number"==typeof n?n:void 0===n?void 0:0;const l={id:Date.now(),x:t,y:e,timestamp:(new Date).toISOString(),...void 0!==r&&{direction:r},...void 0!==r&&{directionType:"angle"},order:s,annotationType:o?"custom":"regular",...o&&{customTypeId:o},..."number"==typeof i&&{width:i},..."number"==typeof a&&{height:a}};this.keypoints.push(l),this.saveState(),this.render(),this.autoSaveCurrentImage(),this.triggerRealTimeSync("ADD_KEYPOINT",l),this.syncBranchPointPreview(),this.justCreatedNewPoint=!0,this.state.autoMoveToExpectedPosition&&(this.moveToNextExpectedPosition(),this.justCreatedNewPoint=!1);const c=o?`custom(${o})`:"regular",d="number"==typeof r?`${r}°`:r;return console.log(`Added ${c} keypoint #${s} at (${t.toFixed(1)}, ${e.toFixed(1)}) with direction ${d}`),l}addCustomPointAnnotation(t,e,n){let o=null;try{const t=this.getCustomType(n);t&&t.metadata&&"number"==typeof t.metadata.defaultAngle&&(o=t.metadata.defaultAngle)}catch(i){}return this.addKeypointWithDirection(t,e,o,n)}addCustomRegionAnnotation(t,e,n,o,i){return this.addKeypointWithDirection(t,e,null,i,n,o)}getCustomType(t){return this.customAnnotationManager?this.customAnnotationManager.getCustomType(t):this.customTypes?.get(t)||null}setCustomTypes(t){this.customTypes=t}handleUnifiedCustomAnnotationMode(t){if(this.customAnnotationManager)try{const e=this.customAnnotationManager.getCurrentCustomType();if(!e)return void console.warn("No custom type selected");const n=this.screenToImage(t.x,t.y);if("point"===e.type){const t=this.addCustomPointAnnotation(n.x,n.y,e.id);t&&console.log("Created unified custom point annotation:",t)}else"region"===e.type&&this.startUnifiedCustomRegionDrag(t,e.id)}catch(e){console.error("Failed to handle unified custom annotation mode:",e)}else console.warn("Custom annotation manager not available")}startUnifiedCustomRegionDrag(t,e){this.canCreateAnnotationAt(t.x,t.y)?(this.state.isCustomRegionDragging=!0,this.state.customRegionStartPoint=t,this.state.customRegionCurrentPoint=t,this.state.customRegionTypeId=e,this.canvas.style.cursor="crosshair",console.log("Started unified custom region drag at:",t)):console.warn("Cannot create custom region annotation: position is outside valid area")}finishUnifiedCustomRegionDrag(){if(!this.state.isCustomRegionDragging||!this.state.customRegionStartPoint||!this.state.customRegionCurrentPoint)return void this.resetCustomRegionDrag();const t=this.screenToImage(this.state.customRegionStartPoint.x,this.state.customRegionStartPoint.y),e=this.screenToImage(this.state.customRegionCurrentPoint.x,this.state.customRegionCurrentPoint.y),n=Math.abs(e.x-t.x),o=Math.abs(e.y-t.y);if(n<10||o<10)return console.log("Region too small, ignoring"),void this.resetCustomRegionDrag();const i=Math.min(t.x,e.x),a=Math.min(t.y,e.y),s=this.addCustomRegionAnnotation(i,a,n,o,this.state.customRegionTypeId);s&&console.log("Created unified custom region annotation:",s),this.resetCustomRegionDrag()}findNextAvailableOrderForType(t){const e=this.keypoints.filter(e=>"custom"===e.annotationType&&e.customTypeId===t);if(0===e.length)return 1;const n=e.map(t=>t.order||0).filter(t=>t>0).sort((t,e)=>t-e);for(let o=1;o<=n.length+1;o++)if(!n.includes(o))return o;return n.length+1}findNextAvailableOrder(){const t=this.keypoints.filter(t=>"regular"===t.annotationType||!t.annotationType);if(0===t.length)return 1;const e=t.map(t=>t.order||0).filter(t=>t>0).sort((t,e)=>t-e);for(let n=1;n<=e.length+1;n++)if(!e.includes(n))return n;return e.length+1}removeKeypoint(t){const e=this.keypoints.indexOf(t);if(-1!==e){const n=this.keypoints.splice(e,1)[0];this.saveState(),this.render(),this.triggerRealTimeSync("DELETE_KEYPOINT",n),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log(`Removed keypoint #${n.order||"unknown"} (id: ${t.id})`),console.log(`下一个新增标注点将使用编号: ${this.findNextAvailableOrder()}`)}}clearKeypoints(){this.keypoints.length>0&&(this.keypoints=[],this.saveState(),this.render(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log("Cleared all keypoints (unified system)"))}clearKeypointsWithoutSave(){this.keypoints.length>0&&(this.keypoints=[],this.saveState(),this.render(),this.syncBranchPointPreview(),console.log("Cleared all keypoints (without auto-save, unified system)"))}reorderKeypoints(){this.keypoints.sort((t,e)=>(t.order||0)-(e.order||0));for(let t=0;t<this.keypoints.length;t++)this.keypoints[t].order=t+1;console.log(`Reordered ${this.keypoints.length} keypoints`)}saveState(){const t={keypoints:JSON.parse(JSON.stringify(this.keypoints)),timestamp:Date.now()};this.history=this.history.slice(0,this.historyIndex+1),this.history.push(t),this.historyIndex=this.history.length-1,this.history.length>this.maxHistorySize&&(this.history.shift(),this.historyIndex--)}undo(){if(this.historyIndex>0){this.historyIndex--;const t=this.history[this.historyIndex];this.keypoints=JSON.parse(JSON.stringify(t.keypoints)),this.render(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log("Undo")}}redo(){if(this.historyIndex<this.history.length-1){this.historyIndex++;const t=this.history[this.historyIndex];this.keypoints=JSON.parse(JSON.stringify(t.keypoints)),this.render(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log("Redo")}}getAnnotationData(){return{keypoints:this.keypoints.map(t=>({...t})),imageInfo:this.currentImage?{name:this.currentImage.name,width:this.imageElement?.width,height:this.imageElement?.height}:null,viewState:{scale:this.state.scale,translateX:this.state.translateX,translateY:this.state.translateY}}}loadAnnotationData(t){t.keypoints&&(this.keypoints=t.keypoints.map(t=>({...t})),console.log(`🔄 Loaded ${this.keypoints.length} keypoints (auto-renumbering disabled)`)),t.viewState&&(this.state.scale=t.viewState.scale||1,this.state.translateX=t.viewState.translateX||0,this.state.translateY=t.viewState.translateY||0,this.updateZoomInfo()),this.saveState(),this.render()}ensureKeypointOrders(){const t={};this.keypoints.forEach(e=>{const n="custom"===e.annotationType?`custom:${e.customTypeId||"unknown"}`:"regular";t[n]||(t[n]=[]),t[n].push(e)});let e=!1,n=0;Object.entries(t).forEach(([t,o])=>{let i=!1;for(let e=0;e<o.length;e++)if("number"!=typeof o[e].order||o[e].order<=0){i=!0;break}if(!i){const t=o.map(t=>t.order);[...new Set(t)].length!==t.length&&(i=!0)}if(i){console.log(`发现 ${t} 类型标注序号问题，正在为 ${o.length} 个标注点分配序号...`),e=!0;for(let t=0;t<o.length;t++)o[t].order=t+1;n+=o.length,console.log(`已为 ${t} 类型分配序号：1-${o.length}`)}}),e&&(console.log("发现传统数据或序号问题，正在为标注点添加/修复序号..."),console.log(`序号修复完成：共修复 ${n} 个标注点，保持类型特定编号系统`))}destroy(){this.imageElement&&this.imageElement.src.startsWith("blob:")&&URL.revokeObjectURL(this.imageElement.src),console.log("AnnotationTool destroyed")}startDirectionAnnotation(t){if(!this.canCreateAnnotationAt(t.x,t.y))return void(window.PlantAnnotationTool?.showError&&window.PlantAnnotationTool.showError("Invalid Position","Direction annotations can only be placed within the image area. Please click directly on the image."));const e=this.screenToImage(t.x,t.y);this.state.isDirectionDragging=!0,this.state.dragStartPoint=t,this.state.currentDragPoint=t,this.state.previewKeypoint={x:e.x,y:e.y,direction:0,directionType:"angle"},this.canvas.style.cursor="grabbing",console.log("Started direction annotation")}updateDirectionDragging(t){this.state.currentDragPoint=t;const e=t.x-this.state.dragStartPoint.x,n=t.y-this.state.dragStartPoint.y;if(Math.sqrt(e*e+n*n)>=this.options.directionThreshold){const t=(180*Math.atan2(n,e)/Math.PI+360)%360;this.state.previewKeypoint.direction=t,this.state.previewKeypoint.directionType="angle"}else this.state.previewKeypoint.direction=0,this.state.previewKeypoint.directionType="angle";this.render()}finishDirectionAnnotation(){if(!this.state.previewKeypoint)return void this.resetDirectionDragging();const t=this.state.currentDragPoint.x-this.state.dragStartPoint.x,e=this.state.currentDragPoint.y-this.state.dragStartPoint.y;let n;Math.sqrt(t*t+e*e)>=this.options.directionThreshold?(n=(180*Math.atan2(e,t)/Math.PI+360)%360,console.log(`Added keypoint with angle direction ${n.toFixed(1)}° at (${this.state.previewKeypoint.x.toFixed(1)}, ${this.state.previewKeypoint.y.toFixed(1)})`)):(n=0,console.log(`Added default keypoint (0°) at (${this.state.previewKeypoint.x.toFixed(1)}, ${this.state.previewKeypoint.y.toFixed(1)})`)),this.addKeypointWithDirection(this.state.previewKeypoint.x,this.state.previewKeypoint.y,n),this.resetDirectionDragging()}resetDirectionDragging(){this.state.isDirectionDragging=!1,this.state.dragStartPoint=null,this.state.currentDragPoint=null,this.state.previewKeypoint=null,this.canvas.style.cursor="crosshair",this.render()}getKeypointDisplayStrategy(){const t=this.state.scale;let e;if(t>=1.5){const n=Math.max(10,Math.min(16,12*t)),o=Math.max(8,.7*n),i=Math.min(12,8+2*(t-1.5));e=Math.min(o,i),e=Math.max(8,e)}else e=2+1.5*(t-.1),e=Math.max(2,Math.min(4,e));return{scale:t,radius:e,showInternalLabel:t>=1.5,showExternalLabel:t>=this.options.tinyThresholdScale,showMinimalMode:t<this.options.tinyThresholdScale,fontSize:Math.max(10,Math.min(16,12*t)),directionFontSize:Math.max(8,Math.min(12,10*t)),labelOffset:8,borderWidth:Math.max(1,Math.min(2,1.5*t))}}createExternalLabel(t,e,n,o,i,a){const s=this.canvas,r=s.parentElement,l=document.createElement("div");l.className="keypoint-label "+("left"===o?"left-direction":"right-direction"),l.textContent=n.toString(),l.dataset.keypointId=`${t}-${e}`;const c=s.getBoundingClientRect(),d=r.getBoundingClientRect(),g=c.left-d.left,h=c.top-d.top,p=a.radius<4?12:15;l.style.left=g+t-6+"px",l.style.top=h+e-a.radius-p+"px",r.appendChild(l)}createTooltip(t,e,n,o,i){const a=this.canvas,s=a.parentElement,r=s.querySelector(".keypoint-tooltip");r&&r.remove();const l=document.createElement("div");l.className="keypoint-tooltip";const c="left"===o?"Left":"Right",d=`(${Math.round(i.x)}, ${Math.round(i.y)})`;l.innerHTML=`\n      <div>分支点 #${n}</div>\n      <div>方向: ${c}</div>\n      <div>位置: ${d}</div>\n    `;const g=a.getBoundingClientRect(),h=s.getBoundingClientRect(),p=g.left-h.left,u=g.top-h.top;l.style.left=p+t-60+"px",l.style.top=u+e-80+"px",s.appendChild(l),setTimeout(()=>{l.parentElement&&l.remove()},3e3)}clearKeypointLabels(){this.canvas&&this.canvas.parentElement&&this.canvas.parentElement.querySelectorAll(".keypoint-label").forEach(t=>t.remove())}updateZoomIndicator(t){const e=document.getElementById("zoom-indicator");e&&(e.classList.remove("small","tiny"),t.showMinimalMode?e.classList.add("tiny"):t.showExternalLabel&&e.classList.add("small"))}updateAnnotationSizeInfo(t){const e=document.getElementById("annotation-size-info"),n=document.getElementById("size-info-text");if(!e||!n)return;let o="",i=!1;t.showMinimalMode?(o="标注点: 极小模式（悬停查看详情）",i=!0):t.showExternalLabel?(o="标注点: 外部标签模式",i=!0):(o="标注点: 正常大小",i=this.keypoints.length>0&&(t.scale<.8||t.scale>3)),n.textContent=o,i?(e.classList.add("visible"),setTimeout(()=>{e&&e.classList.remove("visible")},2e3)):e.classList.remove("visible")}syncBranchPointPreview(){const t=window.PlantAnnotationTool?.branchPointPreviewManager,e=window.PlantAnnotationTool?.appState;if(t&&e?.currentPlant&&e?.currentImage){const n=this.keypoints.length;setTimeout(async()=>{try{const o=window.PlantAnnotationTool?.plantDataManager;if(o){const i=(await o.getPlantImages(e.currentPlant.id,e.currentPlant.selectedViewAngle)).findIndex(t=>t.id===e.currentImage.id);await t.updateContext(e.currentPlant.id,e.currentPlant.selectedViewAngle,i,n)}}catch(o){console.warn("同步分支点预览失败:",o)}},100)}}notifyDraggedKeypointPreview(t){const e=window.PlantAnnotationTool?.branchPointPreviewManager;e&&t&&t.order&&e.showSpecificOrderPreview(t.order)}setImageSwitchLock(t,e=null){this.imageSwitchLock.isLocked=t,this.imageSwitchLock.currentLoadingImageId=e,this.imageSwitchLock.lockStartTime=t?Date.now():null,console.log(`[图像切换锁] ${t?"锁定":"解锁"} - 图像: ${e||"none"}`)}validateCurrentImageConsistency(t){const e=window.PlantAnnotationTool?.appState;if(!e?.currentImage?.id)return console.warn("[一致性检查] 当前图像状态无效"),!1;const n=e.currentImage.id===t;return n||console.warn(`[一致性检查] 不一致 - 期望: ${t}, 实际: ${e.currentImage.id}`),n}async autoSaveCurrentImage(){try{const e=window.PlantAnnotationTool?.plantDataManager,n=window.PlantAnnotationTool?.appState;if(!e||!n?.currentPlant||!n?.currentImage)return void console.warn("自动保存跳过：缺少必要的上下文信息");if(this.imageSwitchLock.isLocked)return void console.warn(`[自动保存] 跳过：图像切换进行中 (${this.imageSwitchLock.currentLoadingImageId})`);if(!n.currentImage||!n.currentImage.id)return void console.warn("自动保存跳过：当前图像信息无效");const o=n.currentImage.id,i=this.getAnnotationData();if(!this.validateCurrentImageConsistency(o))return void console.warn(`[自动保存] 跳过：图像状态在保存前发生变化 (${o})`);if(await e.saveImageAnnotations(o,i.keypoints),!this.validateCurrentImageConsistency(o))return void console.warn(`[自动保存] 警告：图像状态在保存后发生变化，数据可能已保存到错误图像 (${o})`);console.log(`自动保存完成：${i.keypoints.length} 个标注点已保存到图像 ${o}`);try{const t=window.refreshThumbnailAnnotationStatus;"function"==typeof t?(await t(o),console.log("自动保存后缩略图状态已刷新")):console.warn("refreshThumbnailAnnotationStatus 函数未找到，跳过缩略图刷新")}catch(t){console.warn("刷新缩略图状态失败:",t)}}catch(e){console.error("自动保存失败:",e)}}triggerRealTimeSync(t,e,n=null){try{const o=window.PlantAnnotationTool?.realTimeSyncManager;if(!o)return void console.warn("🔄 实时同步管理器未找到，跳过同步操作");if(!o.isRealTimeSyncEnabled())return void console.log("🔄 实时同步已禁用，跳过同步操作");const i=window.PlantAnnotationTool?.appState;if(!i?.currentPlant||!i?.currentImage)return void console.warn("🔄 缺少当前植株或图像信息，跳过同步操作");const a={id:e?.id,order:e?.order,annotationType:e?.annotationType,customTypeId:e?.customTypeId,x:e?.x,y:e?.y};if(console.log(`🔄 触发实时同步: ${t}`,{keypoint:a,plant:i.currentPlant.id,image:i.currentImage.id,isCustom:"custom"===e?.annotationType}),"custom"===e?.annotationType)switch(console.log(`🔄 Using custom annotation sync for ${t}`),t){case"ADD_KEYPOINT":const a={type:"CUSTOM_ANNOTATION_CREATE",annotation:e,context:{imageId:i.currentImage.id,plantId:i.currentPlant.id,viewAngle:i.currentPlant.selectedViewAngle,appState:i},timestamp:(new Date).toISOString()};o.triggerCustomAnnotationSync(a);break;case"MOVE_KEYPOINT":const s={type:"CUSTOM_ANNOTATION_UPDATE",annotation:e,context:{imageId:i.currentImage.id,plantId:i.currentPlant.id,viewAngle:i.currentPlant.selectedViewAngle,appState:i,positionChange:{from:n,to:{x:e.x,y:e.y}}},timestamp:(new Date).toISOString()};o.triggerCustomAnnotationSync(s);break;case"DELETE_KEYPOINT":const r={type:"CUSTOM_ANNOTATION_DELETE",annotation:e,context:{imageId:i.currentImage.id,plantId:i.currentPlant.id,viewAngle:i.currentPlant.selectedViewAngle,appState:i},timestamp:(new Date).toISOString()};o.triggerCustomAnnotationSync(r);break;default:console.warn(`🔄 未知的自定义标注同步操作类型: ${t}`)}else switch(console.log(`🔄 Using regular keypoint sync for ${t}`),t){case"ADD_KEYPOINT":o.triggerKeypointAddSync(e,i.currentImage,i.currentPlant);break;case"MOVE_KEYPOINT":o.triggerKeypointMoveSync(e,n,i.currentImage,i.currentPlant);break;case"DELETE_KEYPOINT":o.triggerKeypointDeleteSync(e,i.currentImage,i.currentPlant);break;case"EDIT_DIRECTION":o.triggerDirectionEditSync(e,i.currentImage,i.currentPlant);break;default:console.warn(`🔄 未知的常规标注同步操作类型: ${t}`)}}catch(o){console.error("🔄 触发实时同步失败:",o)}}renderDirectionIndicator(t,e,n,o){if(!n)return;let i,a="";if("number"==typeof n)i=n,a=`${i.toFixed(1)}°`;else if("left"===n)i=180,a="Left (180°)";else{if("right"!==n)return;i=0,a="Right (0°)"}this.renderDirectionArrow(t,e,i,a,o)}renderDirectionArrow(t,e,n,o,i){const a=n*Math.PI/180,s=this.options.directionArrowLength,r=t+Math.cos(a)*s,l=e+Math.sin(a)*s;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.setLineDash([8,4]),this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(r,l),this.ctx.stroke(),this.ctx.setLineDash([]);const c=a+.8*Math.PI,d=a-.8*Math.PI;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(r,l),this.ctx.lineTo(r+15*Math.cos(c),l+15*Math.sin(c)),this.ctx.moveTo(r,l),this.ctx.lineTo(r+15*Math.cos(d),l+15*Math.sin(d)),this.ctx.stroke();const g=r+20*Math.cos(a),h=l+20*Math.sin(a);this.ctx.font="bold 11px Arial";const p=this.ctx.measureText(o).width;this.ctx.fillStyle="rgba(16, 185, 129, 0.9)",this.ctx.fillRect(g-p/2-3,h-5.5-2,p+6,15),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o,g,h)}renderDirectionSelectionGuide(){if(!this.state.selectedKeypoint||!this.state.directionSelectionPoint)return;const t=this.imageToScreen(this.state.selectedKeypoint.x,this.state.selectedKeypoint.y),e=this.state.directionSelectionPoint.x,n=this.state.directionSelectionPoint.y;if(Math.sqrt(Math.pow(e-t.x,2)+Math.pow(n-t.y,2))<20)return;this.ctx.strokeStyle="#f59e0b",this.ctx.lineWidth=3,this.ctx.setLineDash([8,4]),this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e,n),this.ctx.stroke();const o=e-t.x,i=n-t.y,a=Math.atan2(i,o),s=(180*a/Math.PI+360)%360,r=a+.8*Math.PI,l=a-.8*Math.PI;this.ctx.setLineDash([]),this.ctx.beginPath(),this.ctx.moveTo(e,n),this.ctx.lineTo(e+12*Math.cos(r),n+12*Math.sin(r)),this.ctx.moveTo(e,n),this.ctx.lineTo(e+12*Math.cos(l),n+12*Math.sin(l)),this.ctx.stroke();const c=e+25*Math.cos(a),d=n+25*Math.sin(a),g=`${s.toFixed(1)}°`;this.ctx.font="bold 12px Arial";const h=this.ctx.measureText(g).width;this.ctx.fillStyle="rgba(245, 158, 11, 0.9)",this.ctx.fillRect(c-h/2-4,d-6-2,h+8,16),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(g,c,d),this.ctx.setLineDash([])}upgradeLegacyDirections(){let t=0;return this.keypoints.forEach(e=>{"left"===e.direction&&"angle"!==e.directionType?(e.direction=180,e.directionType="angle",t++):"right"===e.direction&&"angle"!==e.directionType&&(e.direction=0,e.directionType="angle",t++)}),t>0&&(console.log(`Upgraded ${t} legacy direction annotations to angle format`),this.saveState(),this.render(),this.autoSaveCurrentImage()),t}setAutoMoveToExpectedPosition(t){this.state.autoMoveToExpectedPosition=t,console.log("自动切换到预期位置: "+(t?"开启":"关闭"))}getTargetScale(){if("function"==typeof window.getZoomLockSettings){const t=window.getZoomLockSettings();if(t.isLocked)return console.log(`[自动切换] 使用锁定倍数: ${t.lockValue}x`),t.lockValue}return console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`),this.state.scale}moveToHighestKeypoint(){if(!this.keypoints||0===this.keypoints.length)return console.log("没有标注点，无法移动视角"),!1;const t=this.keypoints.reduce((t,e)=>(e.order||0)>(t.order||0)?e:t);console.log(`移动视角到最高标记点 #${t.order}`);const e=this.state.scale,n=this.canvas.width/2,o=this.canvas.height/2;return this.state.translateX=n-t.x*e,this.state.translateY=o-t.y*e,this.constrainView(),this.updateZoomInfo(),this.render(),console.log(`视角已移动到标注点 #${t.order}，保持缩放: ${e.toFixed(1)}x`),!0}async moveToExpectedPosition(t=!1){if(this.state.autoMoveToExpectedPosition)try{t?await this.handleImageSwitchAutoMove():await this.moveToNextExpectedPosition()}catch(e){console.error("[自动切换] 移动到预期位置失败:",e)}}async handleImageSwitchAutoMove(){const t=this.keypoints||[];console.log(`[自动切换] 图片切换：新图像有 ${t.length} 个标注点`),0===t.length?(console.log("[自动切换] 新图像没有标注，移动到1号点位置"),await this.moveToPosition1()):t.some(t=>null!==t.direction&&void 0!==t.direction&&("number"==typeof t.direction||"angle"===t.directionType))?console.log("[自动切换] 新图像有方向标注，保持当前位置"):(console.log("[自动切换] 新图像有无方向标注，移动到几何中心"),this.moveToAnnotationsCenter())}async moveToPosition1(){try{const t=window.PlantAnnotationTool?.branchPointPreviewManager;if(!t)return void console.log("[自动切换] 预览管理器不可用，无法获取1号位置");const e=await t.getExpectedPosition(1);if(e){console.log(`[自动切换] 移动到1号位置: (${e.x.toFixed(1)}, ${e.y.toFixed(1)})`);const t="function"==typeof window.getZoomLockSettings?window.getZoomLockSettings():{isLocked:!1};t.isLocked?(this.state.scale=t.lockValue,console.log(`[自动切换] 应用锁定倍数: ${t.lockValue}x`)):console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`);const n=this.canvas.width/2,o=this.canvas.height/2;this.state.translateX=n-e.x*this.state.scale,this.state.translateY=o-e.y*this.state.scale,this.constrainView(),this.updateZoomInfo(),this.render(),console.log(`[自动切换] 视角已移动到1号位置，缩放: ${this.state.scale.toFixed(1)}x`)}else console.log("[自动切换] 未找到1号位置的参考坐标")}catch(t){console.error("[自动切换] 移动到1号位置失败:",t)}}moveToAnnotationsCenter(){const t=this.keypoints||[];if(0===t.length)return;let e=0,n=0;for(const l of t)e+=l.x,n+=l.y;const o=e/t.length,i=n/t.length;console.log(`[自动切换] 移动到标注点几何中心: (${o.toFixed(1)}, ${i.toFixed(1)}), 共${t.length}个标注点`);const a="function"==typeof window.getZoomLockSettings?window.getZoomLockSettings():{isLocked:!1};a.isLocked?(this.state.scale=a.lockValue,console.log(`[自动切换] 应用锁定倍数: ${a.lockValue}x`)):console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`);const s=this.canvas.width/2,r=this.canvas.height/2;this.state.translateX=s-o*this.state.scale,this.state.translateY=r-i*this.state.scale,this.constrainView(),this.updateZoomInfo(),this.render(),console.log(`[自动切换] 视角已移动到标注点几何中心，缩放: ${this.state.scale.toFixed(1)}x`)}async moveToNextExpectedPosition(){try{const t=window.PlantAnnotationTool?.branchPointPreviewManager;if(!t)return void console.log("[自动切换] 预览管理器不可用");const e=this.findNextAvailableOrder(),n=await t.getExpectedPosition(e);if(n){console.log(`[自动切换] 移动到预期位置: 编号${e}, 坐标(${n.x.toFixed(1)}, ${n.y.toFixed(1)})`);const t="function"==typeof window.getZoomLockSettings?window.getZoomLockSettings():{isLocked:!1};t.isLocked?(this.state.scale=t.lockValue,console.log(`[自动切换] 应用锁定倍数: ${t.lockValue}x`)):console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`);const o=this.canvas.width/2,i=this.canvas.height/2;this.state.translateX=o-n.x*this.state.scale,this.state.translateY=i-n.y*this.state.scale,this.constrainView(),this.updateZoomInfo(),this.render(),console.log(`[自动切换] 视角已移动到预期位置，缩放: ${this.state.scale.toFixed(1)}x`)}else console.log(`[自动切换] 未找到编号${e}的预期位置`)}catch(t){console.error("[自动切换] 移动到下一个预期位置失败:",t)}}tryAutoSwitchToNextImage(){if("function"==typeof window.navigateToNextImage)return window.navigateToNextImage(!0).then(t=>{t?setTimeout(()=>{this.restartAutoDirectionMode()},300):(console.log("没有更多图片，结束自动化"),this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),window.showSuccess&&window.showSuccess("全部完成","所有图片的方向设置已完成！"))}),!0;if("function"==typeof window.handleKeyDown){const t={key:"ArrowRight",preventDefault:()=>{},stopPropagation:()=>{}};return window.handleKeyDown(t),setTimeout(()=>{this.restartAutoDirectionMode()},200),!0}return!1}restartAutoDirectionMode(){console.log("[调试] 重新开始自动化方向设置模式"),this.state.isAutoDirectionMode=!1,this.state.autoDirectionKeypoints=[],this.state.autoDirectionIndex=0,this.startAutoDirectionMode()||(console.log("新图片没有需要设置方向的标注点，结束自动化"),this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),window.showInfo&&window.showInfo("自动化完成","已完成所有图片的方向设置"))}resetAutoDirectionButton(){const t=document.getElementById("auto-direction-btn");t&&(console.log("[调试] 重置按钮状态为正常模式"),t._pauseHandler&&(t.removeEventListener("click",t._pauseHandler),t._pauseHandler=null),t.textContent="Auto Direction",t.classList.remove("active"),window.handleAutoDirectionSelection&&t.addEventListener("click",window.handleAutoDirectionSelection))}pauseAutoDirectionMode(){if(!this.state.isAutoDirectionMode)return;const t=this.state.autoDirectionKeypoints.length-this.state.autoDirectionIndex,e=this.state.autoDirectionIndex;this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),console.log(`方向升级模式已暂停，已完成 ${e} 个，剩余 ${t} 个`),window.showInfo&&window.showInfo("升级暂停",`已完成 ${e} 个标注点的升级，剩余 ${t} 个。可重新点击"自动化方向选择"继续。`)}startCustomAnnotationDrag(t,e){this.customAnnotationRenderer&&(this.customAnnotationDragState.isDragging=!0,this.customAnnotationDragState.draggedAnnotation=t,this.customAnnotationDragState.startPosition=e,this.customAnnotationRenderer.startDrag(t,e),this.canvas.style.cursor="grabbing",console.log("Started custom annotation drag:",t.id))}updateCustomAnnotationDrag(t){this.customAnnotationRenderer&&this.customAnnotationDragState.isDragging&&this.customAnnotationRenderer.updateDrag(t)&&this.render()}finishCustomAnnotationDrag(){if(!this.customAnnotationRenderer||!this.customAnnotationDragState.isDragging)return;const t=this.customAnnotationRenderer.finishDrag();t&&t.moved&&(this.customAnnotationManager.saveToStorage(),this.customAnnotationManager.triggerEvent("onAnnotationUpdate",t.annotation),this.customAnnotationManager.triggerCustomAnnotationUpdateSync(t.annotation,{imageId:this.getAppState()?.currentImage?.id,positionChange:{from:t.startPosition,to:{x:t.annotation.x,y:t.annotation.y}},timestamp:(new Date).toISOString()}),this.syncBranchPointPreview(),console.log("Custom annotation dragged and saved:",t.annotation.id)),this.customAnnotationDragState.isDragging=!1,this.customAnnotationDragState.draggedAnnotation=null,this.customAnnotationDragState.startPosition=null,this.canvas.style.cursor="crosshair",this.render()}cancelCustomAnnotationDrag(){this.customAnnotationRenderer&&this.customAnnotationDragState.isDragging&&(this.customAnnotationRenderer.cancelDrag(),this.customAnnotationDragState.isDragging=!1,this.customAnnotationDragState.draggedAnnotation=null,this.customAnnotationDragState.startPosition=null,this.canvas.style.cursor="crosshair",this.render(),console.log("Cancelled custom annotation drag"))}getAppState(){return window.PlantAnnotationTool?.appState}async initializeCustomAnnotationSystem(){try{const{CustomAnnotationManager:t}=await s(async()=>{const{CustomAnnotationManager:t}=await e.import("./CustomAnnotationManager-legacy-A4rCdnUp.js");return{CustomAnnotationManager:t}});this.customAnnotationManager=new t(this);const n=window.PlantAnnotationTool?.realTimeSyncManager;n?(this.customAnnotationManager.setRealTimeSyncManager(n),console.log("Custom annotation real-time sync manager connected")):console.warn("Real-time sync manager not available for custom annotations"),this.customAnnotationManager.addEventListener("onModeChange",t=>{console.log("Mode changed:",t.mode,"Type:",t.typeId),this.syncBranchPointPreview()}),console.log("CustomAnnotationManager initialized");const{CustomAnnotationRenderer:o}=await s(async()=>{const{CustomAnnotationRenderer:t}=await e.import("./CustomAnnotationRenderer-legacy-BimQP5Wt.js");return{CustomAnnotationRenderer:t}});this.customAnnotationRenderer=new o(this,this.customAnnotationManager),console.log("CustomAnnotationRenderer initialized"),this.customAnnotationSystemReady=!0,window.onCustomAnnotationSystemReady&&"function"==typeof window.onCustomAnnotationSystemReady&&setTimeout(()=>{window.onCustomAnnotationSystemReady()},100)}catch(t){console.warn("Failed to initialize custom annotation system:",t)}}renderCustomAnnotations(){console.debug("renderCustomAnnotations called (unified system - no action needed)")}getCustomAnnotationAt(t){const e=this.options.baseKeypointRadius+5;return this.keypoints.find(n=>{if("custom"!==n.annotationType)return!1;const o=this.imageToScreen(n.x,n.y);if(n.width&&n.height){const e=this.imageToScreen(n.x+n.width,n.y+n.height);return t.x>=o.x&&t.x<=e.x&&t.y>=o.y&&t.y<=e.y}return Math.sqrt(Math.pow(t.x-o.x,2)+Math.pow(t.y-o.y,2))<=e})||null}handleCustomAnnotationClick(t,e){console.log("Custom annotation clicked:",t.id,"type:",t.annotationType);const n=this.getCustomType(t.customTypeId);n&&console.log("Custom type:",n.name,"color:",n.color)}handleCustomAnnotationMode(t){if(this.customAnnotationManager){this.interruptAllDirectionModes("custom_annotation_mode");try{const e=window.PlantAnnotationTool?.appState,n=e?.currentImage?.id;if(!n)return void console.warn("No current image ID available for custom annotation");const o=this.customAnnotationManager.getCurrentCustomType();if(!o)return void console.warn("No custom type selected");if("region"===o.type)this.startCustomRegionDrag(t);else if("point"===o.type){const e=this.screenToImage(t.x,t.y),n=this.addCustomPointAnnotation(e.x,e.y,o.id);n?console.log("Created unified custom point annotation:",n):console.warn("Failed to create custom point annotation")}}catch(e){console.warn("Failed to handle custom annotation mode:",e)}}else console.warn("Custom annotation manager not available")}startCustomRegionDrag(t){this.canCreateAnnotationAt(t.x,t.y)?(this.state.isCustomRegionDragging=!0,this.state.customRegionStartPoint=t,this.state.customRegionCurrentPoint=t,this.canvas.style.cursor="crosshair",console.log("Started custom region drag at:",t)):console.warn("Cannot create custom region annotation: position is outside valid area")}updateCustomRegionDrag(t){this.state.isCustomRegionDragging&&(this.state.customRegionCurrentPoint=t,this.render())}finishCustomRegionDrag(){if(!this.state.isCustomRegionDragging||!this.state.customRegionStartPoint||!this.state.customRegionCurrentPoint)return void this.resetCustomRegionDrag();const t=this.screenToImage(this.state.customRegionStartPoint.x,this.state.customRegionStartPoint.y),e=this.screenToImage(this.state.customRegionCurrentPoint.x,this.state.customRegionCurrentPoint.y),n=Math.abs(e.x-t.x),o=Math.abs(e.y-t.y);if(n<10||o<10)return console.log("Region too small, ignoring"),void this.resetCustomRegionDrag();const i=window.PlantAnnotationTool?.appState,a=i?.currentImage?.id;if(!a)return console.warn("No current image ID available for custom region annotation"),void this.resetCustomRegionDrag();try{const i=this.customAnnotationManager.getCurrentCustomType();if(!i)return console.warn("No custom type selected for region annotation"),void this.resetCustomRegionDrag();const a=Math.min(t.x,e.x),s=Math.min(t.y,e.y),r=this.addCustomRegionAnnotation(a,s,n,o,i.id);r?console.log("Created unified custom region annotation:",r):console.warn("Failed to create custom region annotation")}catch(s){console.error("Error creating custom region annotation:",s)}this.resetCustomRegionDrag()}resetCustomRegionDrag(){this.state.isCustomRegionDragging=!1,this.state.customRegionStartPoint=null,this.state.customRegionCurrentPoint=null,this.canvas.style.cursor="crosshair",this.render()}removeCustomAnnotation(t){this.removeKeypoint(t)}getCustomAnnotationManager(){return this.customAnnotationManager}getCustomAnnotationRenderer(){return this.customAnnotationRenderer}handleMiddleMouseButton(t){this.state.selectedKeypoint?this.state.isDirectionCountMode?this.exitDirectionCountMode():this.enterDirectionCountMode():console.log("[多方向] 未选中标注点，忽略中键点击")}enterDirectionCountMode(){console.log("[多方向] 进入方向数量选择模式"),this.state.isDirectionCountMode=!0,this.state.currentDirectionCount=this.state.selectedKeypoint.maxDirections||1,this.showDirectionCountPrompt("使用滚轮调整方向数量，再次按中键确认"),this.canvas.style.cursor="help"}exitDirectionCountMode(){console.log("[多方向] 退出方向数量选择模式，应用方向数量:",this.state.currentDirectionCount),this.state.selectedKeypoint&&(this.ensureMultiDirectionSupport(this.state.selectedKeypoint),this.state.selectedKeypoint.maxDirections=this.state.currentDirectionCount,this.state.selectedKeypoint.directions.length>this.state.currentDirectionCount&&(this.state.selectedKeypoint.directions=this.state.selectedKeypoint.directions.slice(0,this.state.currentDirectionCount),console.log("[多方向] 截断directions数组到",this.state.currentDirectionCount,"个"))),this.state.isDirectionCountMode=!1,this.hideDirectionCountPrompt(),this.canvas.style.cursor="crosshair",this.startMultiDirectionSetting()}handleScrollWheel(t){if(!this.state.isDirectionCountMode)return;const e=-t.deltaY>0?1:-1,n=Math.max(1,Math.min(8,this.state.currentDirectionCount+e));n!==this.state.currentDirectionCount&&(this.state.currentDirectionCount=n,this.updateDirectionCountDisplay(),console.log("[多方向] 方向数量调整为:",n))}showDirectionCountPrompt(t){let e=document.getElementById("direction-count-prompt");e||(e=document.createElement("div"),e.id="direction-count-prompt",e.style.cssText="\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: rgba(0, 0, 0, 0.8);\n        color: white;\n        padding: 15px 20px;\n        border-radius: 8px;\n        font-size: 14px;\n        z-index: 10000;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      ",document.body.appendChild(e)),e.innerHTML=`\n      <div style="margin-bottom: 8px;">${t}</div>\n      <div style="font-size: 18px; font-weight: bold; text-align: center;">\n        方向数量: ${this.state.currentDirectionCount}\n      </div>\n    `}hideDirectionCountPrompt(){const t=document.getElementById("direction-count-prompt");t&&t.remove()}updateDirectionCountDisplay(){const t=document.getElementById("direction-count-prompt");t&&(t.innerHTML=`\n        <div style="margin-bottom: 8px;">使用滚轮调整方向数量，再次按中键确认</div>\n        <div style="font-size: 18px; font-weight: bold; text-align: center;">\n          方向数量: ${this.state.currentDirectionCount}\n        </div>\n      `)}startMultiDirectionSetting(){this.state.selectedKeypoint&&(this.state.directionsSet=this.state.selectedKeypoint.directions.length,this.state.isDirectionSelectionMode=!0,this.showMultiDirectionProgress(),console.log(`[多方向] 开始设置 ${this.state.selectedKeypoint.maxDirections} 个方向 (已有 ${this.state.directionsSet} 个)`))}showMultiDirectionProgress(){const t=this.state.selectedKeypoint;if(!t)return;const e=t.directions.length,n=`${e}/${t.maxDirections}`;let o;o=e>=t.maxDirections?`所有方向已设置完成 ${n}`:`设置方向 ${n} - 点击设置第 ${e+1} 个方向`;let i=document.getElementById("multi-direction-progress");i||(i=document.createElement("div"),i.id="multi-direction-progress",i.style.cssText="\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(16, 185, 129, 0.9);\n        color: white;\n        padding: 10px 15px;\n        border-radius: 6px;\n        font-size: 13px;\n        z-index: 10000;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      ",document.body.appendChild(i)),i.textContent=o,e>=t.maxDirections&&setTimeout(()=>{this.hideMultiDirectionProgress()},2e3)}hideMultiDirectionProgress(){const t=document.getElementById("multi-direction-progress");t&&t.remove()}addDirectionToKeypoint(t,e){return this.ensureMultiDirectionSupport(t),t.directions.length>=t.maxDirections?(console.warn("[多方向] 已达到最大方向数量:",t.maxDirections),!1):(t.directions.push(e),console.log("[多方向] 添加方向成功:",e,"到keypoint #"+t.order),!0)}removeDirectionFromKeypoint(t,e){if(this.ensureMultiDirectionSupport(t),e<0||e>=t.directions.length)return console.warn("[多方向] 无效的方向索引:",e),!1;const n=t.directions[e];return t.directions.splice(e,1),console.log("[多方向] 移除方向成功:",n,"从keypoint #"+t.order),!0}finishMultiDirectionSetting(){if(console.log("[多方向] 完成多方向设置"),this.hideMultiDirectionProgress(),this.state.selectedKeypoint){this.state.directionsSet=this.state.selectedKeypoint.directions.length;const t=this.state.selectedKeypoint.directions.length>=this.state.selectedKeypoint.maxDirections;console.log(`[多方向] 设置状态: ${this.state.selectedKeypoint.directions.length}/${this.state.selectedKeypoint.maxDirections} (${t?"完成":"未完成"})`)}this.state.isDirectionSelectionMode=!1,this.state.directionsSet=0,this.state.selectedKeypoint=null,this.canvas.style.cursor="crosshair",this.saveState(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),this.moveToNextExpectedPosition(),console.log("[多方向] 多方向设置完成")}interruptDirectionCountMode(t){this.state.isDirectionCountMode&&(console.log("[多方向] 方向数量模式被中断:",t),this.state.isDirectionCountMode=!1,this.state.currentDirectionCount=1,this.state.selectedKeypoint=null,this.hideDirectionCountPrompt(),this.hideMultiDirectionProgress(),this.canvas.style.cursor="crosshair")}interruptMultiDirectionSetting(t){this.state.isDirectionSelectionMode&&this.state.selectedKeypoint&&this.state.selectedKeypoint.maxDirections>1&&(console.log("[多方向] 多方向设置被中断:",t),this.hideMultiDirectionProgress(),this.state.isDirectionSelectionMode=!1,this.state.directionsSet=0,this.state.selectedKeypoint=null,this.canvas.style.cursor="crosshair",this.render())}interruptAllDirectionModes(t){if(console.log("[多方向] 中断所有方向模式:",t),this.interruptDirectionCountMode(t),this.interruptMultiDirectionSetting(t),this.state.isAutoDirectionMode){if("cross-sectional"===this.autoDirectionMode&&"image_switch"===t)return console.log("[Cross-Sectional] Preserving cross-sectional mode during image switch"),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,void(this.state.directionSelectionPoint=null);if("cross-sectional"===this.autoDirectionMode&&"custom_annotation_mode"===t)return console.log("[Cross-Sectional] Pausing cross-sectional mode for custom annotation"),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,void(this.state.directionSelectionPoint=null);this.exitAutoDirectionMode()}this.state.isDirectionSelectionMode&&this.cancelDirectionSelection(!0)}canHaveMultipleDirections(t){return t&&"regular"===t.annotationType}ensureMultiDirectionSupport(t){t&&(t.directions||(t.directions=[],null!==t.direction&&void 0!==t.direction&&("number"==typeof t.direction?t.directions.push({angle:t.direction,type:"angle"}):"left"===t.direction?t.directions.push({angle:180,type:"angle"}):"right"===t.direction&&t.directions.push({angle:0,type:"angle"}),console.log("[多方向] 迁移单方向数据到新格式:",t.direction,"→",t.directions))),t.maxDirections||(t.maxDirections=Math.max(1,t.directions.length),console.log("[多方向] 初始化maxDirections为",t.maxDirections,"for keypoint #"+t.order)),t.annotationType||(t.annotationType="regular"))}renderMultipleDirections(t){if(this.ensureMultiDirectionSupport(t),0===t.directions.length)return;const e=this.imageToScreen(t.x,t.y);t.directions.forEach((n,o)=>{const i=n.angle,a=`${o+1}/${t.directions.length}`;this.renderDirectionArrow(e.x,e.y,i,a,t)})}renderDirectionArrow(t,e,n,o,i){const a=n*Math.PI/180,s=this.options.directionArrowLength,r=t+Math.cos(a)*s,l=e+Math.sin(a)*s;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.setLineDash([8,4]),this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(r,l),this.ctx.stroke(),this.ctx.setLineDash([]);const c=a+.8*Math.PI,d=a-.8*Math.PI;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(r,l),this.ctx.lineTo(r+15*Math.cos(c),l+15*Math.sin(c)),this.ctx.moveTo(r,l),this.ctx.lineTo(r+15*Math.cos(d),l+15*Math.sin(d)),this.ctx.stroke();const g=r+20*Math.cos(a),h=l+20*Math.sin(a);this.ctx.font="bold 11px Arial";const p=this.ctx.measureText(o).width;this.ctx.fillStyle="rgba(16, 185, 129, 0.9)",this.ctx.fillRect(g-p/2-3,h-5.5-2,p+6,15),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o,g,h)}enhanceDirectionData(t,e){return{...t,directionClick:{x:e.clickX,y:e.clickY,screenX:e.screenX,screenY:e.screenY,timestamp:e.timestamp}}}enhanceMultiDirectionData(t,e){const n=t.directions.map((t,n)=>{const o=e[n];return{...t,clickPosition:o?{x:o.clickX,y:o.clickY,screenX:o.screenX,screenY:o.screenY,timestamp:o.timestamp}:null}});return{...t,directions:n}}handleDirectionSelectionClick(t){if(!this.state.selectedKeypoint||!this.state.isDirectionSelectionMode)return;const e=this.getEventCoordinates(t),n=this.screenToImage(e.x,e.y);if(!this.validateDirectionClick(this.state.selectedKeypoint,{clickX:n.x,clickY:n.y,screenX:e.x,screenY:e.y}))return;const o=this.calculateAngleFromClick(this.state.selectedKeypoint,n),i={x:n.x,y:n.y,screenX:e.x,screenY:e.y,timestamp:Date.now()};this.state.selectedKeypoint.direction=o,this.state.selectedKeypoint.directionType="angle",this.state.selectedKeypoint.directionClick=i,this.render(),this.state.isDirectionSelectionMode=!1,this.state.selectedKeypoint=null}validateDirectionClick(t,e){return!!this.isClickWithinImageBounds(e)&&!!this.isClickWithinCanvasBounds(e)}calculateAngleFromClick(t,e){const n=e.x-t.x,o=e.y-t.y;return(180*Math.atan2(o,n)/Math.PI+360)%360}isClickWithinCanvasBounds(t){return t.screenX>=0&&t.screenX<=this.canvas.width&&t.screenY>=0&&t.screenY<=this.canvas.height}isClickWithinImageBounds(t){return!!this.currentImage&&t.x>=0&&t.x<=this.currentImage.width&&t.y>=0&&t.y<=this.currentImage.height}screenToImage(t,e){return{x:(t-this.state.translateX)/this.state.scale,y:(e-this.state.translateY)/this.state.scale}}handleMultiDirectionClick(t){if(!this.state.selectedKeypoint||!this.state.selectedKeypoint.maxDirections)return!1;const e=this.state.selectedKeypoint;if(e.directions.length>=e.maxDirections)return!1;const n=this.getEventCoordinates(t),o=this.screenToImage(n.x,n.y),i=this.calculateAngleFromClick(e,o);return e.directions.push({angle:i,type:"angle",clickPosition:{x:o.x,y:o.y,screenX:n.x,screenY:n.y,timestamp:Date.now()}}),!0}getAnnotationData(){return{keypoints:this.keypoints.map(t=>({...t,directionClick:t.directionClick||null}))}}serializeAnnotationData(t){return JSON.stringify(t.map(t=>({...t,directionClick:t.directionClick||null})))}deserializeAnnotationData(t){return JSON.parse(t).map(t=>({...t,directionClick:t.directionClick||null}))}getEventCoordinates(t){const e=this.canvas.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}async performSiftMatching(){console.log("[SIFT] 开始执行SIFT匹配");try{const t=await this.validateMatchingPreconditions();if(!t.isValid)return console.error("[SIFT] 前置条件验证失败:",t.errors),void this.showSiftError("SIFT匹配前置条件不满足",t.errors.join("\n"));const n=[...this.keypoints],o=await this.getPreviousFrameAnnotations();if(!o||0===o.length)return void this.showSiftError("无法获取上一帧标注数据","请确保上一帧存在标注点");const i=this.getCurrentImageData(),a=await this.getPreviousImageData(),{SiftMatcher:r}=await s(async()=>{const{SiftMatcher:t}=await e.import("./SiftMatcher-legacy-OvzYr5fk.js");return{SiftMatcher:t}}),l=new r,c=await l.calibrateAnnotations(o,n,a,i),d=l.calculateMatchingQuality(c);console.log("[SIFT] 匹配完成:",{"原始标注":n.length,"校准标注":c.length,"平均置信度":`${(100*d.averageConfidence).toFixed(1)}%`,"平均偏移":`${d.averageOffset.toFixed(2)}px`,"成功匹配":d.successfulMatches}),this.showCalibrationPreview(n,c,d)}catch(t){console.error("[SIFT] 匹配过程出错:",t),this.showSiftError("SIFT匹配失败",t.message)}}async validateMatchingPreconditions(){const t=[];return this.currentImage&&this.imageElement||t.push("当前图像未加载"),this.keypoints&&0!==this.keypoints.length||t.push("当前图像没有标注点"),await this.hasPreviousFrame()||t.push("没有上一帧图像可用作参考"),{hasCurrentImage:!!this.currentImage,hasPreviousImage:await this.hasPreviousFrame(),hasCurrentAnnotations:this.keypoints&&this.keypoints.length>0,hasPreviousAnnotations:await this.hasPreviousFrameAnnotations(),isValid:0===t.length,errors:t}}async hasPreviousFrame(){if(!window.PlantAnnotationTool?.plantDataManager)return!1;const t=window.PlantAnnotationTool.appState.currentPlant;return!(!t||!t.selectedViewAngle)&&null!==await this.getPreviousFrameId()}async hasPreviousFrameAnnotations(){const t=await this.getPreviousFrameAnnotations();return t&&t.length>0}async getPreviousFrameId(){if(!window.PlantAnnotationTool?.plantDataManager)return null;const t=window.PlantAnnotationTool.appState.currentPlant;if(!t||!t.selectedViewAngle||!t.selectedImage)return null;const e=await window.PlantAnnotationTool.plantDataManager.getPlantImages(t.id,t.selectedViewAngle);if(!e||0===e.length)return null;const n=e.findIndex(e=>e.id===t.selectedImage.id);return n<=0?null:e[n-1].id}async getPreviousFrameAnnotations(){const t=await this.getPreviousFrameId();if(!t)return null;const e=window.PlantAnnotationTool?.plantDataManager;if(!e)return null;try{return e.getImageAnnotations(t)||[]}catch(n){return console.warn("[SIFT] 获取上一帧标注失败:",n),null}}getCurrentImageData(){if(!this.imageElement)throw new Error("当前图像未加载");if(this.imageElement.complete&&!this.imageElement.crossOrigin)throw console.warn("[SIFT] 图像已加载但未设置CORS，需要重新加载"),new Error("图像需要重新加载以支持CORS访问，请重新选择图像");const t=document.createElement("canvas");t.width=this.imageElement.width,t.height=this.imageElement.height;const e=t.getContext("2d");try{return e.drawImage(this.imageElement,0,0),e.getImageData(0,0,t.width,t.height)}catch(n){throw console.error("[SIFT] 获取图像数据失败:",n),new Error("无法获取图像数据，可能是跨域问题。请重新选择图像。")}}async getPreviousImageData(){const t=await this.getPreviousFrameId();if(!t)throw new Error("无法获取上一帧图像ID");const e=window.PlantAnnotationTool?.plantDataManager;if(!e)throw new Error("植物数据管理器不可用");const n=window.PlantAnnotationTool.appState.currentPlant,o=(await e.getPlantImages(n.id,n.selectedViewAngle)).find(e=>e.id===t);if(!o)throw new Error("找不到上一帧图像");const i=await e.fileSystemManager.createImageURL(o),a=new Image;return a.crossOrigin="anonymous",new Promise((t,e)=>{a.onload=()=>{const n=document.createElement("canvas");n.width=a.width,n.height=a.height;const o=n.getContext("2d");try{o.drawImage(a,0,0);const e=o.getImageData(0,0,n.width,n.height);t(e)}catch(i){console.error("[SIFT] 获取上一帧图像数据失败:",i),e(new Error("无法获取上一帧图像数据，可能是跨域问题"))}},a.onerror=()=>{console.error("[SIFT] 上一帧图像加载失败:",i),e(new Error("加载上一帧图像失败"))},a.src=i})}showCalibrationPreview(t,e,n){this.calibrationPreviewState={originalAnnotations:[...t],calibratedAnnotations:[...e],quality:n,isActive:!0,showOriginal:!0,showCalibrated:!0,showArrows:!0},this.showNonBlockingNotification(n),this.bindCalibrationKeyboardEvents(),this.render(),console.log("[SIFT] 校准预览已显示")}showNonBlockingNotification(t){const e=document.createElement("div");if(e.className="sift-notification",e.innerHTML=`\n      <div class="notification-content">\n        <div class="notification-header">\n          <h3>🔍 SIFT Match Result</h3>\n          <button class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">×</button>\n        </div>\n        <div class="quality-info">\n          <p><strong>Match Quality:</strong> ${(100*t.qualityScore).toFixed(1)}%</p>\n          <p><strong>Average Confidence:</strong> ${(100*t.averageConfidence).toFixed(1)}%</p>\n          <p><strong>Average Offset:</strong> ${t.averageOffset.toFixed(2)}px</p>\n          <p><strong>Successful Matches:</strong> ${t.successfulMatches}/${t.totalAnnotations}</p>\n        </div>\n        \n        <div class="notification-actions">\n          <button class="btn-accept" title="Accept Adjustment (Shortcut: A)">✓ Accept Adjustment (A)</button>\n          <button class="btn-reject" title="Reject Adjustment (Shortcut: R)">✗ Reject Adjustment (R)</button>\n        </div>\n        \n        <div class="notification-help">\n          <small>Shortcuts: A=Accept, R=Reject, ESC=Cancel</small>\n        </div>\n      </div>\n    `,e.style.cssText="\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      max-width: 350px;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 10000;\n      font-family: Arial, sans-serif;\n      animation: slideIn 0.3s ease-out;\n    ",!document.getElementById("sift-notification-style")){const t=document.createElement("style");t.id="sift-notification-style",t.textContent="\n        @keyframes slideIn {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n        .sift-notification .notification-content {\n          padding: 15px;\n        }\n        .sift-notification .notification-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 10px;\n        }\n        .sift-notification .notification-header h3 {\n          margin: 0;\n          font-size: 16px;\n          color: #333;\n        }\n        .sift-notification .close-btn {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #666;\n          padding: 0;\n          width: 20px;\n          height: 20px;\n        }\n        .sift-notification .close-btn:hover {\n          color: #000;\n        }\n        .sift-notification .quality-info {\n          margin-bottom: 15px;\n          font-size: 13px;\n          color: #666;\n        }\n        .sift-notification .quality-info p {\n          margin: 3px 0;\n        }\n        .sift-notification .notification-actions {\n          display: flex;\n          gap: 10px;\n          margin-bottom: 10px;\n        }\n        .sift-notification .btn-accept,\n        .sift-notification .btn-reject {\n          flex: 1;\n          padding: 8px 12px;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n          font-weight: 500;\n        }\n        .sift-notification .btn-accept {\n          background: #10b981;\n          color: white;\n        }\n        .sift-notification .btn-accept:hover {\n          background: #059669;\n        }\n        .sift-notification .btn-reject {\n          background: #ef4444;\n          color: white;\n        }\n        .sift-notification .btn-reject:hover {\n          background: #dc2626;\n        }\n        .sift-notification .notification-help {\n          text-align: center;\n          color: #999;\n          border-top: 1px solid #eee;\n          padding-top: 8px;\n        }\n      ",document.head.appendChild(t)}const n=e.querySelector(".btn-accept"),o=e.querySelector(".btn-reject");n.addEventListener("click",()=>{this.applyCalibrationResults()}),o.addEventListener("click",()=>{this.cancelCalibration()}),document.body.appendChild(e),this.calibrationNotification=e,this.notificationTimeout=setTimeout(()=>{this.cancelCalibration()},3e4)}bindCalibrationKeyboardEvents(){this.calibrationKeyboardHandler=t=>{if(this.calibrationPreviewState?.isActive)switch(t.key.toLowerCase()){case"a":t.preventDefault(),this.applyCalibrationResults();break;case"r":case"escape":t.preventDefault(),this.cancelCalibration();break;case"p":t.preventDefault(),this.toggleCalibrationPreview()}},document.addEventListener("keydown",this.calibrationKeyboardHandler)}toggleCalibrationPreview(){this.calibrationPreviewState&&(this.calibrationPreviewState.showOriginal=!this.calibrationPreviewState.showOriginal,this.calibrationPreviewState.showCalibrated=!this.calibrationPreviewState.showCalibrated,this.calibrationPreviewState.showArrows=!this.calibrationPreviewState.showArrows,this.render())}async applyCalibrationResults(){if(this.calibrationPreviewState)try{console.log("[SIFT] 应用校准结果"),this.saveState(),this.keypoints=[...this.calibrationPreviewState.calibratedAnnotations],this.cleanupCalibrationPreview(),this.render(),window.PlantAnnotationTool?.autoSave&&await window.PlantAnnotationTool.autoSave(),this.showSiftSuccess("SIFT匹配成功应用",`已调整 ${this.keypoints.length} 个标注点`)}catch(t){console.error("[SIFT] 应用校准结果失败:",t),this.showSiftError("应用校准结果失败",t.message)}}cancelCalibration(){console.log("[SIFT] 取消校准"),this.cleanupCalibrationPreview(),this.render(),this.showSiftInfo("已取消SIFT匹配","标注点保持原始位置")}cleanupCalibrationPreview(){this.calibrationNotification&&(this.calibrationNotification.remove(),this.calibrationNotification=null),this.notificationTimeout&&(clearTimeout(this.notificationTimeout),this.notificationTimeout=null),this.calibrationKeyboardHandler&&(document.removeEventListener("keydown",this.calibrationKeyboardHandler),this.calibrationKeyboardHandler=null),this.calibrationPreviewState=null}showSiftError(t,e){console.error(`[SIFT] ${t}: ${e}`),window.PlantAnnotationTool?.showError?window.PlantAnnotationTool.showError(t,e):alert(`${t}\n${e}`)}showSiftSuccess(t,e){console.log(`[SIFT] ${t}: ${e}`),window.PlantAnnotationTool?.showSuccess?window.PlantAnnotationTool.showSuccess(t,e):alert(`${t}\n${e}`)}showSiftInfo(t,e){console.log(`[SIFT] ${t}: ${e}`),window.PlantAnnotationTool?.showInfo?window.PlantAnnotationTool.showInfo(t,e):alert(`${t}\n${e}`)}createMatchingVisualizations(t,e){const n=[];return"original"===e?t.forEach((t,e)=>{n.push({type:"original",x:t.x,y:t.y,color:"#ff4444",size:8,label:t.order?.toString()||(e+1).toString()})}):"adjusted"===e?t.forEach((t,e)=>{n.push({type:"adjusted",x:t.x,y:t.y,color:"#44ff44",size:8,label:t.order?.toString()||(e+1).toString()})}):"arrows"===e&&t.forEach((t,e)=>{t.calibrationData&&n.push({type:"arrow",from:{x:t.calibrationData.originalX,y:t.calibrationData.originalY},to:{x:t.x,y:t.y},color:"#ffaa00",width:2,label:`${t.calibrationData.offset.toFixed(1)}px`})}),n}renderCalibrationPreview(){if(!this.calibrationPreviewState)return;const{originalAnnotations:t,calibratedAnnotations:e,showOriginal:n,showCalibrated:o,showArrows:i}=this.calibrationPreviewState;n&&t.forEach((t,e)=>{const n=this.imageToScreen(t.x,t.y);this.renderCalibrationPoint(n.x,n.y,"#ff4444",t.order||e+1,"Original")}),o&&e.forEach((t,e)=>{const n=this.imageToScreen(t.x,t.y);this.renderCalibrationPoint(n.x,n.y,"#44ff44",t.order||e+1,"Calibrated")}),i&&e.forEach((t,e)=>{if(t.calibrationData){const e=this.imageToScreen(t.calibrationData.originalX,t.calibrationData.originalY),n=this.imageToScreen(t.x,t.y);this.renderCalibrationArrow(e.x,e.y,n.x,n.y,t.calibrationData.offset)}})}renderCalibrationPoint(t,e,n,o,i){this.ctx.beginPath(),this.ctx.arc(t,e,8,0,2*Math.PI),this.ctx.fillStyle=n,this.ctx.fill(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=2,this.ctx.stroke(),this.ctx.fillStyle="#ffffff",this.ctx.font="bold 12px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o.toString(),t,e),this.ctx.fillStyle=n,this.ctx.font="10px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="top",this.ctx.fillText(i,t,e+8+2)}renderCalibrationArrow(t,e,n,o,i){const a=n-t,s=o-e;if(Math.sqrt(a*a+s*s)<2)return;this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,o),this.ctx.strokeStyle="#ffaa00",this.ctx.lineWidth=3,this.ctx.setLineDash([5,3]),this.ctx.stroke(),this.ctx.setLineDash([]);const r=Math.atan2(s,a),l=Math.PI/6;this.ctx.beginPath(),this.ctx.moveTo(n,o),this.ctx.lineTo(n-12*Math.cos(r-l),o-12*Math.sin(r-l)),this.ctx.moveTo(n,o),this.ctx.lineTo(n-12*Math.cos(r+l),o-12*Math.sin(r+l)),this.ctx.strokeStyle="#ffaa00",this.ctx.lineWidth=3,this.ctx.stroke();const c=(t+n)/2,d=(e+o)/2;this.ctx.fillStyle="#ffaa00",this.ctx.font="bold 10px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(`${i.toFixed(1)}px`,c,d-8)}}class l{constructor(){this.previewWindow=null,this.previewCanvas=null,this.previewCtx=null,this.previewTitle=null,this.previewLoading=null,this.noPreview=null,this.zoomSlider=null,this.zoomValue=null,this.plantDataManager=null,this.isVisible=!1,this.isDragging=!1,this.dragStartX=0,this.dragStartY=0,this.windowStartX=0,this.windowStartY=0,this.zoomLevel=2,this.isShowingSpecificOrder=!1,this.specificTargetOrder=null,this.currentPlantId=null,this.currentViewAngle=null,this.currentImageIndex=-1,this.currentKeypointCount=0,this.previousImageData=null,this.previousAnnotations=[],this.cachedImageElement=null,this.initializeElements()}initializeElements(){if(this.previewWindow=document.getElementById("branch-point-preview"),this.previewCanvas=document.getElementById("preview-canvas"),this.previewTitle=document.getElementById("preview-title"),this.previewLoading=document.getElementById("preview-loading"),this.noPreview=document.getElementById("no-preview"),this.zoomSlider=document.getElementById("zoom-slider"),this.zoomValue=document.getElementById("zoom-value"),this.previewCanvas){this.previewCtx=this.previewCanvas.getContext("2d"),this.updateCanvasSize();const t=new ResizeObserver(()=>{this.updateCanvasSize(),this.isVisible&&this.previousImageData&&this.previousAnnotations&&this.renderPreview(this.previousImageData,this.previousAnnotations)});this.previewWindow&&t.observe(this.previewWindow)}this.bindZoomControls(),this.bindDragEvents(),console.log("BranchPointPreviewManager 初始化完成")}updateCanvasSize(){if(!this.previewCanvas||!this.previewWindow)return;const t=this.previewCanvas.parentElement;if(!t)return;const e=t.getBoundingClientRect(),n=Math.max(100,e.width-4),o=Math.max(80,e.height-4);this.previewCanvas.width===n&&this.previewCanvas.height===o||(this.previewCanvas.width=n,this.previewCanvas.height=o,this.previewCanvas.style.width=n+"px",this.previewCanvas.style.height=o+"px",console.log("Canvas尺寸更新:",n,"x",o),this.isVisible&&this.cachedImageElement&&this.previousAnnotations?this.renderCachedPreview():this.isVisible&&this.previousImageData&&this.previousAnnotations&&setTimeout(()=>{this.renderPreview(this.previousImageData,this.previousAnnotations)},50))}renderCachedPreview(){if(!(this.cachedImageElement&&this.previousAnnotations&&this.previewCanvas&&this.previewCtx))return;const t=this.getNextOrderToAnnotate(),e=this.previousAnnotations.find(e=>e.order===t);if(!e)return void this.showNoPreview(`上一张图像暂无第${t}个分支点`);const n=this.cachedImageElement;try{const o=200,i=Math.round(o/this.zoomLevel),a=e.x,s=e.y,r=Math.max(0,Math.min(n.width-i,a-i/2)),l=Math.max(0,Math.min(n.height-i,s-i/2)),c=Math.min(i,n.width-r),d=Math.min(i,n.height-l),g=this.previewCanvas.width,h=this.previewCanvas.height;this.previewCtx.clearRect(0,0,g,h),this.previewCtx.drawImage(n,r,l,c,d,0,0,g,h);const p=g/c,u=h/d,m=(a-r)*p,f=(s-l)*u;this.renderLocalizedAnnotation(m,f,t,e.direction),this.previousAnnotations.forEach(e=>{if(e.order!==t&&e.x>=r&&e.x<=r+c&&e.y>=l&&e.y<=l+d){const t=(e.x-r)*p,n=(e.y-l)*u;this.renderLocalizedAnnotation(t,n,e.order||0,e.direction,!1)}}),this.renderZoomInfo(p,u),console.log("使用缓存数据快速重新渲染完成")}catch(o){console.error("缓存渲染失败:",o),this.previousImageData&&this.previousAnnotations&&this.renderPreview(this.previousImageData,this.previousAnnotations)}}bindDragEvents(){const t=document.querySelector(".preview-header");t&&this.previewWindow&&(t.addEventListener("mousedown",t=>{t.preventDefault(),this.startDrag(t)}),document.addEventListener("mousemove",t=>{this.isDragging&&this.drag(t)}),document.addEventListener("mouseup",()=>{this.endDrag()}))}startDrag(t){this.isDragging=!0,this.dragStartX=t.clientX,this.dragStartY=t.clientY;const e=this.previewWindow.getBoundingClientRect();this.windowStartX=e.left,this.windowStartY=e.top,this.previewWindow.style.cursor="grabbing",document.body.style.userSelect="none"}drag(t){if(!this.isDragging)return;const e=t.clientX-this.dragStartX,n=t.clientY-this.dragStartY,o=this.windowStartX+e,i=this.windowStartY+n,a=window.innerWidth-this.previewWindow.offsetWidth,s=window.innerHeight-this.previewWindow.offsetHeight,r=Math.max(0,Math.min(a,o)),l=Math.max(0,Math.min(s,i));this.previewWindow.style.left=r+"px",this.previewWindow.style.top=l+"px"}endDrag(){this.isDragging&&(this.isDragging=!1,this.previewWindow.style.cursor="",document.body.style.userSelect="")}setPlantDataManager(t){this.plantDataManager=t}toggleVisibility(t=null){this.previewWindow&&(this.isVisible=null!==t?t:!this.isVisible,this.isVisible?(this.previewWindow.classList.remove("hidden"),this.updatePreview()):this.previewWindow.classList.add("hidden"),console.log("分支点预览窗口: "+(this.isVisible?"显示":"隐藏")))}async updateContext(t,e,n,o=0){this.currentPlantId=t,this.currentViewAngle=e,this.currentImageIndex=n,this.currentKeypointCount=o,this.isVisible&&await this.updatePreview()}async updatePreview(){if(this.isVisible&&this.plantDataManager&&this.currentPlantId)try{this.showLoading(!0);const t=await this.getPreviousImage();if(!t)return void this.showNoPreview("This is the first image");const e=await this.plantDataManager.getImageAnnotations(t.id);if(!e||0===e.length)return void this.showNoPreview("This image has no annotations");this.updatePreviewTitle(t,e.length),await this.renderPreview(t,e),this.showLoading(!1)}catch(t){console.error("Update branch point preview failed:",t),this.showNoPreview("Preview loading failed")}}async getPreviousImage(){if(!this.plantDataManager||this.currentImageIndex<=0)return null;try{const t=await this.plantDataManager.getPlantImages(this.currentPlantId,this.currentViewAngle);return t[this.currentImageIndex-1]||null}catch(t){return console.error("Get previous image failed:",t),null}}updatePreviewTitle(t,e){if(this.previewTitle){const e=t.timeString||"Unknown time",n=this.getNextOrderToAnnotate();this.previewTitle.textContent=`Reference: ${n}th branch point`,this.previewTitle.title=`${e} - Current need to annotate the position of the ${n}th branch point`}}getNextOrderToAnnotate(){const t=window.PlantAnnotationTool?.annotationTool;if(!t)return console.warn("[Preview] AnnotationTool is not available, using fallback"),this.currentKeypointCount+1;const e=t.getCustomAnnotationManager(),n=e?.isInCustomMode();if(n){const n=e.getCurrentCustomType();if(n&&"function"==typeof t.findNextAvailableOrderForType){const e=t.findNextAvailableOrderForType(n.id);return console.log(`[Preview] Custom mode - get next order for type ${n.id}: ${e}, current keypoint count: ${this.currentKeypointCount}`),e}}else if("function"==typeof t.findNextAvailableOrder){const e=t.findNextAvailableOrder();return console.log(`[Preview] Regular mode - get next order: ${e}, current keypoint count: ${this.currentKeypointCount}`),e}const o=this.currentKeypointCount+1;return console.log(`[Preview] Using fallback to calculate next order: ${o}, current keypoint count: ${this.currentKeypointCount}`),o}async renderPreview(t,e){if(!this.previewCanvas||!this.previewCtx)return;const n=this.getNextOrderToAnnotate(),o=window.PlantAnnotationTool?.annotationTool,i=o?.getCustomAnnotationManager(),a=i?.isInCustomMode();let s,r;if(a){const t=i.getCurrentCustomType();t?(s=e.find(e=>e.order===n&&"custom"===e.annotationType&&e.customTypeId===t.id),r=`This image has no ${n}th ${t.name} annotation`):r=`This image has no ${n}th custom annotation`}else s=e.find(t=>t.order===n&&("custom"===t.annotationType&&"builtin-regular-keypoint"===t.customTypeId||!t.annotationType&&!t.customTypeId)),r=`This image has no ${n}th branch point`;if(s){this.hideLoading(),this.hideNoPreview();try{let o;if(console.log("Start loading preview image:",t),t.file&&t.file instanceof File)o=URL.createObjectURL(t.file),console.log("Create URL using file object:",o);else if(t.url)o=t.url,console.log("Use existing URL:",o);else{if(!this.plantDataManager?.fileSystemManager)throw new Error("无法获取图像数据：缺少必要的图像信息或文件系统管理器");try{o=await this.plantDataManager.fileSystemManager.createImageURL(t),console.log("Create URL using FileSystemManager:",o)}catch(l){if(console.warn("Create URL using FileSystemManager failed:",l),!t.handle)throw l;try{const e=await t.handle.getFile();o=URL.createObjectURL(e),console.log("Create URL directly from handle:",o)}catch(c){throw console.error("Create URL from handle also failed:",c),new Error("无法获取图像数据：所有方法都失败")}}}const i=new Image;i.crossOrigin="anonymous",await new Promise((t,e)=>{i.onload=()=>{console.log("Image loaded successfully:",i.width,"x",i.height),t()},i.onerror=t=>{console.error("Image loading failed:",t),e(new Error("Image loading failed"))},i.src=o});const a=200,r=Math.round(a/this.zoomLevel),d=s.x,g=s.y,h=Math.max(0,Math.min(i.width-r,d-r/2)),p=Math.max(0,Math.min(i.height-r,g-r/2)),u=Math.min(r,i.width-h),m=Math.min(r,i.height-p),f=this.previewCanvas.width,y=this.previewCanvas.height;this.previewCtx.clearRect(0,0,f,y),this.previewCtx.drawImage(i,h,p,u,m,0,0,f,y);const w=f/u,b=y/m,x=(d-h)*w,v=(g-p)*b;this.renderLocalizedAnnotation(x,v,n,s.direction),e.forEach(t=>{if(t.order!==n&&t.x>=h&&t.x<=h+u&&t.y>=p&&t.y<=p+m){const e=(t.x-h)*w,n=(t.y-p)*b;this.renderLocalizedAnnotation(e,n,t.order||0,t.direction,!1)}}),this.renderZoomInfo(w,b),this.previousImageData=t,this.previousAnnotations=e,this.cachedImageElement=i,o&&o.startsWith("blob:")&&!t.url&&setTimeout(()=>URL.revokeObjectURL(o),5e3),console.log("Preview rendering completed")}catch(l){console.error("Preview rendering failed:",l),this.showNoPreview(`Preview loading failed: ${l.message}`)}}else this.showNoPreview(r)}renderLocalizedAnnotation(t,e,n,o,i=!0){let a,s,r;i?(a="#ffeb3b",s=5,r=2,this.previewCtx.beginPath(),this.previewCtx.arc(t,e,s+3,0,2*Math.PI),this.previewCtx.strokeStyle="#ff9800",this.previewCtx.lineWidth=1,this.previewCtx.setLineDash([2,2]),this.previewCtx.stroke(),this.previewCtx.setLineDash([])):(a="number"==typeof o?"#4CAF50":"left"===o?"#ff6666":"#6666ff",s=3,r=1),this.previewCtx.beginPath(),this.previewCtx.arc(t,e,s,0,2*Math.PI),this.previewCtx.fillStyle=a,this.previewCtx.fill(),this.previewCtx.strokeStyle="#ffffff",this.previewCtx.lineWidth=r,this.previewCtx.stroke(),this.renderDirectionArrow(t,e,o,i),this.previewCtx.fillStyle=i?"#000000":"#ffffff",this.previewCtx.font=`bold ${i?8:6}px Arial`,this.previewCtx.textAlign="center",this.previewCtx.textBaseline="middle",this.previewCtx.fillText(n.toString(),t,e),i&&(this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 8px Arial",this.previewCtx.fillText("▼",t,e-s-8),this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 6px Arial",this.previewCtx.textAlign="center",this.previewCtx.fillText("Target",t,e+s+8))}renderDirectionArrow(t,e,n,o=!1){if(!n)return;let i;if("number"==typeof n)i=n;else if("left"===n)i=180;else{if("right"!==n)return;i=0}const a=i*Math.PI/180,s=o?25:18,r=o?7:5,l=o?3:2,c=t+Math.cos(a)*s,d=e+Math.sin(a)*s;this.previewCtx.save(),this.previewCtx.strokeStyle="#10b981",this.previewCtx.lineWidth=l,this.previewCtx.setLineDash([4,2]),this.previewCtx.lineCap="round",this.previewCtx.beginPath(),this.previewCtx.moveTo(t,e),this.previewCtx.lineTo(c,d),this.previewCtx.stroke(),this.previewCtx.setLineDash([]),this.previewCtx.strokeStyle="#10b981",this.previewCtx.lineWidth=l,this.previewCtx.lineCap="round";const g=a+.8*Math.PI,h=a-.8*Math.PI;this.previewCtx.beginPath(),this.previewCtx.moveTo(c,d),this.previewCtx.lineTo(c+Math.cos(g)*r,d+Math.sin(g)*r),this.previewCtx.moveTo(c,d),this.previewCtx.lineTo(c+Math.cos(h)*r,d+Math.sin(h)*r),this.previewCtx.stroke(),this.previewCtx.restore()}renderZoomInfo(t,e){const n=`${this.zoomLevel}x zoom`;this.previewCtx.fillStyle="rgba(0, 0, 0, 0.7)",this.previewCtx.fillRect(5,5,60,16),this.previewCtx.fillStyle="#ffffff",this.previewCtx.font="8px Arial",this.previewCtx.textAlign="left",this.previewCtx.textBaseline="middle",this.previewCtx.fillText(n,8,13)}showLoading(t){this.previewLoading&&(this.previewLoading.style.display=t?"block":"none"),this.noPreview&&(this.noPreview.style.display="none")}showNoPreview(t){this.showLoading(!1),this.noPreview&&(this.noPreview.textContent=t,this.noPreview.style.display="block"),this.previewCanvas&&this.previewCtx&&this.previewCtx.clearRect(0,0,this.previewCanvas.width,this.previewCanvas.height)}highlightCorrespondingPoints(t){this.isVisible&&t&&this.updatePreview()}async getExpectedPosition(t){try{if(!this.previousImageData||!this.previousAnnotations){console.log("[Expected position] No cached preview data, trying to get previous image");const t=await this.getPreviousImage();if(!t)return console.log("[Expected position] No previous image data"),null;const e=await this.plantDataManager.getImageAnnotations(t.id);if(!e||0===e.length)return console.log("[Expected position] Previous image has no annotations"),null;this.previousImageData=t,this.previousAnnotations=e}const e=this.previousAnnotations.find(e=>e.order===t);return e?(console.log(`[Expected position] Found reference position for order ${t}: (${e.x.toFixed(1)}, ${e.y.toFixed(1)})`),{x:e.x,y:e.y,order:e.order,sourceImage:this.previousImageData.timeString||"Previous image"}):(console.log(`[Expected position] No annotation found for order ${t} in previous image`),null)}catch(e){return console.error("[Expected position] Get expected position failed:",e),null}}reset(){this.currentPlantId=null,this.currentViewAngle=null,this.currentImageIndex=-1,this.previousImageData=null,this.previousAnnotations=[],this.isVisible&&this.showNoPreview("Please choose an image")}getStatus(){return{isVisible:this.isVisible,currentPlantId:this.currentPlantId,currentViewAngle:this.currentViewAngle,currentImageIndex:this.currentImageIndex,hasPreviousData:null!==this.previousImageData}}hideLoading(){this.showLoading(!1)}hideNoPreview(){this.noPreview&&(this.noPreview.style.display="none")}bindZoomControls(){this.zoomSlider&&this.zoomValue&&(this.zoomSlider.addEventListener("input",t=>{this.zoomLevel=parseFloat(t.target.value),this.zoomValue.textContent=this.zoomLevel+"x",this.isVisible&&this.cachedImageElement&&this.previousAnnotations?this.renderCachedPreview():this.isVisible&&this.previousImageData&&this.previousAnnotations&&this.renderPreview(this.previousImageData,this.previousAnnotations)}),this.zoomSlider.value=this.zoomLevel,this.zoomValue.textContent=this.zoomLevel+"x")}async showSpecificOrderPreview(t){if(this.isVisible&&this.plantDataManager&&this.currentPlantId){this.isShowingSpecificOrder=!0,this.specificTargetOrder=t;try{const e=await this.getPreviousImage();if(!e)return void this.showNoPreview("This is the first image");const n=await this.plantDataManager.getImageAnnotations(e.id);if(!n||0===n.length)return void this.showNoPreview("This image has no annotations");if(!n.find(e=>e.order===t))return void this.showNoPreview(`This image has no ${t}th branch point`);this.updateSpecificPreviewTitle(e,t),await this.renderSpecificOrderPreview(e,n,t)}catch(e){console.error("Show specific order preview failed:",e),this.showNoPreview("Preview loading failed")}}}async restoreNormalPreview(){this.isShowingSpecificOrder=!1,this.specificTargetOrder=null,await this.updatePreview()}updateSpecificPreviewTitle(t,e){if(this.previewTitle){const n=t.timeString||"Unknown time";this.previewTitle.textContent=`Dragging: ${e}th branch point`,this.previewTitle.title=`${n} - Dragging ${e}th branch point, reference position from previous image`}}async renderSpecificOrderPreview(t,e,n){if(!this.previewCanvas||!this.previewCtx)return;const o=e.find(t=>t.order===n);if(o){this.hideLoading(),this.hideNoPreview();try{let s;if(console.log("Render specific order preview:",n),t.file&&t.file instanceof File)s=URL.createObjectURL(t.file);else if(t.url)s=t.url;else{if(!this.plantDataManager?.fileSystemManager)throw new Error("Failed to get image data: missing necessary image information or file system manager");try{s=await this.plantDataManager.fileSystemManager.createImageURL(t)}catch(i){if(console.warn("Create URL using FileSystemManager failed:",i),!t.handle)throw i;try{const e=await t.handle.getFile();s=URL.createObjectURL(e)}catch(a){throw console.error("Create URL from handle also failed:",a),new Error("Failed to get image data: all methods failed")}}}const r=new Image;r.crossOrigin="anonymous",await new Promise((t,e)=>{r.onload=()=>t(),r.onerror=()=>e(new Error("Image loading failed")),r.src=s});const l=200,c=Math.round(l/this.zoomLevel),d=o.x,g=o.y,h=Math.max(0,Math.min(r.width-c,d-c/2)),p=Math.max(0,Math.min(r.height-c,g-c/2)),u=Math.min(c,r.width-h),m=Math.min(c,r.height-p),f=this.previewCanvas.width,y=this.previewCanvas.height;this.previewCtx.clearRect(0,0,f,y),this.previewCtx.drawImage(r,h,p,u,m,0,0,f,y);const w=f/u,b=y/m,x=(d-h)*w,v=(g-p)*b;this.renderDraggedAnnotation(x,v,n,o.direction),e.forEach(t=>{if(t.order!==n&&t.x>=h&&t.x<=h+u&&t.y>=p&&t.y<=p+m){const e=(t.x-h)*w,n=(t.y-p)*b;this.renderLocalizedAnnotation(e,n,t.order||0,t.direction,!1)}}),this.renderZoomInfo(w,b),s&&s.startsWith("blob:")&&!t.url&&setTimeout(()=>URL.revokeObjectURL(s),5e3),console.log("Specific order preview rendering completed")}catch(i){console.error("Specific order preview rendering failed:",i),this.showNoPreview(`Preview loading failed: ${i.message}`)}}else this.showNoPreview(`This image has no ${n}th branch point`)}renderDraggedAnnotation(t,e,n,o){this.previewCtx.beginPath(),this.previewCtx.arc(t,e,11,0,2*Math.PI),this.previewCtx.strokeStyle="#ff9800",this.previewCtx.lineWidth=2,this.previewCtx.setLineDash([3,3]),this.previewCtx.stroke(),this.previewCtx.setLineDash([]),this.previewCtx.beginPath(),this.previewCtx.arc(t,e,6,0,2*Math.PI),this.previewCtx.fillStyle="#ff9800",this.previewCtx.fill(),this.previewCtx.strokeStyle="#ffffff",this.previewCtx.lineWidth=3,this.previewCtx.stroke(),this.renderDirectionArrow(t,e,o,!0),this.previewCtx.fillStyle="#000000",this.previewCtx.font="bold 9px Arial",this.previewCtx.textAlign="center",this.previewCtx.textBaseline="middle",this.previewCtx.fillText(n.toString(),t,e),this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 7px Arial",this.previewCtx.fillText("Dragging",t,e+6+12)}}class c{constructor(t){this.httpManager=t,this.notes=new Map,this.cacheTimestamps=new Map,this.isInitialized=!1,this.cacheExpiration=3e5,this.requestQueue=new Map,this.noteCounts=new Map,this.bulkNoteData=null,this.bulkDataTimestamp=0,this.performanceMetrics={requestCount:0,bulkRequestCount:0,cacheHits:0,networkTime:0}}get baseUrl(){return this.httpManager.baseUrl}async initialize(){try{return await this.httpManager.ensureConnection(),this.isInitialized=!0,console.log("NoteManager 初始化成功"),!0}catch(t){throw console.error("NoteManager 初始化失败:",t),t}}async ensureConnection(){this.isInitialized||await this.initialize(),await this.httpManager.ensureConnection()}async addPlantNote(t,e){if(!t)throw new Error("植物ID不能为空");if(!e.title||!e.content)throw new Error("笔记标题和内容不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const n=await fetch(`${this.httpManager.baseUrl}/notes/plant/${encodeURIComponent(t)}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const o=await n.json();if(o.success)return this.clearCache(),console.log(`植物笔记创建成功: ${o.data.noteId} - 缓存已完全清除`),o.data.noteId;throw new Error(o.error||"创建植物笔记失败")},`创建植物 ${t} 笔记`)}async addImageNote(t,e,n){if(!t)throw new Error("植物ID不能为空");if(!e)throw new Error("图像ID不能为空");if(!n.title||!n.content)throw new Error("笔记标题和内容不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const o=await fetch(`${this.httpManager.baseUrl}/notes/image/${encodeURIComponent(t)}/${encodeURIComponent(e)}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);const i=await o.json();if(i.success)return this.clearCache(),console.log(`图像笔记创建成功: ${i.data.noteId} - 缓存已完全清除`),i.data.noteId;throw new Error(i.error||"创建图像笔记失败")},`创建图像 ${e} 笔记`)}async getPlantNotes(t){if(!t)throw new Error("植物ID不能为空");await this.ensureConnection();const e=`plant_${t}`;if(this.bulkNoteData&&!this.isBulkDataExpired()){const n=this.bulkNoteData.plantNotes[t]||[];return this.notes.set(e,n),this.performanceMetrics.cacheHits++,n}return this.notes.has(e)&&!this.isCacheExpired(e)?(this.performanceMetrics.cacheHits++,this.notes.get(e)):this.httpManager.withRetry(async()=>{const n=performance.now(),o=`${this.httpManager.baseUrl}/notes/plant/${encodeURIComponent(t)}`;console.log(`[NoteManager] 请求植物笔记 URL: ${o}`);try{const i=await fetch(o);if(this.performanceMetrics.requestCount++,!i.ok){if(console.error(`[NoteManager] 请求失败: ${i.status} ${i.statusText}`),404===i.status){const t=[];return this.setCache(e,t),t}throw 500===i.status?new Error("服务器内部错误 (500): 请检查后端服务状态"):403===i.status?new Error("访问被拒绝 (403): 请检查权限设置"):new Error(`HTTP ${i.status}: ${i.statusText}`)}const a=await i.json();if(this.performanceMetrics.networkTime+=performance.now()-n,a.success)return this.setCache(e,a.data),console.log(`[NoteManager] 成功获取植物 ${t} 的 ${a.data.length} 条笔记`),a.data;throw new Error(a.error||"获取植物笔记失败")}catch(i){if(this.performanceMetrics.networkTime+=performance.now()-n,"TypeError"===i.name&&i.message.includes("fetch"))throw new Error(`网络连接失败: 无法连接到后端服务 (${o})`);throw i}},`获取植物 ${t} 笔记`)}async getImageNotes(t,e){if(!t)throw new Error("植物ID不能为空");if(!e)throw new Error("图像ID不能为空");await this.ensureConnection();const n=`image_${t}_${e}`;if(this.bulkNoteData&&!this.isBulkDataExpired()){const t=this.bulkNoteData.imageNotes[e]||[];return this.notes.set(n,t),this.performanceMetrics.cacheHits++,t}return this.notes.has(n)&&!this.isCacheExpired(n)?(this.performanceMetrics.cacheHits++,this.notes.get(n)):this.httpManager.withRetry(async()=>{const o=performance.now(),i=`${this.httpManager.baseUrl}/notes/image/${encodeURIComponent(t)}/${encodeURIComponent(e)}`;console.log(`[NoteManager] 请求图像笔记 URL: ${i}`);try{const t=await fetch(i);if(this.performanceMetrics.requestCount++,!t.ok){if(console.error(`[NoteManager] 请求失败: ${t.status} ${t.statusText}`),404===t.status){const t=[];return this.setCache(n,t),t}throw 500===t.status?new Error("服务器内部错误 (500): 请检查后端服务状态"):403===t.status?new Error("访问被拒绝 (403): 请检查权限设置"):new Error(`HTTP ${t.status}: ${t.statusText}`)}const a=await t.json();if(this.performanceMetrics.networkTime+=performance.now()-o,a.success)return this.setCache(n,a.data),console.log(`[NoteManager] 成功获取图像 ${e} 的 ${a.data.length} 条笔记`),a.data;throw new Error(a.error||"获取图像笔记失败")}catch(a){if(this.performanceMetrics.networkTime+=performance.now()-o,"TypeError"===a.name&&a.message.includes("fetch"))throw new Error(`网络连接失败: 无法连接到后端服务 (${i})`);throw a}},`获取图像 ${e} 笔记`)}async updateNote(t,e){if(!t)throw new Error("笔记ID不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const n=await fetch(`${this.httpManager.baseUrl}/notes/${encodeURIComponent(t)}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const o=await n.json();if(o.success)return this.clearCache(),console.log(`笔记更新成功: ${t}`),o.data;throw new Error(o.error||"更新笔记失败")},`更新笔记 ${t}`)}async deleteNote(t){if(!t)throw new Error("笔记ID不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const e=await fetch(`${this.httpManager.baseUrl}/notes/${encodeURIComponent(t)}`,{method:"DELETE"});if(!e.ok){if(404===e.status)return console.warn(`笔记 ${t} 不存在或已被删除`),this.clearCache(),!0;throw new Error(`HTTP ${e.status}: ${e.statusText}`)}const n=await e.json();if(n.success)return this.clearCache(),console.log(`笔记删除成功: ${t}`),!0;throw new Error(n.error||"删除笔记失败")},`删除笔记 ${t}`)}async getNote(t){if(!t)throw new Error("笔记ID不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const e=await fetch(`${this.httpManager.baseUrl}/notes/${encodeURIComponent(t)}`);if(!e.ok){if(404===e.status)return null;throw new Error(`HTTP ${e.status}: ${e.statusText}`)}const n=await e.json();if(n.success)return n.data;throw new Error(n.error||"获取笔记失败")},`获取笔记 ${t}`)}async searchNotes(t,e={}){return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const n=new URLSearchParams;t&&n.append("query",t),e.plantId&&n.append("plantId",e.plantId),e.noteType&&n.append("noteType",e.noteType),e.author&&n.append("author",e.author);const o=`${this.httpManager.baseUrl}/notes/search?${n}`;console.log("[NoteManager] Making search request to:",o);const i=await fetch(o);if(!i.ok){const t=new Error(`HTTP ${i.status}: ${i.statusText}`);throw t.url=o,t.status=i.status,console.error("[NoteManager] Search request failed:",t),t}const a=await i.json();if(a.success)return a.data;throw new Error(a.error||"搜索笔记失败")},"搜索笔记")}async getStats(){return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const t=await fetch(`${this.httpManager.baseUrl}/notes/stats`);if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const e=await t.json();if(e.success)return e.data;throw new Error(e.error||"获取笔记统计失败")},"获取笔记统计")}clearCache(){this.notes.clear(),this.cacheTimestamps.clear(),this.noteCounts.clear(),this.bulkNoteData=null,this.bulkDataTimestamp=0,console.log("笔记缓存已完全清除 (包括批量数据缓存)")}invalidateCache(t,e=null){const n=`plant_${t}`;if(this.notes.delete(n),e){const n=`image_${t}_${e}`;this.notes.delete(n)}}getCacheStats(){return{cacheSize:this.notes.size,isInitialized:this.isInitialized,cacheKeys:Array.from(this.notes.keys())}}validateNoteData(t){const e=[];return t.title&&""!==t.title.trim()||e.push("标题不能为空"),t.content&&""!==t.content.trim()||e.push("内容不能为空"),t.title&&t.title.length>100&&e.push("标题长度不能超过100字符"),t.content&&t.content.length>5e3&&e.push("内容长度不能超过5000字符"),t.noteType&&!["general","observation","annotation"].includes(t.noteType)&&e.push("笔记类型必须是 general、observation 或 annotation"),t.tags&&!Array.isArray(t.tags)&&e.push("标签必须是数组"),{isValid:0===e.length,errors:e}}formatNoteForDisplay(t){return{...t,formattedTimestamp:new Date(t.timestamp).toLocaleString("zh-CN"),formattedLastModified:new Date(t.lastModified).toLocaleString("zh-CN"),shortContent:t.content.length>100?t.content.substring(0,100)+"...":t.content,tagsText:t.tags.join(", ")}}cleanup(){this.clearCache(),this.isInitialized=!1,this.cleanupTimer&&clearInterval(this.cleanupTimer),console.log("NoteManager 清理完成")}startAutoCleanup(){this.cleanupTimer=setInterval(()=>{this.cleanupExpiredCache()},6e5)}isCacheExpired(t){const e=this.cacheTimestamps.get(t);return!e||Date.now()-e>this.cacheExpiration}setCache(t,e){this.notes.set(t,e),this.cacheTimestamps.set(t,Date.now())}async withRequestDeduplication(t,e){if(this.requestQueue.has(t))return this.requestQueue.get(t);const n=e();this.requestQueue.set(t,n);try{const e=await n;return this.requestQueue.delete(t),e}catch(o){throw this.requestQueue.delete(t),o}}async getNoteCount(t,e=null){const n=e?`image_${t}_${e}`:`plant_${t}`;if(this.noteCounts.has(n))return this.noteCounts.get(n);const o=e?`image_${t}_${e}`:`plant_${t}`;if(this.notes.has(o)&&!this.isCacheExpired(o)){const t=this.notes.get(o).length;return this.noteCounts.set(n,t),t}return this.loadNotesAsync(t,e),0}async loadNotesAsync(t,e=null){try{e?await this.getImageNotes(t,e):await this.getPlantNotes(t)}catch(n){console.warn("后台加载笔记失败:",n)}}async preloadNotes(t,e=[]){const n=[];n.push(this.loadNotesAsync(t)),e.forEach(e=>{n.push(this.loadNotesAsync(t,e))});try{await Promise.allSettled(n),console.log(`预加载完成: 植物 ${t} 和 ${e.length} 个图像的笔记`)}catch(o){console.warn("预加载笔记失败:",o)}}async getAllNotesInBulk(){return console.log("[NoteManager] 开始批量获取所有笔记数据..."),await this.ensureConnection(),this.bulkNoteData&&!this.isBulkDataExpired()?(console.log("[NoteManager] 使用缓存的批量笔记数据"),this.performanceMetrics.cacheHits++,this.bulkNoteData):this.httpManager.withRetry(async()=>{const t=performance.now(),e=`${this.httpManager.baseUrl}/notes/bulk`;console.log(`[NoteManager] 请求批量笔记数据 URL: ${e}`);try{const n=await fetch(e,{headers:{"Cache-Control":"no-cache"}});if(this.performanceMetrics.bulkRequestCount++,!n.ok){if(404===n.status)return console.warn("[NoteManager] 批量笔记端点不存在，将回退到单独请求模式"),null;throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const o=await n.json();if(this.performanceMetrics.networkTime+=performance.now()-t,o.success){this.bulkNoteData={plantNotes:o.data.plantNotes||{},imageNotes:o.data.imageNotes||{},statistics:o.data.statistics||{}},this.bulkDataTimestamp=Date.now(),this.updateIndividualCacheFromBulk();const t=Object.keys(this.bulkNoteData.plantNotes).length,e=Object.keys(this.bulkNoteData.imageNotes).length;return console.log(`[NoteManager] 成功获取批量笔记数据: ${t} 个植物, ${e} 个图像`),this.bulkNoteData}throw new Error(o.error||"获取批量笔记数据失败")}catch(n){if(this.performanceMetrics.networkTime+=performance.now()-t,"TypeError"===n.name&&n.message.includes("fetch"))throw new Error(`网络连接失败: 无法连接到后端服务 (${e})`);throw n}},"批量获取笔记数据")}isBulkDataExpired(){return!this.bulkDataTimestamp||Date.now()-this.bulkDataTimestamp>this.cacheExpiration}updateIndividualCacheFromBulk(){if(this.bulkNoteData){for(const[t,e]of Object.entries(this.bulkNoteData.plantNotes)){const n=`plant_${t}`;this.setCache(n,e)}for(const[t,e]of Object.entries(this.bulkNoteData.imageNotes)){const n=`image_${t.split("_")[0]}_${t}`;this.setCache(n,e)}}}async getQuickNoteStats(){console.log("[NoteManager] 获取快速笔记统计...");try{const t=await this.getAllNotesInBulk();if(!t)return console.warn("[NoteManager] 批量API不可用，回退到传统模式"),null;const e={};for(const[n,o]of Object.entries(t.plantNotes)){const i=o.length;let a=0;for(const[e,o]of Object.entries(t.imageNotes))e.startsWith(n+"_")&&(a+=o.length);e[n]={plantNotes:i,imageNotes:a,total:i+a}}return console.log(`[NoteManager] 快速统计完成: ${Object.keys(e).length} 个植物`),e}catch(t){return console.error("[NoteManager] 获取快速笔记统计失败:",t),null}}getPerformanceMetrics(){return{...this.performanceMetrics,cacheSize:this.notes.size,hasBulkData:!!this.bulkNoteData,bulkDataAge:this.bulkDataTimestamp?Date.now()-this.bulkDataTimestamp:null,averageRequestTime:this.performanceMetrics.requestCount>0?this.performanceMetrics.networkTime/this.performanceMetrics.requestCount:0}}resetPerformanceMetrics(){this.performanceMetrics={requestCount:0,bulkRequestCount:0,cacheHits:0,networkTime:0}}async refreshBulkData(){return console.log("[NoteManager] 强制刷新批量数据..."),this.bulkNoteData=null,this.bulkDataTimestamp=0,await this.getAllNotesInBulk()}cleanupExpiredCache(){const t=Date.now(),e=[];for(const[n,o]of this.cacheTimestamps)t-o>this.cacheExpiration&&e.push(n);e.forEach(t=>{this.notes.delete(t),this.cacheTimestamps.delete(t)}),this.isBulkDataExpired()&&(this.bulkNoteData=null,this.bulkDataTimestamp=0),e.length>0&&console.log(`清理了 ${e.length} 个过期缓存`)}}class d{constructor(t){this.noteManager=t,this.currentPlantId=null,this.currentImageId=null,this.currentNote=null,this.isEditMode=!1,this.initializeUI()}initializeUI(){setTimeout(()=>{this.createNoteModal(),this.createNoteListModal(),this.setupEventListeners(),this.createNoteButtons(),this.injectNoteStyles(),console.log("[NoteUI] UI initialization completed with note separation styles"),setTimeout(()=>{this.updateAllPlantNoteBadges()},500),setTimeout(()=>{console.log("[NoteUI] Running additional badge update for safety"),this.updateAllPlantNoteBadges()},2e3)},200)}createNoteModal(){console.log("[NoteUI] Creating note modal");const t=document.createElement("div");t.id="note-modal",t.className="modal",t.style.display="none",t.innerHTML='\n      <div class="modal-content note-modal-content">\n        <div class="modal-header">\n          <h2 id="note-modal-title">Add Note</h2>\n          <button class="close-button" id="note-modal-close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="note-form">\n            <div class="form-group">\n              <label for="note-title">Title <span class="required">*</span></label>\n              <input type="text" id="note-title" maxlength="100" required placeholder="Enter note title...">\n              <div class="char-counter">\n                <span id="note-title-count">0</span>/100\n              </div>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-type">Type</label>\n              <select id="note-type">\n                <option value="general">General Note</option>\n                <option value="observation">Observation Record</option>\n                <option value="annotation">Annotation Description</option>\n              </select>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-content">Content <span class="required">*</span></label>\n              <textarea id="note-content" rows="6" maxlength="5000" required placeholder="Enter note content..."></textarea>\n              <div class="char-counter">\n                <span id="note-content-count">0</span>/5000\n              </div>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-tags">Tags</label>\n              <input type="text" id="note-tags" placeholder="Separate multiple tags with commas">\n              <div class="form-help">Example: observation, growth, issue</div>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-author">Author</label>\n              <input type="text" id="note-author" value="User" placeholder="Enter author name">\n            </div>\n            \n            \x3c!-- 🔧 NEW: Backward Propagation Option --\x3e\n            <div class="form-group" id="backward-propagation-group" style="display: none;">\n              <div class="checkbox-wrapper">\n                <label class="checkbox-label">\n                  <input type="checkbox" id="note-backward-propagation">\n                  <span class="checkbox-text">Backward Propagation</span>\n                </label>\n                <div class="form-help">Apply this note to all later-dated images of the current plant</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class="modal-footer">\n          <button class="btn btn-secondary" id="note-cancel-btn">Cancel</button>\n          <button class="btn btn-primary" id="note-save-btn">Save</button>\n        </div>\n      </div>\n    ',document.body.appendChild(t),console.log("[NoteUI] Note modal created and set to hidden")}createNoteListModal(){console.log("[NoteUI] Creating note list modal");const t=document.createElement("div");t.id="note-list-modal",t.className="modal",t.style.display="none",t.innerHTML='\n      <div class="modal-content note-list-modal-content">\n        <div class="modal-header">\n          <h2 id="note-list-modal-title">Note List</h2>\n          <button class="close-button" id="note-list-modal-close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="note-list-controls">\n            <div class="search-group">\n              <input type="text" id="note-search" placeholder="Search notes...">\n              <button class="btn btn-sm btn-secondary" id="note-search-btn">Search</button>\n            </div>\n            <div class="filter-group">\n              <select id="note-type-filter">\n                <option value="">All Types</option>\n                <option value="general">General Note</option>\n                <option value="observation">Observation Record</option>\n                <option value="annotation">Annotation Description</option>\n              </select>\n              <button class="btn btn-sm btn-primary" id="add-note-btn">Add Note</button>\n            </div>\n          </div>\n          <div class="note-list-container">\n            <div id="note-list-content">\n              <div class="loading-message">Loading...</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ',document.body.appendChild(t),console.log("[NoteUI] Note list modal created and set to hidden")}createNoteButtons(){this.createPlantNoteButton(),this.createImageNoteButton()}createPlantNoteButton(){const t=document.querySelector(".toolbar-section");if(!t)return console.warn("[NoteUI] Toolbar section not found, creating fallback container"),void this.createFallbackPlantNoteContainer();const e=document.getElementById("plant-note-btn");e&&e.remove();let n=t.querySelector(".plant-notes-section");n||(n=document.createElement("div"),n.className="plant-notes-section",n.style.cssText="\n        margin-top: 10px;\n        padding-top: 10px;\n        border-top: 1px solid var(--border-color);\n      ",t.appendChild(n));const o=document.createElement("button");o.id="plant-note-btn",o.className="btn btn-small btn-secondary",o.innerHTML='📝 Plant Notes <span id="plant-note-count" class="note-count-display"></span>',o.title="View or add plant notes",o.style.cssText="\n      display: none;\n      width: 100%;\n      margin-bottom: 5px;\n      position: relative;\n    ",n.appendChild(o),console.log("[NoteUI] Plant notes button created in toolbar with count display")}createFallbackPlantNoteContainer(){const t=document.createElement("div");t.className="plant-note-container",t.style.cssText="\n      position: fixed;\n      top: 80px;\n      right: 20px;\n      z-index: 1000;\n      background: rgba(255, 255, 255, 0.9);\n      padding: 10px;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      display: none;\n    ",document.body.appendChild(t);const e=document.createElement("button");e.id="plant-note-btn",e.className="btn btn-info btn-sm note-btn",e.innerHTML="📝 Plant Notes",e.title="View or add plant notes",e.style.display="none",t.appendChild(e)}createImageNoteButton(){console.log("[NoteUI] Creating image notes button");const t=document.querySelector(".annotation-controls");if(!t)return console.warn("[NoteUI] Annotation controls not found, creating fallback container"),void this.createFallbackImageNoteContainer();const e=document.getElementById("image-note-btn");e&&e.remove();const n=document.createElement("button");n.id="image-note-btn",n.className="btn btn-icon",n.innerHTML='📝<span id="image-note-count" class="note-count-overlay"></span>',n.title="View or add image notes",n.style.cssText="\n      display: none;\n      width: 32px;\n      height: 32px;\n      padding: 0;\n      font-size: 16px;\n      background-color: rgba(0, 0, 0, 0.7);\n      color: white;\n      border: none;\n      pointer-events: auto;\n      cursor: pointer;\n      border-radius: 0.375rem;\n      position: relative;\n    ",t.appendChild(n),console.log("[NoteUI] Image notes button created in annotation controls with count display")}createFallbackImageNoteContainer(){const t=document.createElement("div");t.className="image-note-container",t.style.cssText="\n      position: fixed;\n      top: 120px;\n      right: 20px;\n      z-index: 1000;\n      background: rgba(255, 255, 255, 0.9);\n      padding: 10px;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      display: none;\n    ",document.body.appendChild(t);const e=document.createElement("button");e.id="image-note-btn",e.className="btn btn-info btn-sm note-btn",e.innerHTML="📝",e.title="View or add image notes",e.style.cssText="\n      display: none;\n      pointer-events: auto;\n      cursor: pointer;\n    ",t.appendChild(e)}setupEventListeners(){setTimeout(()=>{this.setupModalEventListeners(),this.setupButtonEventListeners(),this.setupInputEventListeners()},200)}setupModalEventListeners(){const t=document.getElementById("note-modal-close");t&&t.addEventListener("click",()=>{this.closeNoteModal()});const e=document.getElementById("note-cancel-btn");e&&e.addEventListener("click",()=>{this.closeNoteModal()});const n=document.getElementById("note-save-btn");n&&n.addEventListener("click",()=>{this.saveNote()});const o=document.getElementById("note-list-modal-close");o&&o.addEventListener("click",()=>{this.closeNoteListModal()});const i=document.getElementById("add-note-btn");i&&i.addEventListener("click",()=>{this.closeNoteListModal(),this.showNoteModal()});const a=document.getElementById("note-search-btn");a&&a.addEventListener("click",()=>{this.searchNotes()});const s=document.getElementById("note-search");s&&s.addEventListener("keypress",t=>{"Enter"===t.key&&this.searchNotes()}),document.addEventListener("click",t=>{"note-modal"===t.target.id&&this.closeNoteModal(),"note-list-modal"===t.target.id&&this.closeNoteListModal()})}setupButtonEventListeners(){const t=document.getElementById("plant-note-btn");t?(console.log("[NoteUI] Plant notes button found, binding events"),t.addEventListener("click",t=>{console.log("[NoteUI] Plant notes button clicked"),t.preventDefault(),this.showPlantNotes()})):console.warn("[NoteUI] Plant notes button not found");const e=document.getElementById("image-note-btn");e?(console.log("[NoteUI] Image notes button found, binding events"),e.addEventListener("click",t=>{console.log("[NoteUI] Image notes button clicked"),t.preventDefault(),this.showImageNotes()})):console.warn("[NoteUI] Image notes button not found")}setupInputEventListeners(){const t=document.getElementById("note-title");t&&t.addEventListener("input",()=>{this.updateCharCounter("note-title","note-title-count",100)});const e=document.getElementById("note-content");e&&e.addEventListener("input",()=>{this.updateCharCounter("note-content","note-content-count",5e3)})}async showPlantNotes(){if(console.log("[NoteUI] showPlantNotes called"),!this.currentPlantId)return console.warn("[NoteUI] No plant selected, cannot show plant notes"),void this.showUserError("Please select a plant","You need to select a plant to view notes");this.currentImageId=null,console.log("[NoteUI] Cleared currentImageId to ensure plant notes creation"),document.getElementById("note-list-modal-title").textContent=`Plant Notes - ${this.currentPlantId}`;const t=document.getElementById("note-list-modal");t&&(console.log("[NoteUI] Showing plant notes modal"),t.style.display="flex");try{await this.loadNoteList()}catch(e){console.error("[NoteUI] Failed to load plant notes:",e),this.showUserError("Failed to load notes",e.message)}}async showImageNotes(){console.log("[NoteUI] showImageNotes called"),console.log(`[NoteUI] Current state - plantId: ${this.currentPlantId}, imageId: ${this.currentImageId}`);const t=window.PlantAnnotationTool?.appState,e=t?.currentPlant?.id,n=t?.currentImage?.id;console.log(`[NoteUI] Fallback state - plantId: ${e}, imageId: ${n}`);const o=this.currentPlantId||e,i=this.currentImageId||n;if(!o||!i)return console.warn("[NoteUI] No plant or image selected, cannot show image notes"),void this.showUserError("Please select plant and image","You need to select both plant and image to view image notes");!this.currentPlantId&&e&&(this.currentPlantId=e),!this.currentImageId&&n&&(this.currentImageId=n),document.getElementById("note-list-modal-title").textContent=`Image Notes - ${i}`;const a=document.getElementById("note-list-modal");a&&(console.log("[NoteUI] Showing image notes modal"),a.style.display="flex");try{await this.loadNoteList()}catch(s){console.error("[NoteUI] Failed to load image notes:",s),this.showUserError("Failed to load notes",s.message)}}async loadNoteList(){const t=document.getElementById("note-list-content");t.innerHTML='<div class="loading-message">Loading...</div>';try{let t;this.currentImageId?(t=await this.noteManager.getImageNotes(this.currentPlantId,this.currentImageId),console.log(`[NoteUI] Loaded ${t.length} image notes for ${this.currentImageId}`)):(console.log(`[NoteUI] Loading plant-level notes only for ${this.currentPlantId}`),t=await this.noteManager.getPlantNotes(this.currentPlantId),console.log(`[NoteUI] Plant API loaded ${t.length} plant-only notes for ${this.currentPlantId}`)),this.renderNoteList(t),console.log(`[NoteUI] Modal refreshed with ${t.length} notes`)}catch(e){console.error("Failed to load note list:",e),t.innerHTML=`<div class="error-message">Loading failed: ${e.message}</div>`}}renderNoteList(t){const e=document.getElementById("note-list-content");if(!t||0===t.length)return void(e.innerHTML='<div class="empty-message">No notes available</div>');const n=t.filter(t=>!t.imageId),o=t.filter(t=>t.imageId);console.log(`[NoteUI] Rendering ${n.length} plant notes and ${o.length} image notes`);let i="";n.length>0&&(i+=`\n        <div class="notes-section">\n          <div class="section-header">\n            <h3 class="section-title">\n              <span class="section-icon">📝</span>\n              Plant Notes (${n.length})\n            </h3>\n          </div>\n          <div class="notes-list">\n            ${this.renderNoteItems(n,"plant")}\n          </div>\n        </div>\n      `),o.length>0&&(i+=`\n        <div class="notes-section">\n          <div class="section-header">\n            <h3 class="section-title">\n              <span class="section-icon">🖼️</span>\n              Image Notes (${o.length})\n            </h3>\n          </div>\n          <div class="notes-list">\n            ${this.renderNoteItems(o,"image")}\n          </div>\n        </div>\n      `),e.innerHTML=i,this.bindNoteActionEvents(e)}renderNoteItems(t,e){return t.map(t=>{const n=this.noteManager.formatNoteForDisplay(t);let o="",i="";if("plant"===e)o='<span class="note-scope plant-scope">📝 Plant</span>';else if("image"===e){o='<span class="note-scope image-scope">🖼️ Image</span>';const e=t.imageId?t.imageId.split("_").slice(-1)[0]:"Unknown";i=`<div class="image-info">📷 Image: ${this.escapeHtml(e)}</div>`}return`\n        <div class="note-item ${e}-note" data-note-id="${t.noteId}">\n          <div class="note-item-header">\n            <h4 class="note-title">${this.escapeHtml(n.title)}</h4>\n            <div class="note-actions">\n              <button class="btn btn-sm btn-secondary edit-note-btn" data-note-id="${t.noteId}">Edit</button>\n              <button class="btn btn-sm btn-danger delete-note-btn" data-note-id="${t.noteId}">Delete</button>\n            </div>\n          </div>\n          <div class="note-item-meta">\n            ${o}\n            <span class="note-type note-type-${t.noteType}">${this.getNoteTypeText(t.noteType)}</span>\n            <span class="note-timestamp">${n.formattedTimestamp}</span>\n            <span class="note-author">Author: ${this.escapeHtml(t.author)}</span>\n          </div>\n          ${i}\n          <div class="note-content">\n            ${this.escapeHtml(n.shortContent)}\n          </div>\n          ${t.tags.length>0?`\n            <div class="note-tags">\n              ${t.tags.map(t=>`<span class="tag">${this.escapeHtml(t)}</span>`).join("")}\n            </div>\n          `:""}\n        </div>\n      `}).join("")}bindNoteActionEvents(t){t.querySelectorAll(".edit-note-btn").forEach(t=>{t.addEventListener("click",t=>{const e=t.target.dataset.noteId;this.editNote(e)})}),t.querySelectorAll(".delete-note-btn").forEach(t=>{t.addEventListener("click",t=>{const e=t.target.dataset.noteId;this.deleteNote(e)})})}injectNoteStyles(){const t="note-separation-styles";if(document.getElementById(t))return;const e=document.createElement("style");e.id=t,e.textContent='\n      /* Note section separation styles */\n      .notes-section {\n        margin-bottom: 20px;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        overflow: hidden;\n      }\n      \n      .section-header {\n        background: #f9fafb;\n        padding: 12px 16px;\n        border-bottom: 1px solid #e5e7eb;\n      }\n      \n      .section-title {\n        margin: 0;\n        font-size: 16px;\n        font-weight: 600;\n        color: #374151;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n      \n      .section-icon {\n        font-size: 18px;\n      }\n      \n      .notes-list {\n        background: white;\n      }\n      \n      /* Note scope indicators */\n      .note-scope {\n        display: inline-flex;\n        align-items: center;\n        gap: 4px;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-size: 12px;\n        font-weight: 500;\n        margin-right: 8px;\n      }\n      \n      .plant-scope {\n        background: #dcfce7;\n        color: #166534;\n      }\n      \n      .image-scope {\n        background: #dbeafe;\n        color: #1d4ed8;\n      }\n      \n      /* Image info display */\n      .image-info {\n        background: #f0f9ff;\n        border: 1px solid #bae6fd;\n        border-radius: 4px;\n        padding: 6px 10px;\n        margin: 8px 0;\n        font-size: 13px;\n        color: #0c4a6e;\n      }\n      \n      /* Note item styling for different types */\n      .plant-note {\n        border-left: 4px solid #22c55e;\n      }\n      \n      .image-note {\n        border-left: 4px solid #3b82f6;\n      }\n      \n      /* Enhance existing note item spacing */\n      .note-item {\n        margin-bottom: 0;\n        border-bottom: 1px solid #f3f4f6;\n      }\n      \n      .note-item:last-child {\n        border-bottom: none;\n      }\n      \n      /* Backward propagation checkbox styling */\n      .checkbox-wrapper {\n        margin: 15px 0;\n      }\n      \n      .checkbox-label {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        cursor: pointer;\n        font-weight: 500;\n        color: #374151;\n      }\n      \n      .checkbox-label input[type="checkbox"] {\n        margin: 0;\n        padding: 0;\n        transform: scale(1.1);\n        accent-color: #3b82f6;\n      }\n      \n      .checkbox-text {\n        user-select: none;\n      }\n      \n      #backward-propagation-group .form-help {\n        margin-top: 5px;\n        font-size: 12px;\n        color: #6b7280;\n        font-style: italic;\n      }\n    ',document.head.appendChild(e),console.log("[NoteUI] Injected separation styles for plant/image notes")}showNoteModal(t=null){console.log("[NoteUI] showNoteModal called, note:",t),this.currentNote=t,this.isEditMode=!!t;const e=document.getElementById("note-modal"),n=document.getElementById("note-modal-title"),o=document.getElementById("backward-propagation-group");if(!e||!n)return void console.error("[NoteUI] Note modal elements not found");n.textContent=this.isEditMode?"Edit Note":"Add Note";const i=!this.isEditMode&&this.currentImageId;if(o){o.style.display=i?"block":"none";const t=document.getElementById("note-backward-propagation");t&&(t.checked=!1)}t?(document.getElementById("note-title").value=t.title,document.getElementById("note-type").value=t.noteType,document.getElementById("note-content").value=t.content,document.getElementById("note-tags").value=t.tags.join(", "),document.getElementById("note-author").value=t.author):(document.getElementById("note-title").value="",document.getElementById("note-type").value="general",document.getElementById("note-content").value="",document.getElementById("note-tags").value="",document.getElementById("note-author").value="User"),this.updateCharCounter("note-title","note-title-count",100),this.updateCharCounter("note-content","note-content-count",5e3),console.log("[NoteUI] Showing note edit modal"),e.style.display="flex";const a=document.getElementById("note-title");a&&a.focus()}closeNoteModal(){document.getElementById("note-modal").style.display="none",this.currentNote=null,this.isEditMode=!1}closeNoteListModal(){document.getElementById("note-list-modal").style.display="none"}async getLaterDatedImages(t,e){try{console.log(`[NoteUI] Finding later-dated images for ${t}, current: ${e}`);const n=window.PlantAnnotationTool?.plantDataManager;if(!n)throw new Error("PlantDataManager not available");const o=n.plants?.get(t);if(!o||!o.selectedViewAngle)throw new Error("Current plant or view angle not found");const i=await n.getPlantImages(t,o.selectedViewAngle);if(!i||0===i.length)return[];const a=i.findIndex(t=>t.id===e);if(-1===a)throw new Error("Current image not found in plant images");const s=i.slice(a+1);return console.log(`[NoteUI] Found ${s.length} later-dated images for backward propagation`),s}catch(n){return console.error("[NoteUI] Error finding later-dated images:",n),[]}}async applyNoteToMultipleImages(t,e,n){const o={success:[],failed:[]};console.log(`[NoteUI] Applying note to ${n.length} images via backward propagation`);for(const a of n)try{await this.noteManager.addImageNote(t,a.id,e),o.success.push(a.id),console.log(`[NoteUI] Note successfully applied to ${a.id}`)}catch(i){console.error(`[NoteUI] Failed to apply note to ${a.id}:`,i),o.failed.push({imageId:a.id,error:i.message})}return console.log(`[NoteUI] Backward propagation completed: ${o.success.length} success, ${o.failed.length} failed`),o}async saveNote(){const t=document.getElementById("note-title").value.trim(),e=document.getElementById("note-content").value.trim(),n=document.getElementById("note-type").value,o=document.getElementById("note-tags").value.split(",").map(t=>t.trim()).filter(t=>t),i=document.getElementById("note-author").value.trim(),a=document.getElementById("note-backward-propagation"),s=a&&a.checked,r={title:t,content:e,noteType:n,tags:o,author:i},l=this.noteManager.validateNoteData(r);if(l.isValid)try{if(this.isEditMode&&this.currentNote)console.log(`[NoteUI] Updating note: ${this.currentNote.noteId}`),await this.noteManager.updateNote(this.currentNote.noteId,r),console.log("[NoteUI] Note updated successfully");else{if(console.log("[NoteUI] Creating new note..."),this.currentImageId){if(console.log(`[NoteUI] Creating image note for ${this.currentPlantId}/${this.currentImageId}`),await this.noteManager.addImageNote(this.currentPlantId,this.currentImageId,r),s){console.log("[NoteUI] Backward propagation enabled, finding later-dated images...");const t=await this.getLaterDatedImages(this.currentPlantId,this.currentImageId);if(t.length>0){console.log(`[NoteUI] Applying note to ${t.length} later-dated images`);const e=await this.applyNoteToMultipleImages(this.currentPlantId,r,t);e.success.length>0&&console.log(`[NoteUI] Backward propagation successful: ${e.success.length} images updated`),e.failed.length>0&&console.warn(`[NoteUI] Backward propagation partial failure: ${e.failed.length} images failed`)}else console.log("[NoteUI] No later-dated images found for backward propagation")}}else console.log(`[NoteUI] Creating plant note for ${this.currentPlantId}`),await this.noteManager.addPlantNote(this.currentPlantId,r);console.log("[NoteUI] Note created successfully")}if(this.closeNoteModal(),await new Promise(t=>setTimeout(t,100)),console.log("[NoteUI] Note saved, forcing complete cache clear for fresh data..."),this.noteManager.clearCache&&(this.noteManager.clearCache(),console.log("[NoteUI] Note manager cache completely cleared")),this.noteManager.refreshBulkData)try{await this.noteManager.refreshBulkData(),console.log("[NoteUI] Bulk data forcefully refreshed for immediate sync")}catch(c){console.warn("[NoteUI] Bulk data refresh failed, cache cleared anyway:",c)}const t=document.getElementById("note-list-modal");if(t&&"none"!==t.style.display&&(console.log("[NoteUI] Refreshing note list to show new/updated note"),await this.loadNoteList(),console.log("[NoteUI] Note list refreshed with fresh data")),this.currentPlantId){if(console.log("[NoteUI] 笔记保存完成，立即刷新徽章和按钮..."),console.log("[NoteUI] Forcing immediate badge refresh with fresh data..."),await new Promise(t=>setTimeout(t,200)),await this.updatePlantNoteBadge(this.currentPlantId),await this.updatePlantNoteButton(this.currentPlantId),this.currentImageId&&(await this.directUpdateThumbnailBadge(this.currentPlantId,this.currentImageId),await this.updateImageNoteButton(this.currentPlantId,this.currentImageId),console.log("[NoteUI] ✅ 图像笔记徽章和按钮计数通过直接API刷新完成"),s)){console.log("[NoteUI] Refreshing badges for all images affected by backward propagation...");const t=await this.getLaterDatedImages(this.currentPlantId,this.currentImageId);for(const e of t)await this.directUpdateThumbnailBadge(this.currentPlantId,e.id);console.log(`[NoteUI] Updated badges for ${t.length} propagated images`)}console.log("[NoteUI] 笔记徽章和按钮刷新完成")}}catch(d){console.error("Save note failed:",d),alert("Save failed: "+d.message)}else alert("Input error:\\n"+l.errors.join("\\n"))}async editNote(t){try{const e=await this.noteManager.getNote(t);e&&(this.closeNoteListModal(),this.showNoteModal(e))}catch(e){console.error("Failed to get note:",e),alert("Failed to get note: "+e.message)}}async deleteNote(t){if(confirm("Are you sure you want to delete this note?"))try{if(console.log(`[NoteUI] Attempting to delete note: ${t}`),await this.noteManager.deleteNote(t),console.log("[NoteUI] Note deletion successful"),await new Promise(t=>setTimeout(t,100)),console.log("[NoteUI] Note deleted, forcing complete cache clear and refresh..."),this.noteManager.clearCache&&(this.noteManager.clearCache(),console.log("[NoteUI] Note manager cache cleared after deletion")),this.noteManager.refreshBulkData)try{await this.noteManager.refreshBulkData(),console.log("[NoteUI] Bulk data forcefully refreshed after deletion")}catch(e){console.warn("[NoteUI] Bulk data refresh failed after deletion, cache cleared anyway:",e)}await this.loadNoteList(),console.log("[NoteUI] Note list refreshed after deletion"),this.currentPlantId&&(console.log("[NoteUI] Refreshing badges after note deletion using direct API calls..."),await this.updatePlantNoteBadge(this.currentPlantId),await this.updatePlantNoteButton(this.currentPlantId),this.currentImageId&&(await this.directUpdateThumbnailBadge(this.currentPlantId,this.currentImageId),await this.updateImageNoteButton(this.currentPlantId,this.currentImageId),console.log("[NoteUI] ✅ Image note badge and button updated via direct API after deletion")),console.log("[NoteUI] All badges refreshed after deletion"))}catch(n){console.error("Delete note failed:",n);let t="Delete failed: ";n.message.includes("404")||n.message.includes("不存在")?(t+="Note was already deleted or does not exist.",console.log("[NoteUI] Note already deleted, refreshing modal to show current state..."),this.noteManager.clearCache&&this.noteManager.clearCache(),await this.loadNoteList(),this.currentPlantId&&(await this.updatePlantNoteBadge(this.currentPlantId),this.currentImageId&&(await this.directUpdateThumbnailBadge(this.currentPlantId,this.currentImageId),await this.updateImageNoteButton(this.currentPlantId,this.currentImageId)))):t+=n.message,alert(t)}}async searchNotes(){const t=document.getElementById("note-search").value.trim(),e=document.getElementById("note-type-filter").value;try{let n;this.currentImageId?(console.log(`[NoteUI] Searching image notes for ${this.currentImageId} with query:`,t),n=(await this.noteManager.getImageNotes(this.currentPlantId,this.currentImageId)).filter(n=>{const o=!t||n.title.toLowerCase().includes(t.toLowerCase())||n.content.toLowerCase().includes(t.toLowerCase())||n.tags.some(e=>e.toLowerCase().includes(t.toLowerCase())),i=!e||n.noteType===e;return o&&i}),console.log(`[NoteUI] Image note search completed: found ${n.length} notes`)):(console.log(`[NoteUI] Searching plant-level notes only for ${this.currentPlantId} with query:`,t),n=(await this.noteManager.getPlantNotes(this.currentPlantId)).filter(n=>{const o=!t||n.title.toLowerCase().includes(t.toLowerCase())||n.content.toLowerCase().includes(t.toLowerCase())||n.tags.some(e=>e.toLowerCase().includes(t.toLowerCase())),i=!e||n.noteType===e;return o&&i}),console.log(`[NoteUI] Plant note search completed: found ${n.length} plant-level notes (image notes excluded for consistency)`)),this.renderNoteList(n)}catch(n){console.error("Search notes failed:",n);let t="Search failed: ";n.message.includes("404")?t+="Notes not found or backend server unavailable.":n.message.includes("500")?t+="Server error occurred during search. Please try again.":t+=n.message,document.getElementById("note-list-content").innerHTML=`<div class="error-message">${t}</div>`}}updateCharCounter(t,e,n){const o=document.getElementById(t),i=document.getElementById(e),a=o.value.length;i.textContent=a,i.style.color=a>.9*n?"#ff6b6b":a>.8*n?"#feca57":"#666"}setCurrentPlant(t){this.currentPlantId=t;const e=document.getElementById("plant-note-btn"),n=document.querySelector(".plant-notes-section, .plant-note-container");e&&(e.style.display=t?"block":"none"),n&&(n.style.display=t?"block":"none"),t?(this.updatePlantNoteButton(t),this.updatePlantNoteBadge(t)):this.updatePlantNoteButton(null)}setCurrentImage(t){console.log(`[NoteUI] Setting current image ID: ${t}, current plant ID: ${this.currentPlantId}`),this.currentImageId=t,t&&this.currentPlantId?(!this.currentPlantId&&window.PlantAnnotationTool?.appState?.currentPlant?.id&&(this.currentPlantId=window.PlantAnnotationTool.appState.currentPlant.id,console.log(`[NoteUI] Auto-updated plant ID from global state: ${this.currentPlantId}`)),this.updateImageNoteButton(this.currentPlantId,t),this.refreshThumbnailNoteBadge(this.currentPlantId,t)):(this.updateImageNoteButton(null,null),console.log("[NoteUI] Image note button cleared - no image selected"));const e=document.getElementById("image-note-btn"),n=document.querySelector(".annotation-controls, .image-note-container");if(console.log(`[NoteUI] Image note button exists: ${!!e}, container exists: ${!!n}`),e){const n=this.currentPlantId&&t;console.log(`[NoteUI] Image note button should show: ${n}`),e.style.display=n?"block":"none"}if(n&&n.classList.contains("image-note-container")){const e=this.currentPlantId&&t;console.log(`[NoteUI] Image note container should show: ${e}`),n.style.display=e?"block":"none"}}async updatePlantNoteButton(t){const e=document.getElementById("plant-note-count");if(e)if(t)try{let i=0;const a=await this.noteManager.getQuickNoteStats();if(a&&a[t]){if(i=a[t].plantNotes,console.log(`[NoteUI] Plant note button using bulk data: ${i} plant-only notes`),Math.random()<.1)try{const e=await this.noteManager.getPlantNotes(t),n=e?e.length:0;n!==i&&(console.warn(`[NoteUI] Plant button bulk data inconsistency! Bulk: ${i}, Actual: ${n}. Using actual...`),i=n)}catch(n){console.debug("[NoteUI] Plant button validation failed, continuing with bulk data:",n)}}else{console.log(`[NoteUI] Plant note button fallback to plant API for ${t}`);try{const e=await this.noteManager.getPlantNotes(t);i=e?e.length:0,console.log(`[NoteUI] Plant note button plant API found: ${i} plant-only notes`)}catch(o){console.warn("[NoteUI] Plant API failed, final fallback to 0:",o),i=0}}i>0?(e.textContent=`(${i})`,e.style.cssText="\n          color: #059669;\n          font-weight: bold;\n          margin-left: 5px;\n        "):e.textContent="",console.log(`[NoteUI] Plant note button updated: ${i} total notes (plant + image)`)}catch(i){console.error("Failed to update plant note button:",i),e.textContent=""}else e.textContent=""}async updateImageNoteButton(t,e){const n=document.getElementById("image-note-count");if(n){if(!t||!e)return n.textContent="",void(n.style.display="none");try{const o=await this.noteManager.getImageNotes(t,e),i=o?o.length:0;i>0?(n.textContent=i,n.style.cssText="\n          position: absolute;\n          top: -5px;\n          right: -5px;\n          background: #dc2626;\n          color: white;\n          border-radius: 50%;\n          width: 16px;\n          height: 16px;\n          font-size: 10px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-weight: bold;\n        "):(n.textContent="",n.style.display="none"),console.log(`[NoteUI] Image note button updated: ${i} notes`)}catch(o){console.error("Failed to update image note button:",o),n.textContent="",n.style.display="none"}}}async refreshThumbnailNoteBadge(t,e){try{const n=`image_${t}_${e}`;this.noteManager.notes&&this.noteManager.notes.has(n)&&(this.noteManager.notes.delete(n),console.log(`[NoteUI] Force cleared cache for ${n}`)),this.noteManager.bulkNoteData&&(this.noteManager.bulkNoteData=null,this.noteManager.bulkDataTimestamp=0,console.log("[NoteUI] Force cleared bulk cache for thumbnail refresh")),"function"==typeof loadImageNoteCount?(await loadImageNoteCount(t,e),console.log(`[NoteUI] Thumbnail note badge refreshed for ${e}`)):console.warn("[NoteUI] loadImageNoteCount function not available")}catch(n){console.error("Failed to refresh thumbnail note badge:",n)}}async updatePlantNoteBadge(t){if(t){console.log(`[NoteUI] updatePlantNoteBadge called for plant: ${t}`);try{const i=await this.noteManager.getQuickNoteStats();if(i&&i[t]){const n=i[t],o=n.total;if(console.log(`[NoteUI] Plant ${t} bulk stats: ${n.plantNotes} plant + ${n.imageNotes} image = ${o} total`),!(Math.random()<.15))return void this.updateBadgeWithStats(t,n);try{const e=await this.noteManager.searchNotes("",{plantId:t}),i=e?e.length:0;if(i===o)return void this.updateBadgeWithStats(t,n);console.warn(`[NoteUI] Badge bulk data stale! Bulk: ${o}, Actual: ${i}. Using accurate data...`),this.noteManager.refreshBulkData&&await this.noteManager.refreshBulkData()}catch(e){return console.debug("[NoteUI] Badge validation failed, using bulk data:",e),void this.updateBadgeWithStats(t,n)}}console.log(`[NoteUI] Bulk stats not available for ${t}, falling back to individual requests`);const a=await this.noteManager.getPlantNotes(t);console.log(`[NoteUI] Plant ${t} has ${a?.length||0} plant notes`);let s=0,r=null;if(window.PlantAnnotationTool?.plantDataManager)try{r=await window.PlantAnnotationTool.plantDataManager.getPlantImages(t)}catch(n){console.debug(`Could not load plant images for ${t}:`,n.message);const e=window.PlantAnnotationTool.plantDataManager.plants?.find(e=>e.id===t);if(e?.viewAngles){const n={};for(const i of e.viewAngles)try{const e=await window.PlantAnnotationTool.plantDataManager.getPlantImages(t,i);e&&e.length>0&&(n[i]=e)}catch(o){console.debug(`Could not load images for ${t}/${i}:`,o.message)}r=n}}if(r){const e=[];if(Array.isArray(r))for(const n of r)e.push(this.noteManager.getImageNotes(t,n.id));else for(const n in r)for(const o of r[n])e.push(this.noteManager.getImageNotes(t,o.id));s=(await Promise.allSettled(e)).reduce((t,e)=>"fulfilled"===e.status&&e.value&&e.value.length>0?t+e.value.length:t,0)}const l=(a?.length||0)+s;console.log(`[NoteUI] Plant ${t} total notes: ${l} (${a?.length||0} plant + ${s} image)`);const c=document.getElementById(`note-badge-${t}`);if(console.log(`[NoteUI] Badge element found for ${t}:`,!!c),c)if(l>0){const e=a?.length||0;let n="",o="";e>0&&s>0?(n=`📝 ${e} | 🖼️ ${s}`,o=`${e} plant notes, ${s} image notes`):e>0?(n=`📝 ${e}`,o=`${e} plant notes`):s>0&&(n=`🖼️ ${s}`,o=`${s} image notes`),c.innerHTML=`<span class="note-count">${n}</span>`,c.style.display="inline-flex",c.style.visibility="visible",c.style.opacity="1",c.title=o,console.log(`[NoteUI] Badge updated for ${t}: ${n} (INDIVIDUAL)`)}else c.style.display="none",c.style.visibility="hidden",c.style.opacity="0",console.log(`[NoteUI] Badge hidden for ${t}: no notes found`);else console.error(`[NoteUI] Badge element not found for plant ${t}`)}catch(n){console.error(`Failed to update note badge for plant ${t}:`,n)}}}updateBadgeWithStats(t,e){const n=document.getElementById(`note-badge-${t}`);if(console.log(`[NoteUI] Badge element found for ${t}:`,!!n),n)if(e.total>0){let o="",i="";e.plantNotes>0&&e.imageNotes>0?(o=`📝 ${e.plantNotes} | 🖼️ ${e.imageNotes}`,i=`${e.plantNotes} plant notes, ${e.imageNotes} image notes`):e.plantNotes>0?(o=`📝 ${e.plantNotes}`,i=`${e.plantNotes} plant notes`):e.imageNotes>0&&(o=`🖼️ ${e.imageNotes}`,i=`${e.imageNotes} image notes`),n.innerHTML=`<span class="note-count">${o}</span>`,n.style.display="inline-flex",n.style.visibility="visible",n.style.opacity="1",n.title=i,console.log(`[NoteUI] Badge updated for ${t}: ${o} (VALIDATED)`)}else n.style.display="none",n.style.visibility="hidden",n.style.opacity="0",console.log(`[NoteUI] Badge hidden for ${t}: no notes found (VALIDATED)`);else console.error(`[NoteUI] Badge element not found for plant ${t}`)}async updateAllPlantNoteBadgesFromBulk(t){console.log("[NoteUI] updateAllPlantNoteBadgesFromBulk() called with bulk data");const e=document.querySelectorAll(".plant-item");if(console.log(`[NoteUI] Found ${e.length} plant items to update`),!t||!t.plantNotes||!t.imageNotes)return void console.error("[NoteUI] Invalid bulk data provided");const n=performance.now(),o={};for(const[a,s]of Object.entries(t.plantNotes))o[a]||(o[a]={plantNotes:0,imageNotes:0,total:0}),o[a].plantNotes=s.length,o[a].total+=s.length;for(const[a,s]of Object.entries(t.imageNotes)){const t=a.split("_")[0];t&&(o[t]||(o[t]={plantNotes:0,imageNotes:0,total:0}),o[t].imageNotes+=s.length,o[t].total+=s.length)}console.log(`[NoteUI] Generated quick stats for ${Object.keys(o).length} plants`);for(const a of e){const t=a.dataset.plantId;if(t&&o[t]){const e=o[t],n=e.total,i=document.getElementById(`note-badge-${t}`);if(i)if(n>0){let t="",n="";e.plantNotes>0&&e.imageNotes>0?(t=`📝 ${e.plantNotes} | 🖼️ ${e.imageNotes}`,n=`${e.plantNotes} plant notes, ${e.imageNotes} image notes`):e.plantNotes>0?(t=`📝 ${e.plantNotes}`,n=`${e.plantNotes} plant notes`):e.imageNotes>0&&(t=`🖼️ ${e.imageNotes}`,n=`${e.imageNotes} image notes`),i.innerHTML=`<span class="note-count">${t}</span>`,i.style.display="inline-flex",i.style.visibility="visible",i.style.opacity="1",i.title=n}else i.style.display="none",i.style.visibility="hidden",i.style.opacity="0"}}const i=performance.now();console.log(`[NoteUI] BULK UPDATE COMPLETE: ${e.length} badges updated in ${(i-n).toFixed(2)}ms using bulk data`),console.log("[NoteUI] Performance: INSTANT UPDATE - no individual HTTP requests")}async updateAllPlantNoteBadges(){console.log("[NoteUI] updateAllPlantNoteBadges() called");const t=document.querySelectorAll(".plant-item");console.log(`[NoteUI] Found ${t.length} plant items to update`);const e=performance.now();try{const n=await this.noteManager.getQuickNoteStats();if(n){console.log("[NoteUI] Using bulk note stats for optimal performance");for(const e of t){const t=e.dataset.plantId;if(t&&n[t]){const e=n[t],o=e.total,i=document.getElementById(`note-badge-${t}`);if(i)if(o>0){let t="",n="";e.plantNotes>0&&e.imageNotes>0?(t=`📝 ${e.plantNotes} | 🖼️ ${e.imageNotes}`,n=`${e.plantNotes} plant notes, ${e.imageNotes} image notes`):e.plantNotes>0?(t=`📝 ${e.plantNotes}`,n=`${e.plantNotes} plant notes`):e.imageNotes>0&&(t=`🖼️ ${e.imageNotes}`,n=`${e.imageNotes} image notes`),i.innerHTML=`<span class="note-count">${t}</span>`,i.style.display="inline-flex",i.style.visibility="visible",i.style.opacity="1",i.title=n}else i.style.display="none",i.style.visibility="hidden",i.style.opacity="0"}}const o=performance.now(),i=this.noteManager.getPerformanceMetrics();return console.log(`[NoteUI] BULK UPDATE COMPLETE: ${t.length} badges updated in ${(o-e).toFixed(2)}ms`),void console.log(`[NoteUI] Performance: ${i.bulkRequestCount} bulk requests, ${i.cacheHits} cache hits`)}console.log("[NoteUI] Bulk API not available, falling back to individual requests")}catch(i){console.error("[NoteUI] Bulk badge update failed, falling back to individual requests:",i)}console.log("[NoteUI] Using individual badge updates (slower)");for(const a of t){const t=a.dataset.plantId;t?(console.log(`[NoteUI] Updating badge for plant: ${t}`),await this.updatePlantNoteBadge(t)):console.warn("[NoteUI] Plant item found without plantId dataset")}const n=performance.now(),o=this.noteManager.getPerformanceMetrics();console.log(`[NoteUI] INDIVIDUAL UPDATE COMPLETE: ${t.length} badges updated in ${(n-e).toFixed(2)}ms`),console.log(`[NoteUI] Performance: ${o.requestCount} individual requests, ${o.cacheHits} cache hits`)}getNoteTypeText(t){return{general:"General Note",observation:"Observation Record",annotation:"Annotation Description"}[t]||t}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}showUserError(t,e){window.PlantAnnotationTool&&window.PlantAnnotationTool.showError?window.PlantAnnotationTool.showError(t,e):alert(`${t}: ${e}`)}async directUpdateThumbnailBadge(t,e){try{console.log(`[NoteUI] 🔄 Direct thumbnail badge update for ${e}`),await new Promise(t=>setTimeout(t,150));const n=await fetch(`${this.noteManager.baseUrl}/notes/image/${t}/${e}`);if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const o=await n.json(),i=o.success&&o.data?.length||0,a=document.getElementById(`image-note-badge-${e}`);a?i>0?(a.innerHTML=`<span class="image-note-count">📝 ${i}</span>`,a.style.display="inline-block",a.className="image-note-badge",console.log(`[NoteUI] ✅ Badge updated: ${i} notes for ${e} (DIRECT API)`)):(a.innerHTML="",a.style.display="none",console.log(`[NoteUI] ✅ Badge cleared for ${e} - no notes (DIRECT API)`)):console.error(`[NoteUI] Badge element not found for ${e}`)}catch(n){console.error(`[NoteUI] ❌ Direct thumbnail badge update failed for ${e}:`,n);try{console.log(`[NoteUI] 🔄 Attempting fallback via global loadImageNoteCount for ${e}`),"function"==typeof loadImageNoteCount?(await loadImageNoteCount(t,e),console.log(`[NoteUI] ✅ Fallback badge update successful for ${e}`)):console.warn("[NoteUI] ⚠️ Global loadImageNoteCount not available for fallback")}catch(o){console.error(`[NoteUI] ❌ Fallback badge update also failed for ${e}:`,o)}}}cleanup(){["note-modal","note-list-modal","plant-note-btn","image-note-btn"].forEach(t=>{const e=document.getElementById(t);e&&e.remove()}),document.querySelectorAll(".plant-note-container, .image-note-container").forEach(t=>t.remove()),console.log("NoteUI cleanup completed")}}class g{constructor(t){this.httpManager=t,this.annotations=new Map,this.cacheTimestamps=new Map,this.isInitialized=!1,this.cacheExpiration=6e5,this.bulkAnnotationData=null,this.bulkDataTimestamp=0,this.performanceMetrics={requestCount:0,bulkRequestCount:0,cacheHits:0,networkTime:0,totalAnnotations:0}}async initialize(){try{return await this.httpManager.ensureConnection(),this.isInitialized=!0,console.log("[AnnotationManager] 初始化成功"),!0}catch(t){throw console.error("[AnnotationManager] 初始化失败:",t),t}}async ensureConnection(){this.isInitialized||await this.initialize(),await this.httpManager.ensureConnection()}async getAllAnnotationsInBulk(){return console.log("[AnnotationManager] 开始批量获取所有标注数据..."),await this.ensureConnection(),this.bulkAnnotationData&&!this.isBulkDataExpired()?(console.log("[AnnotationManager] 使用缓存的批量标注数据"),this.performanceMetrics.cacheHits++,this.bulkAnnotationData):this.httpManager.withRetry(async()=>{const t=performance.now(),e=`${this.httpManager.baseUrl.replace(/\/api$/,"")}/api/annotations/bulk`;console.log(`[AnnotationManager] 请求批量标注数据 URL: ${e}`);try{const n=await fetch(e,{headers:{"Cache-Control":"no-cache"}});if(this.performanceMetrics.bulkRequestCount++,!n.ok){if(404===n.status)return console.warn("[AnnotationManager] 批量标注端点不存在，将回退到传统模式"),null;throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const o=await n.json();if(this.performanceMetrics.networkTime+=performance.now()-t,o.success){this.bulkAnnotationData={plantAnnotations:o.data.plantAnnotations||{},imageAnnotations:o.data.imageAnnotations||{},statistics:o.data.statistics||{}},this.bulkDataTimestamp=Date.now(),this.updateIndividualCacheFromBulk();const t=Object.keys(this.bulkAnnotationData.plantAnnotations).length,e=Object.keys(this.bulkAnnotationData.imageAnnotations).length;return this.performanceMetrics.totalAnnotations=this.calculateTotalAnnotations(),console.log(`[AnnotationManager] 成功获取批量标注数据: ${t} 个植物, ${e} 个图像, ${this.performanceMetrics.totalAnnotations} 个标注点`),this.bulkAnnotationData}throw new Error(o.error||"获取批量标注数据失败")}catch(n){if(this.performanceMetrics.networkTime+=performance.now()-t,"TypeError"===n.name&&n.message.includes("fetch"))throw new Error(`网络连接失败: 无法连接到后端服务 (${e})`);throw n}},"批量获取标注数据")}async getPlantAnnotations(t){if(!t)throw new Error("植物ID不能为空");await this.ensureConnection();const e=`plant_${t}`;if(this.bulkAnnotationData&&!this.isBulkDataExpired()){const n=this.bulkAnnotationData.plantAnnotations[t]||[];return this.annotations.set(e,n),this.performanceMetrics.cacheHits++,n}return this.annotations.has(e)&&!this.isCacheExpired(e)?(this.performanceMetrics.cacheHits++,this.annotations.get(e)):this.getSinglePlantAnnotations(t)}async getImageAnnotations(t){if(!t)throw new Error("图像ID不能为空");await this.ensureConnection();const e=`image_${t}`;if(this.bulkAnnotationData&&!this.isBulkDataExpired()){const n=this.bulkAnnotationData.imageAnnotations[t]||[];return this.annotations.set(e,n),this.performanceMetrics.cacheHits++,n}return this.annotations.has(e)&&!this.isCacheExpired(e)?(this.performanceMetrics.cacheHits++,this.annotations.get(e)):this.getSingleImageAnnotations(t)}async getQuickAnnotationStats(){console.log("[AnnotationManager] 获取快速标注统计...");try{const t=await this.getAllAnnotationsInBulk();if(!t)return console.warn("[AnnotationManager] 批量API不可用，回退到传统模式"),null;const e={};for(const[n,o]of Object.entries(t.plantAnnotations)){let i=0;for(const[e,o]of Object.entries(t.imageAnnotations))e.startsWith(n+"_")&&(i+=o.length);e[n]={plantAnnotations:o.length,imageAnnotations:i,total:o.length+i}}return console.log(`[AnnotationManager] 快速统计完成: ${Object.keys(e).length} 个植物`),e}catch(t){return console.error("[AnnotationManager] 获取快速标注统计失败:",t),null}}async getSinglePlantAnnotations(t){const e=performance.now();try{const n=`${this.httpManager.baseUrl.replace(/\/api$/,"")}/api/plant-annotations/${encodeURIComponent(t)}`,o=await fetch(n);if(this.performanceMetrics.requestCount++,!o.ok){if(404===o.status){const e=[];return this.setCache(`plant_${t}`,e),e}throw new Error(`HTTP ${o.status}: ${o.statusText}`)}const i=await o.json();if(this.performanceMetrics.networkTime+=performance.now()-e,i.success)return this.setCache(`plant_${t}`,i.data),i.data;throw new Error(i.error||"获取植物标注失败")}catch(n){throw this.performanceMetrics.networkTime+=performance.now()-e,n}}async getSingleImageAnnotations(t){const e=performance.now();try{const n=`${this.httpManager.baseUrl.replace(/\/api$/,"")}/api/image-annotations/${encodeURIComponent(t)}`,o=await fetch(n);if(this.performanceMetrics.requestCount++,!o.ok){if(404===o.status){const e=[];return this.setCache(`image_${t}`,e),e}throw new Error(`HTTP ${o.status}: ${o.statusText}`)}const i=await o.json();if(this.performanceMetrics.networkTime+=performance.now()-e,i.success)return this.setCache(`image_${t}`,i.data),i.data;throw new Error(i.error||"获取图像标注失败")}catch(n){throw this.performanceMetrics.networkTime+=performance.now()-e,n}}isBulkDataExpired(){return!this.bulkDataTimestamp||Date.now()-this.bulkDataTimestamp>this.cacheExpiration}updateIndividualCacheFromBulk(){if(this.bulkAnnotationData){for(const[t,e]of Object.entries(this.bulkAnnotationData.plantAnnotations)){const n=`plant_${t}`;this.setCache(n,e)}for(const[t,e]of Object.entries(this.bulkAnnotationData.imageAnnotations)){const n=`image_${t}`;this.setCache(n,e)}}}calculateTotalAnnotations(){if(!this.bulkAnnotationData)return 0;let t=0;for(const e of Object.values(this.bulkAnnotationData.plantAnnotations))t+=e.length;for(const e of Object.values(this.bulkAnnotationData.imageAnnotations))t+=e.length;return t}clearCache(){this.annotations.clear(),this.cacheTimestamps.clear(),this.bulkAnnotationData=null,this.bulkDataTimestamp=0,console.log("[AnnotationManager] 标注缓存已完全清除")}setCache(t,e){this.annotations.set(t,e),this.cacheTimestamps.set(t,Date.now())}isCacheExpired(t){const e=this.cacheTimestamps.get(t);return!e||Date.now()-e>this.cacheExpiration}getPerformanceMetrics(){return{...this.performanceMetrics,cacheSize:this.annotations.size,hasBulkData:!!this.bulkAnnotationData,bulkDataAge:this.bulkDataTimestamp?Date.now()-this.bulkDataTimestamp:null,averageRequestTime:this.performanceMetrics.requestCount>0?this.performanceMetrics.networkTime/this.performanceMetrics.requestCount:0}}async refreshBulkData(){return console.log("[AnnotationManager] 强制刷新批量标注数据..."),this.bulkAnnotationData=null,this.bulkDataTimestamp=0,await this.getAllAnnotationsInBulk()}cleanup(){this.clearCache(),this.isInitialized=!1,console.log("[AnnotationManager] 清理完成")}}class h{constructor(){this.metrics={loadingStartTime:null,loadingEndTime:null,totalLoadingTime:0,plantsLoaded:0,annotationsLoaded:0,notesLoaded:0,networkRequests:0,bulkRequests:0,individualRequests:0,totalDataTransferred:0,cacheHits:0,cacheMisses:0,cacheSize:0,errors:[],fallbacksUsed:0,timeToFirstInteraction:0,timeToFullyLoaded:0},this.isMonitoring=!1,this.startTime=null,this.checkpoints=[]}startMonitoring(){this.isMonitoring=!0,this.startTime=performance.now(),this.metrics.loadingStartTime=Date.now(),this.checkpoints=[],console.log("[性能监控] 开始监控批量加载过程")}addCheckpoint(t,e={}){if(!this.isMonitoring)return;const n={name:t,timestamp:performance.now(),relativeTime:performance.now()-this.startTime,details:e};this.checkpoints.push(n),console.log(`[性能监控] ${t}: ${n.relativeTime.toFixed(2)}ms`,e)}recordDataLoaded(t,e,n=0){switch(t){case"plants":this.metrics.plantsLoaded=e;break;case"annotations":this.metrics.annotationsLoaded=e;break;case"notes":this.metrics.notesLoaded=e}this.metrics.totalDataTransferred+=n,this.addCheckpoint(`${t} 数据加载完成`,{count:e,dataSize:`${(n/1024).toFixed(2)}KB`})}recordNetworkRequest(t,e=!1){this.metrics.networkRequests++,e?this.metrics.bulkRequests++:this.metrics.individualRequests++,this.addCheckpoint(`网络请求: ${t}`,{isBulk:e,total:this.metrics.networkRequests})}recordCacheHit(t,e=0){this.metrics.cacheHits++,this.metrics.cacheSize=e,console.log(`[缓存命中] ${t} - 总命中: ${this.metrics.cacheHits}`)}recordCacheMiss(t){this.metrics.cacheMisses++,console.log(`[缓存未命中] ${t} - 总未命中: ${this.metrics.cacheMisses}`)}recordError(t,e=""){this.metrics.errors.push({error:t.message,context:e,timestamp:Date.now()}),console.error(`[性能监控] 错误记录: ${e}`,t)}recordFallback(t){this.metrics.fallbacksUsed++,this.addCheckpoint("使用回退方案",{reason:t,totalFallbacks:this.metrics.fallbacksUsed})}endMonitoring(){if(!this.isMonitoring)return null;this.isMonitoring=!1,this.metrics.loadingEndTime=Date.now(),this.metrics.totalLoadingTime=performance.now()-this.startTime;const t=this.generatePerformanceReport();return console.log("[性能监控] 加载完成，生成性能报告:",t),t}generatePerformanceReport(){const t=this.metrics.cacheHits+this.metrics.cacheMisses>0?(this.metrics.cacheHits/(this.metrics.cacheHits+this.metrics.cacheMisses)*100).toFixed(1):0,e=this.metrics.networkRequests>0?(this.metrics.bulkRequests/this.metrics.networkRequests*100).toFixed(1):0;return{summary:{totalLoadingTime:`${this.metrics.totalLoadingTime.toFixed(2)}ms`,dataLoaded:{plants:this.metrics.plantsLoaded,annotations:this.metrics.annotationsLoaded,notes:this.metrics.notesLoaded},networkRequests:this.metrics.networkRequests,dataTransferred:`${(this.metrics.totalDataTransferred/1024).toFixed(2)}KB`},networkPerformance:{totalRequests:this.metrics.networkRequests,bulkRequests:this.metrics.bulkRequests,individualRequests:this.metrics.individualRequests,bulkRequestRatio:`${e}%`,averageRequestSize:this.metrics.networkRequests>0?`${(this.metrics.totalDataTransferred/this.metrics.networkRequests/1024).toFixed(2)}KB`:"0KB"},cachePerformance:{hits:this.metrics.cacheHits,misses:this.metrics.cacheMisses,hitRate:`${t}%`,cacheSize:`${(this.metrics.cacheSize/1024).toFixed(2)}KB`},reliability:{errors:this.metrics.errors.length,fallbacksUsed:this.metrics.fallbacksUsed,errorDetails:this.metrics.errors},timeline:this.checkpoints,performanceGrade:this.calculatePerformanceGrade(),optimizationSuggestions:this.generateOptimizationSuggestions()}}calculatePerformanceGrade(){let t=100;this.metrics.totalLoadingTime>5e3?t-=30:this.metrics.totalLoadingTime>2e3?t-=15:this.metrics.totalLoadingTime>1e3&&(t-=5);const e=this.metrics.bulkRequests/(this.metrics.networkRequests||1);e<.5?t-=20:e<.8&&(t-=10);const n=this.metrics.cacheHits/(this.metrics.cacheHits+this.metrics.cacheMisses||1);return n<.6?t-=15:n<.8&&(t-=8),t-=5*this.metrics.errors.length,t-=3*this.metrics.fallbacksUsed,t=Math.max(0,Math.min(100,t)),t>=90?"A+":t>=80?"A":t>=70?"B":t>=60?"C":t>=50?"D":"F"}generateOptimizationSuggestions(){const t=[];return this.metrics.totalLoadingTime>2e3&&t.push({category:"加载性能",suggestion:"考虑实现数据分页或增量加载",priority:"high",impact:"减少初始加载时间50%+"}),this.metrics.bulkRequests/(this.metrics.networkRequests||1)<.8&&t.push({category:"网络优化",suggestion:"增加批量API的使用，减少单独请求",priority:"high",impact:"减少网络请求80%+"}),this.metrics.cacheHits/(this.metrics.cacheHits+this.metrics.cacheMisses||1)<.7&&t.push({category:"缓存优化",suggestion:"优化缓存策略，增加缓存时间或改进缓存键设计",priority:"medium",impact:"提高响应速度30%+"}),this.metrics.errors.length>0&&t.push({category:"错误处理",suggestion:"改进错误处理和重试机制",priority:"medium",impact:"提高系统稳定性"}),this.metrics.fallbacksUsed>0&&t.push({category:"兼容性",suggestion:"确保批量API的可用性，减少回退方案的使用",priority:"low",impact:"提高性能一致性"}),t}exportMetrics(){return{metrics:this.metrics,report:this.generatePerformanceReport(),exportTime:(new Date).toISOString()}}reset(){this.metrics={loadingStartTime:null,loadingEndTime:null,totalLoadingTime:0,plantsLoaded:0,annotationsLoaded:0,notesLoaded:0,networkRequests:0,bulkRequests:0,individualRequests:0,totalDataTransferred:0,cacheHits:0,cacheMisses:0,cacheSize:0,errors:[],fallbacksUsed:0,timeToFirstInteraction:0,timeToFullyLoaded:0},this.isMonitoring=!1,this.startTime=null,this.checkpoints=[],console.log("[性能监控] 指标已重置")}}class p{constructor(t,e){this.plantDataManager=t,this.annotationStorageManager=e,this.isEnabled=!1,this.isSyncing=!1,this.syncQueue=[],this.OPERATION_TYPES={ADD_KEYPOINT:"ADD_KEYPOINT",MOVE_KEYPOINT:"MOVE_KEYPOINT",DELETE_KEYPOINT:"DELETE_KEYPOINT",EDIT_DIRECTION:"EDIT_DIRECTION",CUSTOM_ANNOTATION_CREATE:"CUSTOM_ANNOTATION_CREATE",CUSTOM_ANNOTATION_UPDATE:"CUSTOM_ANNOTATION_UPDATE",CUSTOM_ANNOTATION_DELETE:"CUSTOM_ANNOTATION_DELETE",CUSTOM_TYPE_CREATE:"CUSTOM_TYPE_CREATE"},this.eventListeners=new Map,console.log("🔄 RealTimeSyncManager initialized")}setEnabled(t){this.isEnabled=Boolean(t),console.log("🔄 Real-time sync "+(this.isEnabled?"enabled":"disabled")),this.emit("syncToggled",{enabled:this.isEnabled})}isRealTimeSyncEnabled(){return this.isEnabled}isSyncInProgress(){return this.isSyncing}on(t,e){this.eventListeners.has(t)||this.eventListeners.set(t,[]),this.eventListeners.get(t).push(e)}off(t,e){if(this.eventListeners.has(t)){const n=this.eventListeners.get(t),o=n.indexOf(e);o>-1&&n.splice(o,1)}}emit(t,e){this.eventListeners.has(t)&&this.eventListeners.get(t).forEach(n=>{try{n(e)}catch(o){console.error(`Error in sync event listener for ${t}:`,o)}})}async getFutureImages(t,e){if(!t||!e)return console.warn("🔄 Cannot get future images: missing current image or plant"),[];try{const n=await this.plantDataManager.getPlantImages(e.id,e.selectedViewAngle);if(!n||0===n.length)return[];const o=new Date(t.dateTime),i=n.findIndex(e=>e.id===t.id),a=[];for(let t=i+1;t<n.length;t++){const e=n[t];new Date(e.dateTime)>o&&a.push(e)}return a.sort((t,e)=>new Date(t.dateTime)-new Date(e.dateTime)),console.log(`🔄 Found ${a.length} future images for sync (from index ${i+1})`),a}catch(n){return console.error("🔄 Error getting future images:",n),[]}}async syncKeypointAddition(t,e,n){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};console.log(`🔄 Starting keypoint addition sync for keypoint ${t.id}`),console.log(`🔄 Current image: ${e.id}, Plant: ${n.id}, View: ${n.selectedViewAngle}`);try{const i=await this.getFutureImages(e,n);if(0===i.length)return console.log("🔄 No future images found for sync"),{success:!0,message:"No future images to sync",synced:0};console.log(`🔄 Found ${i.length} future images:`,i.map(t=>t.id));let a=0;const s=[];for(const e of i)try{console.log(`🔄 Syncing keypoint ${t.id} to image ${e.id}...`),await this.addKeypointToImage(t,e),a++,console.log(`🔄 Successfully synced to image ${e.id}`)}catch(o){console.error(`🔄 Error syncing to image ${e.id}:`,o),s.push({imageId:e.id,error:o.message})}const r={success:0===s.length,message:`Synced to ${a} future images`,synced:a,errors:s.length>0?s:void 0};return console.log("🔄 Keypoint addition sync completed:",r),r}catch(o){return console.error("🔄 Error in keypoint addition sync:",o),{success:!1,message:o.message,synced:0}}}async syncKeypointMovement(t,e,n,o){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};console.log(`🔄 Starting keypoint movement sync for keypoint ${t.id}`);try{const e=await this.getFutureImages(n,o);if(0===e.length)return{success:!0,message:"No future images to sync",synced:0};let a=0;const s=[];for(const n of e)try{await this.moveKeypointInImage(t,n),a++}catch(i){console.error(`🔄 Error syncing movement to image ${n.id}:`,i),s.push({imageId:n.id,error:i.message})}const r={success:0===s.length,message:`Synced movement to ${a} future images`,synced:a,errors:s.length>0?s:void 0};return console.log("🔄 Keypoint movement sync completed:",r),r}catch(i){return console.error("🔄 Error in keypoint movement sync:",i),{success:!1,message:i.message,synced:0}}}async syncKeypointDeletion(t){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};const{keypoint:e,currentImage:n,currentPlant:o}=t;console.log(`🔄 Starting keypoint deletion sync for keypoint ${e.id}`),console.log(`🔄 Current image: ${n.id}, Plant: ${o.id}, View: ${o.selectedViewAngle}`);try{const t=await this.getFutureImages(n,o);if(0===t.length)return console.log("🔄 No future images found for deletion sync"),{success:!0,message:"No future images to sync",synced:0};console.log(`🔄 Found ${t.length} future images:`,t.map(t=>t.id));let a=0;const s=[];for(const n of t)try{console.log(`🔄 Syncing keypoint deletion to image ${n.id}...`),await this.deleteKeypointFromImage(e,n),a++,console.log(`🔄 Successfully synced deletion to image ${n.id}`)}catch(i){console.error(`🔄 Error syncing deletion to image ${n.id}:`,i),s.push({imageId:n.id,error:i.message})}const r={success:0===s.length,message:`Synced deletion to ${a} future images`,synced:a,errors:s.length>0?s:void 0};return console.log("🔄 Keypoint deletion sync completed:",r),r}catch(i){return console.error("🔄 Error in keypoint deletion sync:",i),{success:!1,message:i.message,synced:0}}}async addKeypointToImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(e=>{const n=e.order===t.order,o=e.annotationType===t.annotationType,i="custom"!==t.annotationType||e.customTypeId===t.customTypeId;return n&&o&&i});if(i){i.x=t.x,i.y=t.y,i.direction=t.direction,i.directionType=t.directionType,i.directions=t.directions,i.maxDirections=t.maxDirections,i.timestamp=(new Date).toISOString();const n="custom"===t.annotationType?`custom(${t.customTypeId})`:"regular";console.log(`🔄 Updated existing ${n} keypoint order ${t.order} in image ${e.id}`)}else{const n={...t,timestamp:(new Date).toISOString()};o.push(n);const i="custom"===t.annotationType?`custom(${t.customTypeId})`:"regular";console.log(`🔄 Added new ${i} keypoint order ${t.order} to image ${e.id}`)}const a={imageId:e.id,annotations:o,lastModified:(new Date).toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,a)}async moveKeypointInImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(e=>{const n=e.order===t.order,o=e.annotationType===t.annotationType,i="custom"!==t.annotationType||e.customTypeId===t.customTypeId;return n&&o&&i});if(i){i.x=t.x,i.y=t.y,i.direction=t.direction,i.directionType=t.directionType,i.directions=t.directions,i.maxDirections=t.maxDirections,i.timestamp=(new Date).toISOString();const n="custom"===t.annotationType?`custom(${t.customTypeId})`:"regular";console.log(`🔄 Moved ${n} keypoint order ${t.order} in image ${e.id}`)}else{const n={...t,timestamp:(new Date).toISOString()};o.push(n);const i="custom"===t.annotationType?`custom(${t.customTypeId})`:"regular";console.log(`🔄 Added new ${i} keypoint order ${t.order} to image ${e.id} (move operation)`)}const a={imageId:e.id,annotations:o,lastModified:(new Date).toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,a)}async deleteKeypointFromImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[];if(0===o.length)return void console.log(`🔄 No annotations found in image ${e.id} - skipping deletion`);const i=o.findIndex(e=>{const n=e.order===t.order,o=e.annotationType===t.annotationType,i="custom"!==t.annotationType||e.customTypeId===t.customTypeId;return n&&o&&i});if(-1===i)return console.log(`🔄 No matching keypoint found in image ${e.id} for deletion:`),console.log(`  - Looking for order: ${t.order}`),console.log(`  - Looking for type: ${t.annotationType}`),console.log(`  - Looking for custom type ID: ${t.customTypeId||"N/A"}`),void console.log("  - Available annotations:",o.map(t=>({order:t.order,type:t.annotationType,customTypeId:t.customTypeId,id:t.id})));{const t=o[i];o.splice(i,1),console.log(`🔄 Deleted keypoint from image ${e.id}:`),console.log(`  - Order: ${t.order}`),console.log(`  - Type: ${t.annotationType}`),console.log(`  - Custom Type ID: ${t.customTypeId||"N/A"}`),console.log(`  - ID: ${t.id}`)}const a={imageId:e.id,annotations:o,lastModified:(new Date).toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,a)}async queueSyncOperation(t){this.isEnabled&&(this.syncQueue.push(t),this.isSyncing||await this.processSyncQueue())}async processSyncQueue(){if(!this.isSyncing&&0!==this.syncQueue.length){this.isSyncing=!0,this.emit("syncStarted",{queueLength:this.syncQueue.length});try{for(;this.syncQueue.length>0;){const e=this.syncQueue.shift();try{await this.executeOperation(e)}catch(t){console.error("🔄 Error executing sync operation:",t),this.emit("syncError",{operation:e,error:t})}}}finally{this.isSyncing=!1,this.emit("syncCompleted",{})}}}async executeOperation(t){const{type:e,keypoint:n,currentImage:o,currentPlant:i,previousPosition:a,syncData:s}=t;switch(e){case this.OPERATION_TYPES.ADD_KEYPOINT:return await this.syncKeypointAddition(n,o,i);case this.OPERATION_TYPES.MOVE_KEYPOINT:return await this.syncKeypointMovement(n,a,o,i);case this.OPERATION_TYPES.DELETE_KEYPOINT:return await this.syncKeypointDeletion(t);case this.OPERATION_TYPES.EDIT_DIRECTION:return await this.syncDirectionEdit(t);case this.OPERATION_TYPES.CUSTOM_ANNOTATION_CREATE:return await this.syncCustomAnnotationCreate(s);case this.OPERATION_TYPES.CUSTOM_ANNOTATION_UPDATE:return await this.syncCustomAnnotationUpdate(s);case this.OPERATION_TYPES.CUSTOM_ANNOTATION_DELETE:return await this.syncCustomAnnotationDelete(s);case this.OPERATION_TYPES.CUSTOM_TYPE_CREATE:return await this.syncCustomTypeCreate(s);default:console.warn(`🔄 Unknown sync operation type: ${e}`)}}async syncDirectionEdit(t){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};const{keypoint:e,currentImage:n,currentPlant:o}=t;console.log(`🔄 Starting direction edit sync for keypoint order ${e.order}`),console.log(`🔄 Current image: ${n.id}, Plant: ${o.id}, View: ${o.selectedViewAngle}`);try{const t=await this.getFutureImages(n,o);if(0===t.length)return console.log("🔄 No future images found for direction edit sync"),{success:!0,message:"No future images to sync",synced:0};console.log(`🔄 Found ${t.length} future images:`,t.map(t=>t.id));let a=0;const s=[];for(const n of t)try{console.log(`🔄 Syncing direction edit to image ${n.id}...`),await this.editDirectionInImage(e,n),a++,console.log(`🔄 Successfully synced direction edit to image ${n.id}`)}catch(i){console.error(`🔄 Error syncing direction edit to image ${n.id}:`,i),s.push({imageId:n.id,error:i.message})}const r={success:0===s.length,message:`Synced direction edit to ${a} future images`,synced:a,errors:s.length>0?s:void 0};return console.log("🔄 Direction edit sync completed:",r),r}catch(i){return console.error("🔄 Error in direction edit sync:",i),{success:!1,message:i.message,synced:0}}}async editDirectionInImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(e=>{const n=e.order===t.order,o=e.annotationType===t.annotationType,i="custom"!==t.annotationType||e.customTypeId===t.customTypeId;return n&&o&&i});if(i){i.direction=t.direction,i.directionType=t.directionType,i.directions=t.directions,i.maxDirections=t.maxDirections,i.timestamp=(new Date).toISOString();const n="custom"===t.annotationType?`custom(${t.customTypeId})`:"regular";console.log(`🔄 Updated direction for ${n} keypoint order ${t.order} in image ${e.id}`)}else{const n={...t,timestamp:(new Date).toISOString()};o.push(n);const i="custom"===t.annotationType?`custom(${t.customTypeId})`:"regular";console.log(`🔄 Added new ${i} keypoint order ${t.order} to image ${e.id} (direction edit operation)`)}const a={imageId:e.id,annotations:o,lastModified:(new Date).toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,a)}async syncCustomAnnotationCreate(t){console.log("🔄 Starting custom annotation creation sync:",t);try{const{annotation:n,context:o}=t,{appState:i}=o;if(!i?.currentImage||!i?.currentPlant)return console.warn("🔄 Missing app state for custom annotation sync"),{success:!1,message:"Missing app state",synced:0};const a=await this.getFutureImages(i.currentImage,i.currentPlant);if(0===a.length)return console.log("🔄 No future images found for custom annotation sync"),{success:!0,message:"No future images to sync",synced:0};let s=0;const r=[];for(const t of a)try{console.log(`🔄 Syncing custom annotation to image ${t.id}...`),await this.addCustomAnnotationToImage(n,t),s++,console.log(`🔄 Successfully synced custom annotation to image ${t.id}`)}catch(e){console.error(`🔄 Error syncing custom annotation to image ${t.id}:`,e),r.push({imageId:t.id,error:e.message})}const l={success:0===r.length,message:`Synced custom annotation to ${s} future images`,synced:s,errors:r.length>0?r:void 0};return console.log("🔄 Custom annotation creation sync completed:",l),l}catch(e){return console.error("🔄 Error in custom annotation creation sync:",e),{success:!1,message:e.message,synced:0}}}async syncCustomAnnotationUpdate(t){console.log("🔄 Starting custom annotation update sync:",t);try{const{annotation:n,context:o}=t,{appState:i}=o;if(!i?.currentImage||!i?.currentPlant)return console.warn("🔄 Missing app state for custom annotation update sync"),{success:!1,message:"Missing app state",synced:0};const a=await this.getFutureImages(i.currentImage,i.currentPlant);if(0===a.length)return{success:!0,message:"No future images to sync",synced:0};let s=0;const r=[];for(const t of a)try{await this.updateCustomAnnotationInImage(n,t),s++}catch(e){console.error(`🔄 Error updating custom annotation in image ${t.id}:`,e),r.push({imageId:t.id,error:e.message})}const l={success:0===r.length,message:`Updated custom annotation in ${s} future images`,synced:s,errors:r.length>0?r:void 0};return console.log("🔄 Custom annotation update sync completed:",l),l}catch(e){return console.error("🔄 Error in custom annotation update sync:",e),{success:!1,message:e.message,synced:0}}}async syncCustomAnnotationDelete(t){console.log("🔄 Starting custom annotation deletion sync:",t);try{const{annotation:n,context:o}=t,{appState:i}=o;if(!i?.currentImage||!i?.currentPlant)return console.warn("🔄 Missing app state for custom annotation deletion sync"),{success:!1,message:"Missing app state",synced:0};const a=await this.getFutureImages(i.currentImage,i.currentPlant);if(0===a.length)return{success:!0,message:"No future images to sync",synced:0};let s=0;const r=[];for(const t of a)try{await this.deleteCustomAnnotationFromImage(n,t),s++}catch(e){console.error(`🔄 Error deleting custom annotation from image ${t.id}:`,e),r.push({imageId:t.id,error:e.message})}const l={success:0===r.length,message:`Deleted custom annotation from ${s} future images`,synced:s,errors:r.length>0?r:void 0};return console.log("🔄 Custom annotation deletion sync completed:",l),l}catch(e){return console.error("🔄 Error in custom annotation deletion sync:",e),{success:!1,message:e.message,synced:0}}}async syncCustomTypeCreate(t){return console.log("🔄 Starting custom type creation sync:",t),console.log("🔄 Custom type creation sync - no image sync needed"),{success:!0,message:"Custom type created (no image sync required)",synced:0}}async addCustomAnnotationToImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(e=>"custom"===e.annotationType&&e.customTypeId===t.customTypeId&&e.order===t.order);if(i)Object.assign(i,t),i.timestamp=(new Date).toISOString(),console.log(`🔄 Updated existing custom annotation order ${t.order} type ${t.customTypeId} in image ${e.id}`);else{const n={...t,timestamp:(new Date).toISOString()};o.push(n),console.log(`🔄 Added new custom annotation order ${t.order} type ${t.customTypeId} to image ${e.id}`)}const a={imageId:e.id,annotations:o,lastModified:(new Date).toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,a)}async updateCustomAnnotationInImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(e=>"custom"===e.annotationType&&e.customTypeId===t.customTypeId&&e.order===t.order);if(i)Object.assign(i,t),i.timestamp=(new Date).toISOString(),console.log(`🔄 Updated custom annotation order ${t.order} type ${t.customTypeId} in image ${e.id}`);else{const n={...t,timestamp:(new Date).toISOString()};o.push(n),console.log(`🔄 Added new custom annotation order ${t.order} type ${t.customTypeId} to image ${e.id} (update operation)`)}const a={imageId:e.id,annotations:o,lastModified:(new Date).toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,a)}async deleteCustomAnnotationFromImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[];if(0===o.length)return void console.log(`🔄 No annotations found in image ${e.id} - skipping custom annotation deletion`);const i=o.findIndex(e=>"custom"===e.annotationType&&e.customTypeId===t.customTypeId&&e.order===t.order);if(-1===i)return void console.log(`🔄 No matching custom annotation order ${t.order} type ${t.customTypeId} found in image ${e.id} for deletion`);{const t=o[i];o.splice(i,1),console.log(`🔄 Deleted custom annotation order ${t.order} type ${t.customTypeId} from image ${e.id}`)}const a={imageId:e.id,annotations:o,lastModified:(new Date).toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,a)}async triggerKeypointAddSync(t,e,n){if(!this.isEnabled)return;const o={type:this.OPERATION_TYPES.ADD_KEYPOINT,keypoint:t,currentImage:e,currentPlant:n,timestamp:(new Date).toISOString()};await this.queueSyncOperation(o)}async triggerKeypointMoveSync(t,e,n,o){if(!this.isEnabled)return;const i={type:this.OPERATION_TYPES.MOVE_KEYPOINT,keypoint:t,previousPosition:e,currentImage:n,currentPlant:o,timestamp:(new Date).toISOString()};await this.queueSyncOperation(i)}async triggerKeypointDeleteSync(t,e,n){if(!this.isEnabled)return;const o={type:this.OPERATION_TYPES.DELETE_KEYPOINT,keypoint:t,currentImage:e,currentPlant:n,timestamp:(new Date).toISOString()};await this.queueSyncOperation(o)}async triggerDirectionEditSync(t,e,n){if(!this.isEnabled)return;const o={type:this.OPERATION_TYPES.EDIT_DIRECTION,keypoint:t,currentImage:e,currentPlant:n,timestamp:(new Date).toISOString()};await this.queueSyncOperation(o)}async triggerCustomAnnotationSync(t){if(!this.isEnabled)return void console.log("🔄 Custom annotation sync disabled, skipping");console.log("🔄 Processing custom annotation sync:",t);const e={type:t.type,syncData:t,timestamp:(new Date).toISOString()};await this.queueSyncOperation(e)}getSyncStats(){return{isEnabled:this.isEnabled,isSyncing:this.isSyncing,queueLength:this.syncQueue.length}}clearSyncQueue(){this.syncQueue=[],console.log("🔄 Sync queue cleared")}destroy(){this.clearSyncQueue(),this.eventListeners.clear(),this.isEnabled=!1,this.isSyncing=!1,console.log("🔄 RealTimeSyncManager destroyed")}}class u{constructor(t,e){this.customAnnotationManager=t,this.settingsController=e,this.initializeElements(),this.bindEvents(),this.updateDisplay(),console.log("CustomAnnotationToolbarController initialized")}initializeElements(){this.customModeIndicator=document.getElementById("custom-mode-indicator"),this.customTypeIndicator=document.getElementById("custom-type-indicator"),this.toolbarCustomTypeSelect=document.getElementById("toolbar-custom-type-select"),this.switchCustomModeBtn=null,this.normalModeBtn=null,this.customSettingsBtn=document.getElementById("custom-settings-btn")}bindEvents(){this.toolbarCustomTypeSelect.addEventListener("change",()=>{this.onCustomTypeSelected();const t=this.toolbarCustomTypeSelect.value;if(t)try{this.customAnnotationManager.setCustomAnnotationMode(t),this.showModeChangeNotification("custom",t)}catch(e){alert(`Error switching type: ${e.message}`)}else this.customAnnotationManager.setNormalMode(),this.showModeChangeNotification("normal")}),this.customSettingsBtn.addEventListener("click",()=>{this.openSettings()}),this.customAnnotationManager.addEventListener("onModeChange",()=>{this.updateDisplay()}),this.customAnnotationManager.addEventListener("onTypeCreate",t=>{console.log("Toolbar controller received onTypeCreate event:",t),this.refreshCustomTypeSelector()}),this.customAnnotationManager.addEventListener("onTypeUpdate",t=>{console.log("Toolbar controller received onTypeUpdate event:",t),this.refreshCustomTypeSelector()}),this.customAnnotationManager.addEventListener("onTypeDelete",t=>{console.log("Toolbar controller received onTypeDelete event:",t),this.refreshCustomTypeSelector()})}refreshCustomTypeSelector(){console.log("Refreshing custom type selector...");const t=this.customAnnotationManager.getAllCustomTypes();console.log("Retrieved custom types:",t);const e=this.toolbarCustomTypeSelect.value;this.toolbarCustomTypeSelect.innerHTML='<option value="">Select custom type...</option>',t.forEach(t=>{console.log("Adding type to selector:",t);const e=document.createElement("option");e.value=t.id,e.textContent=`${t.name} (${t.type})`,e.style.color=t.color,this.toolbarCustomTypeSelect.appendChild(e)}),e&&t.find(t=>t.id===e)&&(this.toolbarCustomTypeSelect.value=e),console.log("Custom type selector updated. Total options:",this.toolbarCustomTypeSelect.options.length),this.updateButtonStates()}onCustomTypeSelected(){this.updateButtonStates()}switchToCustomMode(){const t=this.toolbarCustomTypeSelect.value;if(t)try{this.customAnnotationManager.setCustomAnnotationMode(t),this.updateDisplay(),this.showModeChangeNotification("custom",t)}catch(e){alert(`Error switching to custom mode: ${e.message}`)}else alert("Please select an annotation type first.")}switchToNormalMode(){this.customAnnotationManager.setNormalMode(),this.updateDisplay(),this.showModeChangeNotification("normal")}openSettings(){this.settingsController.show()}updateDisplay(){this.updateModeIndicators(),this.updateButtonStates()}updateModeIndicators(){const t=this.customAnnotationManager.currentMode,e=this.customAnnotationManager.getCurrentCustomType();if("custom"===t?(this.customModeIndicator.textContent="Type",this.customModeIndicator.style.color="#059669",this.customModeIndicator.style.fontWeight="600"):(this.customModeIndicator.textContent="Off",this.customModeIndicator.style.color="var(--text-primary)",this.customModeIndicator.style.fontWeight="500"),e){this.customTypeIndicator.textContent=e.name,this.customTypeIndicator.style.color=e.color,this.customTypeIndicator.style.fontWeight="600";const t="point"===e.type?"●":"▭";this.customTypeIndicator.textContent=`${t} ${e.name}`}else this.customTypeIndicator.textContent="None",this.customTypeIndicator.style.color="var(--text-secondary)",this.customTypeIndicator.style.fontWeight="500"}updateButtonStates(){this.customAnnotationManager.currentMode,this.toolbarCustomTypeSelect.value;const t=this.customAnnotationManager.getAllCustomTypes().length>0;this.toolbarCustomTypeSelect.disabled=!1,t?(this.toolbarCustomTypeSelect.style.display="block",this.hideNoTypesMessage()):(this.toolbarCustomTypeSelect.style.display="none",this.showNoTypesMessage())}showNoTypesMessage(){let t=document.getElementById("no-custom-types-message");t||(t=document.createElement("div"),t.id="no-custom-types-message",t.style.cssText="\n        padding: 8px;\n        background: var(--bg-secondary);\n        border: 1px dashed var(--border-color);\n        border-radius: 4px;\n        text-align: center;\n        font-size: 0.75rem;\n        color: var(--text-secondary);\n        margin-bottom: 10px;\n      ",t.innerHTML='\n        <div style="margin-bottom: 4px;">No annotation types created</div>\n        <div style="font-size: 0.7rem;">Click Annotation Type Setting to create types</div>\n      ',this.toolbarCustomTypeSelect.parentNode.appendChild(t)),t.style.display="block"}hideNoTypesMessage(){const t=document.getElementById("no-custom-types-message");t&&(t.style.display="none")}showModeChangeNotification(t,e=null){const n=document.createElement("div");if(n.style.cssText="\n      position: fixed;\n      top: 80px;\n      right: 20px;\n      background: var(--bg-primary);\n      border: 1px solid var(--border-color);\n      border-radius: 6px;\n      padding: 12px 16px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      font-size: 0.875rem;\n      max-width: 300px;\n      animation: slideInRight 0.3s ease-out;\n    ","custom"===t){const t=this.customAnnotationManager.getCustomType(e),o="point"===t.type?"●":"▭";n.innerHTML=`\n        <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">\n          <span style="color: #059669; font-size: 1.2em;">🎯</span>\n          <strong style="color: #059669;">Custom Mode Active</strong>\n        </div>\n        <div style="color: var(--text-secondary); font-size: 0.8rem;">\n          Type: <span style="color: ${t.color}; font-weight: 600;">${o} ${t.name}</span>\n        </div>\n        <div style="color: var(--text-secondary); font-size: 0.75rem; margin-top: 4px;">\n          ${"point"===t.type?"Click to place points":"Drag to draw regions"}\n        </div>\n      `}else n.innerHTML='\n        <div style="display: flex; align-items: center; gap: 8px;">\n          <span style="color: var(--text-primary); font-size: 1.2em;">⚪</span>\n          <strong style="color: var(--text-primary);">Normal Mode</strong>\n        </div>\n        <div style="color: var(--text-secondary); font-size: 0.8rem;">\n          Standard keypoint annotation\n        </div>\n      ';if(!document.getElementById("notification-animation-style")){const t=document.createElement("style");t.id="notification-animation-style",t.textContent="\n        @keyframes slideInRight {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n        @keyframes slideOutRight {\n          from {\n            transform: translateX(0);\n            opacity: 1;\n          }\n          to {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n        }\n      ",document.head.appendChild(t)}document.body.appendChild(n),setTimeout(()=>{n.style.animation="slideOutRight 0.3s ease-in",setTimeout(()=>{n.parentElement&&n.remove()},300)},3e3)}initialize(){console.log("Initializing custom annotation toolbar controller..."),this.refreshCustomTypeSelector(),this.updateDisplay()}forceRefresh(){console.log("Force refreshing toolbar controller..."),this.refreshCustomTypeSelector(),this.updateDisplay()}getSelectedCustomTypeId(){return this.toolbarCustomTypeSelect.value}setSelectedCustomType(t){this.toolbarCustomTypeSelect.value=t,this.updateButtonStates()}hasCustomTypes(){return this.customAnnotationManager.getAllCustomTypes().length>0}getStatusSummary(){const t=this.customAnnotationManager.currentMode,e=this.customAnnotationManager.getCurrentCustomType(),n=this.customAnnotationManager.getAllCustomTypes().length;return{mode:t,selectedType:e?{id:e.id,name:e.name,type:e.type,color:e.color}:null,totalCustomTypes:n,hasCustomTypes:n>0}}}class m{constructor(t){this.customAnnotationManager=t,this.modal=null,this.currentEditingTypeId=null,this.currentTab="manage-types",this.initializeElements(),this.bindEvents(),console.log("CustomAnnotationSettingsController initialized")}initializeElements(){this.modal=document.getElementById("custom-annotation-settings-modal"),this.closeBtn=document.getElementById("custom-annotation-settings-close"),this.tabButtons=document.querySelectorAll(".tab-button"),this.tabContents=document.querySelectorAll(".tab-content"),this.customTypesList=document.getElementById("custom-types-list"),this.noCustomTypesMessage=document.getElementById("no-custom-types"),this.addTypeBtn=document.getElementById("add-custom-type-btn"),this.typeFormSection=document.getElementById("type-form-section"),this.typeForm=document.getElementById("custom-type-form"),this.formTitle=document.getElementById("form-title"),this.formSubmitText=document.getElementById("form-submit-text"),this.cancelFormBtn=document.getElementById("cancel-form-btn"),this.typeNameInput=document.getElementById("type-name"),this.typeIdInput=document.getElementById("type-id"),this.typeTypeSelect=document.getElementById("type-type"),this.typeColorInput=document.getElementById("type-color"),this.typeColorTextInput=document.getElementById("type-color-text"),this.typeDescriptionInput=document.getElementById("type-description"),this.typeCategoryInput=document.getElementById("type-category"),this.typeDefaultAngleGroup=document.getElementById("type-default-angle-group"),this.typeDefaultAngleInput=document.getElementById("type-default-angle"),this.typeIsDirectionalInput=document.getElementById("type-is-directional"),this.currentModeValue=document.getElementById("current-mode-value"),this.currentTypeValue=document.getElementById("current-type-value"),this.switchToNormalBtn=document.getElementById("switch-to-normal-btn"),this.selectCustomTypeSelect=document.getElementById("select-custom-type"),this.switchToCustomBtn=document.getElementById("switch-to-custom-btn"),this.exportTypesCount=document.getElementById("export-types-count"),this.exportAnnotationsCount=document.getElementById("export-annotations-count"),this.exportCustomDataBtn=document.getElementById("export-custom-data-btn"),this.selectImportFileBtn=document.getElementById("select-import-file-btn"),this.importFileInput=document.getElementById("import-file-input"),this.importFileInfo=document.getElementById("import-file-info"),this.importFileName=document.getElementById("import-file-name"),this.importExecuteBtn=document.getElementById("import-execute-btn"),this.importResults=document.getElementById("import-results"),this.importResultsContent=document.getElementById("import-results-content")}bindEvents(){this.closeBtn.addEventListener("click",()=>this.hide()),this.modal.addEventListener("click",t=>{t.target===this.modal&&this.hide()}),this.tabButtons.forEach(t=>{t.addEventListener("click",()=>{const e=t.dataset.tab;this.switchTab(e)})}),this.addTypeBtn.addEventListener("click",()=>this.showAddTypeForm()),this.cancelFormBtn.addEventListener("click",()=>this.hideTypeForm()),this.typeForm.addEventListener("submit",t=>this.handleFormSubmit(t)),this.typeColorInput.addEventListener("input",()=>{this.typeColorTextInput.value=this.typeColorInput.value}),this.typeColorTextInput.addEventListener("input",()=>{/^#[0-9A-Fa-f]{6}$/.test(this.typeColorTextInput.value)&&(this.typeColorInput.value=this.typeColorTextInput.value)}),this.typeNameInput.addEventListener("input",()=>{if(!this.currentEditingTypeId){const t=this.generateIdFromName(this.typeNameInput.value);this.typeIdInput.value=t}}),this.typeTypeSelect.addEventListener("change",()=>this.updateAngleVisibility()),this.switchToNormalBtn&&(this.switchToNormalBtn.style.display="none"),this.switchToCustomBtn&&(this.switchToCustomBtn.style.display="none"),this.selectCustomTypeSelect.addEventListener("change",()=>{const t=this.selectCustomTypeSelect.value;t?this.customAnnotationManager.setCustomAnnotationMode(t):this.customAnnotationManager.setNormalMode(),this.updateModeDisplay()}),this.exportCustomDataBtn.addEventListener("click",()=>this.exportCustomData()),this.selectImportFileBtn.addEventListener("click",()=>this.importFileInput.click()),this.importFileInput.addEventListener("change",()=>this.handleFileSelection()),this.importExecuteBtn.addEventListener("click",()=>this.executeImport()),this.customAnnotationManager.addEventListener("onModeChange",t=>{this.updateModeDisplay()})}show(){this.refreshAllData(),this.modal.style.display="flex"}hide(){this.modal.style.display="none",this.hideTypeForm()}switchTab(t){this.currentTab=t,this.tabButtons.forEach(e=>{e.dataset.tab===t?e.classList.add("active"):e.classList.remove("active")}),this.tabContents.forEach(e=>{e.id===`${t}-tab`?e.classList.add("active"):e.classList.remove("active")}),this.refreshTabData(t)}refreshTabData(t){switch(t){case"manage-types":this.refreshCustomTypesList();break;case"current-mode":this.updateModeDisplay(),this.refreshCustomTypeSelector();break;case"export-import":this.updateExportStats()}}refreshAllData(){this.refreshCustomTypesList(),this.updateModeDisplay(),this.refreshCustomTypeSelector(),this.updateExportStats()}refreshCustomTypesList(){const t=this.customAnnotationManager.getAllCustomTypes();if(0===t.length)this.customTypesList.innerHTML='\n        <div id="no-custom-types" class="placeholder-message" style="text-align: center; color: #6b7280; padding: 40px;">\n          <div style="font-size: 48px; margin-bottom: 16px;">🎯</div>\n          <h4 style="margin: 0 0 8px 0;">No Custom Types Created</h4>\n          <p style="margin: 0;">Create custom annotation types for special keypoints and regions</p>\n        </div>\n      ';else{const e=t.map(t=>this.createTypeItemHTML(t)).join("");this.customTypesList.innerHTML=e,this.bindTypeActionButtons()}}createTypeItemHTML(t){const e="point"===t.type?"keypoint":"region"===t.type?"rectangle":t.type;return`\n      <div class="custom-type-item" data-type-id="${t.id}">\n        <div class="custom-type-info">\n          <div class="type-color-preview" style="background-color: ${t.color};"></div>\n          <div class="type-details">\n            <div class="type-name">${t.name}</div>\n            <div class="type-meta">\n              <span class="type-badge ${t.type}">${e}</span>\n              <span>ID: ${t.id}</span>\n              ${t.metadata?.category?`<span>Category: ${t.metadata.category}</span>`:""}\n            </div>\n          </div>\n        </div>\n        <div class="type-actions">\n          <button class="type-action-btn edit" data-action="edit" data-type-id="${t.id}">Edit</button>\n          <button class="type-action-btn delete" data-action="delete" data-type-id="${t.id}">Delete</button>\n        </div>\n      </div>\n    `}bindTypeActionButtons(){this.customTypesList.querySelectorAll(".type-action-btn").forEach(t=>{t.addEventListener("click",()=>{const e=t.dataset.action,n=t.dataset.typeId;"edit"===e?this.editCustomType(n):"delete"===e&&this.deleteCustomType(n)})})}showAddTypeForm(){this.currentEditingTypeId=null,this.formTitle.textContent="Add New Type",this.formSubmitText.textContent="Create Type",this.typeForm.reset(),this.typeColorInput.value="#ff6b35",this.typeColorTextInput.value="#ff6b35",this.typeDefaultAngleInput&&(this.typeDefaultAngleInput.value=""),this.typeFormSection.style.display="block",this.updateAngleVisibility()}editCustomType(t){const e=this.customAnnotationManager.getCustomType(t);if(e){if(this.currentEditingTypeId=t,this.formTitle.textContent="Edit Type",this.formSubmitText.textContent="Update Type",this.typeNameInput.value=e.name,this.typeIdInput.value=e.id,this.typeTypeSelect.value=e.type,this.typeColorInput.value=e.color,this.typeColorTextInput.value=e.color,this.typeDescriptionInput.value=e.description||"",this.typeCategoryInput.value=e.metadata?.category||"",this.typeDefaultAngleInput){const t=e.metadata?.defaultAngle;this.typeDefaultAngleInput.value=(t??"").toString()}this.typeIsDirectionalInput&&(this.typeIsDirectionalInput.checked=!!e.metadata?.isDirectional),this.typeIdInput.disabled=!0,this.typeFormSection.style.display="block",this.updateAngleVisibility()}}deleteCustomType(t){const e=this.customAnnotationManager.getCustomType(t);e&&confirm(`Are you sure you want to delete the custom type "${e.name}"? This will also delete all annotations of this type.`)&&(this.customAnnotationManager.deleteCustomType(t),this.refreshCustomTypesList(),this.refreshCustomTypeSelector())}hideTypeForm(){this.typeFormSection.style.display="none",this.currentEditingTypeId=null,this.typeIdInput.disabled=!1}handleFormSubmit(t){t.preventDefault();const e=new FormData(this.typeForm),n={id:e.get("id"),name:e.get("name"),type:e.get("type"),color:e.get("color"),description:e.get("description"),metadata:{category:e.get("category")}};if(this.typeIsDirectionalInput&&this.typeIsDirectionalInput.checked?n.metadata.isDirectional=!0:n.metadata.isDirectional=!1,"point"===n.type){const t=(this.typeDefaultAngleInput?.value||"").trim();if(""!==t){const e=parseFloat(t);Number.isNaN(e)||(n.metadata.defaultAngle=e)}}try{this.currentEditingTypeId?this.customAnnotationManager.updateCustomType(this.currentEditingTypeId,n):this.customAnnotationManager.createCustomType(n),this.hideTypeForm(),this.refreshCustomTypesList(),this.refreshCustomTypeSelector()}catch(o){alert(`Error: ${o.message}`)}}generateIdFromName(t){return t.toLowerCase().replace(/[^a-z0-9\u4e00-\u9fff]/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"").substring(0,50)}updateModeDisplay(){const t=this.customAnnotationManager.currentMode,e=this.customAnnotationManager.getCurrentCustomType();this.currentModeValue.textContent="custom"===t?"Type":"Off",this.currentTypeValue.textContent=e?e.name:"None",this.switchToNormalBtn&&(this.switchToNormalBtn.disabled="normal"===t)}refreshCustomTypeSelector(){const t=this.customAnnotationManager.getAllCustomTypes();this.selectCustomTypeSelect.innerHTML='<option value="">Choose a type...</option>',t.forEach(t=>{const e=document.createElement("option");e.value=t.id;const n="point"===t.type?"keypoint":"region"===t.type?"rectangle":t.type,o=t.metadata?.builtin?"★ ":"";e.textContent=`${o}${t.name} (${n})`,this.selectCustomTypeSelect.appendChild(e)});const e=Array.from(this.selectCustomTypeSelect.options),n=e.findIndex(t=>"builtin-regular-keypoint"===t.value);if(n>1){const t=e[n];this.selectCustomTypeSelect.remove(n),this.selectCustomTypeSelect.add(t,1)}this.switchToCustomBtn&&(this.switchToCustomBtn.disabled=!0)}switchToNormalMode(){this.customAnnotationManager.setNormalMode(),this.updateModeDisplay()}switchToCustomMode(){const t=this.selectCustomTypeSelect.value;if(t)try{this.customAnnotationManager.setCustomAnnotationMode(t),this.updateModeDisplay()}catch(e){alert(`Error: ${e.message}`)}}updateAngleVisibility(){if(!this.typeDefaultAngleGroup)return;const t="point"===this.typeTypeSelect.value;this.typeDefaultAngleGroup.style.display=t?"flex":"none"}updateExportStats(){const t=this.customAnnotationManager.getAllCustomTypes(),e=this.customAnnotationManager.getStats();this.exportTypesCount.textContent=t.length,this.exportAnnotationsCount.textContent=e.totalAnnotations;const n=window.PlantAnnotationTool?.appState,o=n?.currentImage?.id;if(o){const t=this.customAnnotationManager.getAnnotationStats(o);this.updateCurrentImageStats(t)}}updateCurrentImageStats(t){let e=document.getElementById("current-image-stats");if(!e){e=document.createElement("div"),e.id="current-image-stats",e.style.cssText="\n        margin-top: 16px;\n        padding: 12px;\n        background: #f8f9fa;\n        border-radius: 6px;\n        border: 1px solid #e5e7eb;\n      ";const t=document.querySelector(".export-stats");t&&t.appendChild(e)}let n=`\n      <div style="font-weight: 600; margin-bottom: 8px; color: #374151;">\n        📊 Current Image Statistics\n      </div>\n      <div style="margin-bottom: 8px;">\n        Total Annotations: <span style="font-weight: 600;">${t.total}</span>\n      </div>\n    `;if(t.total>0){n+=`\n        <div style="margin-bottom: 8px;">\n          Order Range: #${t.orderRange.min} - #${t.orderRange.max}\n        </div>\n      `,t.gaps.length>0&&(n+=`\n          <div style="margin-bottom: 8px; color: #f59e0b;">\n            ⚠️ Missing Numbers: ${t.gaps.join(", ")}\n          </div>\n        `);const e=Object.entries(t.byType).map(([t,e])=>`\n          <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">\n            <div style="width: 12px; height: 12px; background: ${e.typeColor}; border-radius: 50%;"></div>\n            <span>${e.typeName}: ${e.count}</span>\n          </div>\n        `).join("");e&&(n+=`\n          <div style="margin-top: 12px;">\n            <div style="font-weight: 600; margin-bottom: 6px; color: #374151;">By Type:</div>\n            ${e}\n          </div>\n        `)}e.innerHTML=n}exportCustomData(){const t=this.customAnnotationManager.exportData(),e=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),n=URL.createObjectURL(e),o=document.createElement("a");o.href=n,o.download=`custom_annotations_${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n),console.log("Custom annotation data exported")}handleFileSelection(){const t=this.importFileInput.files[0];t?(this.importFileName.textContent=t.name,this.importFileInfo.style.display="flex",this.importResults.style.display="none"):this.importFileInfo.style.display="none"}async executeImport(){const t=this.importFileInput.files[0];if(t)try{const e=await t.text(),n=JSON.parse(e),o=this.customAnnotationManager.importData(n);o.success?(this.importResultsContent.innerHTML=`\n          <div style="color: #059669;">\n            ✅ Import successful!<br>\n            Imported ${n.customTypes?.length||0} custom types and ${n.customAnnotations?.length||0} annotations.\n          </div>\n        `,this.refreshAllData()):this.importResultsContent.innerHTML=`\n          <div style="color: #dc2626;">\n            ❌ Import failed: ${o.error}\n          </div>\n        `,this.importResults.style.display="block"}catch(e){this.importResultsContent.innerHTML=`\n        <div style="color: #dc2626;">\n          ❌ Error reading file: ${e.message}\n        </div>\n      `,this.importResults.style.display="block"}}}window.addEventListener("unhandledrejection",t=>{if(console.error("🚨 Unhandled Promise Rejection:",t.reason),t.reason&&"object"==typeof t.reason&&t.reason.message&&t.reason.message.includes("message channel closed"))return console.warn("Chrome extension message channel error detected - this is usually harmless"),void t.preventDefault();console.error("Unhandled promise rejection details:",{reason:t.reason,promise:t.promise,stack:t.reason?.stack})}),window.addEventListener("error",t=>{console.error("🚨 Uncaught Error:",t.error),t.error&&t.error.message&&t.error.message.includes("asynchronous response")?console.warn("Async response listener error detected - likely Chrome extension related"):console.error("Global error details:",{message:t.message,filename:t.filename,lineno:t.lineno,colno:t.colno,error:t.error})});let f=null,y=null,w=null,b=null,x=null,v=null,I=null,S=null,k=null,A=null,T=null,C=null,P=null,M=null,$=null;const D={isInitialized:!1,hasBackendAccess:!1,currentDatasetPath:null,plants:[],currentPlant:null,currentImage:null,annotations:new Map,navigation:{isNavigating:!1,lastNavigationTime:0,throttleDelay:150}};function E(){if($||M)console.log("Custom annotation controllers already initialized, skipping...");else{if(!v||!v.customAnnotationManager)return console.warn("CustomAnnotationManager not ready, retrying..."),void setTimeout(()=>{E()},200);try{$=new m(v.customAnnotationManager),M=new u(v.customAnnotationManager,$),M.initialize(),window.PlantAnnotationTool.customAnnotationToolbarController=M,window.PlantAnnotationTool.customAnnotationSettingsController=$,console.log("自定义标注控制器初始化成功")}catch(t){console.error("自定义标注控制器初始化失败:",t)}}}async function N(){console.log("初始化植物图像关键点标注工具...");try{$t(10,"Initializing managers...","Setting up core components"),f=document.getElementById("app"),y=document.getElementById("loading-screen"),w=document.getElementById("main-app"),b=document.getElementById("error-modal"),$t(20,"Creating data managers...","Initializing plant data manager"),x=new a,$t(30,"Setting up window objects...","Making managers globally available"),window.PlantAnnotationTool={appState:D,plantDataManager:x,annotationTool:null,showError:at,hideError:st,updateProgressInfo:it},$t(40,"Initializing annotation tool...","Setting up the annotation interface");try{console.log("[调试] 在initializeApp开始时初始化AnnotationTool"),v=new r("annotation-canvas"),window.PlantAnnotationTool.annotationTool=v}catch(t){console.warn("AnnotationTool初始化延迟:",t.message)}$t(50,"Setting up preview manager...","Initializing branch point preview functionality");try{I=new l,I.setPlantDataManager(x),window.PlantAnnotationTool.branchPointPreviewManager=I}catch(t){console.warn("BranchPointPreviewManager初始化延迟:",t.message)}$t(52,"Setting up custom annotation system...","Initializing custom annotation controllers");try{setTimeout(()=>{E()},500),console.log("自定义标注系统初始化已启动")}catch(t){console.warn("自定义标注系统初始化延迟:",t.message)}$t(55,"Setting up note system...","Initializing note management functionality");try{S=new c(x.fileSystemManager),k=new d(S),S.startAutoCleanup(),window.PlantAnnotationTool.noteManager=S,window.PlantAnnotationTool.noteUI=k,console.log("笔记系统初始化成功")}catch(t){console.warn("NoteManager初始化延迟:",t.message)}$t(60,"Setting up annotation manager...","Initializing bulk annotation loading system");try{A=new g(x.fileSystemManager),window.PlantAnnotationTool.annotationManager=A,console.log("标注管理器初始化成功")}catch(t){console.warn("AnnotationManager初始化延迟:",t.message)}$t(63,"Setting up real-time sync...","Initializing real-time synchronization manager");try{T=new p(x,x.annotationStorage),window.PlantAnnotationTool.realTimeSyncManager=T,console.log("🔄 实时同步管理器初始化成功")}catch(t){console.warn("🔄 RealTimeSyncManager初始化延迟:",t.message)}$t(65,"Setting up performance monitoring...","Initializing bulk loading performance tracking");try{C=new h,window.PlantAnnotationTool.performanceMonitor=C,console.log("性能监控器初始化成功")}catch(t){console.warn("性能监控器初始化延迟:",t.message)}if($t(70,"Checking compatibility...","Verifying browser support and backend connection"),await async function(){console.log("检查浏览器兼容性...");try{if(!(await x.fileSystemManager.checkConnection()))throw new Error("后端服务不可用");await x.fileSystemManager.initialize(),D.hasBackendAccess=!0,console.log("✅ 后端服务连接成功")}catch(t){D.hasBackendAccess=!1;const n=t.message.includes("fetch")||t.message.includes("ERR_CONNECTION_REFUSED")?"后端服务未启动，请运行 ./start-backend.sh 启动服务器":t.message;console.warn("❌ 后端服务连接失败:",n)}const e=[{name:"Canvas API",check:()=>!!document.createElement("canvas").getContext},{name:"IndexedDB",check:()=>!!window.indexedDB},{name:"Web Workers",check:()=>!!window.Worker},{name:"Intersection Observer",check:()=>!!window.IntersectionObserver}].filter(t=>!t.check());if(e.length>0){const t=e.map(t=>t.name).join(", ");throw new Error(`浏览器不支持以下必要API: ${t}`)}console.log("✅ 浏览器兼容性检查通过")}(),$t(70,"Setting up interface...","Binding event listeners and UI components"),function(){console.log("绑定事件监听器...");const e=document.getElementById("select-dataset-btn");e&&e.addEventListener("click",L);const n=document.getElementById("error-close-btn");n&&n.addEventListener("click",st);const o=document.getElementById("reset-zoom-btn");o&&o.addEventListener("click",()=>{v&&v.resetView()});const i=document.getElementById("fit-screen-btn");i&&i.addEventListener("click",()=>{v&&v.fitToScreen()}),document.addEventListener("click",e=>{e.target.classList.contains("btn-view-angle")&&async function(e){if(console.log("选择视角:",e),D.currentPlant)try{document.querySelectorAll(".btn-view-angle").forEach(t=>{t.classList.remove("selected"),t.dataset.viewAngle===e&&t.classList.add("selected")}),x.setSelectedViewAngle(D.currentPlant.id,e),D.currentPlant.selectedViewAngle=e,it(`Loading ${e} image view...`);const t=await x.getPlantImages(D.currentPlant.id,e);console.log(`${e} 视角包含 ${t.length} 张图像`),await V(t),t.length>0&&await Y(t[0],!1),it(`已选择 ${e} 视角 - ${t.length} 张图像`)}catch(t){console.error("选择视角失败:",t),at("加载视角数据失败",t.message)}else at("操作失败","请先选择植物")}(e.target.dataset.viewAngle)});const a=document.getElementById("undo-btn");a&&a.addEventListener("click",()=>{v&&v.undo()});const s=document.getElementById("redo-btn");s&&s.addEventListener("click",()=>{v&&v.redo()});const r=document.getElementById("clear-all-btn");r&&r.addEventListener("click",jt);const l=document.getElementById("sift-match-btn");l&&l.addEventListener("click",qt);const c=document.getElementById("toggle-preview-btn");c&&c.addEventListener("click",()=>{I&&I.toggleVisibility()});const d=document.getElementById("auto-direction-btn");d&&d.addEventListener("click",mt);const g=document.getElementById("auto-direction-mode-selector");g&&g.addEventListener("change",Mt);const h=document.getElementById("zoom-lock-checkbox"),p=document.getElementById("zoom-lock-value");h&&p&&(h.addEventListener("change",At),p.addEventListener("change",Tt));const u=document.getElementById("auto-move-checkbox");u&&u.addEventListener("change",Ct);const m=document.getElementById("real-time-change-checkbox");m&&m.addEventListener("change",Pt);const f=document.getElementById("skip-modal-close"),y=document.getElementById("skip-cancel-btn"),w=document.getElementById("skip-confirm-btn");f&&f.addEventListener("click",ft),y&&y.addEventListener("click",ft),w&&w.addEventListener("click",yt);const b=document.getElementById("skip-plant-modal");b&&b.addEventListener("click",t=>{t.target===b&&ft()});const S=document.getElementById("status-filter");S&&S.addEventListener("change",wt);const k=document.getElementById("plant-search");k&&k.addEventListener("input",bt);const A=document.getElementById("save-annotation-btn");A&&A.addEventListener("click",Z);const T=document.getElementById("save-annotation-cancel-btn");T&&T.addEventListener("click",J);const C=document.getElementById("save-annotation-confirm-btn");C&&C.addEventListener("click",()=>{const e=document.querySelector('input[name="save-mode"]:checked');e&&async function(e){if(v&&D.currentPlant)try{const t=v.getAnnotationData();if(0===t.keypoints.length)return void at("保存失败","请先添加标注点");const n=document.querySelector('input[name="direction-save-mode"]:checked'),o=n&&"directions-only"===n.value,i=await x.savePlantAnnotations(D.currentPlant.id,t.keypoints,e,{saveDirectionsOnly:o});if(it(i.message||`已保存 ${t.keypoints.length} 个标注点`),W(),z(),I&&D.currentPlant&&D.currentImage){const t=(await x.getPlantImages(D.currentPlant.id,D.currentPlant.selectedViewAngle)).findIndex(t=>t.id===D.currentImage.id),e=await x.getImageAnnotations(D.currentImage.id),n=e?e.length:0;await I.updateContext(D.currentPlant.id,D.currentPlant.selectedViewAngle,t,n)}if(console.log("标注数据已保存到持久化存储"),D.currentImage&&(await refreshThumbnailAnnotationStatus(D.currentImage.id),console.log("缩略图标注状态已刷新")),!e&&i.affectedImages&&i.affectedImages.length>0){console.log(`刷新 ${i.affectedImages.length} 个受影响图像的缩略图状态`);for(const t of i.affectedImages)await refreshThumbnailAnnotationStatus(t)}window.PlantAnnotationTool?.noteUI&&D.currentPlant&&(await window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(D.currentPlant.id),console.log("植物笔记徽章已刷新")),J()}catch(t){console.error("保存标注失败:",t),at("保存失败",`保存标注数据时出错: ${t.message}`)}else at("保存失败","请先选择植物和图像")}("current-only"===e.value)});const P=document.getElementById("complete-plant-btn");P&&P.addEventListener("click",Q);const M=document.getElementById("export-data-btn");M&&M.addEventListener("click",G);const $=document.getElementById("delete-plant-annotations-btn");$&&$.addEventListener("click",zt);const E=document.getElementById("delete-modal-close"),N=document.getElementById("delete-cancel-btn"),B=document.getElementById("delete-confirm-btn"),R=document.getElementById("delete-confirmation-checkbox");E&&E.addEventListener("click",Rt),N&&N.addEventListener("click",Rt),B&&B.addEventListener("click",Ft),R&&R.addEventListener("change",Ut);const U=document.getElementById("delete-plant-annotations-modal");U&&U.addEventListener("click",t=>{t.target===U&&Rt()}),document.addEventListener("keydown",ot);const F=document.getElementById("canvas-container");F&&F.addEventListener("contextmenu",t=>t.preventDefault()),document.addEventListener("plantUpdated",nt);const O=document.getElementById("error-modal");O&&O.addEventListener("click",t=>{t.target===O&&st()});const K=document.getElementById("save-annotation-modal");K&&K.addEventListener("click",t=>{t.target===K&&J()});const j=document.getElementById("unskip-modal-close"),q=document.getElementById("unskip-cancel-btn"),_=document.getElementById("unskip-confirm-btn");j&&j.addEventListener("click",vt),q&&q.addEventListener("click",vt),_&&_.addEventListener("click",It);const H=document.getElementById("uncomplete-modal-close"),X=document.getElementById("uncomplete-cancel-btn"),tt=document.getElementById("uncomplete-confirm-btn");H&&H.addEventListener("click",St),X&&X.addEventListener("click",St),tt&&tt.addEventListener("click",kt);const et=document.getElementById("unskip-plant-modal");et&&et.addEventListener("click",t=>{t.target===et&&vt()});const rt=document.getElementById("uncomplete-plant-modal");rt&&rt.addEventListener("click",t=>{t.target===rt&&St()}),console.log("✅ 事件监听器绑定完成")}(),$t(80,"Finalizing setup...","Completing initialization process"),await async function(){const t=["正在初始化标注工具...","检查浏览器兼容性...","加载组件模块...","准备用户界面..."],e=y.querySelector("p");for(const n of t)e.textContent=n,await new Promise(t=>setTimeout(t,300))}(),y.style.display="none",w.style.display="flex",setTimeout(()=>{if(v)console.log("[调试] AnnotationTool已存在，跳过延迟初始化，调整Canvas尺寸"),v.resizeCanvas();else try{console.log("[调试] 在showMainApp中延迟初始化AnnotationTool"),v=new r("annotation-canvas"),window.PlantAnnotationTool.annotationTool=v,console.log("AnnotationTool延迟初始化完成")}catch(t){console.error("延迟初始化AnnotationTool失败:",t)}if(!I)try{I=new l,I.setPlantDataManager(x),window.PlantAnnotationTool.branchPointPreviewManager=I,console.log("BranchPointPreviewManager延迟初始化完成")}catch(t){console.error("延迟初始化BranchPointPreviewManager失败:",t)}},300),v)console.log("[调试] AnnotationTool已存在，跳过初始化");else try{console.log("[调试] 在initializeApp中初始化AnnotationTool"),v=new r("annotation-canvas"),window.PlantAnnotationTool.annotationTool=v}catch(t){console.error("无法初始化AnnotationTool:",t)}$t(90,"Connecting to dataset...","Automatically connecting to plant dataset"),setTimeout(async()=>{try{await Et()}catch(t){console.error("自动连接数据集失败:",t),Dt(),at("自动连接数据集失败",t.message)}},500),D.isInitialized=!0,console.log("应用初始化完成")}catch(t){console.error("应用初始化失败:",t),Dt(),at("应用初始化失败",t.message)}}async function L(){if(console.log("开始连接数据集..."),!x)return console.error("PlantDataManager未初始化"),void at("系统错误","数据管理器未正确初始化，请刷新页面重试");try{const t=document.getElementById("select-dataset-btn");t.textContent,t.textContent="Connecting...",t.disabled=!0,it("Connecting to backend...");const e=await x.fileSystemManager.getDatasetInfo();if(!e)throw new Error("无法连接到后端服务，请确保后端服务已启动");console.log("连接的数据集:",e.datasetPath),await B(),it("Loading plants...");const n=await x.loadDataset();D.currentDatasetPath=e.datasetPath,D.plants=n,P={path:e.datasetPath,name:"Brassica napus dataset",plantCount:n.length},it(`Loaded ${n.length} plants`),t.textContent="Reconnect Dataset",R(n),z(),console.log(`成功加载数据集: ${n.length} 个植物`)}catch(t){console.error("选择数据集失败:",t),at("连接数据集失败",t.message)}finally{const t=document.getElementById("select-dataset-btn");t.textContent=D.currentDatasetPath?"重新连接数据集":"连接数据集",t.disabled=!1}}async function B(){console.log("验证数据集结构...");try{const t=await x.fileSystemManager.traversePlantDirectories();if(!t||0===t.length)throw new Error("数据集中未找到植物文件夹（以BR开头的文件夹）");const e=t[0],n=await x.fileSystemManager.readPlantImages(e.id);if(!n||0===Object.keys(n).length)throw new Error(`植物文件夹 ${e.id} 中未找到有效的视角目录`);if(!n["sv-000"]||0===n["sv-000"].length)throw new Error(`植物文件夹 ${e.id} 中未找到 sv-000 视角图像`);console.log(`✅ 数据集结构验证通过，发现 ${t.length} 个植物文件夹`)}catch(t){throw console.error("数据集结构验证失败:",t),t}}function z(){if(!x)return void function(){const t=document.getElementById("progress-stats");t&&(t.style.display="none")}();const t=x.getProgress(),e=document.getElementById("progress-stats"),n=document.getElementById("completed-images-count"),o=document.getElementById("total-images-count"),i=document.getElementById("completion-percentage"),a=document.getElementById("completed-plants-count"),s=document.getElementById("total-plants-count"),r=document.getElementById("progress-bar-fill");if(!e)return;if(e.style.display="block",n){const e=t.totalCompleted||t.completed+t.skipped;n.textContent=e}if(o&&(o.textContent=t.total),i&&(i.textContent=t.completionRate+"%"),a){const e=t.totalCompleted||t.completed+t.skipped,n=t.skipped>0?` (${t.skipped} skipped)`:"";a.textContent=`${e} plants finished ${n}`}if(s&&(s.textContent=`Total ${t.total} plants`),r){const e=parseFloat(t.completionRate)||0;r.style.width=e+"%",r.style.background=e>=100?"linear-gradient(90deg, #059669 0%, #047857 100%)":e>=75?"linear-gradient(90deg, #10b981 0%, #059669 100%)":e>=50?"linear-gradient(90deg, #34d399 0%, #10b981 100%)":e>=25?"linear-gradient(90deg, #fbbf24 0%, #f59e0b 100%)":"linear-gradient(90deg, #f87171 0%, #ef4444 100%)"}const l=t.totalCompleted||t.completed+t.skipped;console.log(`统计更新: ${l}/${t.total} 植株 (${t.completionRate}%)`)}function R(t){const e=document.getElementById("plant-list-container");e&&(e.innerHTML="",0!==t.length?(t.forEach(t=>{const n=U(t);e.appendChild(n)}),z(),setTimeout(async()=>{console.log("[Badge Update] Starting automatic badge loading for all plants");let t=0;for(;t<15;){if(window.PlantAnnotationTool?.noteManager&&window.PlantAnnotationTool?.noteUI)try{console.log("[Badge Update] Note system available, starting bulk badge update");const t=performance.now();let n=window.PlantAnnotationTool.noteManager.bulkNoteData;if(!n){console.log("[Badge Update] No pre-cached data, fetching bulk notes for instant display...");try{n=await window.PlantAnnotationTool.noteManager.getAllNotesInBulk(),console.log("[Badge Update] Bulk data fetched successfully")}catch(e){console.warn("[Badge Update] Bulk API failed, using optimized individual requests:",e.message),await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges();const n=performance.now();return void console.log(`[Badge Update] Individual badge update completed in ${(n-t).toFixed(2)}ms`)}}if(n){await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadgesFromBulk(n);const e=performance.now();console.log(`[Badge Update] INSTANT bulk badge update completed in ${(e-t).toFixed(2)}ms`),console.log("[Badge Update] ✅ All plant note badges are now visible immediately")}else{console.log("[Badge Update] Using fallback individual badge updates"),await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges();const e=performance.now();console.log(`[Badge Update] Fallback badge update completed in ${(e-t).toFixed(2)}ms`)}return}catch(n){if(console.error("[Badge Update] Badge update failed:",n),t++,t>=15)return void console.error("[Badge Update] Max retries reached, badge update failed permanently")}else console.log(`[Badge Update] Note system not ready, retry ${t+1}/15`),t++;await new Promise(t=>setTimeout(t,300))}console.warn("[Badge Update] ❌ Note system initialization timeout, badges will load later")},100),console.log(`渲染了 ${t.length} 个植物列表项`)):e.innerHTML='<div class="no-data">no data</div>')}function U(t){const e=document.createElement("div");e.className="plant-item",e.dataset.plantId=t.id;const n=O(t.status),o=t.imageCount>0?`${t.imageCount} images`:t.hasImages?"loading...":"no image",i=t.viewAngles.length>0?`view: ${t.viewAngles.join(", ")}`:"view: checking...",a=t.selectedViewAngle?`Chosen: ${t.selectedViewAngle}`:"",s="skipped"===t.status;t.status,s?e.classList.add("skipped"):e.classList.remove("skipped");const r=s&&t.skipReason?`<div class="skip-reason">skip reason: ${t.skipReason}</div>`:"";let l="";return l+=s?`<button class="skip-button unskip-variant" onclick="handleUnskipPlant('${t.id}', event)">Unskip</button>`:`<button class="skip-button" onclick="showSkipPlantModal('${t.id}', event)">Skip</button>`,e.innerHTML=`\n    <div class="plant-item-content">\n      <div class="plant-header">\n        <div class="plant-status">${n}</div>\n        <div class="plant-id">${t.id}</div>\n        <div class="right-box">\n          <div class="plant-note-badge" id="note-badge-${t.id}" style="display: none;"></div>\n          <div class="state-buttons">${l}</div>\n        </div>\n      </div>\n      <div class="plant-info">\n        <div class="image-count">${o}</div>\n        <div class="status-text">${K(t.status)}</div>\n      </div>\n      <div class="plant-view-info">\n        <div class="view-angles">${i}</div>\n        ${a?`<div class="selected-view">${a}</div>`:""}\n      </div>\n      ${r}\n    </div>\n  `,e.addEventListener("click",()=>_(t)),e}async function F(t,e){try{if(!window.PlantAnnotationTool||!window.PlantAnnotationTool.noteManager)return void console.warn(`[Thumbnail] Note system not available for ${e}`);const o=window.PlantAnnotationTool.noteManager;let i;if(console.log(`[Thumbnail] Loading note count for ${t}/${e}`),arguments[2]){console.log(`[Thumbnail] Using direct API for forced refresh of ${e}`);try{const n=await fetch(`${o.baseUrl}/notes/image/${t}/${e}`);if(n.ok){const t=await n.json();i=t.success&&t.data||[]}else i=[]}catch(n){console.warn(`[Thumbnail] Direct API failed, falling back to cache for ${e}:`,n),i=await o.getImageNotes(t,e)}}else i=await o.getImageNotes(t,e);const a=i?i.length:0;console.log(`[Thumbnail] Found ${a} notes for ${e}`);const s=document.getElementById(`image-note-badge-${e}`);s?(console.log(`[Thumbnail] Badge element found for ${e}`),a>0?(s.innerHTML=`<span class="image-note-count">📝 ${a}</span>`,s.style.display="inline-block",s.className="image-note-badge",console.log(`[Thumbnail] Badge updated with ${a} notes for ${e}`)):(s.innerHTML="",s.style.display="none",console.log(`[Thumbnail] Badge cleared for ${e} (no notes)`)),console.log(`[Thumbnail] Badge updated for ${e}: ${a} notes`)):console.error(`[Thumbnail] Badge element NOT FOUND for ${e} (ID: image-note-badge-${e})`)}catch(o){console.error(`[Thumbnail] Note loading failed for image ${e}:`,o.message);const t=document.getElementById(`image-note-badge-${e}`);t&&(t.innerHTML="",t.style.display="none",console.log(`[Thumbnail] Badge cleared on error for ${e}`))}}function O(t){switch(t){case"completed":return"✅";case"in-progress":return"🔄";case"skipped":return"⏭️";default:return"⭕"}}function K(t){switch(t){case"completed":return"Finished";case"in-progress":return"In progress";case"skipped":return"Skipped";default:return"Not started"}}function j(){console.log("初始化空工作区状态"),D.currentPlant=null,D.currentImage=null,q(),I&&(I.reset(),console.log("[EmptyWorkspace] Branch point preview reset - entering empty state"));const t=document.getElementById("view-angle-section");t&&(t.style.display="none"),window.PlantAnnotationTool?.noteUI&&(window.PlantAnnotationTool.noteUI.updateImageNoteButton(null,null),console.log("[EmptyWorkspace] Image note button badge cleared")),it("Please connect to dataset and select a plant"),Kt(),Ot()}function q(){console.log("清空工作区状态"),v&&v.clearImage(),I&&(I.reset(),console.log("[Workspace] Branch point preview reset - no previous image context")),D.currentImage=null,X();const t=document.getElementById("thumbnail-container");t&&(t.innerHTML='<div class="no-images">Please choose view</div>'),document.querySelectorAll(".btn-view-angle").forEach(t=>{t.classList.remove("selected"),t.disabled=!0});const e=document.getElementById("current-plant-title");e&&!D.currentPlant&&(e.textContent="Plant: Please select"),window.PlantAnnotationTool?.noteUI&&(window.PlantAnnotationTool.noteUI.updateImageNoteButton(null,null),console.log("[Workspace] Image note button badge cleared"))}async function _(t){if(console.log("选择植物:",t.id),!x)return console.error("PlantDataManager未初始化"),void at("系统错误","数据管理器未正确初始化，请刷新页面重试");try{if(D.currentImage&&v)try{const t=v.getAnnotationData();t.keypoints.length>0&&(console.log("植物切换前自动保存当前图像标注:",D.currentImage.id),await x.saveImageAnnotations(D.currentImage.id,t.keypoints),console.log("植物切换前标注保存成功"),await refreshThumbnailAnnotationStatus(D.currentImage.id),console.log("植物切换前缩略图状态已刷新"))}catch(e){console.warn("植物切换前自动保存标注失败:",e)}q(),D.currentPlant=t,function(t){const e=document.getElementById("current-plant-title");e&&(e.textContent=`Plant: ${t.id}`)}(t),function(t){document.querySelectorAll(".plant-item").forEach(t=>{t.classList.remove("selected")});const e=document.querySelector(`[data-plant-id="${t}"]`);e&&e.classList.add("selected")}(t.id),it(`Loading ${t.id} image data...`);const n=await x.getPlantImages(t.id);if(console.log(`植物 ${t.id} 图像数据:`,n),window.PlantAnnotationTool?.noteUI&&window.PlantAnnotationTool.noteUI.setCurrentPlant(t.id),window.PlantAnnotationTool?.noteManager){const e=Object.values(n).flat().map(t=>t.id);window.PlantAnnotationTool.noteManager.preloadNotes(t.id,e.slice(0,5))}await async function(t,e){const n=document.getElementById("view-angle-section"),o=document.getElementById("thumbnail-container"),i=document.getElementById("view-angle-info");if(!n||!o||!i)return;n.style.display="block",o.innerHTML='<div class="no-images">Please choose view</div>';const a=Object.keys(e).filter(t=>e[t].length>0);if(i.textContent=`available view: ${a.length}`,document.querySelectorAll(".btn-view-angle").forEach(t=>{const n=t.dataset.viewAngle,o=e[n]&&e[n].length>0;t.disabled=!o,t.classList.remove("selected");const i=o?e[n].length:0,a=t.textContent.split("(")[0].trim();t.textContent=`${a} (${i})`,t.title=o?`${n}: ${i} images`:`${n}: no image`}),t.selectedViewAngle){const n=document.querySelector(`[data-view-angle="${t.selectedViewAngle}"]`);n&&!n.disabled&&(n.classList.add("selected"),await V(e[t.selectedViewAngle]||[]))}}(t,n),it(`Loaded ${t.id} - Total ${t.imageCount} images`),Kt(),Ot()}catch(e){console.error("选择植物失败:",e),at("加载植物数据失败",e.message)}}async function V(t){const e=document.getElementById("thumbnail-container");if(e)if(e.innerHTML="",0!==t.length){for(let n=0;n<t.length;n++){const o=t[n],i=await H(o,0===n);e.appendChild(i)}console.log(`渲染了 ${t.length} 个图像缩略图`)}else e.innerHTML='<div class="no-images">该植物暂无图像</div>'}async function H(t,e=!1){const n=document.createElement("div");n.className="image-thumbnail",n.dataset.imageId=t.id,e&&n.classList.add("selected");let o=!1,i=0;try{if(x){const e=await x.getImageAnnotations(t.id);e&&e.length>0&&(o=!0,i=e.length,n.classList.add("has-annotations"))}}catch(a){}return n.innerHTML=`\n    <div class="thumbnail-image">\n      <img src="" alt="${t.name}" data-src="${t.id}" />\n      <div class="thumbnail-loading">Loading...</div>\n      ${o?`<div class="annotation-badge">${i}</div>`:""}\n      <div class="image-note-badge" id="image-note-badge-${t.id}" style="display: none;"></div>\n    </div>\n    <div class="thumbnail-info">\n      <div class="image-time">${t.timeString}</div>\n      ${o?'<div class="annotation-status">✓ Annotated</div>':""}\n    </div>\n  `,window.refreshThumbnailAnnotationStatus=async function(t){console.log(`[缩略图刷新] 开始刷新图像: ${t}`);const e=document.querySelector(`[data-image-id="${t}"]`);if(e)try{console.log(`[缩略图刷新] 正在获取图像 ${t} 的标注数据...`);const n=await x.getImageAnnotations(t),o=n&&n.length>0,i=n?n.length:0;console.log(`[缩略图刷新] 图像 ${t} 标注数据: ${i} 个标注点`),o?(e.classList.add("has-annotations"),console.log("[缩略图刷新] 添加了 has-annotations 类")):(e.classList.remove("has-annotations"),console.log("[缩略图刷新] 移除了 has-annotations 类"));let a=e.querySelector(".annotation-badge");o?(a||(a=document.createElement("div"),a.className="annotation-badge",e.querySelector(".thumbnail-image").appendChild(a),console.log("[缩略图刷新] 创建了新的标注徽章")),a.textContent=i,console.log(`[缩略图刷新] 更新徽章数量: ${i}`)):a&&(a.remove(),console.log("[缩略图刷新] 移除了标注徽章"));let s=e.querySelector(".annotation-status");o?s||(s=document.createElement("div"),s.className="annotation-status",s.textContent="✓ Annotated",e.querySelector(".thumbnail-info").appendChild(s),console.log("[缩略图刷新] 创建了 '✓ Annotated' 状态")):s&&(s.remove(),console.log("[缩略图刷新] 移除了 '✓ Annotated' 状态")),console.log(`[缩略图刷新] 完成刷新图像 ${t}`)}catch(a){console.error("[缩略图刷新] 刷新失败:",a)}else console.warn(`[缩略图刷新] 找不到图像 ${t} 的缩略图元素`)},n.addEventListener("click",()=>Y(t,!0)),async function(t,e){try{const n=t.querySelector("img"),o=t.querySelector(".thumbnail-loading");if(!x||!x.fileSystemManager)return console.error("PlantDataManager或FileSystemManager未初始化"),o.textContent="初始化错误",void(o.style.color="#dc2626");const i=await x.fileSystemManager.createImageURL(e);n.onload=()=>{o.style.display="none",n.style.display="block"},n.onerror=()=>{o.textContent="加载失败",o.style.color="#dc2626"},n.src=i}catch(a){console.error("加载缩略图失败:",a);const n=t.querySelector(".thumbnail-loading");n.textContent="加载失败",n.style.color="#dc2626"}}(n,t),D.currentPlant&&F(D.currentPlant.id,t.id),n}async function Y(t,e=!0){if(D.navigation.isNavigating)return void console.log(`[Navigation] Blocked concurrent navigation to ${t.name} - already navigating`);const n=Date.now();if(n-D.navigation.lastNavigationTime<D.navigation.throttleDelay){if(console.log(`[Navigation] Throttled navigation to ${t.name} - too fast (${n-D.navigation.lastNavigationTime}ms since last)`),window.updateProgressInfo){const t=D.navigation.throttleDelay-(n-D.navigation.lastNavigationTime);window.updateProgressInfo(`Navigation throttled - please wait ${t}ms`),setTimeout(()=>{window.updateProgressInfo&&window.updateProgressInfo("Ready for navigation")},t+100)}}else{D.navigation.isNavigating=!0,D.navigation.lastNavigationTime=n;try{if(console.log("选择图像:",t.name),D.currentImage&&v)try{const t=D.currentImage.id,e=v.getAnnotationData();e.keypoints.length>0&&(console.log(`[Auto-save] Saving ${e.keypoints.length} annotations for ${t}`),await x.saveImageAnnotations(t,e.keypoints),console.log(`[Auto-save] Successfully saved annotations for ${t}`),await refreshThumbnailAnnotationStatus(t),console.log(`[Auto-save] Thumbnail status refreshed for ${t}`))}catch(o){console.warn(`[Auto-save] Failed to save annotations for ${D.currentImage?.id}:`,o)}const n=!D.currentImage||D.currentPlant&&D.currentImage&&!D.currentImage.id.startsWith(D.currentPlant.id);if(D.currentImage=t,function(t){document.querySelectorAll(".image-thumbnail").forEach(t=>{t.classList.remove("selected")});const e=document.querySelector(`[data-image-id="${t}"]`);e&&(e.classList.add("selected"),function(t){const e=document.getElementById("thumbnail-container");if(e&&t)try{const n=e.getBoundingClientRect(),o=t.getBoundingClientRect(),i=(e.scrollTop,t.offsetTop),a=n.height,s=i-a/2+o.height/2;e.scrollTo({top:s,behavior:"smooth"}),console.log(`滚动到缩略图: ${t.dataset.imageId}`)}catch(o){console.warn("滚动到缩略图失败:",o)}}(e))}(t.id),window.PlantAnnotationTool?.noteUI&&window.PlantAnnotationTool.noteUI.setCurrentImage(t.id),D.currentPlant&&x.setSelectedImage(D.currentPlant.id,t),v){v.resizeCanvas();const i=function(){const t=document.getElementById("zoom-lock-checkbox"),e=document.getElementById("zoom-lock-value");return t&&e?{isLocked:t.checked,lockValue:parseFloat(e.value)||2.5}:{isLocked:!1,lockValue:2.5}}(),a=(function(){const t=document.getElementById("auto-move-checkbox");t&&t.checked}(),e&&!n);console.log(`[调试] isImageSwitch: ${e}, isFirstImageForPlant: ${n}, shouldPreserveView: ${a}`),await v.loadImage(t,a),n?(console.log("首张图像：重置视图到适合屏幕"),setTimeout(()=>{v.fitToScreen()},100)):e&&i.isLocked?(v.setZoom(i.lockValue),console.log(`图片切换：应用锁定倍数 ${i.lockValue}x`)):e?console.log("图片切换：保持当前缩放和视图状态"):(console.log("其他情况：重置视图到适合屏幕"),v.fitToScreen());try{console.log(`[标注] 开始加载图像标注: ${t.id}`);const e=await x.getImageAnnotations(t.id);if(e&&e.length>0){if(v.loadAnnotationData({keypoints:e}),console.log(`[标注] 加载了 ${e.length} 个已有标注点`),v.customAnnotationManager){const n=e.filter(t=>"custom"===t.annotationType);n.length>0&&(console.log(`[自定义标注] 发现 ${n.length} 个自定义标注，同步到CustomAnnotationManager`),v.customAnnotationManager.syncAnnotationsFromKeypoints(t.id,n))}v.state.autoMoveToExpectedPosition?setTimeout(()=>{v.moveToHighestKeypoint(),console.log("[自动移动] 移动视角到最高标记点（auto-move已开启）")},100):console.log("[自动移动] 跳过移动到最高标记点（auto-move已关闭）")}else v.clearKeypoints(),console.log(`[标注] 图像 ${t.id} 无标注数据`)}catch(o){console.warn("[标注] 加载标注数据失败:",o),v.clearKeypoints()}}else console.error("AnnotationTool未初始化"),at("标注工具错误","标注工具未正确初始化，请刷新页面重试");if(I&&D.currentPlant)try{const e=(await x.getPlantImages(D.currentPlant.id,D.currentPlant.selectedViewAngle)).findIndex(e=>e.id===t.id),n=v?v.keypoints.length:0;await I.updateContext(D.currentPlant.id,D.currentPlant.selectedViewAngle,e,n)}catch(o){console.warn("更新分支点预览失败:",o)}await W(),v&&setTimeout(()=>{v.moveToExpectedPosition(e)},100),console.log("图像选择完成")}catch(o){console.error("图像选择失败:",o),at("图像加载失败",o.message)}finally{D.navigation.isNavigating=!1,console.log(`[Navigation] Navigation unlocked after processing ${t.name}`)}}}async function W(){if(!D.currentPlant||!D.currentImage)return void X();const t=document.getElementById("annotation-status-section"),e=document.getElementById("current-image-index"),n=document.getElementById("annotation-source"),o=document.getElementById("time-series-stats"),i=document.getElementById("manual-adjustment-notice");if(t){t.style.display="block";try{const t=await x.getPlantImages(D.currentPlant.id,D.currentPlant.selectedViewAngle),a=t.findIndex(t=>t.id===D.currentImage.id);e.textContent=a>=0?`${a+1} / ${t.length}`:"- / -";const s=await x.getImageAnnotations(D.currentImage.id),r=s&&s.length>0;n.textContent=r?"Document":"No annotation";let l=0;for(const e of t){const t=await x.getImageAnnotations(e.id);t&&t.length>0&&l++}const c=t.length>0?Math.round(l/t.length*100):0;o.textContent=`${l}/${t.length} (${c}%)`,i.style.display="none"}catch(a){console.error("更新标注状态显示失败:",a),X()}}}function X(){const t=document.getElementById("annotation-status-section"),e=document.getElementById("manual-adjustment-notice");t&&(t.style.display="none"),e&&(e.style.display="none")}async function Z(){v&&D.currentPlant?0!==v.getAnnotationData().keypoints.length?function(){const t=document.getElementById("save-annotation-modal");t&&(t.style.display="flex")}():at("保存失败","请先添加标注点"):at("保存失败","请先选择植物和图像")}function J(){const t=document.getElementById("save-annotation-modal");t&&(t.style.display="none")}function Q(){if(!D.currentPlant)return void at("操作失败","请先选择植物");const t=D.currentPlant;if("completed"===t.status)!function(t){const e=document.getElementById("uncomplete-plant-modal"),n=document.getElementById("uncomplete-plant-id");e?(n&&(n.textContent=t),e.style.display="flex",e.dataset.plantId=t):console.error("Uncomplete plant modal not found")}(t.id);else{if("skipped"===t.status)return void at("操作错误","无法完成已跳过的植株，请先撤销跳过");const n=`确定要标记植株 "${t.id}" 为已完成吗？`;if(!confirm(n))return;try{x.updatePlantStatus(t.id,"completed"),t.status="completed";const e=document.querySelector(`[data-plant-id="${t.id}"]`);if(e){const n=U(t);e.parentNode.replaceChild(n,e),window.PlantAnnotationTool?.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(t.id)},100)}z(),Ot(),rt("完成成功",`植株 ${t.id} 已标记为完成`);const n=x.getNextPendingPlant(t.id);n?confirm(`植株 ${t.id} 已完成！\n\n是否跳转到下一个未完成的植株 ${n.id}？`)&&(_(n),it(`已完成 ${t.id}，跳转到 ${n.id}`)):it("恭喜！所有植物都已完成标注")}catch(e){console.error("完成植物失败:",e),at("操作失败",e.message)}}}async function G(){if(x)try{await async function(){const t='\n    <div id="export-modal" class="modal" style="display: flex;">\n      <div class="modal-content" style="max-width: 600px; max-height: 90vh; overflow-y: auto;">\n        <h3>Export Annotation Data</h3>\n\n        \x3c!-- Statistics Area --\x3e\n        <div id="export-stats" style="background: #f9fafb; padding: 15px; border-radius: 8px; margin: 20px 0; font-size: 14px;">\n          <div style="font-weight: 600; margin-bottom: 10px;">Data Statistics:</div>\n          <div id="stats-content">Loading...</div>\n        </div>\n\n        \x3c!-- Preview Area --\x3e\n        <div style="margin: 20px 0;">\n          <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px;">\n            <h4 style="margin: 0;">Export Data Preview</h4>\n            <button id="refresh-preview-btn" class="btn btn-secondary" style="padding: 5px 15px; font-size: 14px;">Refresh Preview</button>\n          </div>\n          <div id="export-preview" style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; max-height: 400px; overflow-y: auto;">\n            Generating preview...\n          </div>\n        </div>\n\n        <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;">\n          <button id="export-cancel-btn" class="btn btn-secondary">Cancel</button>\n          <button id="export-confirm-btn" class="btn btn-primary">Confirm Export</button>\n        </div>\n      </div>\n    </div>\n  ',e=document.getElementById("export-modal");e&&e.remove(),document.body.insertAdjacentHTML("beforeend",t),await async function(){const t=document.getElementById("stats-content");if(t)try{const e=et(await tt()),n=`\n      <div>📊 Annotated Images: <strong>${e.annotatedImages}</strong></div>\n      <div>🎯 Total Keypoints: <strong>${e.totalKeypoints}</strong></div>\n      <div>📈 Average per Image: <strong>${e.averageKeypointsPerImage}</strong> keypoints</div>\n      <div style="margin-top: 10px; color: #059669;">✅ Pure annotation data, ready for data analysis</div>\n      <div style="color: #059669;">✅ Includes all annotated images and skipped plant information</div>\n    `;t.innerHTML=n}catch(e){console.error("Failed to get export statistics:",e),t.innerHTML='<div style="color: #dc2626;">Failed to load statistics, please check console</div>'}}(),await lt(),document.getElementById("export-cancel-btn").addEventListener("click",()=>{document.getElementById("export-modal").remove()}),document.getElementById("export-confirm-btn").addEventListener("click",async()=>{document.getElementById("export-modal").remove(),await async function(){try{const t=await tt(),e=et(t);if(0===e.annotatedImages)return void at("Export Failed","No annotation data available for export");const n={exportTime:(new Date).toISOString(),version:"3.0",format:"pure_annotations",description:"Pure annotation data, including image annotations and skipped plant information",stats:{annotatedImages:e.annotatedImages,totalKeypoints:e.totalKeypoints,averageKeypointsPerImage:e.averageKeypointsPerImage,skippedPlants:e.skippedPlants},annotations:t.annotations,skippedPlants:t.skippedPlants},o=new Blob([JSON.stringify(n,null,2)],{type:"application/json"}),i=URL.createObjectURL(o),a=document.createElement("a");a.href=i,a.download=`annotations_${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(i),it(`Exported annotation data for ${e.annotatedImages} images with ${e.totalKeypoints} keypoints`),console.log("Annotation data exported",n)}catch(t){console.error("Failed to export data:",t),at("Export Failed",t.message)}}()}),document.getElementById("refresh-preview-btn").addEventListener("click",async()=>{await lt()})}()}catch(t){console.error("导出数据失败:",t),at("导出失败",t.message)}else at("导出失败","请先加载数据集")}async function tt(){const t={annotations:{},skippedPlants:{}};if(!x||!x.annotationStorage)throw new Error("数据管理器未初始化");const e=x.annotationStorage;if(e.useFileSystem&&e.fileSystemManager){const o=e.fileSystemManager.getAnnotationsDirectory();if(!o)throw new Error("无法访问标注目录");for await(const[e,i]of o.entries())if("file"===i.kind&&e.endsWith(".json"))try{const n=await i.getFile(),o=await n.text(),a=JSON.parse(o);if(e.endsWith("_skip_info.json")){const n=e.replace("_skip_info.json","");t.skippedPlants[n]={plantId:a.plantId,skipReason:a.skipReason,skipDate:a.skipDate,status:a.status}}else{const n=e.replace(".json","");if(a.annotations&&a.annotations.length>0){const e=a.plantId||ct(n);t.annotations[n]={imageId:a.imageId||n,plantId:e,annotations:a.annotations,timestamp:a.timestamp,version:a.version}}}}catch(n){console.warn(`读取文件失败 (${e}):`,n)}}else{for(const[n,o]of e.annotations)"skipped"===o.status&&(t.skippedPlants[n]={plantId:n,skipReason:o.skipReason,skipDate:o.skipDate,status:o.status});for(const[n,o]of e.imageAnnotations)o.annotations&&o.annotations.length>0&&(t.annotations[n]={imageId:n,plantId:o.plantId,annotations:o.annotations,timestamp:o.timestamp,version:o.version})}return t}function et(t){const e=Object.keys(t.annotations).length,n=Object.keys(t.skippedPlants).length;let o=0;for(const i of Object.values(t.annotations))o+=i.annotations.length;return{annotatedImages:e,totalKeypoints:o,averageKeypointsPerImage:e>0?(o/e).toFixed(1):"0",skippedPlants:n}}function nt(t){const{plant:e}=t.detail,n=document.querySelector(`[data-plant-id="${e.id}"]`);if(n){const t=n.querySelector(".plant-status");t&&(t.textContent=O(e.status));const o=n.querySelector(".status-text");o&&(o.textContent=K(e.status));const i=n.querySelector(".image-count");i&&e.imageCount>0&&(i.textContent=`${e.imageCount} images`);const a=n.querySelector(".view-angles");if(a){const t=e.viewAngles.length>0?`view: ${e.viewAngles.join(", ")}`:"view: detecting...";a.textContent=t}const s=n.querySelector(".plant-view-info");if(s){let t=s.querySelector(".selected-view");e.selectedViewAngle?(t||(t=document.createElement("div"),t.className="selected-view",s.appendChild(t)),t.textContent=`Choosed: ${e.selectedViewAngle}`):t&&t.remove()}}z();const o=x.getProgress();it(`Progress: ${o.completed}/${o.total} (${o.completionRate}%)`)}function ot(t){if(t.ctrlKey||t.metaKey)switch(t.key){case"o":t.preventDefault(),L();break;case"s":t.preventDefault(),Z()}if(t.shiftKey&&"s"===t.key.toLowerCase())return t.preventDefault(),void qt();if(w&&"none"!==w.style.display)switch(t.key){case"Enter":t.preventDefault(),Q();break;case"ArrowLeft":t.preventDefault(),D.navigation.isNavigating?console.log("[Navigation] Previous image blocked - navigation in progress"):async function(){if(D.navigation.isNavigating)console.log("[Navigation] navigateToPreviousImage blocked - already navigating");else if(D.currentPlant&&D.currentImage)try{const t=await x.getPlantImages(D.currentPlant.id,D.currentPlant.selectedViewAngle);if(t.length<=1)return void console.log("只有一张图像，无法导航到上一张");const e=t.findIndex(t=>t.id===D.currentImage.id);if(-1===e)return void console.warn("未找到当前图像在列表中的位置");const n=0===e?t.length-1:e-1,o=t[n];console.log(`导航：从第${e+1}张切换到第${n+1}张`),await Y(o,!0)}catch(t){console.error("导航到上一张图像失败:",t),at("图像导航失败",t.message)}else console.log("没有当前植物或图像，无法导航")}();break;case"ArrowRight":t.preventDefault(),D.navigation.isNavigating?console.log("[Navigation] Next image blocked - navigation in progress"):ut()}}function it(t){const e=document.getElementById("progress-text");e&&(e.textContent=t)}function at(t,e){const n=document.getElementById("error-message");n&&b&&(n.textContent=e,b.style.display="flex"),console.error(`${t}: ${e}`)}function st(){b&&(b.style.display="none")}function rt(t,e){it(`✅ ${t}: ${e}`),console.log(`${t}: ${e}`)}async function lt(){const t=document.getElementById("export-preview");if(t)try{t.innerHTML="正在生成预览...";const e=await tt();if(0===Object.keys(e.annotations).length&&0===Object.keys(e.skippedPlants).length)return void(t.innerHTML='<div style="color: #6b7280; text-align: center; padding: 20px;">No annotation data available</div>');const n=function(t){let e="";const n=Object.keys(t.annotations).length;if(n>0){e+=`\n      <div style="margin-bottom: 20px;">\n        <div style="font-weight: 600; margin-bottom: 10px; color: #374151;">\n          📊 Annotation Data (${n} images)\n        </div>\n        <div style="max-height: 200px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px; padding: 10px;">\n    `;const o=Object.keys(t.annotations).slice(0,10);for(const n of o){const o=t.annotations[n];e+=`\n        <div style="margin-bottom: 8px; padding: 8px; background: #f9fafb; border-radius: 4px; font-size: 13px;">\n          <div style="font-weight: 500;">${n}</div>\n          <div style="color: #6b7280;">\n            Plant: ${o.plantId||ct(n)} |\n            Keypoints: ${o.annotations.length} |\n            Time: ${o.timestamp?new Date(o.timestamp).toLocaleString():"N/A"}\n          </div>\n        </div>\n      `}n>10&&(e+=`<div style="text-align: center; color: #6b7280; margin-top: 10px;">... ${n-10} more images</div>`),e+="</div></div>"}const o=Object.keys(t.skippedPlants).length;if(o>0){e+=`\n      <div style="margin-bottom: 20px;">\n        <div style="font-weight: 600; margin-bottom: 10px; color: #374151;">\n          ⏭️ Skipped Plants (${o})\n        </div>\n        <div style="max-height: 150px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px; padding: 10px;">\n    `;for(const[n,o]of Object.entries(t.skippedPlants))e+=`\n        <div style="margin-bottom: 8px; padding: 8px; background: #fef3c7; border-radius: 4px; font-size: 13px;">\n          <div style="font-weight: 500;">${n}</div>\n          <div style="color: #92400e;">\n            Reason: ${o.skipReason} |\n            Time: ${o.skipDate?new Date(o.skipDate).toLocaleString():"N/A"}\n          </div>\n        </div>\n      `;e+="</div></div>"}return""===e&&(e='<div style="color: #6b7280; text-align: center; padding: 20px;">No data available</div>'),e}(e);t.innerHTML=n,window.togglePlantPreview=function(t){const e=document.getElementById(`preview-${t}`),n=e.parentElement.querySelector(".preview-plant-header .preview-toggle");"none"===e.style.display?(e.style.display="block",n.textContent="▲",setTimeout(()=>dt(e),100)):(e.style.display="none",n.textContent="▼")},window.toggleViewPreview=function(t,e){const n=document.getElementById(`preview-${t}-${e}`),o=n.parentElement.querySelector(".preview-view-header .preview-toggle");"none"===n.style.display?(n.style.display="block",o.textContent="▼",setTimeout(()=>dt(n),100)):(n.style.display="none",o.textContent="▶")},window.showImageDetail=function(t){!function(t){const e=`\n    <div id="image-detail-modal" class="modal" style="display: flex; z-index: 2000;">\n      <div class="modal-content" style="max-width: 90vw; max-height: 90vh; padding: 20px;">\n        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">\n          <h3 style="margin: 0;">图像详情</h3>\n          <button onclick="closeImageDetailModal()" class="modal-close"></button>\n        </div>\n        <div style="text-align: center;">\n          <div style="font-size: 14px; color: #6b7280; margin-bottom: 10px; word-break: break-all;">\n            ${t}\n          </div>\n          <div style="max-width: 100%; max-height: 70vh; overflow: auto; border: 1px solid #e5e7eb; border-radius: 8px;">\n            <canvas id="detail-canvas" style="max-width: 100%; height: auto;"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,n=document.getElementById("image-detail-modal");n&&n.remove(),document.body.insertAdjacentHTML("beforeend",e),async function(t){const e=document.getElementById("detail-canvas");if(e)try{const n=document.querySelector(`[data-image-id="${t}"]`),o=n?JSON.parse(n.dataset.annotations):[],i=await pt(t);if(!i)throw new Error("无法获取图像数据");const a=new Image;a.crossOrigin="anonymous",await new Promise((t,e)=>{a.onload=()=>t(),a.onerror=()=>e(new Error("图像加载失败")),a.src=i.url});const s=800,r=600;let l=a.width,c=a.height;if(l>s||c>r){const t=Math.min(s/l,r/c);l*=t,c*=t}e.width=l,e.height=c;const d=e.getContext("2d");if(d.drawImage(a,0,0,l,c),o&&o.length>0){const t=l/a.width,e=c/a.height;o.forEach((n,o)=>{const i=n.x*t,a=n.y*e;d.fillStyle="#ef4444",d.strokeStyle="#ffffff",d.lineWidth=3,d.beginPath(),d.arc(i,a,8,0,2*Math.PI),d.fill(),d.stroke(),d.fillStyle="#ffffff",d.font="bold 14px Arial",d.textAlign="center",d.textBaseline="middle",d.fillText((o+1).toString(),i,a)})}}catch(n){console.error("渲染图像详情失败:",n),e.parentElement.innerHTML='<div style="color: #dc2626; padding: 20px;">图像加载失败</div>'}}(t),window.closeImageDetailModal=function(){const t=document.getElementById("image-detail-modal");t&&t.remove()}}(t)},setTimeout(()=>{document.querySelectorAll(".annotation-preview-canvas").forEach(t=>{gt(t)&&ht(t)})},500)}catch(e){console.error("Failed to generate export preview:",e),t.innerHTML='<div style="color: #dc2626;">Failed to generate preview, please check console</div>'}}function ct(t){if(t.includes("_")){const e=t.split("_");if(e.length>0)return e[0]}if(t.includes("-")){const e=t.split("-");if(e.length>=2)return`${e[0]}-${e[1]}`}return t.split(".")[0].split("_")[0]}function dt(t){t.querySelectorAll(".annotation-preview-canvas").forEach(t=>{gt(t)&&ht(t)})}function gt(t){const e=t.getBoundingClientRect();return e.width>0&&e.height>0}async function ht(t){try{const e=t.dataset.imageId,n=JSON.parse(t.dataset.annotations),o=t.parentElement.querySelector(".preview-loading");if("true"===t.dataset.rendered)return;o&&(o.style.display="block",o.textContent="加载图像...");const i=await pt(e);if(!i)throw new Error("无法获取图像数据");const a=new Image;a.crossOrigin="anonymous",await new Promise((t,e)=>{a.onload=()=>t(),a.onerror=()=>e(new Error("图像加载失败")),a.src=i.url});const s=t.parentElement.getBoundingClientRect(),r=s.width-2,l=s.height-2;t.width=r*window.devicePixelRatio,t.height=l*window.devicePixelRatio,t.style.width=r+"px",t.style.height=l+"px";const c=t.getContext("2d");c.scale(window.devicePixelRatio,window.devicePixelRatio);const d=a.width/a.height;let g,h,p,u;if(d>r/l?(g=r,h=r/d,p=0,u=(l-h)/2):(h=l,g=l*d,p=(r-g)/2,u=0),c.clearRect(0,0,r,l),c.drawImage(a,p,u,g,h),n&&n.length>0){const t=g/a.width,e=h/a.height;n.forEach((n,o)=>{const i=n.x*t+p,a=n.y*e+u;c.fillStyle="#ef4444",c.strokeStyle="#ffffff",c.lineWidth=2,c.beginPath(),c.arc(i,a,6,0,2*Math.PI),c.fill(),c.stroke(),c.fillStyle="#ffffff",c.font="bold 10px Arial",c.textAlign="center",c.textBaseline="middle",c.fillText((o+1).toString(),i,a)})}o&&(o.style.display="none"),t.dataset.rendered="true"}catch(e){console.error("渲染标注预览失败:",e);const n=t.parentElement.querySelector(".preview-loading");n&&(n.textContent="加载失败",n.style.color="#dc2626")}}async function pt(t){try{const e=t.split("_");if(e.length<2)throw new Error("无效的图像ID格式");const n=e[0],o=e[1];if(!x)throw new Error("PlantDataManager未初始化");const i=(await x.getPlantImages(n,o)).find(e=>e.id===t);if(!i)throw new Error(`未找到图像: ${t}`);return{url:await x.fileSystemManager.createImageURL(i),data:i}}catch(e){return console.error("获取图像数据失败:",e),null}}async function ut(t=!1){if(D.navigation.isNavigating)return console.log("[Navigation] navigateToNextImage blocked - already navigating"),!1;if(!D.currentPlant||!D.currentImage)return console.log("没有当前植物或图像，无法导航"),!1;try{const e=await x.getPlantImages(D.currentPlant.id,D.currentPlant.selectedViewAngle);if(e.length<=1)return console.log("只有一张图像，无法导航到下一张"),!1;const n=e.findIndex(t=>t.id===D.currentImage.id);if(-1===n)return console.warn("未找到当前图像在列表中的位置"),!1;if(n===e.length-1&&t)return console.log("自动化模式：已经是最后一张图片，不循环"),!1;const o=n===e.length-1?0:n+1,i=e[o];return console.log(`导航：从第${n+1}张切换到第${o+1}张`),await Y(i,!0),!0}catch(e){return console.error("导航到下一张图像失败:",e),at("图像导航失败",e.message),!1}}function mt(){if(!v)return void at("功能不可用","标注工具未初始化");if(!v.keypoints||0===v.keypoints.length)return void at("传统标注升级","当前图像没有标注点，请先添加标注点");const t=window.PlantAnnotationTool?.annotationTool?.customAnnotationManager?.getCurrentCustomType?.();if(t&&t.metadata&&!1===t.metadata.isDirectional)return void at("Auto Direction Disabled","当前选择的类型未启用方向功能");const e=document.getElementById("auto-direction-mode-selector");if(e&&e.value?(console.log(`[调试] 从UI选择器读取模式: ${e.value}`),v.autoDirectionMode=e.value):(console.log("[调试] UI选择器无值，使用默认longitudinal模式"),v.autoDirectionMode="longitudinal",e&&(e.value="longitudinal")),!v.startAutoDirectionMode())return;const n=document.getElementById("auto-direction-btn");if(n){console.log("[调试] 更新按钮状态为自动模式"),n.removeEventListener("click",mt),n.textContent="Exit Auto Mode",n.classList.add("active");const t=()=>{console.log("[调试] 自动化按钮被点击，暂停模式"),v.pauseAutoDirectionMode()};n.addEventListener("click",t),n._pauseHandler=t}it("传统标注升级模式已启动。移动鼠标选择方向，左键确认，右键暂停。")}function ft(){const t=document.getElementById("skip-plant-modal");t&&(t.style.display="none",t.dataset.plantId="")}async function yt(){const t=document.getElementById("skip-plant-modal"),e=t?.dataset.plantId,n=document.getElementById("skip-reason"),o=n?.value.trim();if(e){if(!o)return at("输入错误","请输入跳过原因"),void n?.focus();try{await x.skipPlant(e,o);const t=D.plants.find(t=>t.id===e);if(t){t.status="skipped",t.skipReason=o,t.skipDate=(new Date).toISOString();const n=document.querySelector(`[data-plant-id="${e}"]`);if(n){const o=U(t);n.parentNode.replaceChild(o,n),window.PlantAnnotationTool?.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(e)},100)}z(),D.currentPlant?.id===e&&(console.log("当前植株被跳过，初始化空工作区"),j())}ft(),rt("跳过成功",`植株 ${e} 已标记为跳过`)}catch(i){console.error("跳过植株失败:",i),at("跳过失败",i.message)}}else at("错误","未找到要跳过的植株")}function wt(){const t=document.getElementById("status-filter"),e=document.getElementById("plant-search");t&&x&&xt(t.value,e?.value.trim()||"")}function bt(){const t=document.getElementById("status-filter"),e=document.getElementById("plant-search");if(!e||!x)return;const n=e.value.trim();xt(t?.value||"all",n)}function xt(t,e){if(!x)return;let n=x.filterPlantsByStatus(t);if(e){const t=e.toLowerCase();n=n.filter(e=>e.id.toLowerCase().includes(t)||e.name.toLowerCase().includes(t))}R(n),console.log(`过滤结果: 状态=${t}, 搜索="${e}", 结果=${n.length}个植株`)}function vt(){const t=document.getElementById("unskip-plant-modal");t&&(t.style.display="none",t.dataset.plantId="")}async function It(){const t=document.getElementById("unskip-plant-modal"),e=t?.dataset.plantId;if(e)try{await x.unskipPlant(e),console.log(`[Debug] 后端unskip操作完成，植物ID: ${e}`);const t=D.plants.find(t=>t.id===e);if(t){console.log(`[Debug] 更新前植物状态: ${t.status}, skipReason: ${t.skipReason}`);const n=await x.getPlantAnnotations(e);t.status=n&&n.length>0?"in-progress":"pending",delete t.skipReason,delete t.skipDate,console.log(`[Debug] 更新后植物状态: ${t.status}, skipReason: ${t.skipReason}`);const o=document.querySelector(`[data-plant-id="${e}"]`);if(o){const n=U(t);o.parentNode.replaceChild(n,o),console.log(`[Debug] 植物列表项已重新渲染: ${e}`),window.PlantAnnotationTool?.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(e)},100)}z(),Ot()}vt(),rt("撤销成功",`植株 ${e} 已恢复到正常状态`)}catch(n){console.error("撤销跳过植株失败:",n),at("撤销失败",n.message)}else at("错误","未找到要撤销跳过的植株")}function St(){const t=document.getElementById("uncomplete-plant-modal");t&&(t.style.display="none",t.dataset.plantId="")}async function kt(){const t=document.getElementById("uncomplete-plant-modal"),e=t?.dataset.plantId;if(e)try{await x.uncompletePlant(e);const t=D.plants.find(t=>t.id===e);if(t){const n=await x.getPlantAnnotations(e);t.status=n&&n.length>0?"in-progress":"pending";const o=document.querySelector(`[data-plant-id="${e}"]`);if(o){const n=U(t);o.parentNode.replaceChild(n,o),window.PlantAnnotationTool?.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(e)},100)}z(),Ot()}St(),rt("撤销成功",`植株 ${e} 已恢复到进行中状态`)}catch(n){console.error("撤销完成植株失败:",n),at("撤销失败",n.message)}else at("错误","未找到要撤销完成的植株")}function At(){const t=document.getElementById("zoom-lock-checkbox"),e=document.getElementById("zoom-lock-value");if(t&&e){const n=t.checked;if(e.disabled=!n,console.log("缩放锁定: "+(n?"开启":"关闭")),n){const t=parseFloat(e.value);console.log(`锁定倍数设置为: ${t}x`)}}}function Tt(){const t=document.getElementById("zoom-lock-value");if(t){const e=parseFloat(t.value);console.log(`锁定倍数更新为: ${e}x`)}}function Ct(){const t=document.getElementById("auto-move-checkbox");if(t){const e=t.checked;console.log("自动切换到预期位置: "+(e?"开启":"关闭")),v&&"function"==typeof v.setAutoMoveToExpectedPosition&&v.setAutoMoveToExpectedPosition(e)}}function Pt(){const t=document.getElementById("real-time-change-checkbox");if(t){const e=t.checked;console.log("🔄 实时变更同步: "+(e?"开启":"关闭")),T&&"function"==typeof T.setEnabled&&T.setEnabled(e),it("实时变更同步已"+(e?"开启":"关闭"))}}function Mt(){const t=document.getElementById("auto-direction-mode-selector");if(t){const e=t.value;console.log(`Auto direction mode changed to: ${e}`),v&&"function"==typeof v.setAutoDirectionMode&&v.setAutoDirectionMode(e),it("Auto direction mode set to: "+("cross-sectional"===e?"Vertical Mode (Order by Order)":"Horizontal Mode (Image by Image)"));const n=document.getElementById("auto-direction-btn");n&&(n.classList.remove("longitudinal-mode","cross-sectional-mode"),n.classList.add(`${e}-mode`))}}function $t(t,e,n){const o=document.getElementById("progress-fill"),i=document.getElementById("progress-text"),a=document.getElementById("loading-subtitle"),s=document.getElementById("loading-details");o&&(o.style.width=`${t}%`),i&&(i.textContent=`${t}%`),a&&(a.textContent=e),s&&(s.textContent=n)}function Dt(){const t=document.getElementById("fullscreen-loading");t&&(t.style.display="none")}async function Et(){console.log("开始自动连接数据集 - 完整批量加载模式..."),C&&(C.startMonitoring(),C.addCheckpoint("开始数据集连接"));try{let n;$t(5,"Connecting to backend...","Establishing connection to the dataset service");try{n=await x.fileSystemManager.getDatasetInfo(),C?.addCheckpoint("后端连接成功")}catch(t){throw C?.recordError(t,"后端连接失败"),new Nt("无法连接到后端服务","请确保后端服务已启动。运行 ./start-backend.sh 启动服务器",{originalError:t,serverUrl:"http://localhost:3003",suggestion:"尝试运行: ./start-backend.sh"})}if(!n){const t=new Error("后端服务响应异常：数据集信息为空");throw C?.recordError(t,"数据集信息验证"),t}console.log("连接的数据集:",n.datasetPath),$t(15,"Validating dataset structure...","Checking plant directories and structure"),await B(),C?.addCheckpoint("目录结构验证完成"),$t(25,"Loading plant data...","Scanning plant directories and loading basic info");const o=await x.loadDataset();C?.recordDataLoaded("plants",o.length),D.currentDatasetPath=n.datasetPath,D.plants=o,P={path:n.datasetPath,name:"Brassica napus dataset",plantCount:o.length},console.log(`植物数据加载完成: ${o.length} 个植物`),$t(40,"Loading all data types...","Bulk loading annotations, notes, and statistics"),C?.addCheckpoint("开始并行数据加载");const i=[],a={annotations:null,notes:null,annotationsLoaded:!1,notesLoaded:!1,errors:[]};window.PlantAnnotationTool?.annotationManager&&i.push(window.PlantAnnotationTool.annotationManager.getAllAnnotationsInBulk().then(t=>{t?(a.annotations=t,a.annotationsLoaded=!0,C?.recordNetworkRequest("annotations",!0),C?.recordDataLoaded("annotations",Object.keys(t.plantAnnotations||{}).length+Object.keys(t.imageAnnotations||{}).length),console.log("[批量加载] 标注数据加载成功"),$t(60,"Annotations loaded successfully...","Processing bulk annotation data")):(console.log("[批量加载] 标注批量API不可用，将使用懒加载模式"),C?.recordFallback("标注批量API不可用"))}).catch(t=>{console.warn("[批量加载] 标注数据加载失败:",t.message),C?.recordError(t,"标注数据批量加载"),a.errors.push(`标注加载失败: ${t.message}`)})),window.PlantAnnotationTool?.noteManager&&i.push(window.PlantAnnotationTool.noteManager.getAllNotesInBulk().then(t=>{t?(a.notes=t,a.notesLoaded=!0,C?.recordNetworkRequest("notes",!0),C?.recordDataLoaded("notes",Object.keys(t.plantNotes||{}).length+Object.keys(t.imageNotes||{}).length),console.log("[批量加载] 笔记数据加载成功"),$t(80,"Notes loaded successfully...","Processing bulk note data")):(console.log("[批量加载] 笔记批量API不可用，将使用懒加载模式"),C?.recordFallback("笔记批量API不可用"))}).catch(t=>{console.warn("[批量加载] 笔记数据加载失败:",t.message),C?.recordError(t,"笔记数据批量加载"),a.errors.push(`笔记加载失败: ${t.message}`)})),await Promise.allSettled(i),C?.addCheckpoint("并行数据加载完成"),$t(90,"Processing loaded data...","Updating caches and preparing UI components");const s=[];if(a.annotationsLoaded){const t=(a.annotations.statistics||{}).totalAnnotations||0;s.push(`${t} annotations`)}if(a.notesLoaded){const t=(a.notes.statistics||{}).totalNotes||0;s.push(`${t} notes`)}const r=s.length>0?`All data loaded: ${o.length} plants, ${s.join(", ")}`:`Dataset loaded: ${o.length} plants (bulk APIs not available)`;if($t(95,"Finalizing initialization...",r),a.notesLoaded&&window.PlantAnnotationTool?.noteUI)try{await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadgesFromBulk(a.notes),C?.addCheckpoint("笔记徽章预填充完成"),console.log("[批量加载] 笔记徽章预填充完成")}catch(e){console.warn("[批量加载] 笔记徽章预填充失败:",e.message),C?.recordError(e,"笔记徽章预填充")}$t(100,"Initialization complete!","All systems ready - entering main application"),console.log(`[完整加载] 数据加载完成 - 标注: ${a.annotationsLoaded}, 笔记: ${a.notesLoaded}`),a.errors.length>0&&console.warn("[完整加载] 部分数据加载失败:",a.errors);let l=null;C&&(l=C.endMonitoring(),console.log("🚀 [性能报告] 批量加载性能:",l),window.PlantAnnotationTool.lastPerformanceReport=l),setTimeout(()=>{if(Dt(),R(o),z(),it(r),l&&l.performanceGrade){const t=`性能评级: ${l.performanceGrade} (${l.summary.totalLoadingTime})`;console.log(`[完整加载] ${t}`)}console.log(`[完整加载] 应用启动完成: ${o.length} 个植物, 标注已加载: ${a.annotationsLoaded}, 笔记已加载: ${a.notesLoaded}`)},1500)}catch(e){throw console.error("自动连接数据集失败:",e),C?.recordError(e,"数据集连接失败"),C?.endMonitoring(),e instanceof Nt?(Dt(),function(t){const e=`${t.title}\n\n${t.message}`,n=t.details.suggestion?`\n\n建议解决方案：\n${t.details.suggestion}`:"";at("后端服务连接失败",e+n+"\n\n服务器地址: "+(t.details.serverUrl||"http://localhost:3003")),function(){const t=document.getElementById("error-modal");if(!t)return;if(t.querySelector(".retry-button"))return;const e=document.createElement("button");e.textContent="重试连接",e.className="retry-button",e.style.cssText="\n    margin-left: 10px;\n    padding: 8px 16px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  ",e.onclick=async()=>{t.style.display="none",showFullscreenLoading();try{await Et()}catch(e){console.error("重试失败:",e)}},(t.querySelector(".error-buttons")||t).appendChild(e)}()}(e)):(Dt(),at("数据集连接失败",`${e.message}\n\n请检查网络连接和后端服务状态`)),e}}window.onCustomAnnotationSystemReady=E,window.loadImageNoteCount=F,document.addEventListener("DOMContentLoaded",()=>{console.log("DOM加载完成，开始初始化应用..."),N()}),window.toggleBranchPointPreview=function(t=null){I&&I.toggleVisibility(t)},window.resetAutoDirectionButton=function(){const t=document.getElementById("auto-direction-btn");t&&(console.log("[调试] 重置自动方向按钮状态"),t._pauseHandler&&(t.removeEventListener("click",t._pauseHandler),t._pauseHandler=null),t.textContent="Auto Direction",t.classList.remove("active"),t.addEventListener("click",mt),console.log("[调试] 自动方向按钮已重置为初始状态"))},window.handleAutoDirectionSelection=mt,window.navigateToNextImage=ut,window.showSkipPlantModal=function(t,e){e&&e.stopPropagation();const n=D.plants.find(e=>e.id===t);if(!n)return void at("错误","未找到指定的植株");const o=document.getElementById("skip-plant-name");o&&(o.textContent=n.id);const i=document.getElementById("skip-reason");i&&(i.value="");const a=document.getElementById("skip-plant-modal");a&&(a.style.display="flex",a.dataset.plantId=t,setTimeout(()=>{i&&i.focus()},100))},window.handleUnskipPlant=async function(t,e){e&&e.stopPropagation();const n=D.plants.find(e=>e.id===t);n?"skipped"===n.status?function(t,e){const n=document.getElementById("unskip-plant-modal"),o=document.getElementById("unskip-plant-id"),i=document.getElementById("unskip-skip-reason"),a=document.getElementById("unskip-new-status");n?(o&&(o.textContent=t),i&&(i.textContent=e||"无"),a&&(a.textContent="Pending (will be determined by annotations)"),n.style.display="flex",n.dataset.plantId=t):console.error("Unskip plant modal not found")}(t,n.skipReason):at("操作错误","植株当前状态不是跳过状态"):at("错误","未找到指定的植株")},window.handleImageSelect=Y;class Nt extends Error{constructor(t,e,n={}){super(e),this.name="ConnectionError",this.title=t,this.details=n}}function Lt(t,e){const n=document.getElementById("delete-plant-annotations-modal").querySelector(`input[name="deletion-scope"][value="${t}"]`);n&&(n.disabled=!0,n.parentElement.style.opacity="0.5",n.parentElement.title=e)}function Bt(){const t=document.querySelector('input[name="deletion-scope"]:checked'),e=document.getElementById("delete-confirmation-checkbox"),n=document.getElementById("delete-confirm-btn");if(t){const o=t.value,i=e.parentElement.querySelector("span");if(i)switch(o){case"plant-all":i.textContent="I understand that this action is irreversible and will delete all annotation data for this plant";break;case"current-and-future":i.textContent="I understand that this action is irreversible and will delete current and future annotations";break;case"current-only":i.textContent="I understand that this action is irreversible and will delete the current image annotations"}if(n)switch(o){case"plant-all":n.textContent="🗑️ Delete All Plant Annotations";break;case"current-and-future":n.textContent="⚡ Delete Current + Future";break;case"current-only":n.textContent="🗑️ Delete Current Image"}}}async function zt(){D.currentPlant?(console.log(`[Delete Plant] 开始删除植物 ${D.currentPlant.id} 的标注`),await async function(t){const e=document.getElementById("delete-plant-annotations-modal"),n=document.getElementById("delete-plant-id"),o=document.getElementById("stats-loading"),i=document.getElementById("stats-content"),a=document.getElementById("delete-confirmation-checkbox"),s=document.getElementById("delete-confirm-btn");if(e){n.textContent=t,o.style.display="block",i.style.display="none",a.checked=!1,s.disabled=!0,async function(t){const e=document.getElementById("delete-plant-annotations-modal"),n=document.getElementById("future-images-info"),o=document.getElementById("future-images-count"),i=e.querySelector('input[name="deletion-scope"][value="plant-all"]');if(i&&(i.checked=!0),n&&(n.style.display="none"),D.currentImage&&D.currentPlant&&D.currentPlant.id===t)try{const t=await _t(),i=t?t.length:0;if(i>0){n&&o&&(o.textContent=i,n.style.display="block");const t=e.querySelector('input[name="deletion-scope"][value="current-and-future"]');t&&(t.disabled=!1,t.parentElement.style.opacity="1");const a=e.querySelector('input[name="deletion-scope"][value="current-only"]');a&&(a.disabled=!1,a.parentElement.style.opacity="1")}else Lt("current-and-future","No future images available"),Lt("current-only","Current image only (basic clear)")}catch(a){console.warn("Failed to check future images for deletion scope:",a),Lt("current-and-future","Cannot determine future images"),Lt("current-only","Current image context unavailable")}else Lt("current-and-future","No current image selected"),Lt("current-only","No current image selected");e.querySelectorAll('input[name="deletion-scope"]').forEach(t=>{t.addEventListener("change",Bt)})}(t),e.style.display="flex";try{console.log(`[Delete Plant] 加载植物 ${t} 的统计信息`);const n=await fetch(`http://localhost:3003/api/annotations/plant/${t}/stats`),a=await n.json();if(!a.success)throw new Error(a.error||"获取统计信息失败");document.getElementById("annotation-files-count").textContent=a.statistics.annotationFiles,document.getElementById("annotation-points-count").textContent=a.statistics.totalAnnotationPoints,document.getElementById("related-files-count").textContent=a.statistics.relatedFiles,document.getElementById("total-files-count").textContent=a.statistics.totalFiles,o.style.display="none",i.style.display="block",console.log(`[Delete Plant] 统计加载完成: ${a.statistics.totalFiles} 个文件, ${a.statistics.totalAnnotationPoints} 个标注点`),e.dataset.plantStats=JSON.stringify(a.statistics)}catch(r){console.error("[Delete Plant] 加载统计信息失败:",r),o.innerHTML=`<span style="color: #dc2626;">❌ 加载统计信息失败: ${r.message}</span>`}}}(D.currentPlant.id)):at("删除失败","请先选择植物")}function Rt(){const t=document.getElementById("delete-plant-annotations-modal");if(t){t.style.display="none";const e=document.getElementById("delete-confirmation-checkbox"),n=document.getElementById("delete-confirm-btn");e&&(e.checked=!1),n&&(n.disabled=!0,n.textContent="🗑️ Delete All Annotations")}}function Ut(){const t=document.getElementById("delete-confirmation-checkbox"),e=document.getElementById("delete-confirm-btn");t&&e&&(e.disabled=!t.checked)}async function Ft(){if(!D.currentPlant)return void at("删除失败","未选择植物");const t=D.currentPlant.id,e=document.getElementById("delete-plant-annotations-modal"),n=document.getElementById("delete-confirm-btn");if(!e||!n)return;const o=e.querySelector('input[name="deletion-scope"]:checked'),i=o?o.value:"plant-all";try{const e=n.textContent;let o;switch(n.textContent="⏳ Deleting...",n.disabled=!0,console.log(`[Delete Plant] 开始删除植物 ${t} 的标注，范围: ${i}`),i){case"plant-all":o=await async function(t){const e=await fetch(`http://localhost:3003/api/annotations/plant/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"}});return await e.json()}(t);break;case"current-and-future":o=await async function(){if(!D.currentImage||!D.currentPlant)throw new Error("No current image context for spreading deletion");try{const e=await _t(),n=[D.currentImage,...e];let o=0,i=[];for(const a of n)try{a.id===D.currentImage.id&&v&&(console.log(`[Spreading Delete] Clearing current image workspace: ${a.id}`),v.clearKeypoints(),setTimeout(W,100)),await Vt(a.id),o++,it(`已清除 ${o}/${n.length} 个图像...`)}catch(t){console.error(`Failed to clear image ${a.id}:`,t),i.push(`${a.id}: ${t.message}`)}if(window.refreshThumbnailAnnotationStatus)for(const t of n)await window.refreshThumbnailAnnotationStatus(t.id);return{success:!0,statistics:{totalFilesDeleted:o,totalFilesProcessed:n.length,annotationFilesDeleted:o,relatedFilesDeleted:0,backupPath:"N/A (in-memory operation)",errors:i}}}catch(t){return console.error("Spreading deletion failed:",t),{success:!1,error:t.message}}}();break;case"current-only":o=await async function(){if(!D.currentImage)throw new Error("No current image selected");try{return await Vt(D.currentImage.id),window.refreshThumbnailAnnotationStatus&&await window.refreshThumbnailAnnotationStatus(D.currentImage.id),v&&v.clearKeypoints(),{success:!0,statistics:{totalFilesDeleted:1,totalFilesProcessed:1,annotationFilesDeleted:1,relatedFilesDeleted:0,backupPath:"N/A (single image operation)"}}}catch(t){return console.error("Current image deletion failed:",t),{success:!1,error:t.message}}}();break;default:throw new Error(`Unknown deletion scope: ${i}`)}if(!o.success)throw new Error(o.error||"删除操作失败");{console.log("[Delete Plant] 删除成功:",o.statistics),n.textContent=e,Rt();const a=function(t,e,n){let o=`植物 ${t} 的标注数据删除完成\n\n`;switch(e){case"plant-all":o+=`删除文件: ${n.totalFilesDeleted}/${n.totalFilesProcessed}\n`,o+=`标注文件: ${n.annotationFilesDeleted}\n`,o+=`相关文件: ${n.relatedFilesDeleted}\n`,n.backupPath&&(o+=`备份已创建: ${n.backupPath}`);break;case"current-and-future":o+="传播删除完成\n",o+=`处理图像: ${n.totalFilesDeleted}/${n.totalFilesProcessed}\n`,n.errors&&n.errors.length>0&&(o+=`错误: ${n.errors.length} 个图像删除失败`);break;case"current-only":o+="当前图像标注已清除\n",o+=`图像ID: ${D.currentImage?.id||"unknown"}`}return o}(t,i,o.statistics);rt("删除成功",a),it(`植物 ${t} 的标注数据已删除 (${i})`),await async function(t,e){switch(e){case"plant-all":if(D.currentPlant&&D.currentPlant.id===t){j();const e=D.plants.find(e=>e.id===t);if(e){e.status="pending";const n=document.querySelector(`[data-plant-id="${t}"]`);if(n){const t=U(e);n.parentNode.replaceChild(t,n)}}}break;case"current-and-future":case"current-only":await W()}z(),window.PlantAnnotationTool?.noteUI&&await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges()}(t,i)}}catch(a){console.error(`[Delete Plant] 删除植物 ${t} 失败:`,a),n.textContent=originalText,n.disabled=!1,at("删除失败",`删除植物 ${t} 的标注数据时出错: ${a.message}`)}}function Ot(){const t=document.getElementById("complete-plant-btn");if(t)if(D.currentPlant){const e=D.currentPlant;"completed"===e.status?(t.textContent="Uncomplete Plant",t.className="btn btn-warning",t.title=`撤销完成植株 ${e.id}`,t.disabled=!1):"skipped"===e.status?(t.textContent="Complete Plant",t.className="btn btn-success",t.title="无法完成已跳过的植株，请先撤销跳过",t.disabled=!0):(t.textContent="Complete Plant",t.className="btn btn-success",t.title=`标记植株 ${e.id} 为完成`,t.disabled=!1)}else t.textContent="Complete Plant",t.className="btn btn-success",t.title="请先选择植物",t.disabled=!0}function Kt(){const t=document.getElementById("delete-plant-annotations-btn");t&&(D.currentPlant?(t.disabled=!1,t.title=`删除植物 ${D.currentPlant.id} 的所有标注数据`):(t.disabled=!0,t.title="请先选择植物"))}async function jt(){if(!v)return void at("清除失败","标注工具未初始化");const t=v.getAnnotationData();if(0===t.keypoints.length)return void at("清除失败","当前图像没有标注点");const e=`确定要清除当前图像的 ${t.keypoints.length} 个标注点吗？`;confirm(e)&&(v.clearKeypoints(),it("已清除当前图像的标注"),window.refreshThumbnailAnnotationStatus&&D.currentImage&&await window.refreshThumbnailAnnotationStatus(D.currentImage.id),W())}async function qt(){if(!v)return void at("SIFT匹配失败","标注工具未初始化");if(!D.currentPlant)return void at("SIFT匹配失败","请先选择植物");const t=document.getElementById("sift-match-btn");t&&(t.disabled=!0,t.textContent="⏳");try{console.log("[SIFT] 开始执行SIFT匹配"),await v.performSiftMatching()}catch(e){console.error("[SIFT] 匹配失败:",e),at("SIFT匹配失败",e.message||"执行SIFT匹配时发生错误")}finally{t&&(t.disabled=!1,t.textContent="🔍")}}async function _t(){if(!D.currentImage||!D.currentPlant||!x)return[];try{const t=await x.getPlantImages(D.currentPlant.id,D.currentPlant.selectedViewAngle);if(!t||0===t.length)return[];const e=t.findIndex(t=>t.id===D.currentImage.id);if(-1===e)return[];const n=t[e],o=new Date(n.dateTime),i=t.filter(t=>new Date(t.dateTime)>o);return i.sort((t,e)=>new Date(t.dateTime)-new Date(e.dateTime)),i}catch(t){return console.error("Failed to get future images:",t),[]}}async function Vt(t){if(!x)throw new Error("PlantDataManager not available");try{await x.saveImageAnnotations(t,[]),console.log(`Cleared annotations for image: ${t}`)}catch(e){throw console.error(`Failed to clear annotations for image ${t}:`,e),e}}window.updateDeletePlantAnnotationsButtonState=Kt}}});
//# sourceMappingURL=index-legacy-DPzU8gji.js.map
