function Cn(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))n(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const s of i.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&n(s)}).observe(document,{childList:!0,subtree:!0});function e(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(o){if(o.ep)return;o.ep=!0;const i=e(o);fetch(o.href,i)}})();class re{constructor(){this.baseUrl="http://localhost:3003/api",this.datasetPath="/Users/tshoiasc/Brassica napus dataset/dataset",this.isInitialized=!1,this.maxRetries=3,this.retryDelay=1e3,this.connectionTimeout=5e3,this.lastConnectionCheck=0,this.connectionCheckInterval=3e4}async initialize(){return this.withRetry(async()=>{const t=new AbortController,e=setTimeout(()=>t.abort(),this.connectionTimeout);try{const n=await fetch("".concat(this.baseUrl,"/health"),{signal:t.signal,headers:{"Cache-Control":"no-cache"}});if(clearTimeout(e),!n.ok)throw new Error("HTTP ".concat(n.status,": ").concat(n.statusText));if((await n.json()).success)return this.isInitialized=!0,this.lastConnectionCheck=Date.now(),console.log("HttpFileSystemManager 初始化成功"),!0;throw new Error("Backend server responded but reported failure")}catch(n){throw clearTimeout(e),n.name==="AbortError"?new Error("连接超时 (".concat(this.connectionTimeout,"ms)")):n}},"初始化管理器")}static isSupported(){return!0}async withRetry(t,e="操作",n=this.maxRetries){let o;for(let i=1;i<=n;i++)try{return i>1&&(console.log("".concat(e," 重试第 ").concat(i-1," 次...")),await this.delay(this.retryDelay*i)),await t()}catch(s){if(o=s,this.isConnectionError(s)&&i<n){console.warn("".concat(e," 失败 (尝试 ").concat(i,"/").concat(n,"):"),s.message);continue}throw console.error("".concat(e," 最终失败:"),s),s}throw o}isConnectionError(t){return t.message.includes("Failed to fetch")||t.message.includes("ERR_CONNECTION_REFUSED")||t.message.includes("网络错误")||t.message.includes("连接超时")||t.name==="TypeError"&&t.message.includes("fetch")}delay(t){return new Promise(e=>setTimeout(e,t))}async checkConnection(){const t=Date.now();if(t-this.lastConnectionCheck<this.connectionCheckInterval)return this.isInitialized;try{const e=new AbortController;setTimeout(()=>e.abort(),2e3);const o=(await fetch("".concat(this.baseUrl,"/health"),{signal:e.signal,headers:{"Cache-Control":"no-cache"}})).ok;return this.isInitialized=o,this.lastConnectionCheck=t,o}catch(e){return this.isInitialized=!1,this.lastConnectionCheck=t,!1}}async getDatasetInfo(){return await this.ensureConnection(),this.withRetry(async()=>{const t=await fetch("".concat(this.baseUrl,"/dataset-info"));if(!t.ok)throw new Error("HTTP ".concat(t.status,": ").concat(t.statusText));const e=await t.json();if(e.success)return e.data;throw new Error(e.error||"获取数据集信息失败")},"获取数据集信息")}async ensureConnection(){if(!await this.checkConnection())throw new Error("后端服务连接不可用，请确保服务器正在运行在 http://localhost:3003")}async traversePlantDirectories(){return await this.ensureConnection(),this.withRetry(async()=>{const t=await fetch("".concat(this.baseUrl,"/plant-directories"));if(!t.ok)throw new Error("HTTP ".concat(t.status,": ").concat(t.statusText));const e=await t.json();if(e.success)return console.log("找到 ".concat(e.data.length," 个有效植物文件夹")),e.data;throw new Error(e.error||"遍历植物文件夹失败")},"遍历植物文件夹")}async readPlantImages(t){if(!t)throw new Error("植物ID不能为空");return await this.ensureConnection(),this.withRetry(async()=>{const e=await fetch("".concat(this.baseUrl,"/plant-images/").concat(encodeURIComponent(t)));if(!e.ok)throw new Error("HTTP ".concat(e.status,": ").concat(e.statusText));const n=await e.json();if(n.success){const o=n.data,i=Object.values(o).reduce((s,a)=>s+a.length,0);return console.log("植物 ".concat(t," 总共 ").concat(i," 张图像")),o}throw new Error(n.error||"读取植物图像失败")},"读取植物 ".concat(t," 图像"))}getImageUrl(t,e,n){return"".concat(this.baseUrl,"/image/").concat(t,"/").concat(e,"/").concat(n)}async createImageURL(t){try{console.log("创建图像URL，imageData:",t);const e=t.id.split("_");if(console.log("图像ID分割结果:",e),e.length>=3){const n=e[0],o=e[1],i=e.slice(2).join("_"),s=this.getImageUrl(n,o,i);return console.log("生成的图像URL:",s),s}throw new Error("Invalid image data format. ID: ".concat(t.id,", expected format: plantId_viewAngle_imageName"))}catch(e){throw console.error("创建图像URL失败 ".concat(t.name,":"),e),console.error("imageData:",t),e}}async saveAnnotationFile(t,e){if(!t)throw new Error("图像ID不能为空");if(!e)throw new Error("标注数据不能为空");return await this.ensureConnection(),this.withRetry(async()=>{const n=await fetch("".concat(this.baseUrl,"/annotation/").concat(encodeURIComponent(t)),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({annotationData:e})});if(!n.ok)throw new Error("HTTP ".concat(n.status,": ").concat(n.statusText));const o=await n.json();if(o.success)return console.log("保存标注文件: ".concat(t)),!0;throw new Error(o.error||"保存标注文件失败")},"保存标注文件 ".concat(t))}async loadAnnotationFile(t){var e;try{const o=await(await fetch("".concat(this.baseUrl,"/annotation/").concat(t))).json();if(o.success)return o.data&&console.log("[标注] 成功读取 ".concat(t,", 包含 ").concat(((e=o.data.annotations)==null?void 0:e.length)||0," 个标注点")),o.data;throw new Error(o.error||"读取标注文件失败")}catch(n){return console.error("[标注] 读取标注文件失败 (".concat(t,"):"),n),null}}async getAllAnnotationFiles(){try{const e=await(await fetch("".concat(this.baseUrl,"/annotations"))).json();if(e.success)return console.log("[标注] 扫描完成，找到 ".concat(e.data.length," 个标注文件")),e.data;throw new Error(e.error||"获取标注文件列表失败")}catch(t){return console.error("[标注] 获取标注文件列表失败:",t),[]}}async deleteAnnotationFile(t){try{const n=await(await fetch("".concat(this.baseUrl,"/annotation/").concat(t),{method:"DELETE"})).json();if(n.success)return console.log("删除标注文件: ".concat(t)),!0;throw new Error(n.error||"删除标注文件失败")}catch(e){return console.error("删除标注文件失败 (".concat(t,"):"),e),!1}}async getDirectoryStats(t=null){try{const e=t?"".concat(this.baseUrl,"/directory-stats?dirPath=").concat(encodeURIComponent(t)):"".concat(this.baseUrl,"/directory-stats"),o=await(await fetch(e)).json();if(o.success)return o.data;throw new Error(o.error||"获取目录统计失败")}catch(e){throw console.error("获取目录统计失败:",e),e}}isImageFile(t){const e=[".png",".jpg",".jpeg",".bmp",".tiff",".webp"],n=t.toLowerCase().substring(t.lastIndexOf("."));return e.includes(n)}parseImageDateTime(t){const e=/BR\d+-\d+-(\d{4}-\d{2}-\d{2})_(\d{2})_VIS_sv_\d+/,n=t.match(e);if(n){const o=n[1],i=n[2];return new Date("".concat(o,"T").concat(i,":00:00"))}return console.warn("无法解析文件名时间信息: ".concat(t)),new Date(0)}formatImageTime(t){const e=/BR\d+-\d+-(\d{4}-\d{2}-\d{2})_(\d{2})_VIS_sv_\d+/,n=t.match(e);if(n){const o=n[1],i=n[2],s=new Date("".concat(o,"T").concat(i,":00:00"));return"".concat(s.getFullYear(),"/").concat(s.getMonth()+1,"/").concat(s.getDate())}return t}async getAllSkipInfo(){try{const e=await(await fetch("".concat(this.baseUrl,"/skip-info"))).json();if(e.success)return e.data;throw new Error(e.error||"获取跳过信息失败")}catch(t){return console.error("获取跳过信息失败:",t),{}}}async getSkipInfo(t){try{const n=await(await fetch("".concat(this.baseUrl,"/skip-info/").concat(t))).json();if(n.success)return n.data;throw new Error(n.error||"获取跳过信息失败")}catch(e){return console.error("获取植物 ".concat(t," 跳过信息失败:"),e),null}}async saveSkipInfo(t,e){try{const o=await(await fetch("".concat(this.baseUrl,"/skip-info/").concat(t),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({skipData:e})})).json();if(o.success)return console.log("保存跳过信息: ".concat(t)),!0;throw new Error(o.error||"保存跳过信息失败")}catch(n){throw console.error("保存植物 ".concat(t," 跳过信息失败:"),n),n}}async deleteSkipInfo(t){try{const n=await(await fetch("".concat(this.baseUrl,"/skip-info/").concat(t),{method:"DELETE"})).json();if(n.success)return console.log("删除跳过信息: ".concat(t)),!0;throw new Error(n.error||"删除跳过信息失败")}catch(e){return console.error("删除植物 ".concat(t," 跳过信息失败:"),e),!1}}async getPlantStatus(t){var e,n;try{const o=await fetch("".concat(this.baseUrl,"/plant-status/").concat(t)),i=await o.json();if(i.success)return console.log("[植物状态] 从API获取植物 ".concat(t," 状态: ").concat(((e=i.data)==null?void 0:e.status)||"null")),i.data;if(o.status===404||(n=i.message)!=null&&n.includes("未找到"))return console.log("[植物状态] 植物 ".concat(t," 无状态信息")),null;throw new Error(i.error||"获取植物状态失败")}catch(o){return console.error("获取植物 ".concat(t," 状态失败:"),o),null}}async savePlantStatus(t,e){try{const o=await(await fetch("".concat(this.baseUrl,"/plant-status/").concat(t),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({status:e,lastModified:new Date().toISOString()})})).json();if(o.success)return console.log("[植物状态] 保存植物 ".concat(t," 状态: ").concat(e)),!0;throw new Error(o.error||"保存植物状态失败")}catch(n){throw console.error("保存植物 ".concat(t," 状态失败:"),n),n}}async deletePlantStatus(t){try{const n=await(await fetch("".concat(this.baseUrl,"/plant-status/").concat(t),{method:"DELETE"})).json();if(n.success)return console.log("[植物状态] 删除植物 ".concat(t," 状态")),!0;throw new Error(n.error||"删除植物状态失败")}catch(e){return console.error("删除植物 ".concat(t," 状态失败:"),e),!1}}cleanup(){console.log("HttpFileSystemManager 清理完成")}getAnnotationsDirectory(){return this.isInitialized?{exists:!0}:null}async ensureAnnotationsDirectory(){return{exists:!0}}}class le{constructor(){this.apiBaseUrl="http://localhost:3002/api",this.annotations=new Map,this.imageAnnotations=new Map,this.isInitialized=!1,this.fileSystemManager=null,this.useFileSystem=!1}setFileSystemManager(t){if(this.fileSystemManager=t,this.useFileSystem=!!t,console.log("[标注] 文件系统存储已启用"),t){const e=t.getAnnotationsDirectory();console.log("[标注] setFileSystemManager: annotations句柄".concat(e?"存在":"不存在"))}}async initialize(){try{if(this.useFileSystem&&this.fileSystemManager){await this.scanAnnotationFiles(),console.log("AnnotationStorageManager 初始化完成 (文件系统模式)"),this.isInitialized=!0;return}try{await this.loadAnnotationsFromServer(),await this.loadImageAnnotationsFromServer(),console.log("AnnotationStorageManager 初始化完成 (服务器模式)")}catch(t){console.warn("服务器模式初始化失败，使用localStorage模式:",t.message),this.loadFromLocalStorage(),this.loadImageAnnotationsFromLocalStorage(),console.log("AnnotationStorageManager 初始化完成 (localStorage模式)")}this.isInitialized=!0}catch(t){console.error("初始化标注存储管理器失败:",t),this.isInitialized=!0}}async loadAnnotationsFromServer(){try{const e=await(await fetch("".concat(this.apiBaseUrl,"/load-annotations"))).json();if(e.success&&e.data){for(const[n,o]of Object.entries(e.data.annotations||{}))this.annotations.set(n,o);return console.log("从服务器加载了 ".concat(this.annotations.size," 个植物的标注数据")),e.data}else throw new Error(e.error||"加载标注数据失败")}catch(t){return console.warn("从服务器加载标注数据失败，尝试从localStorage恢复:",t.message),this.loadFromLocalStorage(),{annotations:{}}}}async saveAnnotationsToServer(){try{const t={saveTime:new Date().toISOString(),totalPlants:this.annotations.size,annotations:{}};for(const[o,i]of this.annotations)t.annotations[o]=i;const n=await(await fetch("".concat(this.apiBaseUrl,"/save-annotations"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).json();if(n.success)return console.log("成功保存 ".concat(this.annotations.size," 个植物的标注数据到服务器")),this.saveToLocalStorage(),!0;throw new Error(n.error||"服务器保存失败")}catch(t){return console.error("保存标注数据到服务器失败:",t),this.saveToLocalStorage(),!1}}saveToLocalStorage(){try{const t={};for(const[e,n]of this.annotations)t[e]=n;localStorage.setItem("plant_annotations_backup",JSON.stringify({saveTime:new Date().toISOString(),annotations:t})),console.log("标注数据已备份到localStorage")}catch(t){console.error("备份到localStorage失败:",t)}}loadFromLocalStorage(){try{const t=localStorage.getItem("plant_annotations_backup");if(t){const e=JSON.parse(t);for(const[n,o]of Object.entries(e.annotations||{}))this.annotations.has(n)||this.annotations.set(n,o);console.log("从localStorage恢复了备份数据")}}catch(t){console.error("从localStorage恢复数据失败:",t)}}async savePlantAnnotations(t,e,n={}){var i,s,a;const o={plantId:t,annotations:e,selectedImage:((i=n.selectedImage)==null?void 0:i.name)||null,selectedImagePath:((s=n.selectedImage)==null?void 0:s.id)||null,viewAngle:n.selectedViewAngle||null,status:e.length>0?"completed":"in-progress",lastModified:new Date().toISOString(),imageDateTime:((a=n.selectedImage)==null?void 0:a.dateTime)||null,keypointCount:e.length,timeSeriesData:n.timeSeriesData||null,isTimeSeriesEnabled:!!n.timeSeriesData,plantViewAngles:n.plantViewAngles||[],selectedViewAngleHistory:n.selectedViewAngleHistory||{},timeSeriesMetadata:n.timeSeriesMetadata||{}};return this.annotations.set(t,o),await this.saveAnnotationsToServer(),o}getPlantAnnotations(t){const e=this.annotations.get(t);return e?e.annotations:[]}getPlantStatus(t){const e=this.annotations.get(t);return e?e.annotations.length>0?"completed":"in-progress":"pending"}getAnnotatedPlantIds(){return Array.from(this.annotations.keys())}async saveSkipInfo(t,e){try{let n=this.annotations.get(t);if(n||(n={plantId:t,annotations:[],lastModified:new Date().toISOString(),createdAt:new Date().toISOString(),selectedViewAngle:null,selectedImage:null,plantViewAngles:[],selectedViewAngleHistory:{},timeSeriesMetadata:{}}),n.status=e.status,n.skipReason=e.skipReason,n.skipDate=e.skipDate,n.lastModified=e.lastModified,this.annotations.set(t,n),this.useFileSystem&&this.fileSystemManager.saveSkipInfo)try{await this.fileSystemManager.saveSkipInfo(t,n),console.log("植株 ".concat(t," 跳过信息已保存到后端"))}catch(o){console.warn("后端保存失败，使用localStorage备份:",o),this.saveToLocalStorage(),console.log("植株 ".concat(t," 跳过信息已备份到localStorage"))}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const o="".concat(t,"_skip_info.json"),a=await(await this.fileSystemManager.getAnnotationsDirectory().getFileHandle(o,{create:!0})).createWritable();await a.write(JSON.stringify(n,null,2)),await a.close(),console.log("植株 ".concat(t," 跳过信息已保存到文件系统: ").concat(o))}catch(o){console.warn("文件系统保存失败，使用localStorage备份:",o),this.saveToLocalStorage(),console.log("植株 ".concat(t," 跳过信息已备份到localStorage"))}else this.saveToLocalStorage(),console.log("植株 ".concat(t," 跳过信息已保存到localStorage"))}catch(n){throw console.error("保存植株 ".concat(t," 跳过信息失败:"),n),n}}async removeSkipInfo(t){try{const e=this.annotations.get(t);if(e&&(delete e.status,delete e.skipReason,delete e.skipDate,e.lastModified=new Date().toISOString(),(!e.annotations||e.annotations.length===0)&&this.annotations.delete(t)),this.useFileSystem&&this.fileSystemManager.deleteSkipInfo)try{await this.fileSystemManager.deleteSkipInfo(t),console.log("植株 ".concat(t," 跳过信息已从后端移除"))}catch(n){console.warn("后端移除失败，使用localStorage清理:",n),this.saveToLocalStorage(),console.log("植株 ".concat(t," 跳过信息已从localStorage清理"))}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const n="".concat(t,"_skip_info.json"),o=this.fileSystemManager.getAnnotationsDirectory();try{await o.removeEntry(n),console.log("植株 ".concat(t," 跳过信息文件已删除: ").concat(n))}catch(i){if(i.name!=="NotFoundError")throw i;console.log("植株 ".concat(t," 跳过信息文件不存在，无需删除"))}}catch(n){console.warn("文件系统删除失败，使用localStorage清理:",n),this.saveToLocalStorage(),console.log("植株 ".concat(t," 跳过信息已从localStorage清理"))}else this.saveToLocalStorage(),console.log("植株 ".concat(t," 跳过信息已从localStorage清理"))}catch(e){throw console.error("移除植株 ".concat(t," 跳过信息失败:"),e),e}}async savePlantStatus(t,e){try{let n=this.annotations.get(t);if(n||(n={plantId:t,annotations:[],lastModified:new Date().toISOString(),createdAt:new Date().toISOString(),selectedViewAngle:null,selectedImage:null,plantViewAngles:[],selectedViewAngleHistory:{},timeSeriesMetadata:{}}),n.status=e,n.lastModified=new Date().toISOString(),this.annotations.set(t,n),this.useFileSystem&&this.fileSystemManager.savePlantStatus)try{await this.fileSystemManager.savePlantStatus(t,e),console.log("植株 ".concat(t," 状态 ").concat(e," 已保存到专用API"))}catch(o){console.warn("植物状态API保存失败，使用localStorage备份:",o),this.saveToLocalStorage(),console.log("植株 ".concat(t," 状态已备份到localStorage"))}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const o="".concat(t,"_status.json"),a=await(await this.fileSystemManager.getAnnotationsDirectory().getFileHandle(o,{create:!0})).createWritable(),l={plantId:t,status:e,lastModified:new Date().toISOString(),timestamp:new Date().toISOString()};await a.write(JSON.stringify(l,null,2)),await a.close(),console.log("植株 ".concat(t," 状态 ").concat(e," 已保存到文件系统: ").concat(o))}catch(o){console.warn("文件系统保存状态失败，使用localStorage备份:",o),this.saveToLocalStorage(),console.log("植株 ".concat(t," 状态已备份到localStorage"))}else this.saveToLocalStorage(),console.log("植株 ".concat(t," 状态 ").concat(e," 已保存到localStorage"));console.log("[植物状态] ".concat(t,": ").concat(e," (独立保存完成)"))}catch(n){throw console.error("保存植株 ".concat(t," 状态失败:"),n),n}}async loadPlantStatus(t){var e;try{console.log("[状态加载] 开始为植物 ".concat(t," 加载状态...")),console.log("[状态加载] useFileSystem: ".concat(this.useFileSystem,", fileSystemManager存在: ").concat(!!this.fileSystemManager));const n=this.annotations.get(t);if(n&&n.status)return console.log("[植物状态] ".concat(t,": 从内存加载状态 ").concat(n.status)),n.status;if(this.useFileSystem&&this.fileSystemManager.getPlantStatus)try{console.log("[状态加载] 尝试从专用API加载植物 ".concat(t," 状态..."));const o=await this.fileSystemManager.getPlantStatus(t);if(console.log("[状态加载] 专用API响应:",o),o&&o.status)return console.log("[植物状态] ".concat(t,": 从专用API加载状态 ").concat(o.status)),o.status}catch(o){console.warn("从专用API加载植株 ".concat(t," 状态失败:"),o)}else console.log("[状态加载] 跳过专用API: useFileSystem=".concat(this.useFileSystem,", getPlantStatus存在=").concat(!!((e=this.fileSystemManager)!=null&&e.getPlantStatus)));if(this.useFileSystem&&this.fileSystemManager.getSkipInfo)try{const o=await this.fileSystemManager.getSkipInfo(t);if(o&&o.status)return console.log("[植物状态] ".concat(t,": 从skip-info API加载状态 ").concat(o.status," (向后兼容)")),o.status}catch(o){console.warn("从skip-info API加载植株 ".concat(t," 状态失败:"),o)}else if(this.fileSystemManager&&this.fileSystemManager.getAnnotationsDirectory())try{const o="".concat(t,"_status.json"),l=await(await(await this.fileSystemManager.getAnnotationsDirectory().getFileHandle(o)).getFile()).text(),c=JSON.parse(l);if(c.status)return console.log("[植物状态] ".concat(t,": 从文件系统加载状态 ").concat(c.status)),c.status}catch(o){console.log("[植物状态] ".concat(t,": 无状态文件，使用默认状态"))}try{const o=localStorage.getItem("plantAnnotations");if(o){const i=JSON.parse(o);if(i[t]&&i[t].status)return console.log("[植物状态] ".concat(t,": 从localStorage加载状态 ").concat(i[t].status)),i[t].status}}catch(o){console.warn("从localStorage加载状态失败:",o)}return console.log("[植物状态] ".concat(t,": 未找到持久化状态")),null}catch(n){return console.error("加载植株 ".concat(t," 状态失败:"),n),null}}hasAnnotations(t){const e=this.annotations.get(t);return e&&e.annotations.length>0}async deletePlantAnnotations(t){this.annotations.delete(t),await this.saveAnnotationsToServer()}getAnnotationStats(t){const e=this.getAnnotatedPlantIds().length,n=Array.from(this.annotations.values()).filter(o=>o.annotations.length>0).length;return{total:t,annotated:e,completed:n,pending:t-e,completionRate:t>0?(n/t*100).toFixed(1):0}}exportAllAnnotations(){const t={exportTime:new Date().toISOString(),version:"1.0",totalPlants:this.annotations.size,annotations:{}};for(const[e,n]of this.annotations)t.annotations[e]={...n,exportedAt:new Date().toISOString()};return t}downloadAnnotationsAsJSON(){const t=this.exportAllAnnotations(),e=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),n=URL.createObjectURL(e),o=document.createElement("a");return o.href=n,o.download="plant_annotations_".concat(new Date().toISOString().split("T")[0],".json"),document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n),t}async exportPureImageAnnotations(){const t={};for(const[e,n]of this.imageAnnotations)n.annotations&&n.annotations.length>0&&(t[e]=n.annotations.map(o=>({id:o.id,x:o.x,y:o.y,timestamp:o.timestamp,direction:o.direction||"right",order:o.order||0})));return console.log("导出 ".concat(Object.keys(t).length," 张图像的纯净标注数据")),t}async downloadPureImageAnnotationsAsJSON(){const t=await this.exportPureImageAnnotations(),e=this.getPureAnnotationsStats(t),n={exportTime:new Date().toISOString(),version:"2.0",format:"pure_image_annotations",description:"每张图像对应的标注点数据，不包含内部管理信息",stats:{totalImages:e.totalImages,annotatedImages:e.annotatedImages,totalKeypoints:e.totalKeypoints,completionRate:e.completionRate},annotations:t},o=new Blob([JSON.stringify(n,null,2)],{type:"application/json"}),i=URL.createObjectURL(o),s=document.createElement("a");return s.href=i,s.download="pure_image_annotations_".concat(new Date().toISOString().split("T")[0],".json"),document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(i),console.log("导出了 ".concat(e.annotatedImages," 张图像的纯净标注数据，共 ").concat(e.totalKeypoints," 个关键点")),n}getPureAnnotationsStats(t){const e=Object.keys(t).length;let n=0;for(const o of Object.values(t))n+=o.length;return{totalImages:e,annotatedImages:e,totalKeypoints:n,averageKeypointsPerImage:e>0?(n/e).toFixed(2):0,completionRate:"100.0"}}setTimeSeriesManager(t){this.timeSeriesManager=t}async clearAllAnnotations(){this.annotations.clear(),await this.saveAnnotationsToServer()}getSummary(){const t={totalAnnotations:this.annotations.size,completedPlants:0,totalKeypoints:0,lastModified:null};for(const[e,n]of this.annotations)n.annotations.length>0&&(t.completedPlants++,t.totalKeypoints+=n.annotations.length,(!t.lastModified||n.lastModified>t.lastModified)&&(t.lastModified=n.lastModified));return t}restoreTimeSeriesData(t){for(const[e,n]of this.annotations)if(n.isTimeSeriesEnabled&&n.timeSeriesData)try{this.restorePlantTimeSeriesData(t,e,n),console.log("恢复植株 ".concat(e," 的时间序列数据"))}catch(o){console.error("恢复植株 ".concat(e," 时间序列数据失败:"),o)}}restorePlantTimeSeriesData(t,e,n){const{timeSeriesData:o,viewAngle:i}=n;if(!o||!i)return;t.timeSequences.has(e)||t.timeSequences.set(e,new Map),t.timeSeriesAnnotations.has(e)||t.timeSeriesAnnotations.set(e,new Map);const s=o.annotationData.map(d=>d.imageId);t.timeSequences.get(e).set(i,s);const a=new Map;for(const d of o.annotationData)a.set(d.imageId,{annotations:d.annotations,timestamp:d.metadata.timestamp,isManualAdjustment:d.metadata.isManualAdjustment,inheritedFrom:d.metadata.inheritedFrom});t.timeSeriesAnnotations.get(e).set(i,a);const l="".concat(e,"_").concat(i);t.manualAdjustments.has(l)||t.manualAdjustments.set(l,new Set);const c=t.manualAdjustments.get(l);for(const d of o.annotationData)d.metadata.isManualAdjustment&&c.add(d.imageId)}getPlantViewAngleHistory(t){const e=this.annotations.get(t);return(e==null?void 0:e.selectedViewAngleHistory)||{}}getPlantAnnotationSummary(t){const e=this.annotations.get(t);if(!e)return null;const n={plantId:t,status:e.status,lastModified:e.lastModified,selectedViewAngle:e.viewAngle,availableViewAngles:e.plantViewAngles||[],isTimeSeriesEnabled:e.isTimeSeriesEnabled,currentImageInfo:{imageName:e.selectedImage,imageId:e.selectedImagePath,dateTime:e.imageDateTime}};return e.timeSeriesData&&(n.timeSeriesStats={totalImages:e.timeSeriesData.totalImages,annotatedImages:e.timeSeriesData.annotationData.length,manualAdjustments:e.timeSeriesData.annotationData.filter(o=>o.metadata.isManualAdjustment).length}),n}async saveImageAnnotation(t,e){if(this.useFileSystem)try{if(await this.saveImageAnnotationToFileSystem(t,e))return console.log("成功保存图像 ".concat(t," 的标注数据到文件系统")),this.imageAnnotations.set(t,e),this.saveImageAnnotationsToLocalStorage(),!0}catch(n){console.error("保存图像 ".concat(t," 标注数据到文件系统失败:"),n)}else this.imageAnnotations.set(t,e);try{const o=await(await fetch("".concat(this.apiBaseUrl,"/save-image-annotation"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({imageId:t,annotationData:e})})).json();if(o.success)return console.log("成功保存图像 ".concat(t," 的标注数据到服务器")),this.saveImageAnnotationsToLocalStorage(),!0;throw new Error(o.error||"服务器保存失败")}catch(n){return console.error("保存图像 ".concat(t," 标注数据到服务器失败:"),n),this.saveImageAnnotationsToLocalStorage(),!1}}async getImageAnnotation(t){var e;if(this.useFileSystem&&this.fileSystemManager)try{const n=await this.fileSystemManager.loadAnnotationFile(t);return n&&console.log("[标注] 读取成功 ".concat(t,": ").concat(((e=n.annotations)==null?void 0:e.length)||0," 个标注点")),n}catch(n){return console.warn("从文件系统加载标注失败 (".concat(t,"):"),n),null}return this.imageAnnotations.get(t)||null}async loadImageAnnotationsFromServer(){try{const e=await(await fetch("".concat(this.apiBaseUrl,"/load-image-annotations"))).json();if(e.success&&e.data){for(const[n,o]of Object.entries(e.data.imageAnnotations||{}))this.imageAnnotations.set(n,o);return console.log("从服务器加载了 ".concat(this.imageAnnotations.size," 张图像的标注数据")),e.data}else return console.log("服务器没有图像标注数据或加载失败"),{imageAnnotations:{}}}catch(t){return console.warn("从服务器加载图像标注数据失败，尝试从localStorage恢复:",t.message),this.loadImageAnnotationsFromLocalStorage(),{imageAnnotations:{}}}}saveImageAnnotationsToLocalStorage(){try{const t={};for(const[e,n]of this.imageAnnotations)t[e]=n;localStorage.setItem("image_annotations_backup",JSON.stringify({saveTime:new Date().toISOString(),imageAnnotations:t})),console.log("图像标注数据已备份到localStorage")}catch(t){console.error("备份图像标注到localStorage失败:",t)}}loadImageAnnotationsFromLocalStorage(){try{const t=localStorage.getItem("image_annotations_backup");if(t){const e=JSON.parse(t);for(const[n,o]of Object.entries(e.imageAnnotations||{}))this.imageAnnotations.has(n)||this.imageAnnotations.set(n,o);console.log("从localStorage恢复了图像标注备份数据")}}catch(t){console.error("从localStorage恢复图像标注数据失败:",t)}}exportAllImageAnnotations(){const t={exportTime:new Date().toISOString(),version:"2.0",format:"simple_image_annotations",totalImages:this.imageAnnotations.size,annotations:{}};for(const[e,n]of this.imageAnnotations)n.annotations&&n.annotations.length>0&&(t.annotations[e]=n.annotations);return t}getImageAnnotationStats(){let t=0,e=0;for(const[n,o]of this.imageAnnotations)o.annotations&&o.annotations.length>0&&(t++,e+=o.annotations.length);return{totalImages:this.imageAnnotations.size,annotatedImages:t,totalKeypoints:e,averageKeypointsPerImage:t>0?(e/t).toFixed(2):0}}async loadAnnotationsFromFileSystem(){var t;if(!this.fileSystemManager)throw new Error("文件系统管理器未设置");console.log("开始从文件系统加载标注数据...");try{const e=await this.fileSystemManager.getAllAnnotationFiles();console.log("发现 ".concat(e.length," 个标注文件:"),e);let n=0;for(const o of e)try{const i=await this.fileSystemManager.loadAnnotationFile(o);i&&(this.imageAnnotations.set(o,i),n++,console.log("成功加载标注文件: ".concat(o,", 包含 ").concat(((t=i.annotations)==null?void 0:t.length)||0," 个标注点")))}catch(i){console.error("加载标注文件失败 (".concat(o,"):"),i)}console.log("从文件系统加载了 ".concat(n," 个图像的标注数据，总计 ").concat(this.imageAnnotations.size," 个图像在内存中"))}catch(e){throw console.error("从文件系统加载标注数据失败:",e),e}}async saveImageAnnotationToFileSystem(t,e){if(!this.fileSystemManager)return console.warn("文件系统管理器未设置，跳过文件系统保存"),!1;try{return await this.fileSystemManager.saveAnnotationFile(t,e),!0}catch(n){return console.error("保存标注到文件系统失败 (".concat(t,"):"),n),!1}}async deleteImageAnnotationFromFileSystem(t){if(!this.fileSystemManager)return!1;try{return await this.fileSystemManager.deleteAnnotationFile(t)}catch(e){return console.error("从文件系统删除标注失败 (".concat(t,"):"),e),!1}}async scanAnnotationFiles(){if(this.fileSystemManager)try{const t=await this.fileSystemManager.getAllAnnotationFiles();console.log("[标注] 扫描完成，发现 ".concat(t.length," 个标注文件")),await this.scanSkipInfoFiles()}catch(t){console.error("[标注] 扫描标注文件失败:",t)}}async scanSkipInfoFiles(){if(this.fileSystemManager)try{if(this.useFileSystem&&this.fileSystemManager.getAllSkipInfo){const t=await this.fileSystemManager.getAllSkipInfo();let e=0;for(const[n,o]of Object.entries(t))this.annotations.set(n,o),e++,console.log("[标注] 加载跳过信息: ".concat(n," - ").concat(o.skipReason));e>0&&console.log("[标注] 成功加载 ".concat(e," 个植株的跳过信息"))}else{const t=this.fileSystemManager.getAnnotationsDirectory();if(!t)return;let e=0;for await(const[n,o]of t.entries())if(o.kind==="file"&&n.endsWith("_skip_info.json"))try{const s=await(await o.getFile()).text(),a=JSON.parse(s);this.annotations.set(a.plantId,a),e++,console.log("[标注] 加载跳过信息: ".concat(a.plantId," - ").concat(a.skipReason))}catch(i){console.warn("[标注] 加载跳过信息文件失败 (".concat(n,"):"),i)}e>0&&console.log("[标注] 成功加载 ".concat(e," 个植株的跳过信息"))}}catch(t){console.error("[标注] 扫描跳过信息文件失败:",t)}}}class ce{constructor(){this.timeSeriesAnnotations=new Map,this.timeSequences=new Map,this.manualAdjustments=new Map}initializePlantTimeSeries(t,e,n){const i=n.sort((s,a)=>s.dateTime-a.dateTime).map(s=>s.id);return this.timeSequences.has(t)||this.timeSequences.set(t,new Map),this.timeSequences.get(t).set(e,i),this.timeSeriesAnnotations.has(t)||this.timeSeriesAnnotations.set(t,new Map),this.timeSeriesAnnotations.get(t).has(e)||this.timeSeriesAnnotations.get(t).set(e,new Map),console.log("初始化植株 ".concat(t," 视角 ").concat(e," 的时间序列，共 ").concat(i.length," 个时间点")),{plantId:t,viewAngle:e,imageIds:i,totalImages:i.length,firstImageId:i[0],lastImageId:i[i.length-1]}}saveAnnotations(t,e,n,o,i=!1){var d;const s=this.timeSeriesAnnotations.get(t);if(!s)throw new Error("植株 ".concat(t," 未初始化"));const a=s.get(e);if(!a)throw new Error("植株 ".concat(t," 视角 ").concat(e," 未初始化"));const l=(d=this.timeSequences.get(t))==null?void 0:d.get(e);if(!l)throw new Error("植株 ".concat(t," 视角 ").concat(e," 时间序列未初始化"));const c=l.indexOf(n);if(c===-1)throw new Error("图像 ".concat(n," 不在时间序列中"));if(a.set(n,{annotations:o,timestamp:new Date().toISOString(),isManualAdjustment:i}),i){const u="".concat(t,"_").concat(e);this.manualAdjustments.has(u)||this.manualAdjustments.set(u,new Set),this.manualAdjustments.get(u).add(n)}return this.propagateAnnotations(t,e,n,o,c),console.log("保存植株 ".concat(t," 视角 ").concat(e," 图像 ").concat(n," 的标注，包含 ").concat(o.length," 个关键点")),{savedImageId:n,propagatedCount:this.getPropagationCount(t,e,c),isFirstAnnotation:c===0&&!i,isManualAdjustment:i}}propagateAnnotations(t,e,n,o,i){const s=this.timeSequences.get(t).get(e),a=this.timeSeriesAnnotations.get(t).get(e),l="".concat(t,"_").concat(e),c=this.manualAdjustments.get(l)||new Set;if(i===0){for(let d=1;d<s.length;d++){const u=s[d];c.has(u)||a.set(u,{annotations:this.deepCloneAnnotations(o),timestamp:new Date().toISOString(),isManualAdjustment:!1,inheritedFrom:n})}console.log("从首个图像 ".concat(n," 传播标注到后续 ").concat(s.length-1," 个时间点"))}else{let d=0;for(let u=i+1;u<s.length;u++){const h=s[u];if(!c.has(h))a.set(h,{annotations:this.deepCloneAnnotations(o),timestamp:new Date().toISOString(),isManualAdjustment:!1,inheritedFrom:n}),d++;else break}d>0&&console.log("从时间点 ".concat(i," 向后传播标注到 ").concat(d," 个时间点"))}}getAnnotations(t,e,n){var s;const o=(s=this.timeSeriesAnnotations.get(t))==null?void 0:s.get(e);if(!o)return[];const i=o.get(n);return i?i.annotations:[]}getAnnotationMetadata(t,e,n){var l,c;const o=(l=this.timeSeriesAnnotations.get(t))==null?void 0:l.get(e);if(!o)return null;const i=o.get(n);if(!i)return null;const s=(c=this.timeSequences.get(t))==null?void 0:c.get(e),a=s?s.indexOf(n):-1;return{hasAnnotations:i.annotations.length>0,isManualAdjustment:i.isManualAdjustment,inheritedFrom:i.inheritedFrom,timestamp:i.timestamp,imageIndex:a,isFirstImage:a===0,isLastImage:a===s.length-1}}getPropagationCount(t,e,n){var i;const o=(i=this.timeSequences.get(t))==null?void 0:i.get(e);if(!o)return 0;if(n===0)return o.length-1;{const s="".concat(t,"_").concat(e),a=this.manualAdjustments.get(s)||new Set;let l=0;for(let c=n+1;c<o.length&&!a.has(o[c]);c++)l++;return l}}hasAnnotations(t,e,n){return this.getAnnotations(t,e,n).length>0}getAnnotationStats(t,e){var l,c;const n=(l=this.timeSequences.get(t))==null?void 0:l.get(e);if(!n)return{total:0,annotated:0,manual:0,inherited:0};const o=(c=this.timeSeriesAnnotations.get(t))==null?void 0:c.get(e);if(!o)return{total:n.length,annotated:0,manual:0,inherited:0};let i=0,s=0,a=0;for(const d of n){const u=o.get(d);u&&u.annotations.length>0&&(i++,u.isManualAdjustment?s++:u.inheritedFrom&&a++)}return{total:n.length,annotated:i,manual:s,inherited:a,coverage:(i/n.length*100).toFixed(1)}}deepCloneAnnotations(t){return t.map(e=>({...e,x:e.x,y:e.y}))}clearPlantAnnotations(t,e){const n=this.timeSeriesAnnotations.get(t);n&&n.has(e)&&n.get(e).clear();const o="".concat(t,"_").concat(e);this.manualAdjustments.has(o)&&this.manualAdjustments.get(o).clear(),console.log("清除植株 ".concat(t," 视角 ").concat(e," 的所有标注"))}exportTimeSeriesData(t,e){var s,a;const n=(s=this.timeSequences.get(t))==null?void 0:s.get(e),o=(a=this.timeSeriesAnnotations.get(t))==null?void 0:a.get(e);if(!n||!o)return null;const i={plantId:t,viewAngle:e,totalImages:n.length,annotationData:[]};for(const l of n){const c=o.get(l);c&&i.annotationData.push({imageId:l,annotations:c.annotations,metadata:{timestamp:c.timestamp,isManualAdjustment:c.isManualAdjustment,inheritedFrom:c.inheritedFrom}})}return i}exportAllImageAnnotations(){const t={};for(const[e,n]of this.timeSeriesAnnotations)for(const[o,i]of n)for(const[s,a]of i)a.annotations&&a.annotations.length>0&&(t[s]=a.annotations.map(l=>({id:l.id,x:l.x,y:l.y,timestamp:l.timestamp})));return t}exportPlantImageAnnotations(t){const e={},n=this.timeSeriesAnnotations.get(t);if(!n)return e;for(const[o,i]of n)for(const[s,a]of i)a.annotations&&a.annotations.length>0&&(e[s]=a.annotations.map(l=>({id:l.id,x:l.x,y:l.y,timestamp:l.timestamp})));return e}getExportStats(){let t=0,e=0,n=0;const o={};for(const[i,s]of this.timeSeriesAnnotations){let a=0,l=0,c=0;for(const[d,u]of s)for(const[h,m]of u)a++,t++,m.annotations&&m.annotations.length>0&&(l++,e++,c+=m.annotations.length,n+=m.annotations.length);o[i]={totalImages:a,annotatedImages:l,totalKeypoints:c,completionRate:a>0?(l/a*100).toFixed(1):0}}return{totalImages:t,annotatedImages:e,totalKeypoints:n,completionRate:t>0?(e/t*100).toFixed(1):0,plantStats:o}}getDebugStatus(){const t={plantsCount:this.timeSeriesAnnotations.size,totalSequences:0,totalAnnotatedImages:0,plantDetails:{}};for(const[e,n]of this.timeSeriesAnnotations){const o={viewAnglesCount:n.size,viewAngles:{}};for(const[i,s]of n){t.totalSequences++;const a=Array.from(s.values()).filter(l=>l.annotations&&l.annotations.length>0).length;t.totalAnnotatedImages+=a,o.viewAngles[i]={totalImages:s.size,annotatedImages:a,imageIds:Array.from(s.keys())}}t.plantDetails[e]=o}return console.log("时间序列管理器状态:",t),t}exportAllTimeSeriesDataDebug(){var e;const t={managedPlants:this.timeSeriesAnnotations.size,allData:{}};for(const[n,o]of this.timeSeriesAnnotations){t.allData[n]={};for(const[i,s]of o){t.allData[n][i]={};for(const[a,l]of s)t.allData[n][i][a]={hasAnnotations:!!(l.annotations&&l.annotations.length>0),annotationCount:((e=l.annotations)==null?void 0:e.length)||0,annotations:l.annotations||[],metadata:{timestamp:l.timestamp,isManualAdjustment:l.isManualAdjustment,inheritedFrom:l.inheritedFrom}}}}return console.log("时间序列详细数据:",t),t}}class de{constructor(){this.fileSystemManager=new re,this.annotationStorage=new le,this.timeSeriesManager=new ce,this.plants=new Map,this.plantImages=new Map,this.annotationStatus=new Map,this.loadingPlants=new Set}async initialize(){try{await this.fileSystemManager.initialize(),await this.annotationStorage.initialize(),this.annotationStorage.restoreTimeSeriesData(this.timeSeriesManager),this.annotationStorage.setTimeSeriesManager(this.timeSeriesManager),console.log("PlantDataManager 初始化完成")}catch(t){console.error("PlantDataManager 初始化失败:",t)}}async loadDataset(){console.log("开始加载数据集...");try{this.plants.clear(),this.plantImages.clear(),this.annotationStatus.clear(),this.loadingPlants.clear(),this.annotationStorage.setFileSystemManager(this.fileSystemManager),this.annotationStorage.isInitialized=!1,await this.annotationStorage.initialize(),this.annotationStorage.restoreTimeSeriesData(this.timeSeriesManager),this.annotationStorage.setTimeSeriesManager(this.timeSeriesManager);const t=await this.fileSystemManager.traversePlantDirectories();if(t.length===0)throw new Error("数据集中未找到有效的植物文件夹");const e=[];for(const n of t){const o=await this.createPlantData(n);e.push(o),this.plants.set(o.id,o)}return await this.restoreAnnotationStatus(e),e.sort((n,o)=>n.id.localeCompare(o.id)),console.log("成功加载 ".concat(e.length," 个植物")),e}catch(t){throw console.error("加载数据集失败:",t),t}}async restoreAnnotationStatus(t){if(this.annotationStorage.useFileSystem)await this.restoreAnnotationStatusFromFileSystem(t);else{const e=this.annotationStorage.getAnnotatedPlantIds();for(const n of t)if(e.includes(n.id)){const o=this.annotationStorage.getPlantStatus(n.id),i=this.annotationStorage.getPlantAnnotations(n.id),s=this.annotationStorage.getPlantAnnotationSummary(n.id);n.status=o,n.annotations=i;const a=this.annotationStorage.annotations.get(n.id);if(a&&a.status==="skipped"&&(n.skipReason=a.skipReason,n.skipDate=a.skipDate),s){n.selectedViewAngle=s.selectedViewAngle,n.viewAngles=s.availableViewAngles;const l=n.status==="skipped"?" (跳过: ".concat(n.skipReason,")"):"";console.log("恢复植株 ".concat(n.id," 的标注状态: ").concat(o,", 视角: ").concat(s.selectedViewAngle,", ").concat(i.length," 个标注点").concat(l))}this.annotationStatus.set(n.id,i)}}}async restoreAnnotationStatusFromFileSystem(t){var n;console.log("[标注] 开始从文件系统恢复植物状态...");let e=null;try{if((n=window.PlantAnnotationTool)!=null&&n.annotationManager&&(console.log("[标注] 尝试使用批量标注数据进行快速状态恢复..."),e=await window.PlantAnnotationTool.annotationManager.getAllAnnotationsInBulk(),e)){console.log("[标注] 批量标注数据获取成功，使用高性能模式"),await this.restoreStatusFromBulkData(t,e);return}}catch(o){console.warn("[标注] 批量加载失败，回退到单独文件读取模式:",o)}console.log("[标注] 使用传统单独文件读取模式"),await this.restoreStatusFromIndividualFiles(t)}async restoreStatusFromBulkData(t,e){console.log("[标注] 使用批量数据进行快速状态恢复...");const n=performance.now(),o=e.imageAnnotations||{},i=e.plantAnnotations||{};for(const a of t)try{let l=!1,c=0,d=null;const u={};if(!this.plantImages.has(a.id)){const y=await this.fileSystemManager.readPlantImages(a.id);this.plantImages.set(a.id,y)}const h=this.plantImages.get(a.id);for(const[y,S]of Object.entries(h)){let x=0;for(const I of S){const b=o[I.id];if(b&&b.length>0){l=!0;const C=b.length;c+=C,x+=C,(!d||x>(u[d]||0))&&(d=y)}}x>0&&(u[y]=x)}const m=i[a.id];m&&m.length>0&&(l=!0,c+=m.length);const f=this.annotationStorage.annotations.get(a.id);if(f&&f.status==="skipped")a.status="skipped",a.skipReason=f.skipReason,a.skipDate=f.skipDate;else{console.log("[批量恢复] 检查植物 ".concat(a.id," 的专用状态API..."));const y=await this.annotationStorage.loadPlantStatus(a.id);console.log("[批量恢复] 植物 ".concat(a.id," 专用API状态: ").concat(y)),y==="completed"?(a.status="completed",a.selectedViewAngle=d,console.log("[批量恢复] 植物 ".concat(a.id,": completed (从专用API恢复)"))):l?(a.status="in-progress",a.selectedViewAngle=d,console.log("[批量恢复] 植物 ".concat(a.id,": in-progress (有标注数据)"))):(a.status="pending",console.log("[批量恢复] 植物 ".concat(a.id,": pending (无数据)")))}}catch(l){console.warn("[标注] 检查植物 ".concat(a.id," 状态失败:"),l),a.status="pending"}const s=performance.now();console.log("[标注] 批量状态恢复完成，耗时: ".concat((s-n).toFixed(2),"ms"))}async restoreStatusFromIndividualFiles(t){console.log("[标注] 使用传统文件读取模式恢复状态...");const e=await this.annotationStorage.fileSystemManager.getAllAnnotationFiles(),n=new Set(e);for(const o of t)try{let i=!1,s=0,a=null;const l={};if(!this.plantImages.has(o.id)){const u=await this.fileSystemManager.readPlantImages(o.id);this.plantImages.set(o.id,u)}const c=this.plantImages.get(o.id);for(const[u,h]of Object.entries(c)){let m=0;for(const f of h)if(n.has(f.id)){const y=await this.annotationStorage.getImageAnnotation(f.id);if(y&&y.annotations&&y.annotations.length>0){i=!0;const S=y.annotations.length;s+=S,m+=S,(!a||m>(l[a]||0))&&(a=u)}}m>0&&(l[u]=m)}const d=this.annotationStorage.annotations.get(o.id);if(d&&d.status==="skipped")o.status="skipped",o.skipReason=d.skipReason,o.skipDate=d.skipDate,console.log("[标注] 植物 ".concat(o.id,": skipped (").concat(d.skipReason,")"));else{console.log("[状态恢复] 开始检查植物 ".concat(o.id," 的持久化状态..."));const u=await this.annotationStorage.loadPlantStatus(o.id);console.log("[状态恢复] 植物 ".concat(o.id," 持久化状态结果: ").concat(u)),u==="completed"?(o.status="completed",o.selectedViewAngle=a,console.log("[标注] 植物 ".concat(o.id,": completed (从持久化存储恢复)"))):i?(o.status="in-progress",o.selectedViewAngle=a,console.log("[标注] 植物 ".concat(o.id,": in-progress, 选中视角: ").concat(a," (").concat(s," 个标注点)"))):(o.status="pending",console.log("[标注] 植物 ".concat(o.id,": pending (无标注数据且无持久化状态)")))}}catch(i){console.warn("[标注] 检查植物 ".concat(o.id," 状态失败:"),i),o.status="pending"}console.log("[标注] 植物状态恢复完成")}async createPlantData(t){const e={id:t.id,name:t.name,path:t.path,status:"pending",imageCount:0,hasImages:!1,viewAngles:[],selectedViewAngle:null,selectedImage:null,annotations:[],lastModified:null,loadedAt:new Date().toISOString()};return this.loadPlantImageCount(e),e}async loadPlantImageCount(t){if(!this.loadingPlants.has(t.id)){this.loadingPlants.add(t.id);try{const e=await this.fileSystemManager.readPlantImages(t.id),n=Object.keys(e).filter(i=>e[i].length>0),o=Object.values(e).reduce((i,s)=>i+s.length,0);t.viewAngles=n,t.imageCount=o,t.hasImages=o>0,o>0&&this.plantImages.set(t.id,e),console.log("植物 ".concat(t.id," 包含 ").concat(o," 张图像，视角: ").concat(n.join(", "))),this.emitPlantUpdated(t)}catch(e){console.error("加载植物 ".concat(t.id," 图像信息失败:"),e),t.hasImages=!1,t.imageCount=0,t.viewAngles=[]}finally{this.loadingPlants.delete(t.id)}}}getPlantList(){return Array.from(this.plants.values()).sort((t,e)=>t.id.localeCompare(e.id))}getPlant(t){return this.plants.get(t)}async getPlantImages(t,e=null){if(this.plantImages.has(t)){const o=this.plantImages.get(t);return e?o[e]||[]:o}if(this.loadingPlants.has(t))return new Promise(o=>{const i=()=>{if(this.loadingPlants.has(t))setTimeout(i,100);else{const s=this.plantImages.get(t)||{};o(e?s[e]||[]:s)}};i()});const n=this.plants.get(t);if(!n)throw new Error("植物 ".concat(t," 不存在"));try{const o=await this.fileSystemManager.readPlantImages(n.id);return this.plantImages.set(t,o),e?o[e]||[]:o}catch(o){return console.error("获取植物 ".concat(t," 图像失败:"),o),e?[]:{}}}updatePlantStatus(t,e){const n=this.plants.get(t);n&&(n.status=e,n.lastModified=new Date().toISOString(),this.annotationStorage&&this.annotationStorage.savePlantStatus(t,e).then(()=>{console.log("[状态更新] ".concat(t,": ").concat(e," - 已保存到持久化存储"))}).catch(o=>{console.error("保存植物状态失败:",o);const i=this.getPlantAnnotations(t);if(i.length>0){const s={selectedImage:n.selectedImage,selectedViewAngle:n.selectedViewAngle};return this.annotationStorage.savePlantAnnotations(t,i,s)}}),this.emitPlantUpdated(n))}async skipPlant(t,e){const n=this.plants.get(t);if(!n)throw new Error("植株 ".concat(t," 不存在"));n.status="skipped",n.skipReason=e,n.skipDate=new Date().toISOString(),n.lastModified=new Date().toISOString();try{const o={status:"skipped",skipReason:e,skipDate:n.skipDate,lastModified:n.lastModified};await this.annotationStorage.saveSkipInfo(t,o),console.log("植株 ".concat(t," 已标记为跳过: ").concat(e)),this.emitPlantUpdated(n)}catch(o){throw console.error("保存植株 ".concat(t," 跳过信息失败:"),o),o}}async unskipPlant(t){const e=this.plants.get(t);if(!e)throw new Error("植株 ".concat(t," 不存在"));if(e.status!=="skipped")throw new Error("植株 ".concat(t," 当前状态不是跳过状态"));try{const n=await this.getPlantAnnotations(t),o=n&&n.length>0?"in-progress":"pending";e.status=o,e.lastModified=new Date().toISOString(),delete e.skipReason,delete e.skipDate,await this.annotationStorage.removeSkipInfo(t),await this.annotationStorage.savePlantStatus(t,o),console.log("植株 ".concat(t," 已撤销跳过状态，新状态: ").concat(o)),this.emitPlantUpdated(e)}catch(n){throw console.error("撤销植株 ".concat(t," 跳过状态失败:"),n),n}}async uncompletePlant(t){const e=this.plants.get(t);if(!e)throw new Error("植株 ".concat(t," 不存在"));if(e.status!=="completed")throw new Error("植株 ".concat(t," 当前状态不是已完成状态"));try{const n=await this.getPlantAnnotations(t),o=n&&n.length>0?"in-progress":"pending";e.status=o,e.lastModified=new Date().toISOString(),await this.annotationStorage.savePlantStatus(t,o),console.log("植株 ".concat(t," 已撤销完成状态，新状态: ").concat(o)),this.emitPlantUpdated(e)}catch(n){throw console.error("撤销植株 ".concat(t," 完成状态失败:"),n),n}}setSelectedViewAngle(t,e){const n=this.plants.get(t);n&&(n.selectedViewAngle=e,n.selectedImage=null,n.status==="pending"&&this.updatePlantStatus(t,"in-progress"),this.emitPlantUpdated(n))}setSelectedImage(t,e){const n=this.plants.get(t);n&&(n.selectedImage=e,!n.selectedViewAngle&&e.viewAngle&&(n.selectedViewAngle=e.viewAngle),n.selectedViewAngle&&this.initializeTimeSeriesIfNeeded(t,n.selectedViewAngle),n.status==="pending"&&this.updatePlantStatus(t,"in-progress"),this.emitPlantUpdated(n))}async initializeTimeSeriesIfNeeded(t,e){try{const n=await this.getPlantImages(t,e);if(n.length>0){const o=this.timeSeriesManager.initializePlantTimeSeries(t,e,n);return console.log("初始化时间序列: ".concat(o.totalImages," 张图像")),o}}catch(n){console.error("初始化时间序列失败:",n)}return null}async savePlantAnnotations(t,e,n=!1,o={}){const i=this.plants.get(t);if(!i)throw new Error("植株 ".concat(t," 不存在"));if(!i.selectedImage||!i.selectedViewAngle)throw new Error("请先选择图像和视角");const s=i.selectedImage.id,a=i.selectedViewAngle;try{const l=await this.getPlantImages(t,a),c=l.findIndex(m=>m.id===s);if(c===-1)throw new Error("当前图像不在图像列表中");let d=0;if(n)await this.saveAnnotationToFile(t,s,e,o),d=1,console.log("保存标注到当前图像: ".concat(s));else{for(let m=c;m<l.length;m++){const f=l[m].id;await this.saveAnnotationToFile(t,f,e,o),d++}console.log("向后传播保存标注到 ".concat(d," 张图像"))}i.annotations=e,i.lastModified=new Date().toISOString(),i.status=e.length>0?"in-progress":"pending",this.annotationStatus.set(t,e),this.emitPlantUpdated(i);const u=o.saveDirectionsOnly?" (仅方向信息)":"",h=n?"已保存到当前图像".concat(u):"已传播保存到 ".concat(d," 张图像").concat(u);return{success:!0,savedCount:d,message:h,viewAngle:a,isManualAdjustment:n,saveDirectionsOnly:o.saveDirectionsOnly}}catch(l){throw console.error("保存植株 ".concat(t," 标注数据失败:"),l),l}}async saveAnnotationToFile(t,e,n,o={}){let i=n;if(o.saveDirectionsOnly){const a=await this.annotationStorage.getImageAnnotation(e);a&&a.annotations&&(i=this.mergeDirectionData(a.annotations,n))}const s={plantId:t,imageId:e,annotations:i,timestamp:new Date().toISOString(),version:"2.0"};await this.annotationStorage.saveImageAnnotation(e,s)}mergeDirectionData(t,e){const n=[...t];return e.forEach(o=>{const i=n.findIndex(s=>s.order===o.order);i!==-1?n[i]={...n[i],direction:o.direction,directionType:o.directionType,timestamp:new Date().toISOString()}:n.push(o)}),n}async saveImageAnnotations(t,e){var n,o;try{const i=((o=(n=window.appState)==null?void 0:n.currentPlant)==null?void 0:o.id)||this.getCurrentPlantIdFromImage(t),s={imageId:t,plantId:i,annotations:e,timestamp:new Date().toISOString(),version:"2.0"};await this.annotationStorage.saveImageAnnotation(t,s),console.log("自动保存完成：图像 ".concat(t," (植株: ").concat(i,") 的 ").concat(e.length," 个标注点"))}catch(i){throw console.error("自动保存图像标注失败:",i),i}}getCurrentPlantIdFromImage(t){if(t.includes("_")){const e=t.split("_");if(e.length>0)return e[0]}if(t.includes("-")){const e=t.split("-");if(e.length>=2)return"".concat(e[0],"-").concat(e[1])}return t.split(".")[0].split("_")[0]}async getImageAnnotations(t){try{const e=await this.annotationStorage.getImageAnnotation(t);if(!e||!e.annotations)return[];const n=e.annotations;return console.log("🔄 Loaded ".concat(n.length," annotations for image ").concat(t," (auto-renumbering disabled)")),n}catch(e){return console.error("获取图像标注失败:",e),[]}}getPlantAnnotations(t,e=null){return e?this.getImageAnnotations(e):this.annotationStatus.get(t)||[]}getCurrentImageAnnotationMetadata(t){const e=this.plants.get(t);return!e||!e.selectedImage||!e.selectedViewAngle?null:this.timeSeriesManager.getAnnotationMetadata(t,e.selectedViewAngle,e.selectedImage.id)}getPlantTimeSeriesStats(t,e){return this.timeSeriesManager.getAnnotationStats(t,e)}shouldShowManualAdjustmentMode(t){const e=this.getCurrentImageAnnotationMetadata(t);return e?!e.isFirstImage&&e.hasAnnotations:!1}getNextPendingPlant(t=null){const e=this.getPlantList();if(!t)return e.find(o=>o.status!=="completed");const n=e.findIndex(o=>o.id===t);if(n===-1)return e.find(o=>o.status!=="completed");for(let o=n+1;o<e.length;o++)if(e[o].status!=="completed")return e[o];for(let o=0;o<n;o++)if(e[o].status!=="completed")return e[o];return null}getDetailedImageStats(){const t=this.getPlantList();let e=0,n=0,o=t.length,i=0;const s=[];for(const c of t){const d=c.imageCount||0;e+=d;const u={plantId:c.id,imageCount:d,status:c.status,isCompleted:c.status==="completed"};c.status==="completed"&&(i++,n+=d),s.push(u)}const a=e>0?n/e*100:0,l=o>0?i/o*100:0;return{totalImages:e,completedImages:n,totalPlants:o,completedPlants:i,completionRate:a.toFixed(1),plantCompletionRate:l.toFixed(1),pendingImages:e-n,plantStats:s}}getImageStats(){const t=this.getDetailedImageStats();return{totalImages:t.totalImages,completedImages:t.completedImages,totalPlants:t.totalPlants,completedPlants:t.completedPlants,completionRate:t.completionRate}}getProgress(){const t=this.getPlantList(),e=t.length,n=this.annotationStorage.getAnnotationStats(e),o=t.filter(d=>d.status==="completed").length,i=t.filter(d=>d.status==="in-progress").length,s=t.filter(d=>d.status==="pending").length,a=t.filter(d=>d.status==="skipped").length,l=o+a,c=this.getImageStats();return{total:e,completed:Math.max(o,n.completed),inProgress:i,pending:s,skipped:a,totalCompleted:l,completionRate:e>0?(Math.max(l,n.completed+a)/e*100).toFixed(1):0,persistent:n,images:c}}searchPlants(t){if(!t)return this.getPlantList();const e=t.toLowerCase();return this.getPlantList().filter(n=>n.id.toLowerCase().includes(e)||n.name.toLowerCase().includes(e))}filterPlantsByStatus(t){return t==="all"?this.getPlantList():this.getPlantList().filter(e=>e.status===t)}emitPlantUpdated(t){const e=new CustomEvent("plantUpdated",{detail:{plant:t}});document.dispatchEvent(e)}cleanup(){this.plants.clear(),this.plantImages.clear(),this.annotationStatus.clear(),this.loadingPlants.clear(),this.fileSystemManager&&this.fileSystemManager.cleanup()}exportAllAnnotations(){return this.annotationStorage.exportAllAnnotations()}downloadAnnotationsAsJSON(){return this.annotationStorage.downloadAnnotationsAsJSON()}async exportPureImageAnnotations(){return await this.annotationStorage.exportPureImageAnnotations()}async downloadPureImageAnnotationsAsJSON(){return await this.annotationStorage.downloadPureImageAnnotationsAsJSON()}async getExportStats(){const t=await this.exportPureImageAnnotations(),e=this.timeSeriesManager.getExportStats();return{pureFormat:this.annotationStorage.getPureAnnotationsStats(t),timeSeriesFormat:e,recommendation:"建议使用纯净格式进行数据分析和处理"}}async debugTimeSeriesExport(){console.log("=== 时间序列导出调试 ===");const t=this.timeSeriesManager.getDebugStatus(),e=this.timeSeriesManager.exportAllTimeSeriesDataDebug(),n=await this.exportPureImageAnnotations();console.log("导出的纯净标注数据:",n);const o=this.annotationStorage.annotations;console.log("存储管理器中的数据:",Array.from(o.entries()));const i={timeSeriesManagerImages:t.totalAnnotatedImages,pureExportImages:Object.keys(n).length,storageManagerPlants:o.size};return console.log("数据比较:",i),{timeSeriesStatus:t,timeSeriesData:e,pureAnnotations:n,storageData:Array.from(o.entries()),comparison:i}}saveAnnotationStatus(t,e){try{const n="plant_annotation_".concat(t),o={...e,savedAt:new Date().toISOString()};localStorage.setItem(n,JSON.stringify(o))}catch(n){console.error("保存标注状态失败:",n)}}loadAnnotationStatus(t){try{const e="plant_annotation_".concat(t),n=localStorage.getItem(e);if(n)return JSON.parse(n)}catch(e){console.error("加载标注状态失败:",e)}return null}ensureAnnotationOrders(t){if(!t||t.length===0)return;const e={};t.forEach(o=>{o.annotationType||(o.customTypeId?o.annotationType="custom":(o.annotationType="custom",o.customTypeId=o.customTypeId||"builtin-regular-keypoint"));const i=o.annotationType==="custom"?"custom:".concat(o.customTypeId||"unknown"):"custom:builtin-regular-keypoint";e[i]||(e[i]=[]),e[i].push(o)});let n=0;Object.entries(e).forEach(([o,i])=>{let s=!1;for(let a=0;a<i.length;a++)if(typeof i[a].order!="number"||i[a].order<=0){s=!0;break}if(!s){const a=i.map(c=>c.order);[...new Set(a)].length!==a.length&&(s=!0)}if(s){console.log("发现 ".concat(o," 类型标注序号问题，正在为 ").concat(i.length," 个标注点分配序号..."));for(let a=0;a<i.length;a++)i[a].order=a+1;n+=i.length,console.log("已为 ".concat(o," 类型分配序号：1-").concat(i.length))}}),n>0&&console.log("序号修复完成：共修复 ".concat(n," 个标注点，保持类型特定编号系统"))}}const ue="modulepreload",he=function(r){return"/"+r},Et={},dt=function(t,e,n){let o=Promise.resolve();if(e&&e.length>0){document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),a=(s==null?void 0:s.nonce)||(s==null?void 0:s.getAttribute("nonce"));o=Promise.allSettled(e.map(l=>{if(l=he(l),l in Et)return;Et[l]=!0;const c=l.endsWith(".css"),d=c?'[rel="stylesheet"]':"";if(document.querySelector('link[href="'.concat(l,'"]').concat(d)))return;const u=document.createElement("link");if(u.rel=c?"stylesheet":ue,c||(u.as="script"),u.crossOrigin="",u.href=l,a&&u.setAttribute("nonce",a),document.head.appendChild(u),c)return new Promise((h,m)=>{u.addEventListener("load",h),u.addEventListener("error",()=>m(new Error("Unable to preload CSS for ".concat(l))))})}))}function i(s){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=s,window.dispatchEvent(a),!a.defaultPrevented)throw s}return o.then(s=>{for(const a of s||[])a.status==="rejected"&&i(a.reason);return t().catch(i)})};class ut{constructor(t,e={}){if(console.log("[调试] AnnotationTool 构造函数被调用",{canvasId:t,timestamp:Date.now()}),this.canvas=document.getElementById(t),!this.canvas)throw new Error('Canvas element with id "'.concat(t,'" not found'));this.ctx=this.canvas.getContext("2d"),this.options={minZoom:.1,maxZoom:10,zoomSpeed:.1,baseKeypointRadius:8,minKeypointRadius:4,maxKeypointRadius:20,keypointScaleFactor:.8,keypointLeftColor:"#ff4444",keypointRightColor:"#4444ff",keypointHoverColor:"#ff6666",keypointSelectedColor:"#ffaa00",keypointBorderColor:"#ffffff",keypointBorderWidth:2,labelThresholdScale:.6,tinyThresholdScale:.3,labelOffset:15,directionThreshold:20,directionArrowLength:40,...e},this.state={scale:1,translateX:0,translateY:0,isDragging:!1,isPanning:!1,lastPanPoint:null,isDirectionDragging:!1,dragStartPoint:null,currentDragPoint:null,previewKeypoint:null,selectedKeypoint:null,isDirectionSelectionMode:!1,directionSelectionPoint:null,isAutoDirectionMode:!1,autoDirectionIndex:0,autoDirectionKeypoints:[],isDirectionCountMode:!1,currentDirectionCount:1,directionsSet:0,autoMoveToExpectedPosition:!1,isCustomRegionDragging:!1,customRegionStartPoint:null,customRegionCurrentPoint:null,isAutoOrderMode:!1,autoOrderTypeId:null,autoOrderCurrentOrder:1,autoOrderImages:[],autoOrderCurrentImageIndex:0,isUnorderedMode:!1},this.currentImage=null,this.imageElement=null,this.imageLoaded=!1,this.keypoints=[],this.hoveredKeypoint=null,this.draggedKeypoint=null,this.history=[],this.historyIndex=-1,this.maxHistorySize=50,this.customAnnotationManager=null,this.customAnnotationRenderer=null,this.customAnnotationDragState={isDragging:!1,draggedAnnotation:null,startPosition:null},this.imageSwitchLock={isLocked:!1,currentLoadingImageId:null,lockStartTime:null},this.autoDirectionMode="longitudinal",this.crossSectionalState=null,this.crossSectionalMap=new Map,this.bindEvents(),this.initializeCanvas(),this.initializeCustomAnnotationSystem(),this.initializeAutoDirectionModeFromUI(),console.log("AnnotationTool initialized with advanced direction annotation support and custom annotations")}initializeAutoDirectionModeFromUI(){setTimeout(()=>{const t=document.getElementById("auto-direction-mode-selector");t&&t.value?(this.autoDirectionMode=t.value,console.log("[调试] 从UI选择器初始化自动方向模式:",this.autoDirectionMode)):(this.autoDirectionMode="longitudinal",t&&(t.value="longitudinal",console.log("[调试] 设置UI选择器默认值为: longitudinal")))},100)}initializeCanvas(){this.resizeState={isResizing:!1,lastResizeTime:0,debounceTimeout:null,dimensionsHistory:[]},setTimeout(()=>{this.resizeCanvasWithRetry()},200),this.canvas.style.cursor="crosshair",window.addEventListener("resize",()=>{this.debouncedResize()})}resizeCanvasWithRetry(t=0){const o=this.canvas.parentElement.getBoundingClientRect();if(o.width===0||o.height===0)if(t<10){console.warn("Canvas容器尺寸为0，延迟重试... (".concat(t+1,"/10)")),setTimeout(()=>{this.resizeCanvasWithRetry(t+1)},300);return}else{console.error("Canvas容器尺寸始终为0，使用默认尺寸"),this.canvas.width=600,this.canvas.height=400,this.canvas.style.width="600px",this.canvas.style.height="400px",this.render();return}this.resizeCanvas(),this.render()}debouncedResize(){const t=Date.now();if(this.resizeState.isResizing&&t-this.resizeState.lastResizeTime<100){console.debug("Resize loop detected, skipping resize");return}this.resizeState.debounceTimeout&&clearTimeout(this.resizeState.debounceTimeout),this.resizeState.debounceTimeout=setTimeout(()=>{this.resizeCanvas(),this.render()},150)}resizeCanvas(){const e=this.canvas.parentElement.getBoundingClientRect();if(e.width===0||e.height===0){console.warn("Canvas容器尺寸无效，跳过调整");return}const n="".concat(e.width,"x").concat(e.height),o=this.resizeState.dimensionsHistory;if(o.length>=3){const i=o.slice(-3);if(i.includes(n)&&i.filter(s=>s===n).length>=2){console.warn("Canvas resize oscillation detected (".concat(n,"), stabilizing..."));return}}o.push(n),o.length>5&&o.shift(),this.resizeState.isResizing=!0,this.resizeState.lastResizeTime=Date.now();try{this.canvas.width=e.width,this.canvas.height=e.height,this.canvas.style.width=e.width+"px",this.canvas.style.height=e.height+"px",console.log("Canvas resized to ".concat(e.width,"x").concat(e.height)),this.imageLoaded&&this.imageElement&&!this.resizeState.fittingToScreen&&this.safeFitToScreen()}finally{setTimeout(()=>{this.resizeState.isResizing=!1},200)}}bindEvents(){console.log("[调试] bindEvents 被调用，绑定鼠标事件监听器",{timestamp:Date.now()}),this.canvas.addEventListener("mousedown",t=>this.handleMouseDown(t)),this.canvas.addEventListener("mousemove",t=>this.handleMouseMove(t)),this.canvas.addEventListener("mouseup",t=>this.handleMouseUp(t)),this.canvas.addEventListener("contextmenu",t=>this.handleContextMenu(t)),this.canvas.addEventListener("wheel",t=>this.handleWheel(t),{passive:!1}),document.addEventListener("keydown",t=>this.handleKeyDown(t)),document.addEventListener("keyup",t=>this.handleKeyUp(t)),this.canvas.addEventListener("contextmenu",t=>t.preventDefault())}async loadImage(t,e=!1){try{if(console.log("Loading image:",t.name),this.setImageSwitchLock(!0,t.id),this.interruptAllDirectionModes("image_switch"),this.currentImage=t,this.imageLoaded=!1,!window.PlantAnnotationTool||!window.PlantAnnotationTool.plantDataManager)throw this.setImageSwitchLock(!1),new Error("PlantDataManager未初始化，请刷新页面重试");const n=window.PlantAnnotationTool.plantDataManager;if(!n.fileSystemManager)throw this.setImageSwitchLock(!1),new Error("FileSystemManager未初始化，请刷新页面重试");const o=await n.fileSystemManager.createImageURL(t);return this.imageElement=new Image,this.imageElement.crossOrigin="anonymous",new Promise((i,s)=>{this.imageElement.onload=()=>{this.imageLoaded=!0,console.log("Image loaded: ".concat(this.imageElement.width,"x").concat(this.imageElement.height)),e?console.log("保持当前视图状态"):(this.safeFitToScreen(),console.log("重置视图到适合屏幕")),this.render(),this.setImageSwitchLock(!1),i()},this.imageElement.onerror=()=>{this.setImageSwitchLock(!1),s(new Error("Failed to load image"))},this.imageElement.src=o})}catch(n){throw console.error("Error loading image:",n),this.setImageSwitchLock(!1),n}}safeFitToScreen(){if(this.resizeState.fittingToScreen){console.debug("fitToScreen already in progress, skipping");return}this.resizeState.fittingToScreen=!0;try{this.fitToScreen()}finally{setTimeout(()=>{this.resizeState.fittingToScreen=!1},50)}}fitToScreen(){if(!this.imageElement||!this.imageLoaded)return;const t=this.canvas.width,e=this.canvas.height,n=this.imageElement.width,o=this.imageElement.height;if(t<=0||e<=0||n<=0||o<=0){console.warn("Invalid dimensions for fit to screen, skipping");return}const i=t*.9/n,s=e*.9/o,a=Math.min(i,s),l=Math.max(this.options.minZoom,Math.min(this.options.maxZoom,a)),c=Math.abs(l-this.state.scale);c>.01?(this.state.scale=l,this.state.translateX=(t-n*this.state.scale)/2,this.state.translateY=(e-o*this.state.scale)/2,this.updateZoomInfo(),console.log("Fit to screen: scale=".concat(this.state.scale.toFixed(2)," (change: ").concat(c.toFixed(3),")"))):console.debug("Scale change too small (".concat(c.toFixed(3),"), skipping update"))}resetView(){!this.imageElement||!this.imageLoaded||(this.state.scale=1,this.state.translateX=0,this.state.translateY=0,this.updateZoomInfo(),this.render())}clearImage(){console.log("清空图像和重置视图"),this.interruptAllDirectionModes("plant_switch"),this.currentImage=null,this.imageElement=null,this.imageLoaded=!1,this.state.scale=1,this.state.translateX=0,this.state.translateY=0,this.clearKeypointsWithoutSave(),this.clearKeypointLabels(),this.updateZoomInfo(),this.render()}render(){var t;if(this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),!this.imageElement||!this.imageLoaded){this.renderPlaceholder();return}this.ctx.save(),this.ctx.translate(this.state.translateX,this.state.translateY),this.ctx.scale(this.state.scale,this.state.scale),this.ctx.drawImage(this.imageElement,0,0),this.ctx.restore(),(t=this.calibrationPreviewState)!=null&&t.isActive?this.renderCalibrationPreview():this.renderKeypoints(),this.renderCustomAnnotations()}renderPlaceholder(){const t=this.canvas.width/2,e=this.canvas.height/2;this.ctx.fillStyle="#f3f4f6",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.fillStyle="#6b7280",this.ctx.font="16px Inter, sans-serif",this.ctx.textAlign="center",this.ctx.fillText("Please choose image to annotate",t,e)}renderKeypoints(){if(!this.imageElement||!this.imageLoaded){console.log("[AnnotationTool] Skipping keypoint render - no image loaded");return}this.clearKeypointLabels();const t=this.getKeypointDisplayStrategy();if(this.keypoints.forEach((e,n)=>{const o=this.imageToScreen(e.x,e.y);if(e.annotationType==="custom")this.renderCustomKeypoint(e,o,t);else{const i={...e,annotationType:"custom",customTypeId:"builtin-regular-keypoint"};this.renderCustomKeypoint(i,o,t)}}),this.state.isDirectionDragging&&this.state.previewKeypoint){const e=this.imageToScreen(this.state.previewKeypoint.x,this.state.previewKeypoint.y),n=this.state.previewKeypoint.direction,o=n==="left"?this.options.keypointLeftColor:this.options.keypointRightColor;this.ctx.globalAlpha=.7,this.renderSingleKeypoint(e.x,e.y,o,"?",n,t),this.ctx.globalAlpha=1,this.renderDragIndicator()}this.state.isCustomRegionDragging&&this.renderCustomRegionPreview(),this.state.isDirectionSelectionMode&&this.state.selectedKeypoint&&this.state.directionSelectionPoint&&this.renderDirectionSelectionGuide(),this.updateZoomIndicator(t),this.updateAnnotationSizeInfo(t)}renderRegularKeypoint(t,e,n,o){const i=this.hoveredKeypoint===t,s=this.state.selectedKeypoint===t;let a;s?a=this.options.keypointSelectedColor:i?a=this.options.keypointHoverColor:t.directionType==="angle"||typeof t.direction=="number"?a="#00aa00":t.direction==="left"?a=this.options.keypointLeftColor:t.direction==="right"?a=this.options.keypointRightColor:a="#9333ea";const l=t.order||o+1;this.renderSingleKeypoint(e.x,e.y,a,l,t.direction,n,t),this.ensureMultiDirectionSupport(t),t.directions&&t.directions.length>1?this.renderMultipleDirections(t):this.renderDirectionIndicator(e.x,e.y,t.direction,t)}renderCustomKeypoint(t,e,n){const o=this.getCustomType(t.customTypeId);if(!o){console.warn("Custom type ".concat(t.customTypeId," not found"));return}const i=this.hoveredKeypoint===t,s=this.state.selectedKeypoint===t;let a=1,l=n.borderWidth;s?(a=.9,l=n.borderWidth+1):i&&(a=.8,l=n.borderWidth+.5),this.ctx.save(),this.ctx.globalAlpha=a,t.width&&t.height?this.renderCustomRegion(t,e,o,{...n,borderWidth:l}):this.renderCustomPoint(t,e,o,{...n,borderWidth:l}),this.ctx.restore()}renderCustomPoint(t,e,n,o){var l;const i=this.state.selectedKeypoint===t||((l=this.customAnnotationRenderer)==null?void 0:l.selectedAnnotation)===t,s=this.hoveredKeypoint===t,a=i?o.radius+2:s?o.radius+1:o.radius;this.ctx.beginPath(),this.ctx.arc(e.x,e.y,a,0,2*Math.PI),this.ctx.fillStyle=n.color,this.ctx.fill(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=o.borderWidth,this.ctx.stroke(),o.showInternalLabel&&t.order!==void 0&&t.order!==null?(this.ctx.fillStyle="#ffffff",this.ctx.font="bold ".concat(o.fontSize,"px Arial"),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(t.order.toString(),e.x,e.y)):o.showExternalLabel&&t.order!==void 0&&t.order!==null&&this.renderCustomPointLabel(t,e,n,o),this.ensureMultiDirectionSupport(t),n&&n.metadata&&n.metadata.isDirectional===!1||(t.directions&&t.directions.length>1?this.renderMultipleDirections(t):this.renderDirectionIndicator(e.x,e.y,t.direction,t)),this.renderParentLinkIfAny(t,n)}renderCustomRegion(t,e,n,o){var y,S;const i=this.imageToScreen(t.x+t.width,t.y+t.height),s=i.x-e.x,a=i.y-e.y,l=this.state.selectedKeypoint===t||((y=this.customAnnotationRenderer)==null?void 0:y.selectedAnnotation)===t,c=this.hoveredKeypoint===t;this.ctx.fillStyle=n.color,this.ctx.globalAlpha=l?.4:c?.3:.2,this.ctx.fillRect(e.x,e.y,s,a),this.ctx.globalAlpha=1,this.ctx.strokeStyle=n.color,this.ctx.lineWidth=l?o.borderWidth+2:c?o.borderWidth+1:o.borderWidth,this.ctx.strokeRect(e.x,e.y,s,a);const d=e.x+s/2,u=e.y+a/2;if(o.showInternalLabel&&Math.min(s,a)>20&&t.order!==void 0&&t.order!==null&&(this.ctx.fillStyle=n.color,this.ctx.font="bold ".concat(o.fontSize,"px Arial"),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(t.order.toString(),d,u)),o.showExternalLabel&&t.order!==void 0&&t.order!==null&&this.renderCustomRegionLabel(t,{x:d,y:e.y},n,o),this.ensureMultiDirectionSupport(t),!(n&&n.metadata&&n.metadata.isDirectional===!1))if(t.directions&&t.directions.length>1){t.x,t.y;const x={...t,x:t.x+t.width/2,y:t.y+t.height/2};this.renderMultipleDirections(x)}else this.renderDirectionIndicator(d,u,t.direction,t);const h=t.x+t.width/2,m=t.y+t.height/2;this.renderParentLinkIfAny(t,n,h,m),(this.state.selectedKeypoint===t||((S=this.customAnnotationRenderer)==null?void 0:S.selectedAnnotation)===t)&&this.renderRegionResizeHandles(t,e,s,a,n)}renderRegionResizeHandles(t,e,n,o,i){const s=Math.max(8,Math.min(14,10*this.state.scale)),a=s/2,l=[{x:e.x,y:e.y},{x:e.x+n,y:e.y},{x:e.x,y:e.y+o},{x:e.x+n,y:e.y+o}],c=[{x:e.x+n/2,y:e.y},{x:e.x+n/2,y:e.y+o},{x:e.x,y:e.y+o/2},{x:e.x+n,y:e.y+o/2}];this.ctx.save(),this.ctx.fillStyle="#ffffff",this.ctx.strokeStyle=i.color,this.ctx.lineWidth=1.5,l.forEach(d=>{this.ctx.fillRect(d.x-a,d.y-a,s,s),this.ctx.strokeRect(d.x-a,d.y-a,s,s)}),c.forEach(d=>{this.ctx.fillRect(d.x-a,d.y-a,s,s),this.ctx.strokeRect(d.x-a,d.y-a,s,s)}),this.ctx.restore()}getRegionHandleAt(t,e){if(!e.width||!e.height)return null;const n=this.imageToScreen(e.x,e.y),o=this.imageToScreen(e.x+e.width,e.y+e.height),i=o.x-n.x,s=o.y-n.y,l=Math.max(8,Math.min(14,10*this.state.scale))/2;function c(d){return Math.abs(t.x-d.x)<=l&&Math.abs(t.y-d.y)<=l}return c({x:n.x,y:n.y})?"nw":c({x:n.x+i,y:n.y})?"ne":c({x:n.x,y:n.y+s})?"sw":c({x:n.x+i,y:n.y+s})?"se":c({x:n.x+i/2,y:n.y})?"n":c({x:n.x+i/2,y:n.y+s})?"s":c({x:n.x,y:n.y+s/2})?"w":c({x:n.x+i,y:n.y+s/2})?"e":null}renderParentLinkIfAny(t,e,n=null,o=null){if(!t.parentAnnotationType||!t.parentAnnotationId)return;const i=t.parentAnnotationType,s=t.parentAnnotationId,a=this.keypoints.find(f=>f.annotationType==="custom"&&f.customTypeId===i&&f.order===s);if(!a)return;const l=n!==null?n:t.x,c=o!==null?o:t.y,d=this.imageToScreen(l,c);let u=a.x,h=a.y;a.width&&a.height&&(u=a.x+a.width/2,h=a.y+a.height/2);const m=this.imageToScreen(u,h);this.ctx.save(),this.ctx.strokeStyle="#9ca3af",this.ctx.lineWidth=2,this.ctx.setLineDash([6,6]),this.ctx.beginPath(),this.ctx.moveTo(d.x,d.y),this.ctx.lineTo(m.x,m.y),this.ctx.stroke(),this.ctx.setLineDash([]),this.ctx.restore()}renderCustomPointLabel(t,e,n,o){const i=e.y-o.radius-o.labelOffset;this.ctx.save();const s=t.order!==void 0&&t.order!==null?"".concat(n.name," #").concat(t.order):n.name;this.ctx.font="".concat(o.fontSize,"px Arial");const l=this.ctx.measureText(s).width,c=4;this.ctx.fillStyle=n.color,this.ctx.fillRect(e.x-l/2-c,i-o.fontSize/2-c,l+c*2,o.fontSize+c*2),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(s,e.x,i),this.ctx.restore()}renderCustomRegionLabel(t,e,n,o){const i=e.y-o.labelOffset;this.ctx.save();const s=t.order!==void 0&&t.order!==null?"".concat(n.name," #").concat(t.order):n.name;this.ctx.font="".concat(o.fontSize,"px Arial");const l=this.ctx.measureText(s).width,c=4;this.ctx.fillStyle=n.color,this.ctx.fillRect(e.x-l/2-c,i-o.fontSize/2-c,l+c*2,o.fontSize+c*2),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(s,e.x,i),this.ctx.restore()}renderCustomRegionPreview(){var c;if(!this.state.isCustomRegionDragging)return;const t=this.state.customRegionStartPoint,e=this.state.customRegionCurrentPoint;if(!t||!e)return;const n=(c=this.customAnnotationManager)==null?void 0:c.getCurrentCustomType();if(!n||n.type!=="region")return;const o=Math.min(t.x,e.x),i=Math.min(t.y,e.y),s=Math.abs(e.x-t.x),a=Math.abs(e.y-t.y);this.ctx.save(),this.ctx.globalAlpha=.5,this.ctx.fillStyle=n.color,this.ctx.fillRect(o,i,s,a),this.ctx.strokeStyle=n.color,this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]),this.ctx.strokeRect(o,i,s,a),this.ctx.globalAlpha=.8,this.ctx.fillStyle="#000000",this.ctx.font="12px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle";const l="".concat(Math.round(s),"x").concat(Math.round(a));this.ctx.fillText(l,o+s/2,i+a/2),this.ctx.restore()}renderSingleKeypoint(t,e,n,o,i,s,a=null){this.ctx.beginPath(),this.ctx.arc(t,e,s.radius,0,2*Math.PI),this.ctx.fillStyle=n,this.ctx.fill(),this.ctx.strokeStyle=this.options.keypointBorderColor,this.ctx.lineWidth=s.borderWidth,this.ctx.stroke(),s.showInternalLabel?(this.ctx.fillStyle=this.options.keypointBorderColor,this.ctx.font="bold ".concat(s.fontSize,"px Inter, sans-serif"),this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o.toString(),t,e)):s.showExternalLabel?this.createExternalLabel(t,e,o,i,n,s):s.showMinimalMode&&a&&this.hoveredKeypoint===a&&this.createTooltip(t,e,o,i,a)}renderDragIndicator(){if(!this.state.dragStartPoint||!this.state.currentDragPoint)return;const t=this.state.dragStartPoint.x,e=this.state.dragStartPoint.y,n=this.state.currentDragPoint.x,o=this.state.currentDragPoint.y,i=n-t;if(Math.sqrt(i*i+(o-e)*(o-e))>=this.options.directionThreshold){this.ctx.strokeStyle=i<0?this.options.keypointLeftColor:this.options.keypointRightColor,this.ctx.lineWidth=3,this.ctx.setLineDash([5,5]),this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,o),this.ctx.stroke(),this.ctx.setLineDash([]);const a=(t+n)/2,l=(e+o)/2-20;this.ctx.fillStyle=i<0?this.options.keypointLeftColor:this.options.keypointRightColor,this.ctx.font="bold 14px Inter, sans-serif",this.ctx.textAlign="center",this.ctx.fillText(i<0?"← Left":"Right →",a,l)}}imageToScreen(t,e){return{x:t*this.state.scale+this.state.translateX,y:e*this.state.scale+this.state.translateY}}screenToImage(t,e){return{x:(t-this.state.translateX)/this.state.scale,y:(e-this.state.translateY)/this.state.scale}}getMousePos(t){const e=this.canvas.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}getVisibleImageBounds(){if(!this.imageElement||!this.imageLoaded)return null;const t=this.imageElement.width*this.state.scale,e=this.imageElement.height*this.state.scale,n=this.state.translateX,o=this.state.translateY,i={left:Math.max(0,n),top:Math.max(0,o),right:Math.min(this.canvas.width,n+t),bottom:Math.min(this.canvas.height,o+e),imageLeft:n,imageTop:o,imageRight:n+t,imageBottom:o+e};return Math.random()<.001&&console.log("[AnnotationTool] Image bounds debug:",{imageSize:{width:this.imageElement.width,height:this.imageElement.height},canvasSize:{width:this.canvas.width,height:this.canvas.height},scale:this.state.scale,translate:{x:this.state.translateX,y:this.state.translateY},visibleBounds:i,imageLoaded:this.imageLoaded}),i}isPointInVisibleImage(t,e){const n=this.getVisibleImageBounds();return n?t>=n.left&&t<=n.right&&e>=n.top&&e<=n.bottom:!1}isImageCoordinateValid(t,e){return!this.imageElement||!this.imageLoaded?!1:t>=0&&t<=this.imageElement.width&&e>=0&&e<=this.imageElement.height}canCreateAnnotationAt(t,e){if(!this.imageElement||!this.imageLoaded)return console.warn("[AnnotationTool] Cannot create annotation: no image loaded"),!1;if(!this.isPointInVisibleImage(t,e))return console.warn("[AnnotationTool] Cannot create annotation: position is outside visible image area"),!1;const n=this.screenToImage(t,e);return this.isImageCoordinateValid(n.x,n.y)?!0:(console.warn("[AnnotationTool] Cannot create annotation: position is outside image boundaries"),!1)}canAnnotateAtSilent(t,e){if(!this.imageElement||!this.imageLoaded||!this.isPointInVisibleImage(t,e))return!1;const n=this.screenToImage(t,e);return!!this.isImageCoordinateValid(n.x,n.y)}debugBoundsAt(t,e){if(console.log("[AnnotationTool] Debug bounds check at:",{screenX:t,screenY:e}),!this.imageElement||!this.imageLoaded)return console.log("❌ Image not loaded"),!1;const n=this.getVisibleImageBounds();console.log("📐 Visible bounds:",n);const o=this.isPointInVisibleImage(t,e);console.log("🎯 In visible area:",o);const i=this.screenToImage(t,e),s=this.isImageCoordinateValid(i.x,i.y);console.log("📍 Image coords:",i,"Valid:",s);const a=this.canAnnotateAtSilent(t,e);return console.log("✅ Final result:",a),a}async handleMouseDown(t){var n,o,i,s,a,l,c,d,u,h,m,f,y;console.log("[调试] handleMouseDown 被调用",{button:t.button,timestamp:Date.now(),target:t.target.tagName,isTrusted:t.isTrusted,type:t.type,eventPhase:t.eventPhase,bubbles:t.bubbles,cancelable:t.cancelable,stackTrace:new Error().stack});const e=this.getMousePos(t);if(t.button===0){if(t.shiftKey?(this.state.isPanning=!0,this.state.lastPanPoint=e,this.canvas.style.cursor="grabbing"):(t.metaKey||t.ctrlKey)&&(this.state.isUnorderedMode=!0,console.log("[调试] 进入无序号标注模式")),!this.state.isPanning){const S=this.getCustomAnnotationAt(e);if(S){const I=!!(S.width&&S.height);if(this.handleCustomAnnotationClick(S,e),I){let b=(n=this.customAnnotationRenderer)==null?void 0:n.getRegionHandleAt(e,S);if(b||(b=this.getRegionHandleAt(e,S)),b)this.startCustomAnnotationDrag(S,e,b);else{if(S.annotationType==="custom"&&S.customTypeId&&this.customAnnotationManager)try{this.customAnnotationManager.setCustomAnnotationMode(S.customTypeId)}catch(C){}this.state.selectedKeypoint=S,this.state.isDirectionSelectionMode=!1,(o=this.customAnnotationRenderer)==null||o.setSelectedAnnotation(S),console.log("[调试] Region已设为选中:",S.id,"order:",S.order),this.startCustomAnnotationDrag(S,e,null),this.render()}return}}const x=this.getKeypointAt(e);if(x){if(x.annotationType==="custom"&&x.customTypeId&&this.customAnnotationManager&&!this.state.isSelectingParent&&!this.state.isCustomRegionDragging&&!this.state.isDirectionSelectionMode)try{this.customAnnotationManager.setCustomAnnotationMode(x.customTypeId)}catch(I){}if(this.state.isSelectingParent&&this.state.parentSelectionForType){try{const I=this.state.parentSelectionForType,b=x.customTypeId,C=this.getCustomType(I);if(console.log("[调试] 父节点选择 - 子类型ID:",I,"父类型ID:",b),console.log("[调试] 子类型配置:",C==null?void 0:C.metadata),!C||((i=C.metadata)==null?void 0:i.associateTypeId)!==b){const D=(s=C==null?void 0:C.metadata)==null?void 0:s.associateTypeId,T="选择的父类型不匹配。期望: ".concat(((a=this.getCustomType(D))==null?void 0:a.name)||D,"，实际: ").concat(((l=this.getCustomType(b))==null?void 0:l.name)||b);(c=window.PlantAnnotationTool)!=null&&c.showError?window.PlantAnnotationTool.showError("父类型不匹配",T):console.log("[调试]",T)}else{const D=this.state.selectedKeypoint;if(D){D.parentAnnotationType=b,D.parentAnnotationId=x.order,console.log("[调试] 立即更新当前图片的父子关联:",D.id,"→",x.id),await this.bindParentForOrderAcrossImages(I,D.order,b,x.order);const T="已将 ".concat(C.name," #").concat(D.order," 关联到 ").concat((d=this.getCustomType(b))==null?void 0:d.name," #").concat(x.order,"，并同步到所有图片");(u=window.PlantAnnotationTool)!=null&&u.showSuccess?window.PlantAnnotationTool.showSuccess("关联成功",T):console.log("[调试] 关联成功:",T),this.render(),this.clearAllSelections()}}}catch(I){console.error("绑定父节点失败:",I),(h=window.PlantAnnotationTool)!=null&&h.showError?window.PlantAnnotationTool.showError("绑定失败",I.message||"未知错误"):console.log("[调试] 绑定失败:",I.message||"未知错误")}finally{this.disableParentSelectionMode()}return}console.log("[调试] 点击了标注点",{clickedKeypoint:x.order,isDirectionSelectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:(m=this.state.selectedKeypoint)==null?void 0:m.order,isSameKeypoint:this.state.selectedKeypoint===x}),this.state.isDirectionSelectionMode&&this.state.selectedKeypoint,this.draggedKeypoint=x,this.state.dragStartPoint=e,this.state.mouseDownTime=Date.now(),this.state.wasDraggedDuringSession=!1,this.canvas.style.cursor="grabbing"}else{if(this.state.isDirectionSelectionMode){console.log("[调试] 方向选择模式下点击，处理方向选择");try{await this.handleDirectionSelection(e)}catch(I){console.error("[方向选择] 处理方向选择失败:",I)}return}if(!this.imageElement||!this.imageLoaded){console.warn("[AnnotationTool] Cannot create annotation: no image loaded"),(f=window.PlantAnnotationTool)!=null&&f.showError&&window.PlantAnnotationTool.showError("No Image Loaded","Please select and load an image before creating annotations.");return}if(this.customAnnotationManager&&this.customAnnotationManager.isInCustomMode()){const I=this.customAnnotationManager.getCurrentCustomType();if(!I){console.warn("No custom type selected");return}if(I.type==="region"){this.handleCustomAnnotationMode(e);return}if(I.type==="point"){this.state.blankAreaClickStart=e,this.state.mouseDownTime=Date.now(),this.state.wasDraggedDuringSession=!1;return}}console.warn("[AnnotationTool] Annotation disabled: please select an Annotation Type to start annotating."),(y=window.PlantAnnotationTool)!=null&&y.showError&&window.PlantAnnotationTool.showError("Annotation Disabled","Please open Annotation Type Setting and select a type before annotating.");return}}}else t.button===2?this.state.isAutoDirectionMode?this.pauseAutoDirectionMode():this.state.isDirectionSelectionMode&&this.cancelDirectionSelection(!0):t.button===1&&this.handleMiddleMouseButton(e)}handleMouseMove(t){const e=this.getMousePos(t);if(this.state.isPanning&&this.state.lastPanPoint){const n=e.x-this.state.lastPanPoint.x,o=e.y-this.state.lastPanPoint.y;this.state.translateX+=n,this.state.translateY+=o,this.state.lastPanPoint=e,this.render()}else if(this.draggedKeypoint){const n=this.screenToImage(e.x,e.y);this.isImageCoordinateValid(n.x,n.y)&&(this.draggedKeypoint.x=n.x,this.draggedKeypoint.y=n.y,this.state.wasDraggedDuringSession=!0,this.render(),this.notifyDraggedKeypointPreview(this.draggedKeypoint))}else if(this.customAnnotationDragState.isDragging)this.updateCustomAnnotationDrag(e);else if(this.state.blankAreaClickStart)Math.sqrt(Math.pow(e.x-this.state.blankAreaClickStart.x,2)+Math.pow(e.y-this.state.blankAreaClickStart.y,2))>=this.options.directionThreshold&&(this.state.wasDraggedDuringSession=!0,this.startDirectionAnnotation(this.state.blankAreaClickStart),this.state.blankAreaClickStart=null,this.updateDirectionDragging(e));else if(this.state.isDirectionDragging)this.updateDirectionDragging(e);else if(this.state.isCustomRegionDragging)this.updateCustomRegionDrag(e);else if(this.state.isDirectionSelectionMode){this.state.directionSelectionPoint=e;let n="crosshair";if(this.state.selectedKeypoint){const o=this.imageToScreen(this.state.selectedKeypoint.x,this.state.selectedKeypoint.y);Math.sqrt(Math.pow(e.x-o.x,2)+Math.pow(e.y-o.y,2))<=this.options.baseKeypointRadius*2&&(n="pointer")}this.canvas.style.cursor!==n&&(this.canvas.style.cursor=n),this.render()}else{const n=this.getCustomAnnotationAt(e);if(n){this.canvas.style.cursor="pointer",this.customAnnotationRenderer&&this.customAnnotationRenderer.setHoveredAnnotation(n),this.render();return}else this.customAnnotationRenderer&&this.customAnnotationRenderer.setHoveredAnnotation(null);const o=this.getKeypointAt(e);let i="crosshair";this.state.isAutoDirectionMode?o?i="pointer":i="crosshair":this.customAnnotationManager&&this.customAnnotationManager.isInCustomMode()?o?i="pointer":i=this.canAnnotateAtSilent(e.x,e.y)?"crosshair":"not-allowed":o?i="pointer":i=this.canAnnotateAtSilent(e.x,e.y)?"crosshair":"not-allowed",this.canvas.style.cursor!==i&&(this.canvas.style.cursor=i),o!==this.hoveredKeypoint&&(this.hoveredKeypoint=o,this.render())}}handleMouseUp(t){var n,o;const e=this.getMousePos(t);if(this.state.isPanning&&(this.state.isPanning=!1,this.state.lastPanPoint=null,this.canvas.style.cursor="crosshair"),this.draggedKeypoint){const i=this.state.dragStartPoint||e,s=Math.sqrt(Math.pow(e.x-i.x,2)+Math.pow(e.y-i.y,2)),a=Date.now(),l=a-(this.state.mouseDownTime||a),c=this.state.wasDraggedDuringSession||!1;s<8&&l<200&&!c?this.selectKeypointForDirection(this.draggedKeypoint):(this.saveState(),this.autoSaveCurrentImage(),this.triggerRealTimeSync("MOVE_KEYPOINT",this.draggedKeypoint,this.state.dragStartPoint)),this.draggedKeypoint=null,this.state.wasDraggedDuringSession=!1,this.state.mouseDownTime=null,this.canvas.style.cursor="crosshair",this.restoreNormalPreview()}if(this.state.blankAreaClickStart){const i=Math.sqrt(Math.pow(e.x-this.state.blankAreaClickStart.x,2)+Math.pow(e.y-this.state.blankAreaClickStart.y,2)),s=Date.now(),a=s-(this.state.mouseDownTime||s),l=this.state.wasDraggedDuringSession||!1;if(i<8&&a<300&&!l)if(((n=this.customAnnotationManager)==null?void 0:n.isInCustomMode())&&((o=this.customAnnotationManager.getCurrentCustomType())==null?void 0:o.type)==="point"){const d=this.screenToImage(this.state.blankAreaClickStart.x,this.state.blankAreaClickStart.y),u=this.customAnnotationManager.getCurrentCustomType(),h=this.addKeypointWithDirection(d.x,d.y,void 0,u.id);h&&(delete h.direction,delete h.directionType,this.render(),this.autoSaveCurrentImage())}else this.createNoDirectionKeypoint(this.state.blankAreaClickStart);this.state.blankAreaClickStart=null,this.state.mouseDownTime=null,this.state.wasDraggedDuringSession=!1}this.customAnnotationDragState.isDragging&&this.finishCustomAnnotationDrag(),this.state.isDirectionDragging&&this.finishDirectionAnnotation(),this.state.isCustomRegionDragging&&this.finishCustomRegionDrag(),this.state.isUnorderedMode&&(this.state.isUnorderedMode=!1,console.log("[调试] 退出无序号标注模式"))}createNoDirectionKeypoint(t){var i,s,a,l;if(!this.customAnnotationManager||!this.customAnnotationManager.isInCustomMode()){(i=window.PlantAnnotationTool)!=null&&i.showError&&window.PlantAnnotationTool.showError("Annotation Disabled","Please select an Annotation Type before creating keypoints.");return}if(!this.canCreateAnnotationAt(t.x,t.y)){(s=window.PlantAnnotationTool)!=null&&s.showError&&window.PlantAnnotationTool.showError("Invalid Position","Annotations can only be placed within the image area. Please click directly on the image.");return}const e=this.screenToImage(t.x,t.y),n=this.customAnnotationManager.getCurrentCustomType();if(!n){(a=window.PlantAnnotationTool)!=null&&a.showError&&window.PlantAnnotationTool.showError("No Type Selected","Please select an Annotation Type before annotating.");return}if(n.type==="region"){this.startUnifiedCustomRegionDrag(t,n.id);return}return typeof((l=n.metadata)==null?void 0:l.defaultAngle)=="number"&&n.metadata.defaultAngle,this.addCustomPointAnnotation(e.x,e.y,n.id)}selectKeypoint(t){var e;console.log("[调试] selectKeypoint 被调用",{keypoint:t.order,currentDirection:t.direction,directionType:t.directionType}),this.ensureMultiDirectionSupport(t),this.state.selectedKeypoint=t,this.state.isDirectionSelectionMode=!0,this.state.directionSelectionPoint=null,console.log("[调试] 方向选择模式状态",{isDirectionSelectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:(e=this.state.selectedKeypoint)==null?void 0:e.order,isAutoDirectionMode:this.state.isAutoDirectionMode}),this.canvas.style.cursor="crosshair",this.notifySelectedKeypointPreview(t),this.render(),console.log("Selected keypoint #".concat(t.order," for direction selection"))}selectKeypointForDirection(t){var n;console.log("[调试] selectKeypointForDirection 被调用 - 点击而非拖拽",{keypoint:t.order,currentDirection:t.direction,isDirectional:this.getIsDirectionalForKeypoint(t)}),this.ensureMultiDirectionSupport(t),this.state.selectedKeypoint=t;const e=this.getIsDirectionalForKeypoint(t);this.state.isDirectionSelectionMode=e,this.state.directionSelectionPoint=null,console.log("[调试] selectKeypointForDirection 状态设置",{isDirectionSelectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:(n=this.state.selectedKeypoint)==null?void 0:n.order,isDirectional:e}),this.canvas.style.cursor=e?"crosshair":"default",this.notifySelectedKeypointPreview(t),this.render(),console.log("Selected keypoint #".concat(t.order),e?"for direction selection":"without direction selection")}getIsDirectionalForKeypoint(t){var e;if(!t)return!1;if(t.annotationType==="custom"&&t.customTypeId){const n=(e=this.customAnnotationManager)==null?void 0:e.getCustomType(t.customTypeId);if(n&&n.metadata)return n.metadata.isDirectional!==!1}return t.annotationType==="regular"}handleKeypointClick(t){var e;console.log("[调试] handleKeypointClick 被调用",{keypoint:t.order,isAutoDirectionMode:this.state.isAutoDirectionMode,isDirectionSelectionMode:this.state.isDirectionSelectionMode,currentSelectedKeypoint:(e=this.state.selectedKeypoint)==null?void 0:e.order}),this.state.isAutoDirectionMode?this.selectKeypoint(t):this.selectKeypoint(t)}async handleDirectionSelection(t){if(console.log("[调试] handleDirectionSelection 被调用",{selectedKeypoint:this.state.selectedKeypoint,mousePos:t,isAutoDirectionMode:this.state.isAutoDirectionMode}),!this.state.selectedKeypoint){console.log("[调试] 没有选中的标注点，退出方向选择");return}const e=this.imageToScreen(this.state.selectedKeypoint.x,this.state.selectedKeypoint.y),n=t.x-e.x,o=t.y-e.y,i=Math.atan2(o,n)*180/Math.PI,s=(i+360)%360,a=this.screenToImage(t.x,t.y),l={x:a.x,y:a.y,screenX:t.x,screenY:t.y,timestamp:Date.now()};if(console.log("[调试] 计算的角度信息",{deltaX:n,deltaY:o,angle:i,normalizedAngle:s,clickData:l,keypointBefore:{...this.state.selectedKeypoint}}),this.state.selectedKeypoint.maxDirections>1){const c={angle:s,type:"angle",clickPosition:l};this.addDirectionToKeypoint(this.state.selectedKeypoint,c)&&(this.state.directionsSet++,console.log("[多方向] 设置方向 ".concat(this.state.directionsSet,"/").concat(this.state.selectedKeypoint.maxDirections,": ").concat(s.toFixed(1),"°")),this.showMultiDirectionProgress(),this.triggerRealTimeSync("EDIT_DIRECTION",this.state.selectedKeypoint),this.state.selectedKeypoint.directions.length>=this.state.selectedKeypoint.maxDirections&&(console.log("[多方向] 所有方向设置完成"),this.finishMultiDirectionSetting()))}else{const c=this.state.selectedKeypoint.direction;this.state.selectedKeypoint.direction=s,this.state.selectedKeypoint.directionType="angle",this.state.selectedKeypoint.directionClick=l,this.state.selectedKeypoint.directions=[{angle:s,type:"angle",clickPosition:l}],console.log("[调试] 方向更新",{keypointId:this.state.selectedKeypoint.id,order:this.state.selectedKeypoint.order,oldDirection:c,newDirection:s,clickData:l,keypointAfter:{...this.state.selectedKeypoint}}),this.triggerRealTimeSync("EDIT_DIRECTION",this.state.selectedKeypoint),this.state.isAutoDirectionMode?(console.log("[调试] 自动模式，处理下一步:",this.autoDirectionMode),this.autoDirectionMode==="cross-sectional"?await this.handleCrossSectionalDirectionSet(s):this.selectNextAutoDirectionKeypoint()):(console.log("[调试] 非自动模式，取消方向选择"),this.cancelDirectionSelection(!0),this.state.autoMoveToExpectedPosition&&this.justCreatedNewPoint?(console.log("[自动移动] 检测到新建标注点，移动到下一个预期位置"),this.moveToNextExpectedPosition(),this.justCreatedNewPoint=!1):console.log("[自动移动] 跳过移动 - 仅为现有标注点设置方向或auto-move已关闭"))}}async handleCrossSectionalDirectionSet(t){var e;if(!this.crossSectionalState){console.error("[Cross-Sectional] No cross-sectional state available");return}try{if(console.log("[Cross-Sectional] Setting direction ".concat(t.toFixed(1),"° for current point")),!this.crossSectionalState){console.warn("[Cross-Sectional] State is null, cannot process direction");return}if(await this.processCurrentCrossSectionalPoint(t),this.saveState(),this.autoSaveCurrentImage(),!this.crossSectionalState){console.warn("[Cross-Sectional] State became null during processing");return}this.crossSectionalState.processedCount>=this.crossSectionalState.totalCount?(console.log("[Cross-Sectional] All annotations processed, completing mode"),this.completeCrossSectionalMode()):console.log("[Cross-Sectional] Continuing to next annotation")}catch(n){console.error("[Cross-Sectional] Failed to handle direction set:",n),(e=window.PlantAnnotationTool)!=null&&e.showError&&window.PlantAnnotationTool.showError("Cross-Sectional Error","Failed to process direction: ".concat(n.message));try{console.log("[Cross-Sectional] Attempting to continue despite error..."),this.crossSectionalState?(this.crossSectionalState.processedCount++,await this.advanceCrossSectionalProgress()):console.warn("[Cross-Sectional] Cannot continue - state is null")}catch(o){console.error("[Cross-Sectional] Failed to advance after error:",o),this.crossSectionalState?this.completeCrossSectionalMode():(console.warn("[Cross-Sectional] Cannot complete - state is null, forcing exit"),this.exitAutoDirectionMode())}}}cancelDirectionSelection(t=!1){var e;console.log("[调试] cancelDirectionSelection 被调用",{wasInDirectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:(e=this.state.selectedKeypoint)==null?void 0:e.order,isAutoMode:this.state.isAutoDirectionMode,forceExit:t}),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null,this.state.isAutoDirectionMode&&t?(console.log("[调试] 强制退出自动模式"),this.exitAutoDirectionMode()):this.state.isAutoDirectionMode&&console.log("[调试] 自动模式中取消方向选择，但保持自动模式"),this.state.isAutoDirectionMode?this.canvas.style.cursor="crosshair":this.canvas.style.cursor="crosshair",this.restoreNormalPreview(),this.render(),console.log("Direction selection cancelled")}async startAutoDirectionMode(){var t,e,n,o;console.log("[调试] startAutoDirectionMode 被调用，当前模式:",this.autoDirectionMode),(this.state.isDirectionSelectionMode||this.state.isAutoDirectionMode)&&(console.log("[调试] 清理之前的方向选择状态"),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null,this.state.isAutoDirectionMode=!1),this.crossSectionalState=null,this.crossSectionalMap.clear();try{if(this.customAnnotationManager){const i=(e=(t=this.customAnnotationManager).getCurrentCustomType)==null?void 0:e.call(t);if(i&&i.metadata&&i.metadata.isDirectional===!1)return(n=window.PlantAnnotationTool)!=null&&n.showError&&window.PlantAnnotationTool.showError("Auto Direction Disabled","当前选择的类型未启用方向功能"),!1}if(this.autoDirectionMode==="cross-sectional"){const i=await this.startCrossSectionalMode();return i||(this.exitAutoDirectionMode(),this.resetAutoDirectionButton()),i}else{const i=this.startLongitudinalMode();return i||(this.exitAutoDirectionMode(),this.resetAutoDirectionButton()),i}}catch(i){return console.error("[Auto Direction] Failed to start auto direction mode:",i),(o=window.PlantAnnotationTool)!=null&&o.showError&&window.PlantAnnotationTool.showError("Auto Direction Error",i.message),!1}}async startCrossSectionalMode(){var t,e;console.log("[Cross-Sectional] Starting cross-sectional mode");try{if(this.crossSectionalMap=await this.buildCrossSectionalMap(),this.crossSectionalMap.size===0)return console.log("[Cross-Sectional] No directionless annotations found across all images"),(t=window.PlantAnnotationTool)!=null&&t.showInfo&&window.PlantAnnotationTool.showInfo("No Work Needed","No directionless annotations found across all images in current view angle."),!1;this.initializeCrossSectionalState(),this.state.isAutoDirectionMode=!0,this.updateAutoDirectionModeUI();const n=this.getCurrentCrossSectionalPoint();if(n)return console.log("[Cross-Sectional] Starting with annotation #".concat(n.annotation.order," in ").concat(n.imageName)),await this.switchToImageForCrossSectional(n.imageId),this.updateCrossSectionalProgressUI(),(e=window.PlantAnnotationTool)!=null&&e.showInfo&&window.PlantAnnotationTool.showInfo("Cross-Sectional Mode","Processing ".concat(this.crossSectionalState.totalCount," annotations across ").concat(this.crossSectionalState.availableOrders.length," order numbers. Click to set directions.")),!0;throw new Error("No annotations to process in cross-sectional mode")}catch(n){throw console.error("[Cross-Sectional] Failed to start cross-sectional mode:",n),n}}startLongitudinalMode(){var e,n;console.log("[Longitudinal] Starting longitudinal mode");const t=this.keypoints.filter(o=>{const i=(o.direction==="left"||o.direction==="right")&&o.directionType!=="angle"&&typeof o.direction!="number",s=o.direction===null||o.direction===void 0;return i||s});return console.log("[Longitudinal] 找到需要设置方向的标注点",t.map(o=>({order:o.order,direction:o.direction,directionType:o.directionType,type:o.direction===null?"无方向":"传统方向"}))),t.length===0?(console.log("[Longitudinal] 没有需要设置方向的标注点"),(e=window.PlantAnnotationTool)!=null&&e.showInfo&&window.PlantAnnotationTool.showInfo("无需设置","当前图像没有需要设置方向的标注点"),this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),!1):(t.sort((o,i)=>(o.order||0)-(i.order||0)),this.state.isAutoDirectionMode=!0,this.state.autoDirectionKeypoints=t,this.state.autoDirectionIndex=0,console.log("[Longitudinal] 设置自动模式状态",{isAutoDirectionMode:this.state.isAutoDirectionMode,autoDirectionKeypoints:this.state.autoDirectionKeypoints.length,autoDirectionIndex:this.state.autoDirectionIndex}),this.updateAutoDirectionModeUI(),this.selectKeypointWithZoom(t[0]),console.log("[Longitudinal] 开始自动化方向设置模式，共 ".concat(t.length," 个标注点需要设置方向")),(n=window.PlantAnnotationTool)!=null&&n.showInfo&&window.PlantAnnotationTool.showInfo("Longitudinal Mode","Setting directions for ".concat(t.length," annotations in current image. Move mouse to select direction, click to confirm, right-click to pause.")),!0)}selectKeypointWithZoom(t){var c,d;console.log("[调试] selectKeypointWithZoom 开始",{keypoint:t.order,isAutoMode:this.state.isAutoDirectionMode,isDirectionMode:this.state.isDirectionSelectionMode}),this.selectKeypoint(t),console.log("[调试] selectKeypoint 完成后状态",{isAutoMode:this.state.isAutoDirectionMode,isDirectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:(c=this.state.selectedKeypoint)==null?void 0:c.order});const e=2.5,n=this.state.scale,o=Math.max(n,e),i=Math.min(o,this.options.maxZoom),s=this.canvas.width/2,a=this.canvas.height/2;this.state.scale=i,this.state.translateX=s-t.x*i,this.state.translateY=a-t.y*i,this.constrainView(),this.updateZoomInfo(),this.render();const l=n>=e?"保持当前缩放":"使用默认缩放";console.log("自动居中到标注点 #".concat(t.order,"，缩放: ").concat(i.toFixed(1),"x (").concat(l,")")),this.showKeypointFocusHint(t),console.log("[调试] selectKeypointWithZoom 完成后状态",{isAutoMode:this.state.isAutoDirectionMode,isDirectionMode:this.state.isDirectionSelectionMode,selectedKeypoint:(d=this.state.selectedKeypoint)==null?void 0:d.order})}showKeypointFocusHint(t){this.render.bind(this);let e=0;const n=3,o=()=>{if(e>=n)return;const i=this.imageToScreen(t.x,t.y),s=this.ctx;s.save(),s.globalAlpha=.6-e*.2,s.strokeStyle="#f59e0b",s.lineWidth=3,s.setLineDash([]);const a=30+e*10;s.beginPath(),s.arc(i.x,i.y,a,0,2*Math.PI),s.stroke(),s.restore(),e++,e<n&&setTimeout(o,200)};setTimeout(o,100)}constrainView(){if(!this.imageElement)return;const t=this.imageElement.width*this.state.scale,e=this.imageElement.height*this.state.scale,n=this.canvas.width,o=this.canvas.height;if(t<n)this.state.translateX=(n-t)/2;else{const s=n-t;this.state.translateX=Math.max(s,Math.min(0,this.state.translateX))}if(e<o)this.state.translateY=(o-e)/2;else{const s=o-e;this.state.translateY=Math.max(s,Math.min(0,this.state.translateY))}}selectNextAutoDirectionKeypoint(){if(this.state.autoDirectionIndex++,this.state.autoDirectionIndex>=this.state.autoDirectionKeypoints.length){const n=this.state.autoDirectionKeypoints.length;if(console.log("当前图片方向设置完成，共设置了 ".concat(n," 个标注点")),this.tryAutoSwitchToNextImage()){console.log("自动切换到下一张图片继续方向设置");return}this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),window.showSuccess&&window.showSuccess("全部完成","自动化方向设置已完成！");return}const t=this.state.autoDirectionKeypoints[this.state.autoDirectionIndex];this.selectKeypointWithZoom(t);const e="".concat(this.state.autoDirectionIndex+1,"/").concat(this.state.autoDirectionKeypoints.length);console.log("自动选择下一个传统标注点 #".concat(t.order," (").concat(e,")")),window.showInfo&&window.showInfo("升级进度","正在升级第 ".concat(this.state.autoDirectionIndex+1," 个，共 ").concat(this.state.autoDirectionKeypoints.length," 个传统标注点"))}showAutoModeCompletionHint(){const t=document.createElement("div");if(t.className="auto-direction-completion-hint",t.textContent="🎉 自动化方向选择已完成！",t.style.cssText="\n      position: absolute;\n      top: 50px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n      color: white;\n      padding: 12px 24px;\n      border-radius: 25px;\n      font-size: 14px;\n      font-weight: 600;\n      z-index: 1000;\n      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);\n      animation: completionBounce 0.6s ease-out;\n    ",!document.getElementById("completion-animation-style")){const n=document.createElement("style");n.id="completion-animation-style",n.textContent="\n        @keyframes completionBounce {\n          0% {\n            opacity: 0;\n            transform: translateX(-50%) translateY(-20px) scale(0.8);\n          }\n          50% {\n            transform: translateX(-50%) translateY(0) scale(1.1);\n          }\n          100% {\n            opacity: 1;\n            transform: translateX(-50%) translateY(0) scale(1);\n          }\n        }\n      ",document.head.appendChild(n)}const e=document.getElementById("canvas-container");e&&(e.appendChild(t),setTimeout(()=>{t.parentElement&&t.remove()},3e3))}setAutoDirectionMode(t){if(!["longitudinal","cross-sectional"].includes(t))throw new Error("Invalid auto direction mode: "+t);this.autoDirectionMode=t,console.log("Auto Direction mode set to: ".concat(t)),this.updateAutoDirectionModeUI()}updateAutoDirectionModeUI(){const t=document.getElementById("auto-direction-btn"),e=document.getElementById("auto-direction-mode-selector");if(t&&this.autoDirectionMode)if(t.classList.remove("longitudinal-mode","cross-sectional-mode"),t.classList.add("".concat(this.autoDirectionMode,"-mode")),this.state.isAutoDirectionMode){const n=this.autoDirectionMode==="cross-sectional"?"Exit Vertical Mode":"Exit Horizontal Mode";t.textContent=n}else t.textContent="Auto Direction";e&&this.autoDirectionMode&&(e.value=this.autoDirectionMode,console.log("[调试] 更新UI选择器为:",this.autoDirectionMode))}async buildCrossSectionalMap(){var o,i;const t=(o=window.PlantAnnotationTool)==null?void 0:o.plantDataManager,e=(i=window.PlantAnnotationTool)==null?void 0:i.appState;if(!t||!(e!=null&&e.currentPlant))throw new Error("Plant data manager or current plant not available");const n=new Map;try{const s=await t.getPlantImages(e.currentPlant.id,e.currentPlant.selectedViewAngle);if(!s||s.length===0)throw new Error("No images found for current plant and view angle");console.log("[Cross-Sectional] Analyzing ".concat(s.length," images for directionless annotations"));for(const a of s)try{const l=await t.getImageAnnotations(a.id);if(l&&l.length>0){const c=l.filter(d=>!d.direction||d.direction==="none"||d.direction===null);for(const d of c){const u=d.order||1;n.has(u)||n.set(u,[]),n.get(u).push({imageId:a.id,imageName:a.name,annotation:d})}}}catch(l){console.warn("[Cross-Sectional] Failed to load annotations for image ".concat(a.id,":"),l)}for(const[a,l]of n)l.sort((c,d)=>c.imageName.localeCompare(d.imageName));return console.log("[Cross-Sectional] Built map with ".concat(n.size," order numbers"),Array.from(n.keys()).sort((a,l)=>a-l)),n}catch(s){throw console.error("[Cross-Sectional] Failed to build cross-sectional map:",s),s}}getAvailableOrderNumbers(){return this.crossSectionalMap?Array.from(this.crossSectionalMap.keys()).sort((t,e)=>t-e):[]}getImagesWithOrder(t){return!this.crossSectionalMap||!this.crossSectionalMap.has(t)?[]:this.crossSectionalMap.get(t)}initializeCrossSectionalState(){const t=this.getAvailableOrderNumbers();if(t.length===0)throw new Error("No directionless annotations found across all images");this.crossSectionalState={currentOrder:t[0],currentImageIndex:0,processedCount:0,totalCount:this.getAllCrossSectionalPoints().length,availableOrders:t,startTime:Date.now()},console.log("[Cross-Sectional] Initialized state:",this.crossSectionalState)}getAllCrossSectionalPoints(){const t=[];if(!this.crossSectionalMap)return t;for(const e of this.crossSectionalMap.values())t.push(...e);return t}getCurrentCrossSectionalPoint(){if(!this.crossSectionalState)return null;const{currentOrder:t,currentImageIndex:e}=this.crossSectionalState,n=this.getImagesWithOrder(t);return e>=n.length?null:n[e]}async processCurrentCrossSectionalPoint(t){var n;if(!this.crossSectionalState){console.warn("[Cross-Sectional] Cannot process point - state is null");return}const e=this.getCurrentCrossSectionalPoint();if(!e){console.warn("[Cross-Sectional] No current point to process");return}try{e.annotation.direction=t;const o=(n=window.PlantAnnotationTool)==null?void 0:n.plantDataManager;if(o){const i=await o.getImageAnnotations(e.imageId);await o.saveImageAnnotations(e.imageId,i)}if(!this.crossSectionalState){console.warn("[Cross-Sectional] State became null during processing");return}this.crossSectionalState.processedCount++,console.log("[Cross-Sectional] Processed annotation #".concat(e.annotation.order," in ").concat(e.imageName," with direction: ").concat(t)),await this.advanceCrossSectionalProgress()}catch(o){throw console.error("[Cross-Sectional] Failed to process point:",o),o}}async advanceCrossSectionalProgress(){if(!this.crossSectionalState)return;const{currentOrder:t,currentImageIndex:e,availableOrders:n}=this.crossSectionalState,o=this.getImagesWithOrder(t);if(e+1<o.length){if(!this.crossSectionalState){console.warn("[Cross-Sectional] State became null during advance, cannot continue");return}this.crossSectionalState.currentImageIndex++;const i=o[this.crossSectionalState.currentImageIndex];console.log("[Cross-Sectional] Moving to next image for order ".concat(t,": ").concat(i.imageName)),await this.switchToImageForCrossSectional(i.imageId)}else{const i=n.indexOf(t);if(i+1<n.length){if(!this.crossSectionalState){console.warn("[Cross-Sectional] State became null during advance, cannot continue");return}const s=n[i+1];this.crossSectionalState.currentOrder=s,this.crossSectionalState.currentImageIndex=0;const a=this.getImagesWithOrder(s);a.length>0&&(console.log("[Cross-Sectional] Moving to next order ".concat(s,", starting with: ").concat(a[0].imageName)),await this.switchToImageForCrossSectional(a[0].imageId))}else console.log("[Cross-Sectional] All orders processed, completing mode"),this.completeCrossSectionalMode()}this.updateCrossSectionalProgressUI()}async switchToImageForCrossSectional(t){var e,n,o;try{console.log("[Cross-Sectional] Starting image switch to: ".concat(t));const i=(e=window.PlantAnnotationTool)==null?void 0:e.plantDataManager,s=(n=window.PlantAnnotationTool)==null?void 0:n.appState;if(!i||!(s!=null&&s.currentPlant))throw new Error("Plant data manager or current plant not available");const l=(await i.getPlantImages(s.currentPlant.id,s.currentPlant.selectedViewAngle)).find(d=>d.id===t);if(!l)throw new Error("Image not found: ".concat(t));if(console.log("[Cross-Sectional] Switching to image: ".concat(l.name)),window.handleImageSelect)console.log("[Cross-Sectional] Calling handleImageSelect..."),await window.handleImageSelect(l,!0),console.log("[Cross-Sectional] handleImageSelect completed successfully");else throw new Error("Global image selection function not available");console.log("[Cross-Sectional] Waiting for image to load..."),await this.waitForImageLoad(),console.log("[Cross-Sectional] Image loaded successfully");const c=this.getCurrentCrossSectionalPoint();if(c&&c.annotation){console.log("[Cross-Sectional] Looking for annotation #".concat(c.annotation.order," in loaded keypoints"));const d=this.keypoints.find(u=>u.order===c.annotation.order);d?(console.log("[Cross-Sectional] Found annotation #".concat(d.order,", selecting it")),this.state.selectedKeypoint=d,this.state.isDirectionSelectionMode=!0,this.selectKeypointWithZoom(d)):console.warn("[Cross-Sectional] Could not find annotation #".concat(c.annotation.order," in loaded keypoints"))}else console.warn("[Cross-Sectional] No current point available after image switch")}catch(i){console.error("[Cross-Sectional] Failed to switch image:",i),(o=window.PlantAnnotationTool)!=null&&o.showError&&window.PlantAnnotationTool.showError("Image Switch Failed",i.message)}}async waitForImageLoad(t=5e3){const e=Date.now();for(console.log("[Cross-Sectional] Waiting for image load... (max ".concat(t,"ms)"));!this.imageLoaded&&Date.now()-e<t;)await new Promise(n=>setTimeout(n,100));return this.imageLoaded?(console.log("[Cross-Sectional] Image loaded in ".concat(Date.now()-e,"ms")),!0):(console.warn("[Cross-Sectional] Image load timeout after ".concat(t,"ms")),!1)}completeCrossSectionalMode(){if(!this.crossSectionalState){console.warn("[Cross-Sectional] Cannot complete - state is null"),this.exitAutoDirectionMode();return}const t=Date.now()-this.crossSectionalState.startTime,e=this.crossSectionalState.processedCount;console.log("[Cross-Sectional] Mode completed! Processed ".concat(e," annotations in ").concat(t,"ms")),window.updateProgressInfo&&window.updateProgressInfo("Cross-Sectional mode completed! Processed ".concat(e," annotations across all images.")),this.crossSectionalState=null,this.crossSectionalMap.clear(),this.exitAutoDirectionMode()}updateCrossSectionalProgressUI(){const t=document.getElementById("auto-direction-progress"),e=document.getElementById("progress-current"),n=document.getElementById("progress-total"),o=document.getElementById("auto-direction-progress-fill"),i=document.getElementById("progress-mode-info");if(!this.crossSectionalState){t&&(t.style.display="none");return}const{processedCount:s,totalCount:a,currentOrder:l,availableOrders:c}=this.crossSectionalState,d=a>0?s/a*100:0;if(t&&(t.style.display="block"),e&&(e.textContent=s),n&&(n.textContent=a),o&&(o.style.width="".concat(d,"%"),o.className="progress-fill cross-sectional-indicator"),i){const u=c.indexOf(l);i.textContent="Order ".concat(l," (").concat(u+1,"/").concat(c.length,")")}}getAutoDirectionProgress(){if(this.autoDirectionMode==="cross-sectional"&&this.crossSectionalState){const{processedCount:t,totalCount:e,currentOrder:n,availableOrders:o}=this.crossSectionalState;return{total:e,completed:t,percentage:e>0?Math.round(t/e*100):0,currentOrder:n,totalOrders:o.length,mode:"cross-sectional"}}else if(this.autoDirectionMode==="longitudinal"&&this.state.isAutoDirectionMode){const t=this.state.autoDirectionKeypoints.length,e=this.state.autoDirectionIndex;return{total:t,completed:e,percentage:t>0?Math.round(e/t*100):0,mode:"longitudinal"}}return{total:0,completed:0,percentage:0,mode:this.autoDirectionMode}}exitAutoDirectionMode(){console.log("[调试] exitAutoDirectionMode 被调用",{stackTrace:new Error().stack});const t=this.autoDirectionMode;console.log("[调试] 保存用户模式偏好:",t),this.state.isAutoDirectionMode=!1,this.state.autoDirectionKeypoints=[],this.state.autoDirectionIndex=0,this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null,this.autoDirectionMode==="cross-sectional"&&this.crossSectionalState?(console.log("[调试] 延迟清理 cross-sectional 状态，让完成流程处理"),this.autoDirectionMode=t):(this.crossSectionalState=null,this.autoDirectionMode=t),this.restoreNormalPreview(),this.render(),this.resetAutoDirectionButton();const e=document.getElementById("auto-direction-mode-selector");e&&t&&(e.value=t,console.log("[调试] 恢复UI选择器状态:",t)),console.log("Exited auto direction mode, preserved mode preference:",t)}startAutoOrderMode(t){if(console.log("[Auto Order] 开始自动排序模式，类型:",t),this.state.isAutoOrderMode){console.log("[Auto Order] 已在自动排序模式中");return}console.log("[Auto Order] 正在查找无序号标注...");const e=this.getAllUnorderedAnnotationsOfType(t);if(console.log("[Auto Order] 找到无序号标注:",e.length,"个"),e.length===0){console.log("[Auto Order] 没有找到无序号标注，尝试跳转到有当前类型的第一张图"),this.navigateToFirstImageWithType(t);return}console.log("[Auto Order] 按图片分组...");const n=this.groupAnnotationsByImage(e),o=Object.keys(n).sort();if(console.log("[Auto Order] 找到图片:",o.length,"个",o),o.length===0){console.log("[Auto Order] 没有找到需要排序的图片，退出"),window.showError&&window.showError("自动排序不可用","没有找到需要排序的图片");return}this.state.isAutoOrderMode=!0,this.state.autoOrderTypeId=t,this.state.autoOrderCurrentOrder=1,this.state.autoOrderImages=o,this.state.autoOrderCurrentImageIndex=0,this.updateAutoOrderButton(!0),this.updateAutoOrderStatus('Ordering type "'.concat(this.getTypeName(t),'" #').concat(this.state.autoOrderCurrentOrder)),this.navigateToImageWithBuiltinOrder(1),console.log("[Auto Order] 自动排序模式已启动，共",o.length,"个图片需要处理")}stopAutoOrderMode(){console.log("[Auto Order] 停止自动排序模式"),this.state.isAutoOrderMode=!1,this.state.autoOrderTypeId=null,this.state.autoOrderCurrentOrder=1,this.state.autoOrderImages=[],this.state.autoOrderCurrentImageIndex=0,this.updateAutoOrderButton(!1),this.updateAutoOrderStatus(""),console.log("[Auto Order] 自动排序模式已停止")}handleAutoOrderAnnotationClick(t){if(!this.state.isAutoOrderMode||!t||t.annotationType!=="custom"||t.customTypeId!==this.state.autoOrderTypeId)return!1;const e=this.state.autoOrderCurrentOrder;return t.order!==void 0?console.log("[Auto Order] 更新已有序号标注从",t.order,"到",e):console.log("[Auto Order] 为无序号标注分配序号",e),t.order=e,this.saveCurrentImageAnnotations(),this.syncOrderAcrossImages(t,e),this.proceedToNextOrder(),!0}proceedToNextOrder(){console.log("[Auto Order] 完成当前序号标注，切换到下一个图片"),this.navigateToNextImageInAutoOrder()}skipCurrentImageInAutoOrder(){this.state.isAutoOrderMode&&(console.log("[Auto Order] 跳过当前图片"),this.navigateToNextUnorderedImage())}notifySelectedKeypointPreview(t){var n;const e=(n=window.PlantAnnotationTool)==null?void 0:n.branchPointPreviewManager;e&&t&&t.order&&e.showSpecificOrderPreview(t.order)}restoreNormalPreview(){var e;const t=(e=window.PlantAnnotationTool)==null?void 0:e.branchPointPreviewManager;t&&t.restoreNormalPreview()}handleContextMenu(t){t.preventDefault();const e=this.getMousePos(t),n=this.getCustomAnnotationAt(e);if(n){this.removeCustomAnnotation(n);return}const o=this.getKeypointAt(e);if(o){this.removeKeypoint(o);return}console.log("[调试] 右键点击空白区域"),this.state.isAutoOrderMode?(console.log("[Auto Order] 右键跳过当前图片"),this.skipCurrentImageInAutoOrder()):this.clearAllSelections()}clearAllSelections(){this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null,this.customAnnotationRenderer&&this.customAnnotationRenderer.clearSelection(),this.state.isSelectingParent&&this.disableParentSelectionMode(),this.render(),console.log("[调试] 已清空所有选中状态")}handleWheel(t){if(t.preventDefault(),this.state.isDirectionCountMode){this.handleScrollWheel(t);return}const e=this.getMousePos(t),o=1+(-t.deltaY>0?this.options.zoomSpeed:-this.options.zoomSpeed);this.zoomAt(e.x,e.y,o)}zoomAt(t,e,n){const o=this.state.scale*n;o<this.options.minZoom||o>this.options.maxZoom||(this.state.translateX=t-(t-this.state.translateX)*n,this.state.translateY=e-(e-this.state.translateY)*n,this.state.scale=o,this.updateZoomInfo(),this.render())}handleKeyDown(t){var e,n,o,i,s,a,l,c;if(console.log("[调试] 键盘事件:",t.key,"target:",t.target.tagName,"focused element:",(e=document.activeElement)==null?void 0:e.tagName),t.target.tagName==="INPUT"||t.target.tagName==="TEXTAREA"){console.log("[调试] 在输入框中，忽略键盘事件");return}switch(t.key){case" ":t.preventDefault();break;case"r":case"R":t.preventDefault(),this.resetView();break;case"1":t.preventDefault(),this.setZoom(1);break;case"z":(t.ctrlKey||t.metaKey)&&(t.preventDefault(),t.shiftKey?this.redo():this.undo());break;case"y":(t.ctrlKey||t.metaKey)&&(t.preventDefault(),this.redo());break;case"e":case"E":if(t.preventDefault(),console.log("[调试] E键被按下 - 父节点选择模式切换"),this.state.isSelectingParent){console.log("[调试] 取消父节点选择模式"),this.disableParentSelectionMode(),(n=window.PlantAnnotationTool)!=null&&n.showInfo&&window.PlantAnnotationTool.showInfo("Parent Link","已取消父节点选择");break}const d=this.state.selectedKeypoint;if(console.log("[调试] 当前选中标注:",d==null?void 0:d.id,"type:",d==null?void 0:d.annotationType,"customTypeId:",d==null?void 0:d.customTypeId),!d||d.annotationType!=="custom"||!d.customTypeId){console.log("[调试] 无有效选中标注，显示错误提示"),(o=window.PlantAnnotationTool)!=null&&o.showError?window.PlantAnnotationTool.showError("无法进入父节点选择","请先选中一个可关联父节点的自定义标注"):console.log("[调试] 无法进入父节点选择 - 请先选中一个可关联父节点的自定义标注");break}const u=this.getCustomType(d.customTypeId),h=(i=u==null?void 0:u.metadata)==null?void 0:i.associateTypeId;if(console.log("[调试] 子类型:",u==null?void 0:u.name,"关联父类型ID:",h),!h){console.log("[调试] 未配置父类型，显示错误提示"),(s=window.PlantAnnotationTool)!=null&&s.showError?window.PlantAnnotationTool.showError("未配置父类型","该标注类型未在 Annotation Type Setting 中设置父类型"):console.log("[调试] 未配置父类型 - 该标注类型未在 Annotation Type Setting 中设置父类型");break}if(console.log("[调试] 启动父节点选择模式"),this.enableParentSelectionMode(d.customTypeId),(a=window.PlantAnnotationTool)!=null&&a.showInfo){const m=((l=this.getCustomType(h))==null?void 0:l.name)||"父类型";window.PlantAnnotationTool.showInfo("Parent Link",'已进入父节点选择模式：点击一个"'.concat(m,'"标注以建立关联'))}else{const m=((c=this.getCustomType(h))==null?void 0:c.name)||"父类型";console.log('[调试] 已进入父节点选择模式：点击一个"'.concat(m,'"标注以建立关联'))}break}}handleKeyUp(t){}setZoom(t){if(!this.imageElement||!this.imageLoaded)return;const e=this.canvas.width/2,n=this.canvas.height/2;this.zoomAt(e,n,t/this.state.scale)}updateZoomInfo(){const t=document.getElementById("zoom-level");t&&(t.textContent=Math.round(this.state.scale*100)+"%")}getKeypointAt(t){const e=this.options.baseKeypointRadius+5;return this.keypoints.find(n=>{const o=this.imageToScreen(n.x,n.y);return Math.sqrt(Math.pow(t.x-o.x,2)+Math.pow(t.y-o.y,2))<=e})}addKeypoint(t,e="right"){if(!this.canCreateAnnotationAt(t.x,t.y)){console.warn("[AnnotationTool] Cannot add keypoint: position is outside valid annotation area");return}const n=this.screenToImage(t.x,t.y);this.addKeypointWithDirection(n.x,n.y,e)}addKeypointWithDirection(t,e,n,o=null,i=null,s=null){if(!this.imageElement||!this.imageLoaded){console.warn("[AnnotationTool] Cannot add keypoint: no image loaded");return}if(!o&&this.customAnnotationManager&&this.customAnnotationManager.isInCustomMode()){const h=this.customAnnotationManager.getCurrentCustomType();h&&(h.type==="point"||h.type==="region")&&(o=h.id,(!h.metadata||h.metadata.isDirectional===!1)&&(n=null))}let a;this.state.isUnorderedMode?a=null:a=o?this.findNextAvailableOrderForType(o):this.findNextAvailableOrder();let l=n;n==="left"?l=180:n==="right"?l=0:typeof n=="number"?l=n:n===void 0?l=void 0:l=0;const c={id:Date.now(),x:t,y:e,timestamp:new Date().toISOString(),...l!==void 0&&{direction:l},...l!==void 0&&{directionType:"angle"},...a!==null&&{order:a},annotationType:o?"custom":"regular",...o&&{customTypeId:o},...typeof i=="number"&&{width:i},...typeof s=="number"&&{height:s}};this.keypoints.push(c),this.saveState(),this.render(),this.autoSaveCurrentImage(),this.triggerRealTimeSync("ADD_KEYPOINT",c),this.syncBranchPointPreview(),this.justCreatedNewPoint=!0,this.state.autoMoveToExpectedPosition&&(this.moveToNextExpectedPosition(),this.justCreatedNewPoint=!1);const d=o?"custom(".concat(o,")"):"regular",u=typeof l=="number"?"".concat(l,"°"):l;return console.log("Added ".concat(d," keypoint #").concat(a," at (").concat(t.toFixed(1),", ").concat(e.toFixed(1),") with direction ").concat(u)),c}addCustomPointAnnotation(t,e,n){let o=null;try{const i=this.getCustomType(n);i&&i.metadata&&typeof i.metadata.defaultAngle=="number"&&(o=i.metadata.defaultAngle)}catch(i){}return this.addKeypointWithDirection(t,e,o,n)}addCustomRegionAnnotation(t,e,n,o,i){return this.addKeypointWithDirection(t,e,null,i,n,o)}getCustomType(t){var e;return this.customAnnotationManager?this.customAnnotationManager.getCustomType(t):((e=this.customTypes)==null?void 0:e.get(t))||null}setCustomTypes(t){this.customTypes=t}handleUnifiedCustomAnnotationMode(t){if(!this.customAnnotationManager){console.warn("Custom annotation manager not available");return}try{const e=this.customAnnotationManager.getCurrentCustomType();if(!e){console.warn("No custom type selected");return}const n=this.screenToImage(t.x,t.y);if(e.type==="point"){const o=this.addCustomPointAnnotation(n.x,n.y,e.id);o&&console.log("Created unified custom point annotation:",o)}else e.type==="region"&&this.startUnifiedCustomRegionDrag(t,e.id)}catch(e){console.error("Failed to handle unified custom annotation mode:",e)}}startUnifiedCustomRegionDrag(t,e){if(!this.canCreateAnnotationAt(t.x,t.y)){console.warn("Cannot create custom region annotation: position is outside valid area");return}this.state.isCustomRegionDragging=!0,this.state.customRegionStartPoint=t,this.state.customRegionCurrentPoint=t,this.state.customRegionTypeId=e,this.canvas.style.cursor="crosshair",console.log("Started unified custom region drag at:",t)}finishUnifiedCustomRegionDrag(){if(!this.state.isCustomRegionDragging||!this.state.customRegionStartPoint||!this.state.customRegionCurrentPoint){this.resetCustomRegionDrag();return}const t=this.screenToImage(this.state.customRegionStartPoint.x,this.state.customRegionStartPoint.y),e=this.screenToImage(this.state.customRegionCurrentPoint.x,this.state.customRegionCurrentPoint.y),n=this.state.customRegionStartPoint,o=this.state.customRegionCurrentPoint,i=Math.abs(o.x-n.x),s=Math.abs(o.y-n.y),a=8;if(i<a||s<a){console.log("Region too small, ignoring"),this.resetCustomRegionDrag();return}const l=Math.min(t.x,e.x),c=Math.min(t.y,e.y),d=Math.abs(e.x-t.x),u=Math.abs(e.y-t.y),h=this.addCustomRegionAnnotation(l,c,d,u,this.state.customRegionTypeId);h&&console.log("Created unified custom region annotation:",h),this.resetCustomRegionDrag()}findNextAvailableOrderForType(t){const e=this.keypoints.filter(o=>o.annotationType==="custom"&&o.customTypeId===t);if(e.length===0)return 1;const n=e.map(o=>o.order||0).filter(o=>o>0).sort((o,i)=>o-i);for(let o=1;o<=n.length+1;o++)if(!n.includes(o))return o;return n.length+1}findNextAvailableOrder(){const t=this.keypoints.filter(n=>n.annotationType==="regular"||!n.annotationType);if(t.length===0)return 1;const e=t.map(n=>n.order||0).filter(n=>n>0).sort((n,o)=>n-o);for(let n=1;n<=e.length+1;n++)if(!e.includes(n))return n;return e.length+1}removeKeypoint(t){const e=this.keypoints.indexOf(t);if(e!==-1){const n=this.keypoints.splice(e,1)[0];this.saveState(),this.render(),this.triggerRealTimeSync("DELETE_KEYPOINT",n),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log("Removed keypoint #".concat(n.order||"unknown"," (id: ").concat(t.id,")")),console.log("下一个新增标注点将使用编号: ".concat(this.findNextAvailableOrder()))}}clearKeypoints(){this.keypoints.length>0&&(this.keypoints=[],this.saveState(),this.render(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log("Cleared all keypoints (unified system)"))}clearKeypointsWithoutSave(){this.keypoints.length>0&&(this.keypoints=[],this.saveState(),this.render(),this.syncBranchPointPreview(),console.log("Cleared all keypoints (without auto-save, unified system)"))}reorderKeypoints(){this.keypoints.sort((t,e)=>{const n=t.order||0,o=e.order||0;return n-o});for(let t=0;t<this.keypoints.length;t++)this.keypoints[t].order=t+1;console.log("Reordered ".concat(this.keypoints.length," keypoints"))}saveState(){const t={keypoints:JSON.parse(JSON.stringify(this.keypoints)),timestamp:Date.now()};this.history=this.history.slice(0,this.historyIndex+1),this.history.push(t),this.historyIndex=this.history.length-1,this.history.length>this.maxHistorySize&&(this.history.shift(),this.historyIndex--)}undo(){if(this.historyIndex>0){this.historyIndex--;const t=this.history[this.historyIndex];this.keypoints=JSON.parse(JSON.stringify(t.keypoints)),this.render(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log("Undo")}}redo(){if(this.historyIndex<this.history.length-1){this.historyIndex++;const t=this.history[this.historyIndex];this.keypoints=JSON.parse(JSON.stringify(t.keypoints)),this.render(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),console.log("Redo")}}getAnnotationData(){var t,e;return{keypoints:this.keypoints.map(n=>({...n})),imageInfo:this.currentImage?{name:this.currentImage.name,width:(t=this.imageElement)==null?void 0:t.width,height:(e=this.imageElement)==null?void 0:e.height}:null,viewState:{scale:this.state.scale,translateX:this.state.translateX,translateY:this.state.translateY}}}loadAnnotationData(t){t.keypoints&&(this.keypoints=t.keypoints.map(e=>({...e})),console.log("🔄 Loaded ".concat(this.keypoints.length," keypoints (auto-renumbering disabled)"))),t.viewState&&(this.state.scale=t.viewState.scale||1,this.state.translateX=t.viewState.translateX||0,this.state.translateY=t.viewState.translateY||0,this.updateZoomInfo()),this.saveState(),this.render()}ensureKeypointOrders(){const t={};this.keypoints.forEach(o=>{const i=o.annotationType==="custom"?"custom:".concat(o.customTypeId||"unknown"):"regular";t[i]||(t[i]=[]),t[i].push(o)});let e=!1,n=0;Object.entries(t).forEach(([o,i])=>{let s=!1;for(let a=0;a<i.length;a++)if(typeof i[a].order!="number"||i[a].order<=0){s=!0;break}if(!s){const a=i.map(c=>c.order);[...new Set(a)].length!==a.length&&(s=!0)}if(s){console.log("发现 ".concat(o," 类型标注序号问题，正在为 ").concat(i.length," 个标注点分配序号...")),e=!0;for(let a=0;a<i.length;a++)i[a].order=a+1;n+=i.length,console.log("已为 ".concat(o," 类型分配序号：1-").concat(i.length))}}),e&&(console.log("发现传统数据或序号问题，正在为标注点添加/修复序号..."),console.log("序号修复完成：共修复 ".concat(n," 个标注点，保持类型特定编号系统")))}destroy(){this.imageElement&&this.imageElement.src.startsWith("blob:")&&URL.revokeObjectURL(this.imageElement.src),console.log("AnnotationTool destroyed")}startDirectionAnnotation(t){var n;if(!this.canCreateAnnotationAt(t.x,t.y)){(n=window.PlantAnnotationTool)!=null&&n.showError&&window.PlantAnnotationTool.showError("Invalid Position","Direction annotations can only be placed within the image area. Please click directly on the image.");return}const e=this.screenToImage(t.x,t.y);this.state.isDirectionDragging=!0,this.state.dragStartPoint=t,this.state.currentDragPoint=t,this.state.previewKeypoint={x:e.x,y:e.y,direction:0,directionType:"angle"},this.canvas.style.cursor="grabbing",console.log("Started direction annotation")}updateDirectionDragging(t){this.state.currentDragPoint=t;const e=t.x-this.state.dragStartPoint.x,n=t.y-this.state.dragStartPoint.y;if(Math.sqrt(e*e+n*n)>=this.options.directionThreshold){const s=(Math.atan2(n,e)*180/Math.PI+360)%360;this.state.previewKeypoint.direction=s,this.state.previewKeypoint.directionType="angle"}else this.state.previewKeypoint.direction=0,this.state.previewKeypoint.directionType="angle";this.render()}finishDirectionAnnotation(){if(!this.state.previewKeypoint){this.resetDirectionDragging();return}const t=this.state.currentDragPoint.x-this.state.dragStartPoint.x,e=this.state.currentDragPoint.y-this.state.dragStartPoint.y,n=Math.sqrt(t*t+e*e);let o;n>=this.options.directionThreshold?(o=(Math.atan2(e,t)*180/Math.PI+360)%360,console.log("Added keypoint with angle direction ".concat(o.toFixed(1),"° at (").concat(this.state.previewKeypoint.x.toFixed(1),", ").concat(this.state.previewKeypoint.y.toFixed(1),")"))):(o=0,console.log("Added default keypoint (0°) at (".concat(this.state.previewKeypoint.x.toFixed(1),", ").concat(this.state.previewKeypoint.y.toFixed(1),")"))),this.addKeypointWithDirection(this.state.previewKeypoint.x,this.state.previewKeypoint.y,o),this.resetDirectionDragging()}resetDirectionDragging(){this.state.isDirectionDragging=!1,this.state.dragStartPoint=null,this.state.currentDragPoint=null,this.state.previewKeypoint=null,this.canvas.style.cursor="crosshair",this.render()}getKeypointDisplayStrategy(){const t=this.state.scale,e=2;let n;if(t>=1.5){const o=Math.max(10,Math.min(16,12*t)),i=Math.max(8,o*.7),s=Math.min(12,8+(t-1.5)*2);n=Math.min(i,s),n=Math.max(8,n)}else n=e+(t-.1)*1.5,n=Math.max(e,Math.min(4,n));return{scale:t,radius:n,showInternalLabel:t>=1.5,showExternalLabel:t>=this.options.tinyThresholdScale,showMinimalMode:t<this.options.tinyThresholdScale,fontSize:Math.max(10,Math.min(16,12*t)),directionFontSize:Math.max(8,Math.min(12,10*t)),labelOffset:8,borderWidth:Math.max(1,Math.min(2,1.5*t))}}createExternalLabel(t,e,n,o,i,s){const a=this.canvas,l=a.parentElement,c=document.createElement("div");c.className="keypoint-label ".concat(o==="left"?"left-direction":"right-direction"),c.textContent=n.toString(),c.dataset.keypointId="".concat(t,"-").concat(e);const d=a.getBoundingClientRect(),u=l.getBoundingClientRect(),h=d.left-u.left,m=d.top-u.top,f=s.radius<4?12:15;c.style.left=h+t-6+"px",c.style.top=m+e-s.radius-f+"px",l.appendChild(c)}createTooltip(t,e,n,o,i){const s=this.canvas,a=s.parentElement,l=a.querySelector(".keypoint-tooltip");l&&l.remove();const c=document.createElement("div");c.className="keypoint-tooltip";const d=o==="left"?"Left":"Right",u="(".concat(Math.round(i.x),", ").concat(Math.round(i.y),")");c.innerHTML="\n      <div>分支点 #".concat(n,"</div>\n      <div>方向: ").concat(d,"</div>\n      <div>位置: ").concat(u,"</div>\n    ");const h=s.getBoundingClientRect(),m=a.getBoundingClientRect(),f=h.left-m.left,y=h.top-m.top;c.style.left=f+t-60+"px",c.style.top=y+e-80+"px",a.appendChild(c),setTimeout(()=>{c.parentElement&&c.remove()},3e3)}clearKeypointLabels(){if(!this.canvas||!this.canvas.parentElement)return;this.canvas.parentElement.querySelectorAll(".keypoint-label").forEach(n=>n.remove())}updateZoomIndicator(t){const e=document.getElementById("zoom-indicator");e&&(e.classList.remove("small","tiny"),t.showMinimalMode?e.classList.add("tiny"):t.showExternalLabel&&e.classList.add("small"))}updateAnnotationSizeInfo(t){const e=document.getElementById("annotation-size-info"),n=document.getElementById("size-info-text");if(!e||!n)return;let o="",i=!1;t.showMinimalMode?(o="标注点: 极小模式（悬停查看详情）",i=!0):t.showExternalLabel?(o="标注点: 外部标签模式",i=!0):(o="标注点: 正常大小",i=this.keypoints.length>0&&(t.scale<.8||t.scale>3)),n.textContent=o,i?(e.classList.add("visible"),setTimeout(()=>{e&&e.classList.remove("visible")},2e3)):e.classList.remove("visible")}syncBranchPointPreview(){var n,o;const t=(n=window.PlantAnnotationTool)==null?void 0:n.branchPointPreviewManager,e=(o=window.PlantAnnotationTool)==null?void 0:o.appState;if(t&&(e!=null&&e.currentPlant)&&(e!=null&&e.currentImage)){const i=this.keypoints.length;setTimeout(async()=>{var s;try{const a=(s=window.PlantAnnotationTool)==null?void 0:s.plantDataManager;if(a){const c=(await a.getPlantImages(e.currentPlant.id,e.currentPlant.selectedViewAngle)).findIndex(d=>d.id===e.currentImage.id);await t.updateContext(e.currentPlant.id,e.currentPlant.selectedViewAngle,c,i)}}catch(a){console.warn("同步分支点预览失败:",a)}},100)}}notifyDraggedKeypointPreview(t){var n;const e=(n=window.PlantAnnotationTool)==null?void 0:n.branchPointPreviewManager;e&&t&&t.order&&e.showSpecificOrderPreview(t.order)}setImageSwitchLock(t,e=null){this.imageSwitchLock.isLocked=t,this.imageSwitchLock.currentLoadingImageId=e,this.imageSwitchLock.lockStartTime=t?Date.now():null,console.log("[图像切换锁] ".concat(t?"锁定":"解锁"," - 图像: ").concat(e||"none"))}validateCurrentImageConsistency(t){var o,i;const e=(o=window.PlantAnnotationTool)==null?void 0:o.appState;if(!((i=e==null?void 0:e.currentImage)!=null&&i.id))return console.warn("[一致性检查] 当前图像状态无效"),!1;const n=e.currentImage.id===t;return n||console.warn("[一致性检查] 不一致 - 期望: ".concat(t,", 实际: ").concat(e.currentImage.id)),n}async autoSaveCurrentImage(){var t,e;try{const n=(t=window.PlantAnnotationTool)==null?void 0:t.plantDataManager,o=(e=window.PlantAnnotationTool)==null?void 0:e.appState;if(!n||!(o!=null&&o.currentPlant)||!(o!=null&&o.currentImage)){console.warn("自动保存跳过：缺少必要的上下文信息");return}if(this.imageSwitchLock.isLocked){console.warn("[自动保存] 跳过：图像切换进行中 (".concat(this.imageSwitchLock.currentLoadingImageId,")"));return}if(!o.currentImage||!o.currentImage.id){console.warn("自动保存跳过：当前图像信息无效");return}const i=o.currentImage.id,s=this.getAnnotationData();if(!this.validateCurrentImageConsistency(i)){console.warn("[自动保存] 跳过：图像状态在保存前发生变化 (".concat(i,")"));return}if(await n.saveImageAnnotations(i,s.keypoints),!this.validateCurrentImageConsistency(i)){console.warn("[自动保存] 警告：图像状态在保存后发生变化，数据可能已保存到错误图像 (".concat(i,")"));return}console.log("自动保存完成：".concat(s.keypoints.length," 个标注点已保存到图像 ").concat(i));try{const a=window.refreshThumbnailAnnotationStatus;typeof a=="function"?(await a(i),console.log("自动保存后缩略图状态已刷新")):console.warn("refreshThumbnailAnnotationStatus 函数未找到，跳过缩略图刷新")}catch(a){console.warn("刷新缩略图状态失败:",a)}}catch(n){console.error("自动保存失败:",n)}}triggerRealTimeSync(t,e,n=null){var o,i;try{const s=(o=window.PlantAnnotationTool)==null?void 0:o.realTimeSyncManager;if(!s){console.warn("🔄 实时同步管理器未找到，跳过同步操作");return}if(!s.isRealTimeSyncEnabled()){console.log("🔄 实时同步已禁用，跳过同步操作");return}const a=(i=window.PlantAnnotationTool)==null?void 0:i.appState;if(!(a!=null&&a.currentPlant)||!(a!=null&&a.currentImage)){console.warn("🔄 缺少当前植株或图像信息，跳过同步操作");return}const l={id:e==null?void 0:e.id,order:e==null?void 0:e.order,annotationType:e==null?void 0:e.annotationType,customTypeId:e==null?void 0:e.customTypeId,x:e==null?void 0:e.x,y:e==null?void 0:e.y};if(console.log("🔄 触发实时同步: ".concat(t),{keypoint:l,plant:a.currentPlant.id,image:a.currentImage.id,isCustom:(e==null?void 0:e.annotationType)==="custom"}),(e==null?void 0:e.annotationType)==="custom")switch(console.log("🔄 Using custom annotation sync for ".concat(t)),t){case"ADD_KEYPOINT":const d={type:"CUSTOM_ANNOTATION_CREATE",annotation:e,context:{imageId:a.currentImage.id,plantId:a.currentPlant.id,viewAngle:a.currentPlant.selectedViewAngle,appState:a},timestamp:new Date().toISOString()};s.triggerCustomAnnotationSync(d);break;case"MOVE_KEYPOINT":const u={type:"CUSTOM_ANNOTATION_UPDATE",annotation:e,context:{imageId:a.currentImage.id,plantId:a.currentPlant.id,viewAngle:a.currentPlant.selectedViewAngle,appState:a,positionChange:{from:n,to:{x:e.x,y:e.y}}},timestamp:new Date().toISOString()};s.triggerCustomAnnotationSync(u);break;case"DELETE_KEYPOINT":const h={type:"CUSTOM_ANNOTATION_DELETE",annotation:e,context:{imageId:a.currentImage.id,plantId:a.currentPlant.id,viewAngle:a.currentPlant.selectedViewAngle,appState:a},timestamp:new Date().toISOString()};s.triggerCustomAnnotationSync(h);break;default:console.warn("🔄 未知的自定义标注同步操作类型: ".concat(t))}else switch(console.log("🔄 Using regular keypoint sync for ".concat(t)),t){case"ADD_KEYPOINT":s.triggerKeypointAddSync(e,a.currentImage,a.currentPlant);break;case"MOVE_KEYPOINT":s.triggerKeypointMoveSync(e,n,a.currentImage,a.currentPlant);break;case"DELETE_KEYPOINT":s.triggerKeypointDeleteSync(e,a.currentImage,a.currentPlant);break;case"EDIT_DIRECTION":s.triggerDirectionEditSync(e,a.currentImage,a.currentPlant);break;default:console.warn("🔄 未知的常规标注同步操作类型: ".concat(t))}}catch(s){console.error("🔄 触发实时同步失败:",s)}}renderDirectionIndicator(t,e,n,o){if(!n)return;let i,s="";if(typeof n=="number")i=n,s="".concat(i.toFixed(1),"°");else if(n==="left")i=180,s="Left (180°)";else if(n==="right")i=0,s="Right (0°)";else return;this.renderDirectionArrow(t,e,i,s,o)}renderDirectionArrow(t,e,n,o,i){const s=n*Math.PI/180,a=this.options.directionArrowLength,l=t+Math.cos(s)*a,c=e+Math.sin(s)*a;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.setLineDash([8,4]),this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(l,c),this.ctx.stroke(),this.ctx.setLineDash([]);const d=s+Math.PI*.8,u=s-Math.PI*.8,h=15;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(l,c),this.ctx.lineTo(l+Math.cos(d)*h,c+Math.sin(d)*h),this.ctx.moveTo(l,c),this.ctx.lineTo(l+Math.cos(u)*h,c+Math.sin(u)*h),this.ctx.stroke();const m=20,f=l+Math.cos(s)*m,y=c+Math.sin(s)*m;this.ctx.font="bold 11px Arial";const x=this.ctx.measureText(o).width,I=11;this.ctx.fillStyle="rgba(16, 185, 129, 0.9)",this.ctx.fillRect(f-x/2-3,y-I/2-2,x+6,I+4),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o,f,y)}renderDirectionSelectionGuide(){if(!this.state.selectedKeypoint||!this.state.directionSelectionPoint)return;const t=this.imageToScreen(this.state.selectedKeypoint.x,this.state.selectedKeypoint.y),e=this.state.directionSelectionPoint.x,n=this.state.directionSelectionPoint.y;if(Math.sqrt(Math.pow(e-t.x,2)+Math.pow(n-t.y,2))<20)return;this.ctx.strokeStyle="#f59e0b",this.ctx.lineWidth=3,this.ctx.setLineDash([8,4]),this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e,n),this.ctx.stroke();const i=e-t.x,s=n-t.y,a=Math.atan2(s,i),l=(a*180/Math.PI+360)%360,c=a+Math.PI*.8,d=a-Math.PI*.8,u=12;this.ctx.setLineDash([]),this.ctx.beginPath(),this.ctx.moveTo(e,n),this.ctx.lineTo(e+Math.cos(c)*u,n+Math.sin(c)*u),this.ctx.moveTo(e,n),this.ctx.lineTo(e+Math.cos(d)*u,n+Math.sin(d)*u),this.ctx.stroke();const h=25,m=e+Math.cos(a)*h,f=n+Math.sin(a)*h,y="".concat(l.toFixed(1),"°");this.ctx.font="bold 12px Arial";const x=this.ctx.measureText(y).width,I=12;this.ctx.fillStyle="rgba(245, 158, 11, 0.9)",this.ctx.fillRect(m-x/2-4,f-I/2-2,x+8,I+4),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(y,m,f),this.ctx.setLineDash([])}upgradeLegacyDirections(){let t=0;return this.keypoints.forEach(e=>{e.direction==="left"&&e.directionType!=="angle"?(e.direction=180,e.directionType="angle",t++):e.direction==="right"&&e.directionType!=="angle"&&(e.direction=0,e.directionType="angle",t++)}),t>0&&(console.log("Upgraded ".concat(t," legacy direction annotations to angle format")),this.saveState(),this.render(),this.autoSaveCurrentImage()),t}setAutoMoveToExpectedPosition(t){this.state.autoMoveToExpectedPosition=t,console.log("自动切换到预期位置: ".concat(t?"开启":"关闭"))}getTargetScale(){if(typeof window.getZoomLockSettings=="function"){const t=window.getZoomLockSettings();if(t.isLocked)return console.log("[自动切换] 使用锁定倍数: ".concat(t.lockValue,"x")),t.lockValue}return console.log("[自动切换] 保持当前倍数: ".concat(this.state.scale.toFixed(1),"x")),this.state.scale}moveToHighestKeypoint(){if(!this.keypoints||this.keypoints.length===0)return console.log("没有标注点，无法移动视角"),!1;const t=this.keypoints.reduce((i,s)=>{const a=s.order||0,l=i.order||0;return a>l?s:i});console.log("移动视角到最高标记点 #".concat(t.order));const e=this.state.scale,n=this.canvas.width/2,o=this.canvas.height/2;return this.state.translateX=n-t.x*e,this.state.translateY=o-t.y*e,this.constrainView(),this.updateZoomInfo(),this.render(),console.log("视角已移动到标注点 #".concat(t.order,"，保持缩放: ").concat(e.toFixed(1),"x")),!0}async moveToExpectedPosition(t=!1){if(this.state.autoMoveToExpectedPosition)try{t?await this.handleImageSwitchAutoMove():await this.moveToNextExpectedPosition()}catch(e){console.error("[自动切换] 移动到预期位置失败:",e)}}async handleImageSwitchAutoMove(){const t=this.keypoints||[];console.log("[自动切换] 图片切换：新图像有 ".concat(t.length," 个标注点")),t.length===0?(console.log("[自动切换] 新图像没有标注，移动到1号点位置"),await this.moveToPosition1()):t.some(n=>n.direction!==null&&n.direction!==void 0&&(typeof n.direction=="number"||n.directionType==="angle"))?console.log("[自动切换] 新图像有方向标注，保持当前位置"):(console.log("[自动切换] 新图像有无方向标注，移动到几何中心"),this.moveToAnnotationsCenter())}async moveToPosition1(){var t;try{const e=(t=window.PlantAnnotationTool)==null?void 0:t.branchPointPreviewManager;if(!e){console.log("[自动切换] 预览管理器不可用，无法获取1号位置");return}const n=await e.getExpectedPosition(1);if(n){console.log("[自动切换] 移动到1号位置: (".concat(n.x.toFixed(1),", ").concat(n.y.toFixed(1),")"));const o=typeof window.getZoomLockSettings=="function"?window.getZoomLockSettings():{isLocked:!1};o.isLocked?(this.state.scale=o.lockValue,console.log("[自动切换] 应用锁定倍数: ".concat(o.lockValue,"x"))):console.log("[自动切换] 保持当前倍数: ".concat(this.state.scale.toFixed(1),"x"));const i=this.canvas.width/2,s=this.canvas.height/2;this.state.translateX=i-n.x*this.state.scale,this.state.translateY=s-n.y*this.state.scale,this.constrainView(),this.updateZoomInfo(),this.render(),console.log("[自动切换] 视角已移动到1号位置，缩放: ".concat(this.state.scale.toFixed(1),"x"))}else console.log("[自动切换] 未找到1号位置的参考坐标")}catch(e){console.error("[自动切换] 移动到1号位置失败:",e)}}moveToAnnotationsCenter(){const t=this.keypoints||[];if(t.length===0)return;let e=0,n=0;for(const c of t)e+=c.x,n+=c.y;const o=e/t.length,i=n/t.length;console.log("[自动切换] 移动到标注点几何中心: (".concat(o.toFixed(1),", ").concat(i.toFixed(1),"), 共").concat(t.length,"个标注点"));const s=typeof window.getZoomLockSettings=="function"?window.getZoomLockSettings():{isLocked:!1};s.isLocked?(this.state.scale=s.lockValue,console.log("[自动切换] 应用锁定倍数: ".concat(s.lockValue,"x"))):console.log("[自动切换] 保持当前倍数: ".concat(this.state.scale.toFixed(1),"x"));const a=this.canvas.width/2,l=this.canvas.height/2;this.state.translateX=a-o*this.state.scale,this.state.translateY=l-i*this.state.scale,this.constrainView(),this.updateZoomInfo(),this.render(),console.log("[自动切换] 视角已移动到标注点几何中心，缩放: ".concat(this.state.scale.toFixed(1),"x"))}async moveToNextExpectedPosition(){var t;try{const e=(t=window.PlantAnnotationTool)==null?void 0:t.branchPointPreviewManager;if(!e){console.log("[自动切换] 预览管理器不可用");return}const n=this.findNextAvailableOrder(),o=await e.getExpectedPosition(n);if(o){console.log("[自动切换] 移动到预期位置: 编号".concat(n,", 坐标(").concat(o.x.toFixed(1),", ").concat(o.y.toFixed(1),")"));const i=typeof window.getZoomLockSettings=="function"?window.getZoomLockSettings():{isLocked:!1};i.isLocked?(this.state.scale=i.lockValue,console.log("[自动切换] 应用锁定倍数: ".concat(i.lockValue,"x"))):console.log("[自动切换] 保持当前倍数: ".concat(this.state.scale.toFixed(1),"x"));const s=this.canvas.width/2,a=this.canvas.height/2;this.state.translateX=s-o.x*this.state.scale,this.state.translateY=a-o.y*this.state.scale,this.constrainView(),this.updateZoomInfo(),this.render(),console.log("[自动切换] 视角已移动到预期位置，缩放: ".concat(this.state.scale.toFixed(1),"x"))}else console.log("[自动切换] 未找到编号".concat(n,"的预期位置"))}catch(e){console.error("[自动切换] 移动到下一个预期位置失败:",e)}}tryAutoSwitchToNextImage(){if(typeof window.navigateToNextImage=="function")return window.navigateToNextImage(!0).then(t=>{t?setTimeout(()=>{this.restartAutoDirectionMode()},300):(console.log("没有更多图片，结束自动化"),this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),window.showSuccess&&window.showSuccess("全部完成","所有图片的方向设置已完成！"))}),!0;if(typeof window.handleKeyDown=="function"){const t={key:"ArrowRight",preventDefault:()=>{},stopPropagation:()=>{}};return window.handleKeyDown(t),setTimeout(()=>{this.restartAutoDirectionMode()},200),!0}return!1}restartAutoDirectionMode(){console.log("[调试] 重新开始自动化方向设置模式"),this.state.isAutoDirectionMode=!1,this.state.autoDirectionKeypoints=[],this.state.autoDirectionIndex=0,this.startAutoDirectionMode()||(console.log("新图片没有需要设置方向的标注点，结束自动化"),this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),window.showInfo&&window.showInfo("自动化完成","已完成所有图片的方向设置"))}resetAutoDirectionButton(){const t=document.getElementById("auto-direction-btn");t&&(console.log("[调试] 重置按钮状态为正常模式"),t._pauseHandler&&(t.removeEventListener("click",t._pauseHandler),t._pauseHandler=null),t.textContent="Auto Direction",t.classList.remove("active"),window.handleAutoDirectionSelection&&t.addEventListener("click",window.handleAutoDirectionSelection))}pauseAutoDirectionMode(){if(!this.state.isAutoDirectionMode)return;const t=this.state.autoDirectionKeypoints.length-this.state.autoDirectionIndex,e=this.state.autoDirectionIndex;this.exitAutoDirectionMode(),this.resetAutoDirectionButton(),console.log("方向升级模式已暂停，已完成 ".concat(e," 个，剩余 ").concat(t," 个")),window.showInfo&&window.showInfo("升级暂停","已完成 ".concat(e," 个标注点的升级，剩余 ").concat(t,' 个。可重新点击"自动化方向选择"继续。'))}startCustomAnnotationDrag(t,e,n=null){this.customAnnotationRenderer&&(this.customAnnotationDragState.isDragging=!0,this.customAnnotationDragState.draggedAnnotation=t,this.customAnnotationDragState.startPosition=e,this.customAnnotationRenderer.startDrag(t,e,n),this.canvas.style.cursor="grabbing",console.log("Started custom annotation drag:",t.id))}updateCustomAnnotationDrag(t){if(!this.customAnnotationRenderer||!this.customAnnotationDragState.isDragging)return;this.customAnnotationRenderer.updateDrag(t)&&this.render()}finishCustomAnnotationDrag(){var e,n;if(!this.customAnnotationRenderer||!this.customAnnotationDragState.isDragging)return;const t=this.customAnnotationRenderer.finishDrag();t&&t.moved&&(this.customAnnotationManager.saveToStorage(),this.customAnnotationManager.triggerEvent("onAnnotationUpdate",t.annotation),this.customAnnotationManager.triggerCustomAnnotationUpdateSync(t.annotation,{imageId:(n=(e=this.getAppState())==null?void 0:e.currentImage)==null?void 0:n.id,positionChange:{from:t.startPosition,to:{x:t.annotation.x,y:t.annotation.y}},timestamp:new Date().toISOString()}),this.syncBranchPointPreview(),console.log("Custom annotation dragged and saved:",t.annotation.id)),this.customAnnotationDragState.isDragging=!1,this.customAnnotationDragState.draggedAnnotation=null,this.customAnnotationDragState.startPosition=null,this.canvas.style.cursor="crosshair",this.render()}cancelCustomAnnotationDrag(){!this.customAnnotationRenderer||!this.customAnnotationDragState.isDragging||(this.customAnnotationRenderer.cancelDrag(),this.customAnnotationDragState.isDragging=!1,this.customAnnotationDragState.draggedAnnotation=null,this.customAnnotationDragState.startPosition=null,this.canvas.style.cursor="crosshair",this.render(),console.log("Cancelled custom annotation drag"))}getAppState(){var t;return(t=window.PlantAnnotationTool)==null?void 0:t.appState}async bindParentForOrderAcrossImages(t,e,n,o){var d,u,h,m,f;const i=(d=window.PlantAnnotationTool)==null?void 0:d.plantDataManager,s=(u=window.PlantAnnotationTool)==null?void 0:u.appState;if(!i||!(s!=null&&s.currentPlant))throw new Error("Missing plant context");console.log("[调试] 开始跨图片同步关联:",{childTypeId:t,childOrder:e,parentTypeId:n,parentOrder:o,plant:s.currentPlant.id,viewAngle:s.currentPlant.selectedViewAngle});const a=await i.getPlantImages(s.currentPlant.id,s.currentPlant.selectedViewAngle);let l=0,c=0;for(const y of a)try{const S=await i.getImageAnnotations(y.id),x=S.find(b=>b.annotationType==="custom"&&b.customTypeId===t&&b.order===e),I=S.find(b=>b.annotationType==="custom"&&b.customTypeId===n&&b.order===o);if(x&&I)x.parentAnnotationType=n,x.parentAnnotationId=o,await i.saveImageAnnotations(y.id,S),l++,console.log("[调试] 图片 ".concat(y.id," 同步成功: ").concat(t,"#").concat(e," → ").concat(n,"#").concat(o));else{c++;const b=x?I?"未知原因":"缺少父节点 ".concat(n,"#").concat(o):"缺少子节点 ".concat(t,"#").concat(e);console.log("[调试] 图片 ".concat(y.id," 跳过同步: ").concat(b))}}catch(S){c++,console.warn("[调试] 图片 ".concat(y.id," 同步失败:"),S.message)}try{const y=(f=(m=(h=window.PlantAnnotationTool)==null?void 0:h.appState)==null?void 0:m.currentImage)==null?void 0:f.id;y&&(await i.saveImageAnnotations(y,this.keypoints),console.log("[调试] 当前图片 ".concat(y," 的父子关联已保存")))}catch(y){console.warn("[调试] 保存当前图片失败:",y.message)}console.log("[调试] 跨图片同步完成: 成功 ".concat(l," 张，跳过 ").concat(c," 张")),this.render()}async initializeCustomAnnotationSystem(){var t;try{const{CustomAnnotationManager:e}=await dt(async()=>{const{CustomAnnotationManager:i}=await import("./CustomAnnotationManager-CoJ30DAK.js");return{CustomAnnotationManager:i}},[]);this.customAnnotationManager=new e(this);const n=(t=window.PlantAnnotationTool)==null?void 0:t.realTimeSyncManager;n?(this.customAnnotationManager.setRealTimeSyncManager(n),console.log("Custom annotation real-time sync manager connected")):console.warn("Real-time sync manager not available for custom annotations"),this.customAnnotationManager.addEventListener("onModeChange",i=>{console.log("Mode changed:",i.mode,"Type:",i.typeId),this.syncBranchPointPreview(),window.updateSiftButtonState&&typeof window.updateSiftButtonState=="function"&&window.updateSiftButtonState()}),console.log("CustomAnnotationManager initialized");const{CustomAnnotationRenderer:o}=await dt(async()=>{const{CustomAnnotationRenderer:i}=await import("./CustomAnnotationRenderer-CeI367Mf.js");return{CustomAnnotationRenderer:i}},[]);this.customAnnotationRenderer=new o(this,this.customAnnotationManager),console.log("CustomAnnotationRenderer initialized"),this.customAnnotationSystemReady=!0,window.onCustomAnnotationSystemReady&&typeof window.onCustomAnnotationSystemReady=="function"&&setTimeout(()=>{window.onCustomAnnotationSystemReady()},100)}catch(e){console.warn("Failed to initialize custom annotation system:",e)}}renderCustomAnnotations(){console.debug("renderCustomAnnotations called (unified system - no action needed)")}getCustomAnnotationAt(t){const e=this.options.baseKeypointRadius+5;return this.keypoints.find(n=>{if(n.annotationType!=="custom")return!1;const o=this.imageToScreen(n.x,n.y);if(n.width&&n.height){const i=this.imageToScreen(n.x+n.width,n.y+n.height);return t.x>=o.x&&t.x<=i.x&&t.y>=o.y&&t.y<=i.y}else return Math.sqrt(Math.pow(t.x-o.x,2)+Math.pow(t.y-o.y,2))<=e})||null}handleCustomAnnotationClick(t,e){var o;if(console.log("Custom annotation clicked:",t.id,"type:",t.annotationType),this.state.isAutoOrderMode&&this.handleAutoOrderAnnotationClick(t))return;const n=this.getCustomType(t.customTypeId);if(n&&console.log("Custom type:",n.name,"color:",n.color),!this.state.isSelectingParent&&!this.state.isDirectionSelectionMode&&!this.customAnnotationDragState.isDragging){if(t.annotationType==="custom"&&t.customTypeId&&this.customAnnotationManager)try{this.customAnnotationManager.setCustomAnnotationMode(t.customTypeId)}catch(i){}t.width&&t.height?(this.state.selectedKeypoint=t,this.state.isDirectionSelectionMode=!1,(o=this.customAnnotationRenderer)==null||o.setSelectedAnnotation(t),console.log("[调试] Region已在handleCustomAnnotationClick中设为选中:",t.id),this.render()):console.log("[调试] 点类型标注被点击，等待mouseUp判断是点击还是拖拽")}}handleCustomAnnotationMode(t){var e,n;if(!this.customAnnotationManager){console.warn("Custom annotation manager not available");return}this.interruptAllDirectionModes("custom_annotation_mode");try{const o=(e=window.PlantAnnotationTool)==null?void 0:e.appState;if(!((n=o==null?void 0:o.currentImage)==null?void 0:n.id)){console.warn("No current image ID available for custom annotation");return}const s=this.customAnnotationManager.getCurrentCustomType();if(!s){console.warn("No custom type selected");return}if(s.type==="region")this.startCustomRegionDrag(t);else if(s.type==="point"){const a=this.screenToImage(t.x,t.y),l=this.addCustomPointAnnotation(a.x,a.y,s.id);l?console.log("Created unified custom point annotation:",l):console.warn("Failed to create custom point annotation")}}catch(o){console.warn("Failed to handle custom annotation mode:",o)}}startCustomRegionDrag(t){if(!this.canCreateAnnotationAt(t.x,t.y)){console.warn("Cannot create custom region annotation: position is outside valid area");return}this.state.isCustomRegionDragging=!0,this.state.customRegionStartPoint=t,this.state.customRegionCurrentPoint=t,this.canvas.style.cursor="crosshair",console.log("Started custom region drag at:",t)}updateCustomRegionDrag(t){this.state.isCustomRegionDragging&&(this.state.customRegionCurrentPoint=t,this.render())}finishCustomRegionDrag(){var d,u;if(!this.state.isCustomRegionDragging||!this.state.customRegionStartPoint||!this.state.customRegionCurrentPoint){this.resetCustomRegionDrag();return}const t=this.screenToImage(this.state.customRegionStartPoint.x,this.state.customRegionStartPoint.y),e=this.screenToImage(this.state.customRegionCurrentPoint.x,this.state.customRegionCurrentPoint.y),n=this.state.customRegionStartPoint,o=this.state.customRegionCurrentPoint,i=Math.abs(o.x-n.x),s=Math.abs(o.y-n.y),a=8;if(i<a||s<a){console.log("Region too small, ignoring"),this.resetCustomRegionDrag();return}const l=(d=window.PlantAnnotationTool)==null?void 0:d.appState;if(!((u=l==null?void 0:l.currentImage)==null?void 0:u.id)){console.warn("No current image ID available for custom region annotation"),this.resetCustomRegionDrag();return}try{const h=this.customAnnotationManager.getCurrentCustomType();if(!h){console.warn("No custom type selected for region annotation"),this.resetCustomRegionDrag();return}const m=Math.min(t.x,e.x),f=Math.min(t.y,e.y),y=Math.abs(e.x-t.x),S=Math.abs(e.y-t.y),x=this.addCustomRegionAnnotation(m,f,y,S,h.id);x?console.log("Created unified custom region annotation:",x):console.warn("Failed to create custom region annotation")}catch(h){console.error("Error creating custom region annotation:",h)}this.resetCustomRegionDrag()}resetCustomRegionDrag(){this.state.isCustomRegionDragging=!1,this.state.customRegionStartPoint=null,this.state.customRegionCurrentPoint=null,this.canvas.style.cursor="crosshair",this.render()}removeCustomAnnotation(t){this.removeKeypoint(t)}enableParentSelectionMode(t){this.state.isSelectingParent=!0,this.state.parentSelectionForType=t,this.canvas.style.cursor="cell"}disableParentSelectionMode(){this.state.isSelectingParent=!1,this.state.parentSelectionForType=null,this.canvas.style.cursor="crosshair"}getCustomAnnotationManager(){return this.customAnnotationManager}getCustomAnnotationRenderer(){return this.customAnnotationRenderer}handleMiddleMouseButton(t){if(!this.state.selectedKeypoint){let e=this.hoveredKeypoint;if(!e){const n=this.getKeypointAt(t);n&&(e=n)}if(e)this.selectKeypoint(e);else{console.log("[多方向] 未选中标注点，忽略中键点击");return}}this.state.isDirectionCountMode?this.exitDirectionCountMode():this.enterDirectionCountMode()}enterDirectionCountMode(){console.log("[多方向] 进入方向数量选择模式"),this.state.isDirectionCountMode=!0,this.state.currentDirectionCount=this.state.selectedKeypoint.maxDirections||1,this.showDirectionCountPrompt("使用滚轮调整方向数量，再次按中键确认"),this.canvas.style.cursor="help"}exitDirectionCountMode(){console.log("[多方向] 退出方向数量选择模式，应用方向数量:",this.state.currentDirectionCount),this.state.selectedKeypoint&&(this.ensureMultiDirectionSupport(this.state.selectedKeypoint),this.state.selectedKeypoint.maxDirections=this.state.currentDirectionCount,this.state.selectedKeypoint.directions.length>this.state.currentDirectionCount&&(this.state.selectedKeypoint.directions=this.state.selectedKeypoint.directions.slice(0,this.state.currentDirectionCount),console.log("[多方向] 截断directions数组到",this.state.currentDirectionCount,"个"))),this.state.isDirectionCountMode=!1,this.hideDirectionCountPrompt(),this.canvas.style.cursor="crosshair",this.startMultiDirectionSetting()}handleScrollWheel(t){if(!this.state.isDirectionCountMode)return;const n=-t.deltaY>0?1:-1,o=Math.max(1,Math.min(8,this.state.currentDirectionCount+n));o!==this.state.currentDirectionCount&&(this.state.currentDirectionCount=o,this.updateDirectionCountDisplay(),console.log("[多方向] 方向数量调整为:",o))}showDirectionCountPrompt(t){let e=document.getElementById("direction-count-prompt");e||(e=document.createElement("div"),e.id="direction-count-prompt",e.style.cssText="\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: rgba(0, 0, 0, 0.8);\n        color: white;\n        padding: 15px 20px;\n        border-radius: 8px;\n        font-size: 14px;\n        z-index: 10000;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      ",document.body.appendChild(e)),e.innerHTML='\n      <div style="margin-bottom: 8px;">'.concat(t,'</div>\n      <div style="font-size: 18px; font-weight: bold; text-align: center;">\n        方向数量: ').concat(this.state.currentDirectionCount,"\n      </div>\n    ")}hideDirectionCountPrompt(){const t=document.getElementById("direction-count-prompt");t&&t.remove()}updateDirectionCountDisplay(){const t=document.getElementById("direction-count-prompt");t&&(t.innerHTML='\n        <div style="margin-bottom: 8px;">使用滚轮调整方向数量，再次按中键确认</div>\n        <div style="font-size: 18px; font-weight: bold; text-align: center;">\n          方向数量: '.concat(this.state.currentDirectionCount,"\n        </div>\n      "))}startMultiDirectionSetting(){this.state.selectedKeypoint&&(this.state.directionsSet=this.state.selectedKeypoint.directions.length,this.state.isDirectionSelectionMode=!0,this.showMultiDirectionProgress(),console.log("[多方向] 开始设置 ".concat(this.state.selectedKeypoint.maxDirections," 个方向 (已有 ").concat(this.state.directionsSet," 个)")))}showMultiDirectionProgress(){const t=this.state.selectedKeypoint;if(!t)return;const e=t.directions.length,n="".concat(e,"/").concat(t.maxDirections);let o;e>=t.maxDirections?o="所有方向已设置完成 ".concat(n):o="设置方向 ".concat(n," - 点击设置第 ").concat(e+1," 个方向");let i=document.getElementById("multi-direction-progress");i||(i=document.createElement("div"),i.id="multi-direction-progress",i.style.cssText="\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(16, 185, 129, 0.9);\n        color: white;\n        padding: 10px 15px;\n        border-radius: 6px;\n        font-size: 13px;\n        z-index: 10000;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      ",document.body.appendChild(i)),i.textContent=o,e>=t.maxDirections&&setTimeout(()=>{this.hideMultiDirectionProgress()},2e3)}hideMultiDirectionProgress(){const t=document.getElementById("multi-direction-progress");t&&t.remove()}addDirectionToKeypoint(t,e){return this.ensureMultiDirectionSupport(t),t.directions.length>=t.maxDirections?(console.warn("[多方向] 已达到最大方向数量:",t.maxDirections),!1):(t.directions.push(e),console.log("[多方向] 添加方向成功:",e,"到keypoint #"+t.order),!0)}removeDirectionFromKeypoint(t,e){if(this.ensureMultiDirectionSupport(t),e<0||e>=t.directions.length)return console.warn("[多方向] 无效的方向索引:",e),!1;const n=t.directions[e];return t.directions.splice(e,1),console.log("[多方向] 移除方向成功:",n,"从keypoint #"+t.order),!0}finishMultiDirectionSetting(){if(console.log("[多方向] 完成多方向设置"),this.hideMultiDirectionProgress(),this.state.selectedKeypoint){this.state.directionsSet=this.state.selectedKeypoint.directions.length;const t=this.state.selectedKeypoint.directions.length>=this.state.selectedKeypoint.maxDirections;console.log("[多方向] 设置状态: ".concat(this.state.selectedKeypoint.directions.length,"/").concat(this.state.selectedKeypoint.maxDirections," (").concat(t?"完成":"未完成",")"))}this.state.isDirectionSelectionMode=!1,this.state.directionsSet=0,this.state.selectedKeypoint=null,this.canvas.style.cursor="crosshair",this.saveState(),this.autoSaveCurrentImage(),this.syncBranchPointPreview(),this.moveToNextExpectedPosition(),console.log("[多方向] 多方向设置完成")}interruptDirectionCountMode(t){this.state.isDirectionCountMode&&(console.log("[多方向] 方向数量模式被中断:",t),this.state.isDirectionCountMode=!1,this.state.currentDirectionCount=1,this.state.selectedKeypoint=null,this.hideDirectionCountPrompt(),this.hideMultiDirectionProgress(),this.canvas.style.cursor="crosshair")}interruptMultiDirectionSetting(t){this.state.isDirectionSelectionMode&&this.state.selectedKeypoint&&this.state.selectedKeypoint.maxDirections>1&&(console.log("[多方向] 多方向设置被中断:",t),this.hideMultiDirectionProgress(),this.state.isDirectionSelectionMode=!1,this.state.directionsSet=0,this.state.selectedKeypoint=null,this.canvas.style.cursor="crosshair",this.render())}interruptAllDirectionModes(t){if(console.log("[多方向] 中断所有方向模式:",t),this.interruptDirectionCountMode(t),this.interruptMultiDirectionSetting(t),this.state.isAutoDirectionMode)if(this.autoDirectionMode==="cross-sectional"&&t==="image_switch"){console.log("[Cross-Sectional] Preserving cross-sectional mode during image switch"),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null;return}else if(this.autoDirectionMode==="cross-sectional"&&t==="custom_annotation_mode"){console.log("[Cross-Sectional] Pausing cross-sectional mode for custom annotation"),this.state.selectedKeypoint=null,this.state.isDirectionSelectionMode=!1,this.state.directionSelectionPoint=null;return}else this.exitAutoDirectionMode();this.state.isDirectionSelectionMode&&this.cancelDirectionSelection(!0)}canHaveMultipleDirections(t){return t&&t.annotationType==="regular"}ensureMultiDirectionSupport(t){t&&(t.directions||(t.directions=[],t.direction!==null&&t.direction!==void 0&&(typeof t.direction=="number"?t.directions.push({angle:t.direction,type:"angle"}):t.direction==="left"?t.directions.push({angle:180,type:"angle"}):t.direction==="right"&&t.directions.push({angle:0,type:"angle"}),console.log("[多方向] 迁移单方向数据到新格式:",t.direction,"→",t.directions))),t.maxDirections||(t.maxDirections=Math.max(1,t.directions.length),console.log("[多方向] 初始化maxDirections为",t.maxDirections,"for keypoint #"+t.order)),t.annotationType||(t.annotationType="regular"))}renderMultipleDirections(t){if(this.ensureMultiDirectionSupport(t),t.directions.length===0)return;const e=this.imageToScreen(t.x,t.y);t.directions.forEach((n,o)=>{const i=n.angle,s="".concat(o+1,"/").concat(t.directions.length);this.renderDirectionArrow(e.x,e.y,i,s,t)})}renderDirectionArrow(t,e,n,o,i){const s=n*Math.PI/180,a=this.options.directionArrowLength,l=t+Math.cos(s)*a,c=e+Math.sin(s)*a;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.setLineDash([8,4]),this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(l,c),this.ctx.stroke(),this.ctx.setLineDash([]);const d=s+Math.PI*.8,u=s-Math.PI*.8,h=15;this.ctx.strokeStyle="#10b981",this.ctx.lineWidth=3,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(l,c),this.ctx.lineTo(l+Math.cos(d)*h,c+Math.sin(d)*h),this.ctx.moveTo(l,c),this.ctx.lineTo(l+Math.cos(u)*h,c+Math.sin(u)*h),this.ctx.stroke();const m=20,f=l+Math.cos(s)*m,y=c+Math.sin(s)*m;this.ctx.font="bold 11px Arial";const x=this.ctx.measureText(o).width,I=11;this.ctx.fillStyle="rgba(16, 185, 129, 0.9)",this.ctx.fillRect(f-x/2-3,y-I/2-2,x+6,I+4),this.ctx.fillStyle="#ffffff",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o,f,y)}enhanceDirectionData(t,e){return{...t,directionClick:{x:e.clickX,y:e.clickY,screenX:e.screenX,screenY:e.screenY,timestamp:e.timestamp}}}enhanceMultiDirectionData(t,e){const n=t.directions.map((o,i)=>{const s=e[i];return{...o,clickPosition:s?{x:s.clickX,y:s.clickY,screenX:s.screenX,screenY:s.screenY,timestamp:s.timestamp}:null}});return{...t,directions:n}}handleDirectionSelectionClick(t){if(!this.state.selectedKeypoint||!this.state.isDirectionSelectionMode)return;const e=this.getEventCoordinates(t),n=this.screenToImage(e.x,e.y);if(!this.validateDirectionClick(this.state.selectedKeypoint,{clickX:n.x,clickY:n.y,screenX:e.x,screenY:e.y}))return;const o=this.calculateAngleFromClick(this.state.selectedKeypoint,n),i={x:n.x,y:n.y,screenX:e.x,screenY:e.y,timestamp:Date.now()};this.state.selectedKeypoint.direction=o,this.state.selectedKeypoint.directionType="angle",this.state.selectedKeypoint.directionClick=i,this.render(),this.state.isDirectionSelectionMode=!1,this.state.selectedKeypoint=null}validateDirectionClick(t,e){return!(!this.isClickWithinImageBounds(e)||!this.isClickWithinCanvasBounds(e))}calculateAngleFromClick(t,e){const n=e.x-t.x,o=e.y-t.y;return(Math.atan2(o,n)*180/Math.PI+360)%360}isClickWithinCanvasBounds(t){return t.screenX>=0&&t.screenX<=this.canvas.width&&t.screenY>=0&&t.screenY<=this.canvas.height}isClickWithinImageBounds(t){return this.currentImage?t.x>=0&&t.x<=this.currentImage.width&&t.y>=0&&t.y<=this.currentImage.height:!1}screenToImage(t,e){const n=(t-this.state.translateX)/this.state.scale,o=(e-this.state.translateY)/this.state.scale;return{x:n,y:o}}handleMultiDirectionClick(t){if(!this.state.selectedKeypoint||!this.state.selectedKeypoint.maxDirections)return!1;const e=this.state.selectedKeypoint;if(e.directions.length>=e.maxDirections)return!1;const n=this.getEventCoordinates(t),o=this.screenToImage(n.x,n.y),i=this.calculateAngleFromClick(e,o);return e.directions.push({angle:i,type:"angle",clickPosition:{x:o.x,y:o.y,screenX:n.x,screenY:n.y,timestamp:Date.now()}}),!0}getAnnotationData(){return{keypoints:this.keypoints.map(t=>({...t,directionClick:t.directionClick||null}))}}serializeAnnotationData(t){return JSON.stringify(t.map(e=>({...e,directionClick:e.directionClick||null})))}deserializeAnnotationData(t){return JSON.parse(t).map(n=>({...n,directionClick:n.directionClick||null}))}getEventCoordinates(t){const e=this.canvas.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}async performSiftMatching(){console.log("[SIFT] 开始执行SIFT匹配");try{const t=await this.validateMatchingPreconditions();if(!t.isValid){console.error("[SIFT] 前置条件验证失败:",t.errors),this.showSiftError("SIFT匹配前置条件不满足",t.errors.join("\n"));return}const e=this.keypoints.filter(u=>u.annotationType==="custom"&&u.customTypeId==="builtin-regular-keypoint"),n=await this.getPreviousFrameAnnotations(),o=n?n.filter(u=>u.annotationType==="custom"&&u.customTypeId==="builtin-regular-keypoint"):null;if(!o||o.length===0){this.showSiftError("无法获取上一帧builtin标注数据","请确保上一帧存在Regular (Builtin)标注点");return}if(e.length===0){this.showSiftError("当前帧无builtin标注","请先添加Regular (Builtin)标注点");return}const i=this.getCurrentImageData(),s=await this.getPreviousImageData(),{SiftMatcher:a}=await dt(async()=>{const{SiftMatcher:u}=await import("./SiftMatcher-BqRQ6-I0.js");return{SiftMatcher:u}},[]),l=new a,c=await l.calibrateAnnotations(o,e,s,i),d=l.calculateMatchingQuality(c);console.log("[SIFT] 匹配完成:",{原始标注:e.length,校准标注:c.length,平均置信度:"".concat((d.averageConfidence*100).toFixed(1),"%"),平均偏移:"".concat(d.averageOffset.toFixed(2),"px"),成功匹配:d.successfulMatches}),this.showCalibrationPreview(e,c,d)}catch(t){console.error("[SIFT] 匹配过程出错:",t),this.showSiftError("SIFT匹配失败",t.message)}}async validateMatchingPreconditions(){const t=[];return(!this.currentImage||!this.imageElement)&&t.push("当前图像未加载"),(!this.keypoints||this.keypoints.length===0)&&t.push("当前图像没有标注点"),await this.hasPreviousFrame()||t.push("没有上一帧图像可用作参考"),{hasCurrentImage:!!this.currentImage,hasPreviousImage:await this.hasPreviousFrame(),hasCurrentAnnotations:this.keypoints&&this.keypoints.length>0,hasPreviousAnnotations:await this.hasPreviousFrameAnnotations(),isValid:t.length===0,errors:t}}async hasPreviousFrame(){var e;if(!((e=window.PlantAnnotationTool)!=null&&e.plantDataManager))return!1;const t=window.PlantAnnotationTool.appState.currentPlant;return!t||!t.selectedViewAngle?!1:await this.getPreviousFrameId()!==null}async hasPreviousFrameAnnotations(){const t=await this.getPreviousFrameAnnotations();return t&&t.length>0}async getPreviousFrameId(){var o;if(!((o=window.PlantAnnotationTool)!=null&&o.plantDataManager))return null;const t=window.PlantAnnotationTool.appState.currentPlant;if(!t||!t.selectedViewAngle||!t.selectedImage)return null;const e=await window.PlantAnnotationTool.plantDataManager.getPlantImages(t.id,t.selectedViewAngle);if(!e||e.length===0)return null;const n=e.findIndex(i=>i.id===t.selectedImage.id);return n<=0?null:e[n-1].id}async getPreviousFrameAnnotations(){var n;const t=await this.getPreviousFrameId();if(!t)return null;const e=(n=window.PlantAnnotationTool)==null?void 0:n.plantDataManager;if(!e)return null;try{return e.getImageAnnotations(t)||[]}catch(o){return console.warn("[SIFT] 获取上一帧标注失败:",o),null}}getCurrentImageData(){if(!this.imageElement)throw new Error("当前图像未加载");if(this.imageElement.complete&&!this.imageElement.crossOrigin)throw console.warn("[SIFT] 图像已加载但未设置CORS，需要重新加载"),new Error("图像需要重新加载以支持CORS访问，请重新选择图像");const t=document.createElement("canvas");t.width=this.imageElement.width,t.height=this.imageElement.height;const e=t.getContext("2d");try{return e.drawImage(this.imageElement,0,0),e.getImageData(0,0,t.width,t.height)}catch(n){throw console.error("[SIFT] 获取图像数据失败:",n),new Error("无法获取图像数据，可能是跨域问题。请重新选择图像。")}}async getPreviousImageData(){var l;const t=await this.getPreviousFrameId();if(!t)throw new Error("无法获取上一帧图像ID");const e=(l=window.PlantAnnotationTool)==null?void 0:l.plantDataManager;if(!e)throw new Error("植物数据管理器不可用");const n=window.PlantAnnotationTool.appState.currentPlant,i=(await e.getPlantImages(n.id,n.selectedViewAngle)).find(c=>c.id===t);if(!i)throw new Error("找不到上一帧图像");const s=await e.fileSystemManager.createImageURL(i),a=new Image;return a.crossOrigin="anonymous",new Promise((c,d)=>{a.onload=()=>{const u=document.createElement("canvas");u.width=a.width,u.height=a.height;const h=u.getContext("2d");try{h.drawImage(a,0,0);const m=h.getImageData(0,0,u.width,u.height);c(m)}catch(m){console.error("[SIFT] 获取上一帧图像数据失败:",m),d(new Error("无法获取上一帧图像数据，可能是跨域问题"))}},a.onerror=()=>{console.error("[SIFT] 上一帧图像加载失败:",s),d(new Error("加载上一帧图像失败"))},a.src=s})}showCalibrationPreview(t,e,n){this.calibrationPreviewState={originalAnnotations:[...t],calibratedAnnotations:[...e],quality:n,isActive:!0,showOriginal:!0,showCalibrated:!0,showArrows:!0},this.showNonBlockingNotification(n),this.bindCalibrationKeyboardEvents(),this.render(),console.log("[SIFT] 校准预览已显示")}showNonBlockingNotification(t){const e=document.createElement("div");if(e.className="sift-notification",e.innerHTML='\n      <div class="notification-content">\n        <div class="notification-header">\n          <h3>🔍 SIFT Match Result</h3>\n          <button class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">×</button>\n        </div>\n        <div class="quality-info">\n          <p><strong>Match Quality:</strong> '.concat((t.qualityScore*100).toFixed(1),"%</p>\n          <p><strong>Average Confidence:</strong> ").concat((t.averageConfidence*100).toFixed(1),"%</p>\n          <p><strong>Average Offset:</strong> ").concat(t.averageOffset.toFixed(2),"px</p>\n          <p><strong>Successful Matches:</strong> ").concat(t.successfulMatches,"/").concat(t.totalAnnotations,'</p>\n        </div>\n        \n        <div class="notification-actions">\n          <button class="btn-accept" title="Accept Adjustment (Shortcut: A)">✓ Accept Adjustment (A)</button>\n          <button class="btn-reject" title="Reject Adjustment (Shortcut: R)">✗ Reject Adjustment (R)</button>\n        </div>\n        \n        <div class="notification-help">\n          <small>Shortcuts: A=Accept, R=Reject, ESC=Cancel</small>\n        </div>\n      </div>\n    '),e.style.cssText="\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      max-width: 350px;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 10000;\n      font-family: Arial, sans-serif;\n      animation: slideIn 0.3s ease-out;\n    ",!document.getElementById("sift-notification-style")){const i=document.createElement("style");i.id="sift-notification-style",i.textContent="\n        @keyframes slideIn {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n        .sift-notification .notification-content {\n          padding: 15px;\n        }\n        .sift-notification .notification-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 10px;\n        }\n        .sift-notification .notification-header h3 {\n          margin: 0;\n          font-size: 16px;\n          color: #333;\n        }\n        .sift-notification .close-btn {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #666;\n          padding: 0;\n          width: 20px;\n          height: 20px;\n        }\n        .sift-notification .close-btn:hover {\n          color: #000;\n        }\n        .sift-notification .quality-info {\n          margin-bottom: 15px;\n          font-size: 13px;\n          color: #666;\n        }\n        .sift-notification .quality-info p {\n          margin: 3px 0;\n        }\n        .sift-notification .notification-actions {\n          display: flex;\n          gap: 10px;\n          margin-bottom: 10px;\n        }\n        .sift-notification .btn-accept,\n        .sift-notification .btn-reject {\n          flex: 1;\n          padding: 8px 12px;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n          font-weight: 500;\n        }\n        .sift-notification .btn-accept {\n          background: #10b981;\n          color: white;\n        }\n        .sift-notification .btn-accept:hover {\n          background: #059669;\n        }\n        .sift-notification .btn-reject {\n          background: #ef4444;\n          color: white;\n        }\n        .sift-notification .btn-reject:hover {\n          background: #dc2626;\n        }\n        .sift-notification .notification-help {\n          text-align: center;\n          color: #999;\n          border-top: 1px solid #eee;\n          padding-top: 8px;\n        }\n      ",document.head.appendChild(i)}const n=e.querySelector(".btn-accept"),o=e.querySelector(".btn-reject");n.addEventListener("click",()=>{this.applyCalibrationResults()}),o.addEventListener("click",()=>{this.cancelCalibration()}),document.body.appendChild(e),this.calibrationNotification=e,this.notificationTimeout=setTimeout(()=>{this.cancelCalibration()},3e4)}bindCalibrationKeyboardEvents(){this.calibrationKeyboardHandler=t=>{var e;if((e=this.calibrationPreviewState)!=null&&e.isActive)switch(t.key.toLowerCase()){case"a":t.preventDefault(),this.applyCalibrationResults();break;case"r":t.preventDefault(),this.cancelCalibration();break;case"p":t.preventDefault(),this.toggleCalibrationPreview();break;case"escape":t.preventDefault(),this.cancelCalibration();break}},document.addEventListener("keydown",this.calibrationKeyboardHandler)}toggleCalibrationPreview(){this.calibrationPreviewState&&(this.calibrationPreviewState.showOriginal=!this.calibrationPreviewState.showOriginal,this.calibrationPreviewState.showCalibrated=!this.calibrationPreviewState.showCalibrated,this.calibrationPreviewState.showArrows=!this.calibrationPreviewState.showArrows,this.render())}async applyCalibrationResults(){var t;if(this.calibrationPreviewState)try{console.log("[SIFT] 应用校准结果"),this.saveState(),this.keypoints=[...this.calibrationPreviewState.calibratedAnnotations],this.cleanupCalibrationPreview(),this.render(),(t=window.PlantAnnotationTool)!=null&&t.autoSave&&await window.PlantAnnotationTool.autoSave(),this.showSiftSuccess("SIFT匹配成功应用","已调整 ".concat(this.keypoints.length," 个标注点"))}catch(e){console.error("[SIFT] 应用校准结果失败:",e),this.showSiftError("应用校准结果失败",e.message)}}cancelCalibration(){console.log("[SIFT] 取消校准"),this.cleanupCalibrationPreview(),this.render(),this.showSiftInfo("已取消SIFT匹配","标注点保持原始位置")}cleanupCalibrationPreview(){this.calibrationNotification&&(this.calibrationNotification.remove(),this.calibrationNotification=null),this.notificationTimeout&&(clearTimeout(this.notificationTimeout),this.notificationTimeout=null),this.calibrationKeyboardHandler&&(document.removeEventListener("keydown",this.calibrationKeyboardHandler),this.calibrationKeyboardHandler=null),this.calibrationPreviewState=null}showSiftError(t,e){var n;console.error("[SIFT] ".concat(t,": ").concat(e)),(n=window.PlantAnnotationTool)!=null&&n.showError?window.PlantAnnotationTool.showError(t,e):alert("".concat(t,"\n").concat(e))}showSiftSuccess(t,e){var n;console.log("[SIFT] ".concat(t,": ").concat(e)),(n=window.PlantAnnotationTool)!=null&&n.showSuccess?window.PlantAnnotationTool.showSuccess(t,e):alert("".concat(t,"\n").concat(e))}showSiftInfo(t,e){var n;console.log("[SIFT] ".concat(t,": ").concat(e)),(n=window.PlantAnnotationTool)!=null&&n.showInfo?window.PlantAnnotationTool.showInfo(t,e):alert("".concat(t,"\n").concat(e))}createMatchingVisualizations(t,e){const n=[];return e==="original"?t.forEach((o,i)=>{var s;n.push({type:"original",x:o.x,y:o.y,color:"#ff4444",size:8,label:((s=o.order)==null?void 0:s.toString())||(i+1).toString()})}):e==="adjusted"?t.forEach((o,i)=>{var s;n.push({type:"adjusted",x:o.x,y:o.y,color:"#44ff44",size:8,label:((s=o.order)==null?void 0:s.toString())||(i+1).toString()})}):e==="arrows"&&t.forEach((o,i)=>{o.calibrationData&&n.push({type:"arrow",from:{x:o.calibrationData.originalX,y:o.calibrationData.originalY},to:{x:o.x,y:o.y},color:"#ffaa00",width:2,label:"".concat(o.calibrationData.offset.toFixed(1),"px")})}),n}renderCalibrationPreview(){if(!this.calibrationPreviewState)return;const{originalAnnotations:t,calibratedAnnotations:e,showOriginal:n,showCalibrated:o,showArrows:i}=this.calibrationPreviewState;n&&t.forEach((s,a)=>{const l=this.imageToScreen(s.x,s.y);this.renderCalibrationPoint(l.x,l.y,"#ff4444",s.order||a+1,"Original")}),o&&e.forEach((s,a)=>{const l=this.imageToScreen(s.x,s.y);this.renderCalibrationPoint(l.x,l.y,"#44ff44",s.order||a+1,"Calibrated")}),i&&e.forEach((s,a)=>{if(s.calibrationData){const l=this.imageToScreen(s.calibrationData.originalX,s.calibrationData.originalY),c=this.imageToScreen(s.x,s.y);this.renderCalibrationArrow(l.x,l.y,c.x,c.y,s.calibrationData.offset)}})}renderCalibrationPoint(t,e,n,o,i){this.ctx.beginPath(),this.ctx.arc(t,e,8,0,2*Math.PI),this.ctx.fillStyle=n,this.ctx.fill(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=2,this.ctx.stroke(),this.ctx.fillStyle="#ffffff",this.ctx.font="bold 12px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(o.toString(),t,e),this.ctx.fillStyle=n,this.ctx.font="10px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="top",this.ctx.fillText(i,t,e+8+2)}renderCalibrationArrow(t,e,n,o,i){const s=n-t,a=o-e;if(Math.sqrt(s*s+a*a)<2)return;this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,o),this.ctx.strokeStyle="#ffaa00",this.ctx.lineWidth=3,this.ctx.setLineDash([5,3]),this.ctx.stroke(),this.ctx.setLineDash([]);const c=Math.atan2(a,s),d=12,u=Math.PI/6;this.ctx.beginPath(),this.ctx.moveTo(n,o),this.ctx.lineTo(n-d*Math.cos(c-u),o-d*Math.sin(c-u)),this.ctx.moveTo(n,o),this.ctx.lineTo(n-d*Math.cos(c+u),o-d*Math.sin(c+u)),this.ctx.strokeStyle="#ffaa00",this.ctx.lineWidth=3,this.ctx.stroke();const h=(t+n)/2,m=(e+o)/2;this.ctx.fillStyle="#ffaa00",this.ctx.font="bold 10px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText("".concat(i.toFixed(1),"px"),h,m-8)}getAllUnorderedAnnotationsOfType(t){console.log("[Auto Order] getAllUnorderedAnnotationsOfType called with typeId:",t),console.log("[Auto Order] 当前图片标注数量:",this.keypoints.length);const e=[];return this.keypoints.forEach(n=>{console.log("[Auto Order] 检查标注:",{id:n.id,annotationType:n.annotationType,customTypeId:n.customTypeId,order:n.order,hasOrder:n.hasOwnProperty("order"),isTargetType:n.customTypeId===t}),n.annotationType==="custom"&&n.customTypeId===t&&(n.order===void 0||n.order===null)&&(console.log("[Auto Order] 找到无序号标注:",n.id),e.push({...n,imageId:this.currentImage||"current"}))}),console.log("[Auto Order] 总共找到无序号标注:",e.length,"个"),e}groupAnnotationsByImage(t){const e={};return t.forEach(n=>{const o=n.imageId;e[o]||(e[o]=[]),e[o].push(n)}),e}getTypeName(t){if(!this.customAnnotationManager)return t;const e=this.customAnnotationManager.getCustomType(t);return e?e.name:t}updateAutoOrderButton(t){const e=document.getElementById("auto-order-btn");console.log("[Auto Order] updateAutoOrderButton called:",{isActive:t,btnFound:!!e}),e?t?(e.classList.add("active"),e.textContent="Stop Order",e.title="Stop automated order assignment",console.log("[Auto Order] 按钮已设置为激活状态")):(e.classList.remove("active"),e.textContent="Auto Order",e.title="Start automated order assignment",console.log("[Auto Order] 按钮已设置为非激活状态")):console.error("[Auto Order] 找不到auto-order-btn按钮元素")}updateAutoOrderStatus(t){const e=document.getElementById("auto-order-status");console.log("[Auto Order] updateAutoOrderStatus called:",{message:t,statusFound:!!e}),e?(e.textContent=t,e.style.fontWeight="bold",e.style.color="#2563eb"):console.error("[Auto Order] 找不到auto-order-status状态元素")}navigateToImageForAutoOrder(t){console.log("[Auto Order] 切换到图片:",t),window.navigateToNextImage&&window.navigateToNextImage(!0)}navigateToNextUnorderedImage(){console.log("[Auto Order] 导航到下一个有无序号标注的图片"),window.navigateToNextImage?window.navigateToNextImage(!0)||this.completeAutoOrder():(console.error("[Auto Order] 找不到图片导航函数"),this.completeAutoOrder())}completeAutoOrder(){const t=this.state.autoOrderTypeId,e=this.getTypeName(t),n=this.state.autoOrderCurrentOrder-1;this.stopAutoOrderMode(),window.showSuccess&&window.showSuccess("自动排序完成",'已为类型 "'.concat(e,'" 分配了 ').concat(n," 个序号")),console.log("[Auto Order] 自动排序完成，共分配",n,"个序号")}syncOrderAcrossImages(t,e){if(!this.plantDataManager)return;const n=this.plantDataManager.getCurrentPlant(),o=this.plantDataManager.getCurrentViewAngle();if(!n||!o)return;this.plantDataManager.getAllImagesForPlantAndView(n,o).forEach(s=>{if(s===this.currentImage)return;const a=this.plantDataManager.getAnnotationsForImage(s)||[];let l=!1;a.forEach(c=>{c.annotationType==="custom"&&c.customTypeId===t.customTypeId&&(c.order===void 0||c.order===null)&&this.areAnnotationsSimilarPosition(c,t)&&(c.order=e,l=!0,console.log("[Auto Order] 同步序号到图片",s,"标注",c.id))}),l&&this.plantDataManager.saveAnnotationsForImage(s,a)})}areAnnotationsSimilarPosition(t,e){const o=Math.abs(t.x-e.x),i=Math.abs(t.y-e.y);return o<50&&i<50}shouldSwitchToNextImageInAutoOrder(){const t=this.state.autoOrderTypeId;return!this.keypoints.some(n=>n.annotationType==="custom"&&n.customTypeId===t&&(n.order===void 0||n.order===null))}navigateToNextImageInAutoOrder(){console.log("[Auto Order] 切换到下一个图片继续当前序号"),window.navigateToNextImage?window.navigateToNextImage(!0)?console.log("[Auto Order] 切换图片成功，等待用户标注"):(console.log("[Auto Order] 没有更多图片，当前序号完成，进入下一个序号"),this.advanceToNextOrderNumber()):(console.error("[Auto Order] 找不到图片导航函数"),this.completeAutoOrder())}async advanceToNextOrderNumber(){console.log("[Auto Order] advanceToNextOrderNumber 被调用"),this.state.autoOrderCurrentOrder++,this.updateAutoOrderStatus('Ordering type "'.concat(this.getTypeName(this.state.autoOrderTypeId),'" #').concat(this.state.autoOrderCurrentOrder)),console.log("[Auto Order] 跳转到builtin序号",this.state.autoOrderCurrentOrder),await this.navigateToImageWithBuiltinOrder(this.state.autoOrderCurrentOrder)}navigateToFirstImageOfCurrentType(){console.log("[Auto Order] 跳转到当前标注类型的第一张图"),this.navigateToAbsoluteFirst()}async navigateToFirstImageWithType(t){console.log("[Auto Order] 查找有指定类型标注的第一张图:",t);try{const e=document.querySelector("#thumbnail-container");if(!e){console.error("[Auto Order] 找不到缩略图容器");return}const n=e.querySelectorAll(".image-thumbnail");console.log("[Auto Order] 找到缩略图数量:",n.length);for(const o of n){const i=o.getAttribute("data-image-id");if(!i)continue;if(console.log("[Auto Order] 检查图片:",i),await this.checkImageHasType(i,t)){console.log("[Auto Order] 找到有指定类型的图片:",i),o.click();return}}console.log("[Auto Order] 没有找到有指定类型标注的图片"),this.navigateToAbsoluteFirst()}catch(e){console.error("[Auto Order] 查找指定类型图片失败:",e),this.navigateToAbsoluteFirst()}}navigateToAbsoluteFirst(){console.log("[Auto Order] 导航到绝对第一张图片");let t=0;const e=50,n=()=>{if(t>=e){console.log("[Auto Order] 已尝试最大次数，停留在当前图片");return}t++,window.navigateToPreviousImage?window.navigateToPreviousImage()?setTimeout(n,200):console.log("[Auto Order] 已到达第一张图片"):console.error("[Auto Order] 找不到navigateToPreviousImage函数")};n()}navigateToFirstImageWithUnorderedAnnotations(){console.log("[Auto Order] 跳转到第一个有无序号标注的图片"),this.navigateToBeginningThenFindUnordered()}navigateToBeginningThenFindUnordered(){console.log("[Auto Order] 尝试导航到第一张图片");let t=0;const e=50,n=()=>{if(t>=e){console.log("[Auto Order] 已尝试最大次数，开始查找"),this.findFirstUnorderedFromCurrent();return}t++,window.navigateToPreviousImage?window.navigateToPreviousImage()?setTimeout(n,200):(console.log("[Auto Order] 已到达第一张图片，开始查找"),this.findFirstUnorderedFromCurrent()):(console.error("[Auto Order] 找不到navigateToPreviousImage函数"),this.findFirstUnorderedFromCurrent())};n()}findFirstUnorderedFromCurrent(){if(console.log("[Auto Order] 从当前位置查找第一个有无序号标注的图片"),this.keypoints.some(e=>e.annotationType==="custom"&&e.customTypeId===this.state.autoOrderTypeId&&(e.order===void 0||e.order===null))){console.log("[Auto Order] 当前图片有无序号标注，停留在此");return}this.navigateToNextUnorderedImage()}async navigateToImageWithBuiltinOrder(t){console.log("[Auto Order] 跳转到builtin序号",t,"的图片"),await this.searchAndNavigateToBuiltinOrder(t)}async searchAndNavigateToBuiltinOrder(t){var i;console.log("[Auto Order] 直接搜索builtin序号",t);const e=(i=window.PlantAnnotationTool)==null?void 0:i.appState;if(!(e!=null&&e.currentPlant)){console.error("[Auto Order] 无法获取当前植物信息");return}const n=document.querySelector("#thumbnail-container");if(!n){console.error("[Auto Order] 找不到缩略图容器");return}const o=n.querySelectorAll(".image-thumbnail");console.log("[Auto Order] 从缩略图找到",o.length,"张图片");for(const s of o){const a=s.dataset.imageId;if(!a)continue;if(await this.checkImageHasBuiltinOrder(a,t)){console.log("[Auto Order] 找到目标图片:",a),s.click();return}}console.log("[Auto Order] 没有找到builtin序号",t,"的图片")}async checkImageHasType(t,e){var n;try{const o=(n=window.PlantAnnotationTool)==null?void 0:n.plantDataManager;if(!o)return!1;if(t===this.currentImage)return this.keypoints.some(i=>i.annotationType==="custom"&&i.customTypeId===e);{const i=await o.annotationStorage.getImageAnnotation(t);return!i||!i.annotations?!1:i.annotations.some(a=>a.annotationType==="custom"&&a.customTypeId===e)}}catch(o){return console.error("[Auto Order] 无法获取图片标注: ".concat(t),o),!1}}async checkImageHasBuiltinOrder(t,e){var n;try{const o=(n=window.PlantAnnotationTool)==null?void 0:n.plantDataManager;if(!o)return!1;if(t===this.currentImage)return this.keypoints.some(i=>i.annotationType==="custom"&&i.customTypeId==="builtin-regular-keypoint"&&i.order===e);try{const i=await o.annotationStorage.getImageAnnotation(t);return!i||!i.annotations?!1:i.annotations.some(a=>a.annotationType==="custom"&&a.customTypeId==="builtin-regular-keypoint"&&a.order===e)}catch(i){return console.warn("[Auto Order] 无法获取图片标注:",t,i),!1}}catch(o){return console.warn("[Auto Order] 检查图片标注失败:",t,o),!1}}navigateToBeginningThenFindBuiltinOrder(t){console.log("[Auto Order] 查找builtin序号",t,"的图片");let e=0;const n=50,o=()=>{if(e>=n){console.log("[Auto Order] 已尝试最大次数，开始查找builtin序号"),this.findBuiltinOrderFromCurrent(t);return}e++,window.navigateToPreviousImage?window.navigateToPreviousImage()?setTimeout(o,200):(console.log("[Auto Order] 已到达第一张图片，开始查找builtin序号"),this.findBuiltinOrderFromCurrent(t)):(console.error("[Auto Order] 找不到navigateToPreviousImage函数"),this.findBuiltinOrderFromCurrent(t))};o()}findBuiltinOrderFromCurrent(t){if(console.log("[Auto Order] 从当前位置查找builtin序号",t),this.keypoints.some(n=>n.annotationType==="custom"&&n.customTypeId==="builtin-regular-keypoint"&&n.order===t)){console.log("[Auto Order] 找到builtin序号",t,"，停留在此图片"),console.log("[Auto Order] 已到达目标图片，等待用户标注");return}window.navigateToNextImage?window.navigateToNextImage(!0)?setTimeout(()=>this.findBuiltinOrderFromCurrent(t),300):(console.log("[Auto Order] 没有找到builtin序号",t,"，使用普通查找"),this.navigateToFirstImageWithUnorderedAnnotations()):(console.error("[Auto Order] 找不到navigateToNextImage函数"),this.navigateToFirstImageWithUnorderedAnnotations())}saveCurrentImageAnnotations(){!this.plantDataManager||!this.currentImage||this.plantDataManager.saveAnnotationsForImage(this.currentImage,this.keypoints)}}class Ot{constructor(){this.previewWindow=null,this.previewCanvas=null,this.previewCtx=null,this.previewTitle=null,this.previewLoading=null,this.noPreview=null,this.zoomSlider=null,this.zoomValue=null,this.plantDataManager=null,this.isVisible=!1,this.isDragging=!1,this.dragStartX=0,this.dragStartY=0,this.windowStartX=0,this.windowStartY=0,this.zoomLevel=2,this.isShowingSpecificOrder=!1,this.specificTargetOrder=null,this.currentPlantId=null,this.currentViewAngle=null,this.currentImageIndex=-1,this.currentKeypointCount=0,this.previousImageData=null,this.previousAnnotations=[],this.cachedImageElement=null,this.initializeElements()}initializeElements(){if(this.previewWindow=document.getElementById("branch-point-preview"),this.previewCanvas=document.getElementById("preview-canvas"),this.previewTitle=document.getElementById("preview-title"),this.previewLoading=document.getElementById("preview-loading"),this.noPreview=document.getElementById("no-preview"),this.zoomSlider=document.getElementById("zoom-slider"),this.zoomValue=document.getElementById("zoom-value"),this.previewCanvas){this.previewCtx=this.previewCanvas.getContext("2d"),this.updateCanvasSize();const t=new ResizeObserver(()=>{this.updateCanvasSize(),this.isVisible&&this.previousImageData&&this.previousAnnotations&&this.renderPreview(this.previousImageData,this.previousAnnotations)});this.previewWindow&&t.observe(this.previewWindow)}this.bindZoomControls(),this.bindDragEvents(),console.log("BranchPointPreviewManager 初始化完成")}updateCanvasSize(){if(!this.previewCanvas||!this.previewWindow)return;const t=this.previewCanvas.parentElement;if(!t)return;const e=t.getBoundingClientRect(),n=Math.max(100,e.width-4),o=Math.max(80,e.height-4);(this.previewCanvas.width!==n||this.previewCanvas.height!==o)&&(this.previewCanvas.width=n,this.previewCanvas.height=o,this.previewCanvas.style.width=n+"px",this.previewCanvas.style.height=o+"px",console.log("Canvas尺寸更新:",n,"x",o),this.isVisible&&this.cachedImageElement&&this.previousAnnotations?this.renderCachedPreview():this.isVisible&&this.previousImageData&&this.previousAnnotations&&setTimeout(()=>{this.renderPreview(this.previousImageData,this.previousAnnotations)},50))}renderCachedPreview(){if(!this.cachedImageElement||!this.previousAnnotations||!this.previewCanvas||!this.previewCtx)return;const t=this.getNextOrderToAnnotate(),e=this.previousAnnotations.find(o=>o.order===t);if(!e){this.showNoPreview("上一张图像暂无第".concat(t,"个分支点"));return}const n=this.cachedImageElement;try{const i=Math.round(200/this.zoomLevel),s=e.x,a=e.y,l=Math.max(0,Math.min(n.width-i,s-i/2)),c=Math.max(0,Math.min(n.height-i,a-i/2)),d=Math.min(i,n.width-l),u=Math.min(i,n.height-c),h=this.previewCanvas.width,m=this.previewCanvas.height;this.previewCtx.clearRect(0,0,h,m),this.previewCtx.drawImage(n,l,c,d,u,0,0,h,m);const f=h/d,y=m/u,S=(s-l)*f,x=(a-c)*y;this.renderLocalizedAnnotation(S,x,t,e.direction,!0,e),this.previousAnnotations.forEach(I=>{if(I.order!==t&&I.x>=l&&I.x<=l+d&&I.y>=c&&I.y<=c+u){const b=(I.x-l)*f,C=(I.y-c)*y;this.renderLocalizedAnnotation(b,C,I.order||0,I.direction,!1,I)}}),this.renderZoomInfo(f,y),console.log("使用缓存数据快速重新渲染完成")}catch(o){console.error("缓存渲染失败:",o),this.previousImageData&&this.previousAnnotations&&this.renderPreview(this.previousImageData,this.previousAnnotations)}}bindDragEvents(){const t=document.querySelector(".preview-header");!t||!this.previewWindow||(t.addEventListener("mousedown",e=>{e.preventDefault(),this.startDrag(e)}),document.addEventListener("mousemove",e=>{this.isDragging&&this.drag(e)}),document.addEventListener("mouseup",()=>{this.endDrag()}))}startDrag(t){this.isDragging=!0,this.dragStartX=t.clientX,this.dragStartY=t.clientY;const e=this.previewWindow.getBoundingClientRect();this.windowStartX=e.left,this.windowStartY=e.top,this.previewWindow.style.cursor="grabbing",document.body.style.userSelect="none"}drag(t){if(!this.isDragging)return;const e=t.clientX-this.dragStartX,n=t.clientY-this.dragStartY,o=this.windowStartX+e,i=this.windowStartY+n,s=window.innerWidth-this.previewWindow.offsetWidth,a=window.innerHeight-this.previewWindow.offsetHeight,l=Math.max(0,Math.min(s,o)),c=Math.max(0,Math.min(a,i));this.previewWindow.style.left=l+"px",this.previewWindow.style.top=c+"px"}endDrag(){this.isDragging&&(this.isDragging=!1,this.previewWindow.style.cursor="",document.body.style.userSelect="")}setPlantDataManager(t){this.plantDataManager=t}toggleVisibility(t=null){this.previewWindow&&(this.isVisible=t!==null?t:!this.isVisible,this.isVisible?(this.previewWindow.classList.remove("hidden"),this.updatePreview()):this.previewWindow.classList.add("hidden"),console.log("分支点预览窗口: ".concat(this.isVisible?"显示":"隐藏")))}async updateContext(t,e,n,o=0){this.currentPlantId=t,this.currentViewAngle=e,this.currentImageIndex=n,this.currentKeypointCount=o,this.isVisible&&await this.updatePreview()}async updatePreview(){if(!(!this.isVisible||!this.plantDataManager||!this.currentPlantId))try{this.showLoading(!0);const t=await this.getPreviousImage();if(!t){this.showNoPreview("This is the first image");return}const e=await this.plantDataManager.getImageAnnotations(t.id);if(!e||e.length===0){this.showNoPreview("This image has no annotations");return}this.updatePreviewTitle(t,e.length),await this.renderPreview(t,e),this.showLoading(!1)}catch(t){console.error("Update branch point preview failed:",t),this.showNoPreview("Preview loading failed")}}async getPreviousImage(){if(!this.plantDataManager||this.currentImageIndex<=0)return null;try{const t=await this.plantDataManager.getPlantImages(this.currentPlantId,this.currentViewAngle),e=this.currentImageIndex-1;return t[e]||null}catch(t){return console.error("Get previous image failed:",t),null}}updatePreviewTitle(t,e){if(this.previewTitle){const n=t.timeString||"Unknown time",o=this.getNextOrderToAnnotate();this.previewTitle.textContent="Reference: ".concat(o,"th branch point"),this.previewTitle.title="".concat(n," - Current need to annotate the position of the ").concat(o,"th branch point")}}getNextOrderToAnnotate(){var i;const t=(i=window.PlantAnnotationTool)==null?void 0:i.annotationTool;if(!t)return console.warn("[Preview] AnnotationTool is not available, using fallback"),this.currentKeypointCount+1;const e=t.getCustomAnnotationManager();if(e==null?void 0:e.isInCustomMode()){const s=e.getCurrentCustomType();if(s&&typeof t.findNextAvailableOrderForType=="function"){const a=t.findNextAvailableOrderForType(s.id);return console.log("[Preview] Custom mode - get next order for type ".concat(s.id,": ").concat(a,", current keypoint count: ").concat(this.currentKeypointCount)),a}}else if(typeof t.findNextAvailableOrder=="function"){const s=t.findNextAvailableOrder();return console.log("[Preview] Regular mode - get next order: ".concat(s,", current keypoint count: ").concat(this.currentKeypointCount)),s}const o=this.currentKeypointCount+1;return console.log("[Preview] Using fallback to calculate next order: ".concat(o,", current keypoint count: ").concat(this.currentKeypointCount)),o}async renderPreview(t,e){var c,d;if(!this.previewCanvas||!this.previewCtx)return;const n=this.getNextOrderToAnnotate(),o=(c=window.PlantAnnotationTool)==null?void 0:c.annotationTool,i=o==null?void 0:o.getCustomAnnotationManager(),s=i==null?void 0:i.isInCustomMode();let a,l;if(s){const u=i.getCurrentCustomType();u?(a=e.find(h=>h.order===n&&h.annotationType==="custom"&&h.customTypeId===u.id),l="This image has no ".concat(n,"th ").concat(u.name," annotation")):l="This image has no ".concat(n,"th custom annotation")}else a=e.find(u=>u.order===n&&(u.annotationType==="custom"&&u.customTypeId==="builtin-regular-keypoint"||!u.annotationType&&!u.customTypeId)),l="This image has no ".concat(n,"th branch point");if(!a){this.showNoPreview(l);return}this.hideLoading(),this.hideNoPreview();try{console.log("Start loading preview image:",t);let u;if(t.file&&t.file instanceof File)u=URL.createObjectURL(t.file),console.log("Create URL using file object:",u);else if(t.url)u=t.url,console.log("Use existing URL:",u);else if((d=this.plantDataManager)!=null&&d.fileSystemManager)try{u=await this.plantDataManager.fileSystemManager.createImageURL(t),console.log("Create URL using FileSystemManager:",u)}catch(k){if(console.warn("Create URL using FileSystemManager failed:",k),t.handle)try{const L=await t.handle.getFile();u=URL.createObjectURL(L),console.log("Create URL directly from handle:",u)}catch(L){throw console.error("Create URL from handle also failed:",L),new Error("无法获取图像数据：所有方法都失败")}else throw k}else throw new Error("无法获取图像数据：缺少必要的图像信息或文件系统管理器");const h=new Image;h.crossOrigin="anonymous",await new Promise((k,L)=>{h.onload=()=>{console.log("Image loaded successfully:",h.width,"x",h.height),k()},h.onerror=U=>{console.error("Image loading failed:",U),L(new Error("Image loading failed"))},h.src=u});const f=Math.round(200/this.zoomLevel),y=a.x,S=a.y,x=Math.max(0,Math.min(h.width-f,y-f/2)),I=Math.max(0,Math.min(h.height-f,S-f/2)),b=Math.min(f,h.width-x),C=Math.min(f,h.height-I),D=this.previewCanvas.width,T=this.previewCanvas.height;this.previewCtx.clearRect(0,0,D,T),this.previewCtx.drawImage(h,x,I,b,C,0,0,D,T);const N=D/b,O=T/C,W=(y-x)*N,Y=(S-I)*O;this.renderLocalizedAnnotation(W,Y,n,a.direction,!0,a),e.forEach(k=>{if(k.order!==n&&k.x>=x&&k.x<=x+b&&k.y>=I&&k.y<=I+C){const L=(k.x-x)*N,U=(k.y-I)*O;this.renderLocalizedAnnotation(L,U,k.order||0,k.direction,!1,k)}}),this.renderZoomInfo(N,O),this.previousImageData=t,this.previousAnnotations=e,this.cachedImageElement=h,u&&u.startsWith("blob:")&&!t.url&&setTimeout(()=>URL.revokeObjectURL(u),5e3),console.log("Preview rendering completed")}catch(u){console.error("Preview rendering failed:",u),this.showNoPreview("Preview loading failed: ".concat(u.message))}}renderLocalizedAnnotation(t,e,n,o,i=!0,s=null){let a=!1,l=0,c=0;s&&s.width!==void 0&&s.height!==void 0&&(a=!0,l=s.width,c=s.height);let d,u,h;if(i?(d="#ffeb3b",u=5,h=2):(typeof o=="number"?d="#4CAF50":d=o==="left"?"#ff6666":"#6666ff",u=3,h=1),a){const m=Math.max(10,l*.1),f=Math.max(10,c*.1),y=t-m/2,S=e-f/2;i&&(this.previewCtx.strokeStyle="#ff9800",this.previewCtx.lineWidth=1,this.previewCtx.setLineDash([2,2]),this.previewCtx.strokeRect(y-3,S-3,m+6,f+6),this.previewCtx.setLineDash([])),this.previewCtx.fillStyle=d+"80",this.previewCtx.fillRect(y,S,m,f),this.previewCtx.strokeStyle="#ffffff",this.previewCtx.lineWidth=h,this.previewCtx.strokeRect(y,S,m,f),this.renderDirectionArrow(t,e,o,i),this.previewCtx.fillStyle=i?"#000000":"#ffffff",this.previewCtx.font="bold ".concat(i?8:6,"px Arial"),this.previewCtx.textAlign="center",this.previewCtx.textBaseline="middle",this.previewCtx.fillText(n.toString(),t,e),i&&(this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 8px Arial",this.previewCtx.fillText("▼",t,e-f/2-8),this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 6px Arial",this.previewCtx.textAlign="center",this.previewCtx.fillText("Target",t,e+f/2+8))}else i&&(this.previewCtx.beginPath(),this.previewCtx.arc(t,e,u+3,0,2*Math.PI),this.previewCtx.strokeStyle="#ff9800",this.previewCtx.lineWidth=1,this.previewCtx.setLineDash([2,2]),this.previewCtx.stroke(),this.previewCtx.setLineDash([])),this.previewCtx.beginPath(),this.previewCtx.arc(t,e,u,0,2*Math.PI),this.previewCtx.fillStyle=d,this.previewCtx.fill(),this.previewCtx.strokeStyle="#ffffff",this.previewCtx.lineWidth=h,this.previewCtx.stroke(),this.renderDirectionArrow(t,e,o,i),this.previewCtx.fillStyle=i?"#000000":"#ffffff",this.previewCtx.font="bold ".concat(i?8:6,"px Arial"),this.previewCtx.textAlign="center",this.previewCtx.textBaseline="middle",this.previewCtx.fillText(n.toString(),t,e),i&&(this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 8px Arial",this.previewCtx.fillText("▼",t,e-u-8),this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 6px Arial",this.previewCtx.textAlign="center",this.previewCtx.fillText("Target",t,e+u+8))}renderDirectionArrow(t,e,n,o=!1){if(!n)return;let i;if(typeof n=="number")i=n;else if(n==="left")i=180;else if(n==="right")i=0;else return;const s=i*Math.PI/180,a=o?25:18,l=o?7:5,c=o?3:2,d=t+Math.cos(s)*a,u=e+Math.sin(s)*a;this.previewCtx.save(),this.previewCtx.strokeStyle="#10b981",this.previewCtx.lineWidth=c,this.previewCtx.setLineDash([4,2]),this.previewCtx.lineCap="round",this.previewCtx.beginPath(),this.previewCtx.moveTo(t,e),this.previewCtx.lineTo(d,u),this.previewCtx.stroke(),this.previewCtx.setLineDash([]),this.previewCtx.strokeStyle="#10b981",this.previewCtx.lineWidth=c,this.previewCtx.lineCap="round";const h=s+Math.PI*.8,m=s-Math.PI*.8;this.previewCtx.beginPath(),this.previewCtx.moveTo(d,u),this.previewCtx.lineTo(d+Math.cos(h)*l,u+Math.sin(h)*l),this.previewCtx.moveTo(d,u),this.previewCtx.lineTo(d+Math.cos(m)*l,u+Math.sin(m)*l),this.previewCtx.stroke(),this.previewCtx.restore()}renderZoomInfo(t,e){const n=this.zoomLevel,o="".concat(n,"x zoom");this.previewCtx.fillStyle="rgba(0, 0, 0, 0.7)",this.previewCtx.fillRect(5,5,60,16),this.previewCtx.fillStyle="#ffffff",this.previewCtx.font="8px Arial",this.previewCtx.textAlign="left",this.previewCtx.textBaseline="middle",this.previewCtx.fillText(o,8,13)}showLoading(t){this.previewLoading&&(this.previewLoading.style.display=t?"block":"none"),this.noPreview&&(this.noPreview.style.display="none")}showNoPreview(t){this.showLoading(!1),this.noPreview&&(this.noPreview.textContent=t,this.noPreview.style.display="block"),this.previewCanvas&&this.previewCtx&&this.previewCtx.clearRect(0,0,this.previewCanvas.width,this.previewCanvas.height)}highlightCorrespondingPoints(t){!this.isVisible||!t||this.updatePreview()}async getExpectedPosition(t){try{if(!this.previousImageData||!this.previousAnnotations){console.log("[Expected position] No cached preview data, trying to get previous image");const n=await this.getPreviousImage();if(!n)return console.log("[Expected position] No previous image data"),null;const o=await this.plantDataManager.getImageAnnotations(n.id);if(!o||o.length===0)return console.log("[Expected position] Previous image has no annotations"),null;this.previousImageData=n,this.previousAnnotations=o}const e=this.previousAnnotations.find(n=>n.order===t);return e?(console.log("[Expected position] Found reference position for order ".concat(t,": (").concat(e.x.toFixed(1),", ").concat(e.y.toFixed(1),")")),{x:e.x,y:e.y,order:e.order,sourceImage:this.previousImageData.timeString||"Previous image"}):(console.log("[Expected position] No annotation found for order ".concat(t," in previous image")),null)}catch(e){return console.error("[Expected position] Get expected position failed:",e),null}}reset(){this.currentPlantId=null,this.currentViewAngle=null,this.currentImageIndex=-1,this.previousImageData=null,this.previousAnnotations=[],this.isVisible&&this.showNoPreview("Please choose an image")}getStatus(){return{isVisible:this.isVisible,currentPlantId:this.currentPlantId,currentViewAngle:this.currentViewAngle,currentImageIndex:this.currentImageIndex,hasPreviousData:this.previousImageData!==null}}hideLoading(){this.showLoading(!1)}hideNoPreview(){this.noPreview&&(this.noPreview.style.display="none")}bindZoomControls(){!this.zoomSlider||!this.zoomValue||(this.zoomSlider.addEventListener("input",t=>{this.zoomLevel=parseFloat(t.target.value),this.zoomValue.textContent=this.zoomLevel+"x",this.isVisible&&this.cachedImageElement&&this.previousAnnotations?this.renderCachedPreview():this.isVisible&&this.previousImageData&&this.previousAnnotations&&this.renderPreview(this.previousImageData,this.previousAnnotations)}),this.zoomSlider.value=this.zoomLevel,this.zoomValue.textContent=this.zoomLevel+"x")}async showSpecificOrderPreview(t){if(!(!this.isVisible||!this.plantDataManager||!this.currentPlantId)){this.isShowingSpecificOrder=!0,this.specificTargetOrder=t;try{const e=await this.getPreviousImage();if(!e){this.showNoPreview("This is the first image");return}const n=await this.plantDataManager.getImageAnnotations(e.id);if(!n||n.length===0){this.showNoPreview("This image has no annotations");return}if(!n.find(i=>i.order===t)){this.showNoPreview("This image has no ".concat(t,"th branch point"));return}this.updateSpecificPreviewTitle(e,t),await this.renderSpecificOrderPreview(e,n,t)}catch(e){console.error("Show specific order preview failed:",e),this.showNoPreview("Preview loading failed")}}}async restoreNormalPreview(){this.isShowingSpecificOrder=!1,this.specificTargetOrder=null,await this.updatePreview()}updateSpecificPreviewTitle(t,e){if(this.previewTitle){const n=t.timeString||"Unknown time";this.previewTitle.textContent="Dragging: ".concat(e,"th branch point"),this.previewTitle.title="".concat(n," - Dragging ").concat(e,"th branch point, reference position from previous image")}}async renderSpecificOrderPreview(t,e,n){var i;if(!this.previewCanvas||!this.previewCtx)return;const o=e.find(s=>s.order===n);if(!o){this.showNoPreview("This image has no ".concat(n,"th branch point"));return}this.hideLoading(),this.hideNoPreview();try{console.log("Render specific order preview:",n);let s;if(t.file&&t.file instanceof File)s=URL.createObjectURL(t.file);else if(t.url)s=t.url;else if((i=this.plantDataManager)!=null&&i.fileSystemManager)try{s=await this.plantDataManager.fileSystemManager.createImageURL(t)}catch(T){if(console.warn("Create URL using FileSystemManager failed:",T),t.handle)try{const N=await t.handle.getFile();s=URL.createObjectURL(N)}catch(N){throw console.error("Create URL from handle also failed:",N),new Error("Failed to get image data: all methods failed")}else throw T}else throw new Error("Failed to get image data: missing necessary image information or file system manager");const a=new Image;a.crossOrigin="anonymous",await new Promise((T,N)=>{a.onload=()=>T(),a.onerror=()=>N(new Error("Image loading failed")),a.src=s});const c=Math.round(200/this.zoomLevel),d=o.x,u=o.y,h=Math.max(0,Math.min(a.width-c,d-c/2)),m=Math.max(0,Math.min(a.height-c,u-c/2)),f=Math.min(c,a.width-h),y=Math.min(c,a.height-m),S=this.previewCanvas.width,x=this.previewCanvas.height;this.previewCtx.clearRect(0,0,S,x),this.previewCtx.drawImage(a,h,m,f,y,0,0,S,x);const I=S/f,b=x/y,C=(d-h)*I,D=(u-m)*b;this.renderDraggedAnnotation(C,D,n,o.direction),e.forEach(T=>{if(T.order!==n&&T.x>=h&&T.x<=h+f&&T.y>=m&&T.y<=m+y){const N=(T.x-h)*I,O=(T.y-m)*b;this.renderLocalizedAnnotation(N,O,T.order||0,T.direction,!1,T)}}),this.renderZoomInfo(I,b),s&&s.startsWith("blob:")&&!t.url&&setTimeout(()=>URL.revokeObjectURL(s),5e3),console.log("Specific order preview rendering completed")}catch(s){console.error("Specific order preview rendering failed:",s),this.showNoPreview("Preview loading failed: ".concat(s.message))}}renderDraggedAnnotation(t,e,n,o){const i="#ff9800";this.previewCtx.beginPath(),this.previewCtx.arc(t,e,11,0,2*Math.PI),this.previewCtx.strokeStyle="#ff9800",this.previewCtx.lineWidth=2,this.previewCtx.setLineDash([3,3]),this.previewCtx.stroke(),this.previewCtx.setLineDash([]),this.previewCtx.beginPath(),this.previewCtx.arc(t,e,6,0,2*Math.PI),this.previewCtx.fillStyle=i,this.previewCtx.fill(),this.previewCtx.strokeStyle="#ffffff",this.previewCtx.lineWidth=3,this.previewCtx.stroke(),this.renderDirectionArrow(t,e,o,!0),this.previewCtx.fillStyle="#000000",this.previewCtx.font="bold 9px Arial",this.previewCtx.textAlign="center",this.previewCtx.textBaseline="middle",this.previewCtx.fillText(n.toString(),t,e),this.previewCtx.fillStyle="#ff9800",this.previewCtx.font="bold 7px Arial",this.previewCtx.fillText("Dragging",t,e+6+12)}}class ge{constructor(t){this.httpManager=t,this.notes=new Map,this.cacheTimestamps=new Map,this.isInitialized=!1,this.cacheExpiration=5*60*1e3,this.requestQueue=new Map,this.noteCounts=new Map,this.bulkNoteData=null,this.bulkDataTimestamp=0,this.performanceMetrics={requestCount:0,bulkRequestCount:0,cacheHits:0,networkTime:0}}get baseUrl(){return this.httpManager.baseUrl}async initialize(){try{return await this.httpManager.ensureConnection(),this.isInitialized=!0,console.log("NoteManager 初始化成功"),!0}catch(t){throw console.error("NoteManager 初始化失败:",t),t}}async ensureConnection(){this.isInitialized||await this.initialize(),await this.httpManager.ensureConnection()}async addPlantNote(t,e){if(!t)throw new Error("植物ID不能为空");if(!e.title||!e.content)throw new Error("笔记标题和内容不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const n=await fetch("".concat(this.httpManager.baseUrl,"/notes/plant/").concat(encodeURIComponent(t)),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!n.ok)throw new Error("HTTP ".concat(n.status,": ").concat(n.statusText));const o=await n.json();if(o.success)return this.clearCache(),console.log("植物笔记创建成功: ".concat(o.data.noteId," - 缓存已完全清除")),o.data.noteId;throw new Error(o.error||"创建植物笔记失败")},"创建植物 ".concat(t," 笔记"))}async addImageNote(t,e,n){if(!t)throw new Error("植物ID不能为空");if(!e)throw new Error("图像ID不能为空");if(!n.title||!n.content)throw new Error("笔记标题和内容不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const o=await fetch("".concat(this.httpManager.baseUrl,"/notes/image/").concat(encodeURIComponent(t),"/").concat(encodeURIComponent(e)),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!o.ok)throw new Error("HTTP ".concat(o.status,": ").concat(o.statusText));const i=await o.json();if(i.success)return this.clearCache(),console.log("图像笔记创建成功: ".concat(i.data.noteId," - 缓存已完全清除")),i.data.noteId;throw new Error(i.error||"创建图像笔记失败")},"创建图像 ".concat(e," 笔记"))}async getPlantNotes(t){if(!t)throw new Error("植物ID不能为空");await this.ensureConnection();const e="plant_".concat(t);if(this.bulkNoteData&&!this.isBulkDataExpired()){const n=this.bulkNoteData.plantNotes[t]||[];return this.notes.set(e,n),this.performanceMetrics.cacheHits++,n}return this.notes.has(e)&&!this.isCacheExpired(e)?(this.performanceMetrics.cacheHits++,this.notes.get(e)):this.httpManager.withRetry(async()=>{const n=performance.now(),o="".concat(this.httpManager.baseUrl,"/notes/plant/").concat(encodeURIComponent(t));console.log("[NoteManager] 请求植物笔记 URL: ".concat(o));try{const i=await fetch(o);if(this.performanceMetrics.requestCount++,!i.ok)if(console.error("[NoteManager] 请求失败: ".concat(i.status," ").concat(i.statusText)),i.status===404){const a=[];return this.setCache(e,a),a}else throw i.status===500?new Error("服务器内部错误 (500): 请检查后端服务状态"):i.status===403?new Error("访问被拒绝 (403): 请检查权限设置"):new Error("HTTP ".concat(i.status,": ").concat(i.statusText));const s=await i.json();if(this.performanceMetrics.networkTime+=performance.now()-n,s.success)return this.setCache(e,s.data),console.log("[NoteManager] 成功获取植物 ".concat(t," 的 ").concat(s.data.length," 条笔记")),s.data;throw new Error(s.error||"获取植物笔记失败")}catch(i){throw this.performanceMetrics.networkTime+=performance.now()-n,i.name==="TypeError"&&i.message.includes("fetch")?new Error("网络连接失败: 无法连接到后端服务 (".concat(o,")")):i}},"获取植物 ".concat(t," 笔记"))}async getImageNotes(t,e){if(!t)throw new Error("植物ID不能为空");if(!e)throw new Error("图像ID不能为空");await this.ensureConnection();const n="image_".concat(t,"_").concat(e);if(this.bulkNoteData&&!this.isBulkDataExpired()){const o=this.bulkNoteData.imageNotes[e]||[];return this.notes.set(n,o),this.performanceMetrics.cacheHits++,o}return this.notes.has(n)&&!this.isCacheExpired(n)?(this.performanceMetrics.cacheHits++,this.notes.get(n)):this.httpManager.withRetry(async()=>{const o=performance.now(),i="".concat(this.httpManager.baseUrl,"/notes/image/").concat(encodeURIComponent(t),"/").concat(encodeURIComponent(e));console.log("[NoteManager] 请求图像笔记 URL: ".concat(i));try{const s=await fetch(i);if(this.performanceMetrics.requestCount++,!s.ok)if(console.error("[NoteManager] 请求失败: ".concat(s.status," ").concat(s.statusText)),s.status===404){const l=[];return this.setCache(n,l),l}else throw s.status===500?new Error("服务器内部错误 (500): 请检查后端服务状态"):s.status===403?new Error("访问被拒绝 (403): 请检查权限设置"):new Error("HTTP ".concat(s.status,": ").concat(s.statusText));const a=await s.json();if(this.performanceMetrics.networkTime+=performance.now()-o,a.success)return this.setCache(n,a.data),console.log("[NoteManager] 成功获取图像 ".concat(e," 的 ").concat(a.data.length," 条笔记")),a.data;throw new Error(a.error||"获取图像笔记失败")}catch(s){throw this.performanceMetrics.networkTime+=performance.now()-o,s.name==="TypeError"&&s.message.includes("fetch")?new Error("网络连接失败: 无法连接到后端服务 (".concat(i,")")):s}},"获取图像 ".concat(e," 笔记"))}async updateNote(t,e){if(!t)throw new Error("笔记ID不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const n=await fetch("".concat(this.httpManager.baseUrl,"/notes/").concat(encodeURIComponent(t)),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!n.ok)throw new Error("HTTP ".concat(n.status,": ").concat(n.statusText));const o=await n.json();if(o.success)return this.clearCache(),console.log("笔记更新成功: ".concat(t)),o.data;throw new Error(o.error||"更新笔记失败")},"更新笔记 ".concat(t))}async deleteNote(t){if(!t)throw new Error("笔记ID不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const e=await fetch("".concat(this.httpManager.baseUrl,"/notes/").concat(encodeURIComponent(t)),{method:"DELETE"});if(!e.ok){if(e.status===404)return console.warn("笔记 ".concat(t," 不存在或已被删除")),this.clearCache(),!0;throw new Error("HTTP ".concat(e.status,": ").concat(e.statusText))}const n=await e.json();if(n.success)return this.clearCache(),console.log("笔记删除成功: ".concat(t)),!0;throw new Error(n.error||"删除笔记失败")},"删除笔记 ".concat(t))}async getNote(t){if(!t)throw new Error("笔记ID不能为空");return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const e=await fetch("".concat(this.httpManager.baseUrl,"/notes/").concat(encodeURIComponent(t)));if(!e.ok){if(e.status===404)return null;throw new Error("HTTP ".concat(e.status,": ").concat(e.statusText))}const n=await e.json();if(n.success)return n.data;throw new Error(n.error||"获取笔记失败")},"获取笔记 ".concat(t))}async searchNotes(t,e={}){return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const n=new URLSearchParams;t&&n.append("query",t),e.plantId&&n.append("plantId",e.plantId),e.noteType&&n.append("noteType",e.noteType),e.author&&n.append("author",e.author);const o="".concat(this.httpManager.baseUrl,"/notes/search?").concat(n);console.log("[NoteManager] Making search request to:",o);const i=await fetch(o);if(!i.ok){const a=new Error("HTTP ".concat(i.status,": ").concat(i.statusText));throw a.url=o,a.status=i.status,console.error("[NoteManager] Search request failed:",a),a}const s=await i.json();if(s.success)return s.data;throw new Error(s.error||"搜索笔记失败")},"搜索笔记")}async getStats(){return await this.ensureConnection(),this.httpManager.withRetry(async()=>{const t=await fetch("".concat(this.httpManager.baseUrl,"/notes/stats"));if(!t.ok)throw new Error("HTTP ".concat(t.status,": ").concat(t.statusText));const e=await t.json();if(e.success)return e.data;throw new Error(e.error||"获取笔记统计失败")},"获取笔记统计")}clearCache(){this.notes.clear(),this.cacheTimestamps.clear(),this.noteCounts.clear(),this.bulkNoteData=null,this.bulkDataTimestamp=0,console.log("笔记缓存已完全清除 (包括批量数据缓存)")}invalidateCache(t,e=null){const n="plant_".concat(t);if(this.notes.delete(n),e){const o="image_".concat(t,"_").concat(e);this.notes.delete(o)}}getCacheStats(){return{cacheSize:this.notes.size,isInitialized:this.isInitialized,cacheKeys:Array.from(this.notes.keys())}}validateNoteData(t){const e=[];return(!t.title||t.title.trim()==="")&&e.push("标题不能为空"),(!t.content||t.content.trim()==="")&&e.push("内容不能为空"),t.title&&t.title.length>100&&e.push("标题长度不能超过100字符"),t.content&&t.content.length>5e3&&e.push("内容长度不能超过5000字符"),t.noteType&&!["general","observation","annotation"].includes(t.noteType)&&e.push("笔记类型必须是 general、observation 或 annotation"),t.tags&&!Array.isArray(t.tags)&&e.push("标签必须是数组"),{isValid:e.length===0,errors:e}}formatNoteForDisplay(t){return{...t,formattedTimestamp:new Date(t.timestamp).toLocaleString("zh-CN"),formattedLastModified:new Date(t.lastModified).toLocaleString("zh-CN"),shortContent:t.content.length>100?t.content.substring(0,100)+"...":t.content,tagsText:t.tags.join(", ")}}cleanup(){this.clearCache(),this.isInitialized=!1,this.cleanupTimer&&clearInterval(this.cleanupTimer),console.log("NoteManager 清理完成")}startAutoCleanup(){this.cleanupTimer=setInterval(()=>{this.cleanupExpiredCache()},10*60*1e3)}isCacheExpired(t){const e=this.cacheTimestamps.get(t);return e?Date.now()-e>this.cacheExpiration:!0}setCache(t,e){this.notes.set(t,e),this.cacheTimestamps.set(t,Date.now())}async withRequestDeduplication(t,e){if(this.requestQueue.has(t))return this.requestQueue.get(t);const n=e();this.requestQueue.set(t,n);try{const o=await n;return this.requestQueue.delete(t),o}catch(o){throw this.requestQueue.delete(t),o}}async getNoteCount(t,e=null){const n=e?"image_".concat(t,"_").concat(e):"plant_".concat(t);if(this.noteCounts.has(n))return this.noteCounts.get(n);const o=e?"image_".concat(t,"_").concat(e):"plant_".concat(t);if(this.notes.has(o)&&!this.isCacheExpired(o)){const s=this.notes.get(o).length;return this.noteCounts.set(n,s),s}return this.loadNotesAsync(t,e),0}async loadNotesAsync(t,e=null){try{e?await this.getImageNotes(t,e):await this.getPlantNotes(t)}catch(n){console.warn("后台加载笔记失败:",n)}}async preloadNotes(t,e=[]){const n=[];n.push(this.loadNotesAsync(t)),e.forEach(o=>{n.push(this.loadNotesAsync(t,o))});try{await Promise.allSettled(n),console.log("预加载完成: 植物 ".concat(t," 和 ").concat(e.length," 个图像的笔记"))}catch(o){console.warn("预加载笔记失败:",o)}}async getAllNotesInBulk(){return console.log("[NoteManager] 开始批量获取所有笔记数据..."),await this.ensureConnection(),this.bulkNoteData&&!this.isBulkDataExpired()?(console.log("[NoteManager] 使用缓存的批量笔记数据"),this.performanceMetrics.cacheHits++,this.bulkNoteData):this.httpManager.withRetry(async()=>{const t=performance.now(),e="".concat(this.httpManager.baseUrl,"/notes/bulk");console.log("[NoteManager] 请求批量笔记数据 URL: ".concat(e));try{const n=await fetch(e,{headers:{"Cache-Control":"no-cache"}});if(this.performanceMetrics.bulkRequestCount++,!n.ok){if(n.status===404)return console.warn("[NoteManager] 批量笔记端点不存在，将回退到单独请求模式"),null;throw new Error("HTTP ".concat(n.status,": ").concat(n.statusText))}const o=await n.json();if(this.performanceMetrics.networkTime+=performance.now()-t,o.success){this.bulkNoteData={plantNotes:o.data.plantNotes||{},imageNotes:o.data.imageNotes||{},statistics:o.data.statistics||{}},this.bulkDataTimestamp=Date.now(),this.updateIndividualCacheFromBulk();const i=Object.keys(this.bulkNoteData.plantNotes).length,s=Object.keys(this.bulkNoteData.imageNotes).length;return console.log("[NoteManager] 成功获取批量笔记数据: ".concat(i," 个植物, ").concat(s," 个图像")),this.bulkNoteData}throw new Error(o.error||"获取批量笔记数据失败")}catch(n){throw this.performanceMetrics.networkTime+=performance.now()-t,n.name==="TypeError"&&n.message.includes("fetch")?new Error("网络连接失败: 无法连接到后端服务 (".concat(e,")")):n}},"批量获取笔记数据")}isBulkDataExpired(){return this.bulkDataTimestamp?Date.now()-this.bulkDataTimestamp>this.cacheExpiration:!0}updateIndividualCacheFromBulk(){if(this.bulkNoteData){for(const[t,e]of Object.entries(this.bulkNoteData.plantNotes)){const n="plant_".concat(t);this.setCache(n,e)}for(const[t,e]of Object.entries(this.bulkNoteData.imageNotes)){const n=t.split("_")[0],o="image_".concat(n,"_").concat(t);this.setCache(o,e)}}}async getQuickNoteStats(){console.log("[NoteManager] 获取快速笔记统计...");try{const t=await this.getAllNotesInBulk();if(!t)return console.warn("[NoteManager] 批量API不可用，回退到传统模式"),null;const e={};for(const[n,o]of Object.entries(t.plantNotes)){const i=o.length;let s=0;for(const[a,l]of Object.entries(t.imageNotes))a.startsWith(n+"_")&&(s+=l.length);e[n]={plantNotes:i,imageNotes:s,total:i+s}}return console.log("[NoteManager] 快速统计完成: ".concat(Object.keys(e).length," 个植物")),e}catch(t){return console.error("[NoteManager] 获取快速笔记统计失败:",t),null}}getPerformanceMetrics(){return{...this.performanceMetrics,cacheSize:this.notes.size,hasBulkData:!!this.bulkNoteData,bulkDataAge:this.bulkDataTimestamp?Date.now()-this.bulkDataTimestamp:null,averageRequestTime:this.performanceMetrics.requestCount>0?this.performanceMetrics.networkTime/this.performanceMetrics.requestCount:0}}resetPerformanceMetrics(){this.performanceMetrics={requestCount:0,bulkRequestCount:0,cacheHits:0,networkTime:0}}async refreshBulkData(){return console.log("[NoteManager] 强制刷新批量数据..."),this.bulkNoteData=null,this.bulkDataTimestamp=0,await this.getAllNotesInBulk()}cleanupExpiredCache(){const t=Date.now(),e=[];for(const[n,o]of this.cacheTimestamps)t-o>this.cacheExpiration&&e.push(n);e.forEach(n=>{this.notes.delete(n),this.cacheTimestamps.delete(n)}),this.isBulkDataExpired()&&(this.bulkNoteData=null,this.bulkDataTimestamp=0),e.length>0&&console.log("清理了 ".concat(e.length," 个过期缓存"))}}class me{constructor(t){this.noteManager=t,this.currentPlantId=null,this.currentImageId=null,this.currentNote=null,this.isEditMode=!1,this.initializeUI()}initializeUI(){setTimeout(()=>{this.createNoteModal(),this.createNoteListModal(),this.setupEventListeners(),this.createNoteButtons(),this.injectNoteStyles(),console.log("[NoteUI] UI initialization completed with note separation styles"),setTimeout(()=>{this.updateAllPlantNoteBadges()},500),setTimeout(()=>{console.log("[NoteUI] Running additional badge update for safety"),this.updateAllPlantNoteBadges()},2e3)},200)}createNoteModal(){console.log("[NoteUI] Creating note modal");const t=document.createElement("div");t.id="note-modal",t.className="modal",t.style.display="none",t.innerHTML='\n      <div class="modal-content note-modal-content">\n        <div class="modal-header">\n          <h2 id="note-modal-title">Add Note</h2>\n          <button class="close-button" id="note-modal-close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="note-form">\n            <div class="form-group">\n              <label for="note-title">Title <span class="required">*</span></label>\n              <input type="text" id="note-title" maxlength="100" required placeholder="Enter note title...">\n              <div class="char-counter">\n                <span id="note-title-count">0</span>/100\n              </div>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-type">Type</label>\n              <select id="note-type">\n                <option value="general">General Note</option>\n                <option value="observation">Observation Record</option>\n                <option value="annotation">Annotation Description</option>\n              </select>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-content">Content <span class="required">*</span></label>\n              <textarea id="note-content" rows="6" maxlength="5000" required placeholder="Enter note content..."></textarea>\n              <div class="char-counter">\n                <span id="note-content-count">0</span>/5000\n              </div>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-tags">Tags</label>\n              <input type="text" id="note-tags" placeholder="Separate multiple tags with commas">\n              <div class="form-help">Example: observation, growth, issue</div>\n            </div>\n            \n            <div class="form-group">\n              <label for="note-author">Author</label>\n              <input type="text" id="note-author" value="User" placeholder="Enter author name">\n            </div>\n            \n            <!-- 🔧 NEW: Backward Propagation Option -->\n            <div class="form-group" id="backward-propagation-group" style="display: none;">\n              <div class="checkbox-wrapper">\n                <label class="checkbox-label">\n                  <input type="checkbox" id="note-backward-propagation">\n                  <span class="checkbox-text">Backward Propagation</span>\n                </label>\n                <div class="form-help">Apply this note to all later-dated images of the current plant</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class="modal-footer">\n          <button class="btn btn-secondary" id="note-cancel-btn">Cancel</button>\n          <button class="btn btn-primary" id="note-save-btn">Save</button>\n        </div>\n      </div>\n    ',document.body.appendChild(t),console.log("[NoteUI] Note modal created and set to hidden")}createNoteListModal(){console.log("[NoteUI] Creating note list modal");const t=document.createElement("div");t.id="note-list-modal",t.className="modal",t.style.display="none",t.innerHTML='\n      <div class="modal-content note-list-modal-content">\n        <div class="modal-header">\n          <h2 id="note-list-modal-title">Note List</h2>\n          <button class="close-button" id="note-list-modal-close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="note-list-controls">\n            <div class="search-group">\n              <input type="text" id="note-search" placeholder="Search notes...">\n              <button class="btn btn-sm btn-secondary" id="note-search-btn">Search</button>\n            </div>\n            <div class="filter-group">\n              <select id="note-type-filter">\n                <option value="">All Types</option>\n                <option value="general">General Note</option>\n                <option value="observation">Observation Record</option>\n                <option value="annotation">Annotation Description</option>\n              </select>\n              <button class="btn btn-sm btn-primary" id="add-note-btn">Add Note</button>\n            </div>\n          </div>\n          <div class="note-list-container">\n            <div id="note-list-content">\n              <div class="loading-message">Loading...</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ',document.body.appendChild(t),console.log("[NoteUI] Note list modal created and set to hidden")}createNoteButtons(){this.createPlantNoteButton(),this.createImageNoteButton()}createPlantNoteButton(){const t=document.querySelector(".toolbar-section");if(!t){console.warn("[NoteUI] Toolbar section not found, creating fallback container"),this.createFallbackPlantNoteContainer();return}const e=document.getElementById("plant-note-btn");e&&e.remove();let n=t.querySelector(".plant-notes-section");n||(n=document.createElement("div"),n.className="plant-notes-section",n.style.cssText="\n        margin-top: 10px;\n        padding-top: 10px;\n        border-top: 1px solid var(--border-color);\n      ",t.appendChild(n));const o=document.createElement("button");o.id="plant-note-btn",o.className="btn btn-small btn-secondary",o.innerHTML='📝 Plant Notes <span id="plant-note-count" class="note-count-display"></span>',o.title="View or add plant notes",o.style.cssText="\n      display: none;\n      width: 100%;\n      margin-bottom: 5px;\n      position: relative;\n    ",n.appendChild(o),console.log("[NoteUI] Plant notes button created in toolbar with count display")}createFallbackPlantNoteContainer(){const t=document.createElement("div");t.className="plant-note-container",t.style.cssText="\n      position: fixed;\n      top: 80px;\n      right: 20px;\n      z-index: 1000;\n      background: rgba(255, 255, 255, 0.9);\n      padding: 10px;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      display: none;\n    ",document.body.appendChild(t);const e=document.createElement("button");e.id="plant-note-btn",e.className="btn btn-info btn-sm note-btn",e.innerHTML="📝 Plant Notes",e.title="View or add plant notes",e.style.display="none",t.appendChild(e)}createImageNoteButton(){console.log("[NoteUI] Creating image notes button");const t=document.querySelector(".annotation-controls");if(!t){console.warn("[NoteUI] Annotation controls not found, creating fallback container"),this.createFallbackImageNoteContainer();return}const e=document.getElementById("image-note-btn");e&&e.remove();const n=document.createElement("button");n.id="image-note-btn",n.className="btn btn-icon",n.innerHTML='📝<span id="image-note-count" class="note-count-overlay"></span>',n.title="View or add image notes",n.style.cssText="\n      display: none;\n      width: 32px;\n      height: 32px;\n      padding: 0;\n      font-size: 16px;\n      background-color: rgba(0, 0, 0, 0.7);\n      color: white;\n      border: none;\n      pointer-events: auto;\n      cursor: pointer;\n      border-radius: 0.375rem;\n      position: relative;\n    ",t.appendChild(n),console.log("[NoteUI] Image notes button created in annotation controls with count display")}createFallbackImageNoteContainer(){const t=document.createElement("div");t.className="image-note-container",t.style.cssText="\n      position: fixed;\n      top: 120px;\n      right: 20px;\n      z-index: 1000;\n      background: rgba(255, 255, 255, 0.9);\n      padding: 10px;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      display: none;\n    ",document.body.appendChild(t);const e=document.createElement("button");e.id="image-note-btn",e.className="btn btn-info btn-sm note-btn",e.innerHTML="📝",e.title="View or add image notes",e.style.cssText="\n      display: none;\n      pointer-events: auto;\n      cursor: pointer;\n    ",t.appendChild(e)}setupEventListeners(){setTimeout(()=>{this.setupModalEventListeners(),this.setupButtonEventListeners(),this.setupInputEventListeners()},200)}setupModalEventListeners(){const t=document.getElementById("note-modal-close");t&&t.addEventListener("click",()=>{this.closeNoteModal()});const e=document.getElementById("note-cancel-btn");e&&e.addEventListener("click",()=>{this.closeNoteModal()});const n=document.getElementById("note-save-btn");n&&n.addEventListener("click",()=>{this.saveNote()});const o=document.getElementById("note-list-modal-close");o&&o.addEventListener("click",()=>{this.closeNoteListModal()});const i=document.getElementById("add-note-btn");i&&i.addEventListener("click",()=>{this.closeNoteListModal(),this.showNoteModal()});const s=document.getElementById("note-search-btn");s&&s.addEventListener("click",()=>{this.searchNotes()});const a=document.getElementById("note-search");a&&a.addEventListener("keypress",l=>{l.key==="Enter"&&this.searchNotes()}),document.addEventListener("click",l=>{l.target.id==="note-modal"&&this.closeNoteModal(),l.target.id==="note-list-modal"&&this.closeNoteListModal()})}setupButtonEventListeners(){const t=document.getElementById("plant-note-btn");t?(console.log("[NoteUI] Plant notes button found, binding events"),t.addEventListener("click",n=>{console.log("[NoteUI] Plant notes button clicked"),n.preventDefault(),this.showPlantNotes()})):console.warn("[NoteUI] Plant notes button not found");const e=document.getElementById("image-note-btn");e?(console.log("[NoteUI] Image notes button found, binding events"),e.addEventListener("click",n=>{console.log("[NoteUI] Image notes button clicked"),n.preventDefault(),this.showImageNotes()})):console.warn("[NoteUI] Image notes button not found")}setupInputEventListeners(){const t=document.getElementById("note-title");t&&t.addEventListener("input",()=>{this.updateCharCounter("note-title","note-title-count",100)});const e=document.getElementById("note-content");e&&e.addEventListener("input",()=>{this.updateCharCounter("note-content","note-content-count",5e3)})}async showPlantNotes(){if(console.log("[NoteUI] showPlantNotes called"),!this.currentPlantId){console.warn("[NoteUI] No plant selected, cannot show plant notes"),this.showUserError("Please select a plant","You need to select a plant to view notes");return}this.currentImageId=null,console.log("[NoteUI] Cleared currentImageId to ensure plant notes creation"),document.getElementById("note-list-modal-title").textContent="Plant Notes - ".concat(this.currentPlantId);const t=document.getElementById("note-list-modal");t&&(console.log("[NoteUI] Showing plant notes modal"),t.style.display="flex");try{await this.loadNoteList()}catch(e){console.error("[NoteUI] Failed to load plant notes:",e),this.showUserError("Failed to load notes",e.message)}}async showImageNotes(){var a,l,c;console.log("[NoteUI] showImageNotes called"),console.log("[NoteUI] Current state - plantId: ".concat(this.currentPlantId,", imageId: ").concat(this.currentImageId));const t=(a=window.PlantAnnotationTool)==null?void 0:a.appState,e=(l=t==null?void 0:t.currentPlant)==null?void 0:l.id,n=(c=t==null?void 0:t.currentImage)==null?void 0:c.id;console.log("[NoteUI] Fallback state - plantId: ".concat(e,", imageId: ").concat(n));const o=this.currentPlantId||e,i=this.currentImageId||n;if(!o||!i){console.warn("[NoteUI] No plant or image selected, cannot show image notes"),this.showUserError("Please select plant and image","You need to select both plant and image to view image notes");return}!this.currentPlantId&&e&&(this.currentPlantId=e),!this.currentImageId&&n&&(this.currentImageId=n),document.getElementById("note-list-modal-title").textContent="Image Notes - ".concat(i);const s=document.getElementById("note-list-modal");s&&(console.log("[NoteUI] Showing image notes modal"),s.style.display="flex");try{await this.loadNoteList()}catch(d){console.error("[NoteUI] Failed to load image notes:",d),this.showUserError("Failed to load notes",d.message)}}async loadNoteList(){const t=document.getElementById("note-list-content");t.innerHTML='<div class="loading-message">Loading...</div>';try{let e;this.currentImageId?(e=await this.noteManager.getImageNotes(this.currentPlantId,this.currentImageId),console.log("[NoteUI] Loaded ".concat(e.length," image notes for ").concat(this.currentImageId))):(console.log("[NoteUI] Loading plant-level notes only for ".concat(this.currentPlantId)),e=await this.noteManager.getPlantNotes(this.currentPlantId),console.log("[NoteUI] Plant API loaded ".concat(e.length," plant-only notes for ").concat(this.currentPlantId))),this.renderNoteList(e),console.log("[NoteUI] Modal refreshed with ".concat(e.length," notes"))}catch(e){console.error("Failed to load note list:",e),t.innerHTML='<div class="error-message">Loading failed: '.concat(e.message,"</div>")}}renderNoteList(t){const e=document.getElementById("note-list-content");if(!t||t.length===0){e.innerHTML='<div class="empty-message">No notes available</div>';return}const n=t.filter(s=>!s.imageId),o=t.filter(s=>s.imageId);console.log("[NoteUI] Rendering ".concat(n.length," plant notes and ").concat(o.length," image notes"));let i="";n.length>0&&(i+='\n        <div class="notes-section">\n          <div class="section-header">\n            <h3 class="section-title">\n              <span class="section-icon">📝</span>\n              Plant Notes ('.concat(n.length,')\n            </h3>\n          </div>\n          <div class="notes-list">\n            ').concat(this.renderNoteItems(n,"plant"),"\n          </div>\n        </div>\n      ")),o.length>0&&(i+='\n        <div class="notes-section">\n          <div class="section-header">\n            <h3 class="section-title">\n              <span class="section-icon">🖼️</span>\n              Image Notes ('.concat(o.length,')\n            </h3>\n          </div>\n          <div class="notes-list">\n            ').concat(this.renderNoteItems(o,"image"),"\n          </div>\n        </div>\n      ")),e.innerHTML=i,this.bindNoteActionEvents(e)}renderNoteItems(t,e){return t.map(n=>{const o=this.noteManager.formatNoteForDisplay(n);let i="",s="";if(e==="plant")i='<span class="note-scope plant-scope">📝 Plant</span>';else if(e==="image"){i='<span class="note-scope image-scope">🖼️ Image</span>';const a=n.imageId?n.imageId.split("_").slice(-1)[0]:"Unknown";s='<div class="image-info">📷 Image: '.concat(this.escapeHtml(a),"</div>")}return'\n        <div class="note-item '.concat(e,'-note" data-note-id="').concat(n.noteId,'">\n          <div class="note-item-header">\n            <h4 class="note-title">').concat(this.escapeHtml(o.title),'</h4>\n            <div class="note-actions">\n              <button class="btn btn-sm btn-secondary edit-note-btn" data-note-id="').concat(n.noteId,'">Edit</button>\n              <button class="btn btn-sm btn-danger delete-note-btn" data-note-id="').concat(n.noteId,'">Delete</button>\n            </div>\n          </div>\n          <div class="note-item-meta">\n            ').concat(i,'\n            <span class="note-type note-type-').concat(n.noteType,'">').concat(this.getNoteTypeText(n.noteType),'</span>\n            <span class="note-timestamp">').concat(o.formattedTimestamp,'</span>\n            <span class="note-author">Author: ').concat(this.escapeHtml(n.author),"</span>\n          </div>\n          ").concat(s,'\n          <div class="note-content">\n            ').concat(this.escapeHtml(o.shortContent),"\n          </div>\n          ").concat(n.tags.length>0?'\n            <div class="note-tags">\n              '.concat(n.tags.map(a=>'<span class="tag">'.concat(this.escapeHtml(a),"</span>")).join(""),"\n            </div>\n          "):"","\n        </div>\n      ")}).join("")}bindNoteActionEvents(t){t.querySelectorAll(".edit-note-btn").forEach(e=>{e.addEventListener("click",n=>{const o=n.target.dataset.noteId;this.editNote(o)})}),t.querySelectorAll(".delete-note-btn").forEach(e=>{e.addEventListener("click",n=>{const o=n.target.dataset.noteId;this.deleteNote(o)})})}injectNoteStyles(){const t="note-separation-styles";if(document.getElementById(t))return;const e=document.createElement("style");e.id=t,e.textContent='\n      /* Note section separation styles */\n      .notes-section {\n        margin-bottom: 20px;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        overflow: hidden;\n      }\n      \n      .section-header {\n        background: #f9fafb;\n        padding: 12px 16px;\n        border-bottom: 1px solid #e5e7eb;\n      }\n      \n      .section-title {\n        margin: 0;\n        font-size: 16px;\n        font-weight: 600;\n        color: #374151;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n      \n      .section-icon {\n        font-size: 18px;\n      }\n      \n      .notes-list {\n        background: white;\n      }\n      \n      /* Note scope indicators */\n      .note-scope {\n        display: inline-flex;\n        align-items: center;\n        gap: 4px;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-size: 12px;\n        font-weight: 500;\n        margin-right: 8px;\n      }\n      \n      .plant-scope {\n        background: #dcfce7;\n        color: #166534;\n      }\n      \n      .image-scope {\n        background: #dbeafe;\n        color: #1d4ed8;\n      }\n      \n      /* Image info display */\n      .image-info {\n        background: #f0f9ff;\n        border: 1px solid #bae6fd;\n        border-radius: 4px;\n        padding: 6px 10px;\n        margin: 8px 0;\n        font-size: 13px;\n        color: #0c4a6e;\n      }\n      \n      /* Note item styling for different types */\n      .plant-note {\n        border-left: 4px solid #22c55e;\n      }\n      \n      .image-note {\n        border-left: 4px solid #3b82f6;\n      }\n      \n      /* Enhance existing note item spacing */\n      .note-item {\n        margin-bottom: 0;\n        border-bottom: 1px solid #f3f4f6;\n      }\n      \n      .note-item:last-child {\n        border-bottom: none;\n      }\n      \n      /* Backward propagation checkbox styling */\n      .checkbox-wrapper {\n        margin: 15px 0;\n      }\n      \n      .checkbox-label {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        cursor: pointer;\n        font-weight: 500;\n        color: #374151;\n      }\n      \n      .checkbox-label input[type="checkbox"] {\n        margin: 0;\n        padding: 0;\n        transform: scale(1.1);\n        accent-color: #3b82f6;\n      }\n      \n      .checkbox-text {\n        user-select: none;\n      }\n      \n      #backward-propagation-group .form-help {\n        margin-top: 5px;\n        font-size: 12px;\n        color: #6b7280;\n        font-style: italic;\n      }\n    ',document.head.appendChild(e),console.log("[NoteUI] Injected separation styles for plant/image notes")}showNoteModal(t=null){console.log("[NoteUI] showNoteModal called, note:",t),this.currentNote=t,this.isEditMode=!!t;const e=document.getElementById("note-modal"),n=document.getElementById("note-modal-title"),o=document.getElementById("backward-propagation-group");if(!e||!n){console.error("[NoteUI] Note modal elements not found");return}n.textContent=this.isEditMode?"Edit Note":"Add Note";const i=!this.isEditMode&&this.currentImageId;if(o){o.style.display=i?"block":"none";const a=document.getElementById("note-backward-propagation");a&&(a.checked=!1)}t?(document.getElementById("note-title").value=t.title,document.getElementById("note-type").value=t.noteType,document.getElementById("note-content").value=t.content,document.getElementById("note-tags").value=t.tags.join(", "),document.getElementById("note-author").value=t.author):(document.getElementById("note-title").value="",document.getElementById("note-type").value="general",document.getElementById("note-content").value="",document.getElementById("note-tags").value="",document.getElementById("note-author").value="User"),this.updateCharCounter("note-title","note-title-count",100),this.updateCharCounter("note-content","note-content-count",5e3),console.log("[NoteUI] Showing note edit modal"),e.style.display="flex";const s=document.getElementById("note-title");s&&s.focus()}closeNoteModal(){document.getElementById("note-modal").style.display="none",this.currentNote=null,this.isEditMode=!1}closeNoteListModal(){document.getElementById("note-list-modal").style.display="none"}async getLaterDatedImages(t,e){var n,o;try{console.log("[NoteUI] Finding later-dated images for ".concat(t,", current: ").concat(e));const i=(n=window.PlantAnnotationTool)==null?void 0:n.plantDataManager;if(!i)throw new Error("PlantDataManager not available");const s=(o=i.plants)==null?void 0:o.get(t);if(!s||!s.selectedViewAngle)throw new Error("Current plant or view angle not found");const a=await i.getPlantImages(t,s.selectedViewAngle);if(!a||a.length===0)return[];const l=a.findIndex(d=>d.id===e);if(l===-1)throw new Error("Current image not found in plant images");const c=a.slice(l+1);return console.log("[NoteUI] Found ".concat(c.length," later-dated images for backward propagation")),c}catch(i){return console.error("[NoteUI] Error finding later-dated images:",i),[]}}async applyNoteToMultipleImages(t,e,n){const o={success:[],failed:[]};console.log("[NoteUI] Applying note to ".concat(n.length," images via backward propagation"));for(const i of n)try{await this.noteManager.addImageNote(t,i.id,e),o.success.push(i.id),console.log("[NoteUI] Note successfully applied to ".concat(i.id))}catch(s){console.error("[NoteUI] Failed to apply note to ".concat(i.id,":"),s),o.failed.push({imageId:i.id,error:s.message})}return console.log("[NoteUI] Backward propagation completed: ".concat(o.success.length," success, ").concat(o.failed.length," failed")),o}async saveNote(){const t=document.getElementById("note-title").value.trim(),e=document.getElementById("note-content").value.trim(),n=document.getElementById("note-type").value,o=document.getElementById("note-tags").value.split(",").map(d=>d.trim()).filter(d=>d),i=document.getElementById("note-author").value.trim(),s=document.getElementById("note-backward-propagation"),a=s&&s.checked,l={title:t,content:e,noteType:n,tags:o,author:i},c=this.noteManager.validateNoteData(l);if(!c.isValid){alert("Input error:\\n"+c.errors.join("\\n"));return}try{if(this.isEditMode&&this.currentNote)console.log("[NoteUI] Updating note: ".concat(this.currentNote.noteId)),await this.noteManager.updateNote(this.currentNote.noteId,l),console.log("[NoteUI] Note updated successfully");else{if(console.log("[NoteUI] Creating new note..."),this.currentImageId){if(console.log("[NoteUI] Creating image note for ".concat(this.currentPlantId,"/").concat(this.currentImageId)),await this.noteManager.addImageNote(this.currentPlantId,this.currentImageId,l),a){console.log("[NoteUI] Backward propagation enabled, finding later-dated images...");const u=await this.getLaterDatedImages(this.currentPlantId,this.currentImageId);if(u.length>0){console.log("[NoteUI] Applying note to ".concat(u.length," later-dated images"));const h=await this.applyNoteToMultipleImages(this.currentPlantId,l,u);h.success.length>0&&console.log("[NoteUI] Backward propagation successful: ".concat(h.success.length," images updated")),h.failed.length>0&&console.warn("[NoteUI] Backward propagation partial failure: ".concat(h.failed.length," images failed"))}else console.log("[NoteUI] No later-dated images found for backward propagation")}}else console.log("[NoteUI] Creating plant note for ".concat(this.currentPlantId)),await this.noteManager.addPlantNote(this.currentPlantId,l);console.log("[NoteUI] Note created successfully")}if(this.closeNoteModal(),await new Promise(u=>setTimeout(u,100)),console.log("[NoteUI] Note saved, forcing complete cache clear for fresh data..."),this.noteManager.clearCache&&(this.noteManager.clearCache(),console.log("[NoteUI] Note manager cache completely cleared")),this.noteManager.refreshBulkData)try{await this.noteManager.refreshBulkData(),console.log("[NoteUI] Bulk data forcefully refreshed for immediate sync")}catch(u){console.warn("[NoteUI] Bulk data refresh failed, cache cleared anyway:",u)}const d=document.getElementById("note-list-modal");if(d&&d.style.display!=="none"&&(console.log("[NoteUI] Refreshing note list to show new/updated note"),await this.loadNoteList(),console.log("[NoteUI] Note list refreshed with fresh data")),this.currentPlantId){if(console.log("[NoteUI] 笔记保存完成，立即刷新徽章和按钮..."),console.log("[NoteUI] Forcing immediate badge refresh with fresh data..."),await new Promise(u=>setTimeout(u,200)),await this.updatePlantNoteBadge(this.currentPlantId),await this.updatePlantNoteButton(this.currentPlantId),this.currentImageId&&(await this.directUpdateThumbnailBadge(this.currentPlantId,this.currentImageId),await this.updateImageNoteButton(this.currentPlantId,this.currentImageId),console.log("[NoteUI] ✅ 图像笔记徽章和按钮计数通过直接API刷新完成"),a)){console.log("[NoteUI] Refreshing badges for all images affected by backward propagation...");const u=await this.getLaterDatedImages(this.currentPlantId,this.currentImageId);for(const h of u)await this.directUpdateThumbnailBadge(this.currentPlantId,h.id);console.log("[NoteUI] Updated badges for ".concat(u.length," propagated images"))}console.log("[NoteUI] 笔记徽章和按钮刷新完成")}}catch(d){console.error("Save note failed:",d),alert("Save failed: "+d.message)}}async editNote(t){try{const e=await this.noteManager.getNote(t);e&&(this.closeNoteListModal(),this.showNoteModal(e))}catch(e){console.error("Failed to get note:",e),alert("Failed to get note: "+e.message)}}async deleteNote(t){if(confirm("Are you sure you want to delete this note?"))try{if(console.log("[NoteUI] Attempting to delete note: ".concat(t)),await this.noteManager.deleteNote(t),console.log("[NoteUI] Note deletion successful"),await new Promise(e=>setTimeout(e,100)),console.log("[NoteUI] Note deleted, forcing complete cache clear and refresh..."),this.noteManager.clearCache&&(this.noteManager.clearCache(),console.log("[NoteUI] Note manager cache cleared after deletion")),this.noteManager.refreshBulkData)try{await this.noteManager.refreshBulkData(),console.log("[NoteUI] Bulk data forcefully refreshed after deletion")}catch(e){console.warn("[NoteUI] Bulk data refresh failed after deletion, cache cleared anyway:",e)}await this.loadNoteList(),console.log("[NoteUI] Note list refreshed after deletion"),this.currentPlantId&&(console.log("[NoteUI] Refreshing badges after note deletion using direct API calls..."),await this.updatePlantNoteBadge(this.currentPlantId),await this.updatePlantNoteButton(this.currentPlantId),this.currentImageId&&(await this.directUpdateThumbnailBadge(this.currentPlantId,this.currentImageId),await this.updateImageNoteButton(this.currentPlantId,this.currentImageId),console.log("[NoteUI] ✅ Image note badge and button updated via direct API after deletion")),console.log("[NoteUI] All badges refreshed after deletion"))}catch(e){console.error("Delete note failed:",e);let n="Delete failed: ";e.message.includes("404")||e.message.includes("不存在")?(n+="Note was already deleted or does not exist.",console.log("[NoteUI] Note already deleted, refreshing modal to show current state..."),this.noteManager.clearCache&&this.noteManager.clearCache(),await this.loadNoteList(),this.currentPlantId&&(await this.updatePlantNoteBadge(this.currentPlantId),this.currentImageId&&(await this.directUpdateThumbnailBadge(this.currentPlantId,this.currentImageId),await this.updateImageNoteButton(this.currentPlantId,this.currentImageId)))):n+=e.message,alert(n)}}async searchNotes(){const t=document.getElementById("note-search").value.trim(),e=document.getElementById("note-type-filter").value;try{let n;this.currentImageId?(console.log("[NoteUI] Searching image notes for ".concat(this.currentImageId," with query:"),t),n=(await this.noteManager.getImageNotes(this.currentPlantId,this.currentImageId)).filter(i=>{const s=!t||i.title.toLowerCase().includes(t.toLowerCase())||i.content.toLowerCase().includes(t.toLowerCase())||i.tags.some(l=>l.toLowerCase().includes(t.toLowerCase())),a=!e||i.noteType===e;return s&&a}),console.log("[NoteUI] Image note search completed: found ".concat(n.length," notes"))):(console.log("[NoteUI] Searching plant-level notes only for ".concat(this.currentPlantId," with query:"),t),n=(await this.noteManager.getPlantNotes(this.currentPlantId)).filter(i=>{const s=!t||i.title.toLowerCase().includes(t.toLowerCase())||i.content.toLowerCase().includes(t.toLowerCase())||i.tags.some(l=>l.toLowerCase().includes(t.toLowerCase())),a=!e||i.noteType===e;return s&&a}),console.log("[NoteUI] Plant note search completed: found ".concat(n.length," plant-level notes (image notes excluded for consistency)"))),this.renderNoteList(n)}catch(n){console.error("Search notes failed:",n);let o="Search failed: ";n.message.includes("404")?o+="Notes not found or backend server unavailable.":n.message.includes("500")?o+="Server error occurred during search. Please try again.":o+=n.message,document.getElementById("note-list-content").innerHTML='<div class="error-message">'.concat(o,"</div>")}}updateCharCounter(t,e,n){const o=document.getElementById(t),i=document.getElementById(e),s=o.value.length;i.textContent=s,s>n*.9?i.style.color="#ff6b6b":s>n*.8?i.style.color="#feca57":i.style.color="#666"}setCurrentPlant(t){this.currentPlantId=t;const e=document.getElementById("plant-note-btn"),n=document.querySelector(".plant-notes-section, .plant-note-container");e&&(e.style.display=t?"block":"none"),n&&(n.style.display=t?"block":"none"),t?(this.updatePlantNoteButton(t),this.updatePlantNoteBadge(t)):this.updatePlantNoteButton(null)}setCurrentImage(t){var o,i,s;console.log("[NoteUI] Setting current image ID: ".concat(t,", current plant ID: ").concat(this.currentPlantId)),this.currentImageId=t,t&&this.currentPlantId?(!this.currentPlantId&&((s=(i=(o=window.PlantAnnotationTool)==null?void 0:o.appState)==null?void 0:i.currentPlant)!=null&&s.id)&&(this.currentPlantId=window.PlantAnnotationTool.appState.currentPlant.id,console.log("[NoteUI] Auto-updated plant ID from global state: ".concat(this.currentPlantId))),this.updateImageNoteButton(this.currentPlantId,t),this.refreshThumbnailNoteBadge(this.currentPlantId,t)):(this.updateImageNoteButton(null,null),console.log("[NoteUI] Image note button cleared - no image selected"));const e=document.getElementById("image-note-btn"),n=document.querySelector(".annotation-controls, .image-note-container");if(console.log("[NoteUI] Image note button exists: ".concat(!!e,", container exists: ").concat(!!n)),e){const a=this.currentPlantId&&t;console.log("[NoteUI] Image note button should show: ".concat(a)),e.style.display=a?"block":"none"}if(n&&n.classList.contains("image-note-container")){const a=this.currentPlantId&&t;console.log("[NoteUI] Image note container should show: ".concat(a)),n.style.display=a?"block":"none"}}async updatePlantNoteButton(t){const e=document.getElementById("plant-note-count");if(e){if(!t){e.textContent="";return}try{let n=0;const o=await this.noteManager.getQuickNoteStats();if(o&&o[t]){if(n=o[t].plantNotes,console.log("[NoteUI] Plant note button using bulk data: ".concat(n," plant-only notes")),Math.random()<.1)try{const i=await this.noteManager.getPlantNotes(t),s=i?i.length:0;s!==n&&(console.warn("[NoteUI] Plant button bulk data inconsistency! Bulk: ".concat(n,", Actual: ").concat(s,". Using actual...")),n=s)}catch(i){console.debug("[NoteUI] Plant button validation failed, continuing with bulk data:",i)}}else{console.log("[NoteUI] Plant note button fallback to plant API for ".concat(t));try{const i=await this.noteManager.getPlantNotes(t);n=i?i.length:0,console.log("[NoteUI] Plant note button plant API found: ".concat(n," plant-only notes"))}catch(i){console.warn("[NoteUI] Plant API failed, final fallback to 0:",i),n=0}}n>0?(e.textContent="(".concat(n,")"),e.style.cssText="\n          color: #059669;\n          font-weight: bold;\n          margin-left: 5px;\n        "):e.textContent="",console.log("[NoteUI] Plant note button updated: ".concat(n," total notes (plant + image)"))}catch(n){console.error("Failed to update plant note button:",n),e.textContent=""}}}async updateImageNoteButton(t,e){const n=document.getElementById("image-note-count");if(n){if(!t||!e){n.textContent="",n.style.display="none";return}try{const o=await this.noteManager.getImageNotes(t,e),i=o?o.length:0;i>0?(n.textContent=i,n.style.cssText="\n          position: absolute;\n          top: -5px;\n          right: -5px;\n          background: #dc2626;\n          color: white;\n          border-radius: 50%;\n          width: 16px;\n          height: 16px;\n          font-size: 10px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-weight: bold;\n        "):(n.textContent="",n.style.display="none"),console.log("[NoteUI] Image note button updated: ".concat(i," notes"))}catch(o){console.error("Failed to update image note button:",o),n.textContent="",n.style.display="none"}}}async refreshThumbnailNoteBadge(t,e){try{const n="image_".concat(t,"_").concat(e);this.noteManager.notes&&this.noteManager.notes.has(n)&&(this.noteManager.notes.delete(n),console.log("[NoteUI] Force cleared cache for ".concat(n))),this.noteManager.bulkNoteData&&(this.noteManager.bulkNoteData=null,this.noteManager.bulkDataTimestamp=0,console.log("[NoteUI] Force cleared bulk cache for thumbnail refresh")),typeof loadImageNoteCount=="function"?(await loadImageNoteCount(t,e),console.log("[NoteUI] Thumbnail note badge refreshed for ".concat(e))):console.warn("[NoteUI] loadImageNoteCount function not available")}catch(n){console.error("Failed to refresh thumbnail note badge:",n)}}async updatePlantNoteBadge(t){var e,n;if(t){console.log("[NoteUI] updatePlantNoteBadge called for plant: ".concat(t));try{const o=await this.noteManager.getQuickNoteStats();if(o&&o[t]){const d=o[t],u=d.total;if(console.log("[NoteUI] Plant ".concat(t," bulk stats: ").concat(d.plantNotes," plant + ").concat(d.imageNotes," image = ").concat(u," total")),Math.random()<.15)try{const h=await this.noteManager.searchNotes("",{plantId:t}),m=h?h.length:0;if(m!==u)console.warn("[NoteUI] Badge bulk data stale! Bulk: ".concat(u,", Actual: ").concat(m,". Using accurate data...")),this.noteManager.refreshBulkData&&await this.noteManager.refreshBulkData();else{this.updateBadgeWithStats(t,d);return}}catch(h){console.debug("[NoteUI] Badge validation failed, using bulk data:",h),this.updateBadgeWithStats(t,d);return}else{this.updateBadgeWithStats(t,d);return}}console.log("[NoteUI] Bulk stats not available for ".concat(t,", falling back to individual requests"));const i=await this.noteManager.getPlantNotes(t);console.log("[NoteUI] Plant ".concat(t," has ").concat((i==null?void 0:i.length)||0," plant notes"));let s=0,a=null;if((e=window.PlantAnnotationTool)!=null&&e.plantDataManager)try{a=await window.PlantAnnotationTool.plantDataManager.getPlantImages(t)}catch(d){console.debug("Could not load plant images for ".concat(t,":"),d.message);const u=(n=window.PlantAnnotationTool.plantDataManager.plants)==null?void 0:n.find(h=>h.id===t);if(u!=null&&u.viewAngles){const h={};for(const m of u.viewAngles)try{const f=await window.PlantAnnotationTool.plantDataManager.getPlantImages(t,m);f&&f.length>0&&(h[m]=f)}catch(f){console.debug("Could not load images for ".concat(t,"/").concat(m,":"),f.message)}a=h}}if(a){const d=[];if(Array.isArray(a))for(const h of a)d.push(this.noteManager.getImageNotes(t,h.id));else for(const h in a)for(const m of a[h])d.push(this.noteManager.getImageNotes(t,m.id));s=(await Promise.allSettled(d)).reduce((h,m)=>m.status==="fulfilled"&&m.value&&m.value.length>0?h+m.value.length:h,0)}const l=((i==null?void 0:i.length)||0)+s;console.log("[NoteUI] Plant ".concat(t," total notes: ").concat(l," (").concat((i==null?void 0:i.length)||0," plant + ").concat(s," image)"));const c=document.getElementById("note-badge-".concat(t));if(console.log("[NoteUI] Badge element found for ".concat(t,":"),!!c),c)if(l>0){const d=(i==null?void 0:i.length)||0;let u="",h="";d>0&&s>0?(u="📝 ".concat(d," | 🖼️ ").concat(s),h="".concat(d," plant notes, ").concat(s," image notes")):d>0?(u="📝 ".concat(d),h="".concat(d," plant notes")):s>0&&(u="🖼️ ".concat(s),h="".concat(s," image notes")),c.innerHTML='<span class="note-count">'.concat(u,"</span>"),c.style.display="inline-flex",c.style.visibility="visible",c.style.opacity="1",c.title=h,console.log("[NoteUI] Badge updated for ".concat(t,": ").concat(u," (INDIVIDUAL)"))}else c.style.display="none",c.style.visibility="hidden",c.style.opacity="0",console.log("[NoteUI] Badge hidden for ".concat(t,": no notes found"));else console.error("[NoteUI] Badge element not found for plant ".concat(t))}catch(o){console.error("Failed to update note badge for plant ".concat(t,":"),o)}}}updateBadgeWithStats(t,e){const n=document.getElementById("note-badge-".concat(t));if(console.log("[NoteUI] Badge element found for ".concat(t,":"),!!n),n)if(e.total>0){let i="",s="";e.plantNotes>0&&e.imageNotes>0?(i="📝 ".concat(e.plantNotes," | 🖼️ ").concat(e.imageNotes),s="".concat(e.plantNotes," plant notes, ").concat(e.imageNotes," image notes")):e.plantNotes>0?(i="📝 ".concat(e.plantNotes),s="".concat(e.plantNotes," plant notes")):e.imageNotes>0&&(i="🖼️ ".concat(e.imageNotes),s="".concat(e.imageNotes," image notes")),n.innerHTML='<span class="note-count">'.concat(i,"</span>"),n.style.display="inline-flex",n.style.visibility="visible",n.style.opacity="1",n.title=s,console.log("[NoteUI] Badge updated for ".concat(t,": ").concat(i," (VALIDATED)"))}else n.style.display="none",n.style.visibility="hidden",n.style.opacity="0",console.log("[NoteUI] Badge hidden for ".concat(t,": no notes found (VALIDATED)"));else console.error("[NoteUI] Badge element not found for plant ".concat(t))}async updateAllPlantNoteBadgesFromBulk(t){console.log("[NoteUI] updateAllPlantNoteBadgesFromBulk() called with bulk data");const e=document.querySelectorAll(".plant-item");if(console.log("[NoteUI] Found ".concat(e.length," plant items to update")),!t||!t.plantNotes||!t.imageNotes){console.error("[NoteUI] Invalid bulk data provided");return}const n=performance.now(),o={};for(const[s,a]of Object.entries(t.plantNotes))o[s]||(o[s]={plantNotes:0,imageNotes:0,total:0}),o[s].plantNotes=a.length,o[s].total+=a.length;for(const[s,a]of Object.entries(t.imageNotes)){const l=s.split("_")[0];l&&(o[l]||(o[l]={plantNotes:0,imageNotes:0,total:0}),o[l].imageNotes+=a.length,o[l].total+=a.length)}console.log("[NoteUI] Generated quick stats for ".concat(Object.keys(o).length," plants"));for(const s of e){const a=s.dataset.plantId;if(a&&o[a]){const l=o[a],c=l.total,d=document.getElementById("note-badge-".concat(a));if(d)if(c>0){let u="",h="";l.plantNotes>0&&l.imageNotes>0?(u="📝 ".concat(l.plantNotes," | 🖼️ ").concat(l.imageNotes),h="".concat(l.plantNotes," plant notes, ").concat(l.imageNotes," image notes")):l.plantNotes>0?(u="📝 ".concat(l.plantNotes),h="".concat(l.plantNotes," plant notes")):l.imageNotes>0&&(u="🖼️ ".concat(l.imageNotes),h="".concat(l.imageNotes," image notes")),d.innerHTML='<span class="note-count">'.concat(u,"</span>"),d.style.display="inline-flex",d.style.visibility="visible",d.style.opacity="1",d.title=h}else d.style.display="none",d.style.visibility="hidden",d.style.opacity="0"}}const i=performance.now();console.log("[NoteUI] BULK UPDATE COMPLETE: ".concat(e.length," badges updated in ").concat((i-n).toFixed(2),"ms using bulk data")),console.log("[NoteUI] Performance: INSTANT UPDATE - no individual HTTP requests")}async updateAllPlantNoteBadges(){console.log("[NoteUI] updateAllPlantNoteBadges() called");const t=document.querySelectorAll(".plant-item");console.log("[NoteUI] Found ".concat(t.length," plant items to update"));const e=performance.now();try{const i=await this.noteManager.getQuickNoteStats();if(i){console.log("[NoteUI] Using bulk note stats for optimal performance");for(const l of t){const c=l.dataset.plantId;if(c&&i[c]){const d=i[c],u=d.total,h=document.getElementById("note-badge-".concat(c));if(h)if(u>0){let m="",f="";d.plantNotes>0&&d.imageNotes>0?(m="📝 ".concat(d.plantNotes," | 🖼️ ").concat(d.imageNotes),f="".concat(d.plantNotes," plant notes, ").concat(d.imageNotes," image notes")):d.plantNotes>0?(m="📝 ".concat(d.plantNotes),f="".concat(d.plantNotes," plant notes")):d.imageNotes>0&&(m="🖼️ ".concat(d.imageNotes),f="".concat(d.imageNotes," image notes")),h.innerHTML='<span class="note-count">'.concat(m,"</span>"),h.style.display="inline-flex",h.style.visibility="visible",h.style.opacity="1",h.title=f}else h.style.display="none",h.style.visibility="hidden",h.style.opacity="0"}}const s=performance.now(),a=this.noteManager.getPerformanceMetrics();console.log("[NoteUI] BULK UPDATE COMPLETE: ".concat(t.length," badges updated in ").concat((s-e).toFixed(2),"ms")),console.log("[NoteUI] Performance: ".concat(a.bulkRequestCount," bulk requests, ").concat(a.cacheHits," cache hits"));return}console.log("[NoteUI] Bulk API not available, falling back to individual requests")}catch(i){console.error("[NoteUI] Bulk badge update failed, falling back to individual requests:",i)}console.log("[NoteUI] Using individual badge updates (slower)");for(const i of t){const s=i.dataset.plantId;s?(console.log("[NoteUI] Updating badge for plant: ".concat(s)),await this.updatePlantNoteBadge(s)):console.warn("[NoteUI] Plant item found without plantId dataset")}const n=performance.now(),o=this.noteManager.getPerformanceMetrics();console.log("[NoteUI] INDIVIDUAL UPDATE COMPLETE: ".concat(t.length," badges updated in ").concat((n-e).toFixed(2),"ms")),console.log("[NoteUI] Performance: ".concat(o.requestCount," individual requests, ").concat(o.cacheHits," cache hits"))}getNoteTypeText(t){return{general:"General Note",observation:"Observation Record",annotation:"Annotation Description"}[t]||t}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}showUserError(t,e){window.PlantAnnotationTool&&window.PlantAnnotationTool.showError?window.PlantAnnotationTool.showError(t,e):alert("".concat(t,": ").concat(e))}async directUpdateThumbnailBadge(t,e){var n;try{console.log("[NoteUI] 🔄 Direct thumbnail badge update for ".concat(e)),await new Promise(l=>setTimeout(l,150));const o=await fetch("".concat(this.noteManager.baseUrl,"/notes/image/").concat(t,"/").concat(e));if(!o.ok)throw new Error("HTTP ".concat(o.status,": ").concat(o.statusText));const i=await o.json(),s=i.success&&((n=i.data)==null?void 0:n.length)||0,a=document.getElementById("image-note-badge-".concat(e));a?s>0?(a.innerHTML='<span class="image-note-count">📝 '.concat(s,"</span>"),a.style.display="inline-block",a.className="image-note-badge",console.log("[NoteUI] ✅ Badge updated: ".concat(s," notes for ").concat(e," (DIRECT API)"))):(a.innerHTML="",a.style.display="none",console.log("[NoteUI] ✅ Badge cleared for ".concat(e," - no notes (DIRECT API)"))):console.error("[NoteUI] Badge element not found for ".concat(e))}catch(o){console.error("[NoteUI] ❌ Direct thumbnail badge update failed for ".concat(e,":"),o);try{console.log("[NoteUI] 🔄 Attempting fallback via global loadImageNoteCount for ".concat(e)),typeof loadImageNoteCount=="function"?(await loadImageNoteCount(t,e),console.log("[NoteUI] ✅ Fallback badge update successful for ".concat(e))):console.warn("[NoteUI] ⚠️ Global loadImageNoteCount not available for fallback")}catch(i){console.error("[NoteUI] ❌ Fallback badge update also failed for ".concat(e,":"),i)}}}cleanup(){["note-modal","note-list-modal","plant-note-btn","image-note-btn"].forEach(n=>{const o=document.getElementById(n);o&&o.remove()}),document.querySelectorAll(".plant-note-container, .image-note-container").forEach(n=>n.remove()),console.log("NoteUI cleanup completed")}}class pe{constructor(t){this.httpManager=t,this.annotations=new Map,this.cacheTimestamps=new Map,this.isInitialized=!1,this.cacheExpiration=10*60*1e3,this.bulkAnnotationData=null,this.bulkDataTimestamp=0,this.performanceMetrics={requestCount:0,bulkRequestCount:0,cacheHits:0,networkTime:0,totalAnnotations:0}}async initialize(){try{return await this.httpManager.ensureConnection(),this.isInitialized=!0,console.log("[AnnotationManager] 初始化成功"),!0}catch(t){throw console.error("[AnnotationManager] 初始化失败:",t),t}}async ensureConnection(){this.isInitialized||await this.initialize(),await this.httpManager.ensureConnection()}async getAllAnnotationsInBulk(){return console.log("[AnnotationManager] 开始批量获取所有标注数据..."),await this.ensureConnection(),this.bulkAnnotationData&&!this.isBulkDataExpired()?(console.log("[AnnotationManager] 使用缓存的批量标注数据"),this.performanceMetrics.cacheHits++,this.bulkAnnotationData):this.httpManager.withRetry(async()=>{const t=performance.now(),e=this.httpManager.baseUrl.replace(/\/api$/,""),n="".concat(e,"/api/annotations/bulk");console.log("[AnnotationManager] 请求批量标注数据 URL: ".concat(n));try{const o=await fetch(n,{headers:{"Cache-Control":"no-cache"}});if(this.performanceMetrics.bulkRequestCount++,!o.ok){if(o.status===404)return console.warn("[AnnotationManager] 批量标注端点不存在，将回退到传统模式"),null;throw new Error("HTTP ".concat(o.status,": ").concat(o.statusText))}const i=await o.json();if(this.performanceMetrics.networkTime+=performance.now()-t,i.success){this.bulkAnnotationData={plantAnnotations:i.data.plantAnnotations||{},imageAnnotations:i.data.imageAnnotations||{},statistics:i.data.statistics||{}},this.bulkDataTimestamp=Date.now(),this.updateIndividualCacheFromBulk();const s=Object.keys(this.bulkAnnotationData.plantAnnotations).length,a=Object.keys(this.bulkAnnotationData.imageAnnotations).length;return this.performanceMetrics.totalAnnotations=this.calculateTotalAnnotations(),console.log("[AnnotationManager] 成功获取批量标注数据: ".concat(s," 个植物, ").concat(a," 个图像, ").concat(this.performanceMetrics.totalAnnotations," 个标注点")),this.bulkAnnotationData}throw new Error(i.error||"获取批量标注数据失败")}catch(o){throw this.performanceMetrics.networkTime+=performance.now()-t,o.name==="TypeError"&&o.message.includes("fetch")?new Error("网络连接失败: 无法连接到后端服务 (".concat(n,")")):o}},"批量获取标注数据")}async getPlantAnnotations(t){if(!t)throw new Error("植物ID不能为空");await this.ensureConnection();const e="plant_".concat(t);if(this.bulkAnnotationData&&!this.isBulkDataExpired()){const n=this.bulkAnnotationData.plantAnnotations[t]||[];return this.annotations.set(e,n),this.performanceMetrics.cacheHits++,n}return this.annotations.has(e)&&!this.isCacheExpired(e)?(this.performanceMetrics.cacheHits++,this.annotations.get(e)):this.getSinglePlantAnnotations(t)}async getImageAnnotations(t){if(!t)throw new Error("图像ID不能为空");await this.ensureConnection();const e="image_".concat(t);if(this.bulkAnnotationData&&!this.isBulkDataExpired()){const n=this.bulkAnnotationData.imageAnnotations[t]||[];return this.annotations.set(e,n),this.performanceMetrics.cacheHits++,n}return this.annotations.has(e)&&!this.isCacheExpired(e)?(this.performanceMetrics.cacheHits++,this.annotations.get(e)):this.getSingleImageAnnotations(t)}async getQuickAnnotationStats(){console.log("[AnnotationManager] 获取快速标注统计...");try{const t=await this.getAllAnnotationsInBulk();if(!t)return console.warn("[AnnotationManager] 批量API不可用，回退到传统模式"),null;const e={};for(const[n,o]of Object.entries(t.plantAnnotations)){let i=0;for(const[s,a]of Object.entries(t.imageAnnotations))s.startsWith(n+"_")&&(i+=a.length);e[n]={plantAnnotations:o.length,imageAnnotations:i,total:o.length+i}}return console.log("[AnnotationManager] 快速统计完成: ".concat(Object.keys(e).length," 个植物")),e}catch(t){return console.error("[AnnotationManager] 获取快速标注统计失败:",t),null}}async getSinglePlantAnnotations(t){const e=performance.now();try{const n=this.httpManager.baseUrl.replace(/\/api$/,""),o="".concat(n,"/api/plant-annotations/").concat(encodeURIComponent(t)),i=await fetch(o);if(this.performanceMetrics.requestCount++,!i.ok){if(i.status===404){const a=[];return this.setCache("plant_".concat(t),a),a}throw new Error("HTTP ".concat(i.status,": ").concat(i.statusText))}const s=await i.json();if(this.performanceMetrics.networkTime+=performance.now()-e,s.success)return this.setCache("plant_".concat(t),s.data),s.data;throw new Error(s.error||"获取植物标注失败")}catch(n){throw this.performanceMetrics.networkTime+=performance.now()-e,n}}async getSingleImageAnnotations(t){const e=performance.now();try{const n=this.httpManager.baseUrl.replace(/\/api$/,""),o="".concat(n,"/api/image-annotations/").concat(encodeURIComponent(t)),i=await fetch(o);if(this.performanceMetrics.requestCount++,!i.ok){if(i.status===404){const a=[];return this.setCache("image_".concat(t),a),a}throw new Error("HTTP ".concat(i.status,": ").concat(i.statusText))}const s=await i.json();if(this.performanceMetrics.networkTime+=performance.now()-e,s.success)return this.setCache("image_".concat(t),s.data),s.data;throw new Error(s.error||"获取图像标注失败")}catch(n){throw this.performanceMetrics.networkTime+=performance.now()-e,n}}isBulkDataExpired(){return this.bulkDataTimestamp?Date.now()-this.bulkDataTimestamp>this.cacheExpiration:!0}updateIndividualCacheFromBulk(){if(this.bulkAnnotationData){for(const[t,e]of Object.entries(this.bulkAnnotationData.plantAnnotations)){const n="plant_".concat(t);this.setCache(n,e)}for(const[t,e]of Object.entries(this.bulkAnnotationData.imageAnnotations)){const n="image_".concat(t);this.setCache(n,e)}}}calculateTotalAnnotations(){if(!this.bulkAnnotationData)return 0;let t=0;for(const e of Object.values(this.bulkAnnotationData.plantAnnotations))t+=e.length;for(const e of Object.values(this.bulkAnnotationData.imageAnnotations))t+=e.length;return t}clearCache(){this.annotations.clear(),this.cacheTimestamps.clear(),this.bulkAnnotationData=null,this.bulkDataTimestamp=0,console.log("[AnnotationManager] 标注缓存已完全清除")}setCache(t,e){this.annotations.set(t,e),this.cacheTimestamps.set(t,Date.now())}isCacheExpired(t){const e=this.cacheTimestamps.get(t);return e?Date.now()-e>this.cacheExpiration:!0}getPerformanceMetrics(){return{...this.performanceMetrics,cacheSize:this.annotations.size,hasBulkData:!!this.bulkAnnotationData,bulkDataAge:this.bulkDataTimestamp?Date.now()-this.bulkDataTimestamp:null,averageRequestTime:this.performanceMetrics.requestCount>0?this.performanceMetrics.networkTime/this.performanceMetrics.requestCount:0}}async refreshBulkData(){return console.log("[AnnotationManager] 强制刷新批量标注数据..."),this.bulkAnnotationData=null,this.bulkDataTimestamp=0,await this.getAllAnnotationsInBulk()}cleanup(){this.clearCache(),this.isInitialized=!1,console.log("[AnnotationManager] 清理完成")}}class fe{constructor(){this.metrics={loadingStartTime:null,loadingEndTime:null,totalLoadingTime:0,plantsLoaded:0,annotationsLoaded:0,notesLoaded:0,networkRequests:0,bulkRequests:0,individualRequests:0,totalDataTransferred:0,cacheHits:0,cacheMisses:0,cacheSize:0,errors:[],fallbacksUsed:0,timeToFirstInteraction:0,timeToFullyLoaded:0},this.isMonitoring=!1,this.startTime=null,this.checkpoints=[]}startMonitoring(){this.isMonitoring=!0,this.startTime=performance.now(),this.metrics.loadingStartTime=Date.now(),this.checkpoints=[],console.log("[性能监控] 开始监控批量加载过程")}addCheckpoint(t,e={}){if(!this.isMonitoring)return;const n={name:t,timestamp:performance.now(),relativeTime:performance.now()-this.startTime,details:e};this.checkpoints.push(n),console.log("[性能监控] ".concat(t,": ").concat(n.relativeTime.toFixed(2),"ms"),e)}recordDataLoaded(t,e,n=0){switch(t){case"plants":this.metrics.plantsLoaded=e;break;case"annotations":this.metrics.annotationsLoaded=e;break;case"notes":this.metrics.notesLoaded=e;break}this.metrics.totalDataTransferred+=n,this.addCheckpoint("".concat(t," 数据加载完成"),{count:e,dataSize:"".concat((n/1024).toFixed(2),"KB")})}recordNetworkRequest(t,e=!1){this.metrics.networkRequests++,e?this.metrics.bulkRequests++:this.metrics.individualRequests++,this.addCheckpoint("网络请求: ".concat(t),{isBulk:e,total:this.metrics.networkRequests})}recordCacheHit(t,e=0){this.metrics.cacheHits++,this.metrics.cacheSize=e,console.log("[缓存命中] ".concat(t," - 总命中: ").concat(this.metrics.cacheHits))}recordCacheMiss(t){this.metrics.cacheMisses++,console.log("[缓存未命中] ".concat(t," - 总未命中: ").concat(this.metrics.cacheMisses))}recordError(t,e=""){this.metrics.errors.push({error:t.message,context:e,timestamp:Date.now()}),console.error("[性能监控] 错误记录: ".concat(e),t)}recordFallback(t){this.metrics.fallbacksUsed++,this.addCheckpoint("使用回退方案",{reason:t,totalFallbacks:this.metrics.fallbacksUsed})}endMonitoring(){if(!this.isMonitoring)return null;this.isMonitoring=!1,this.metrics.loadingEndTime=Date.now(),this.metrics.totalLoadingTime=performance.now()-this.startTime;const t=this.generatePerformanceReport();return console.log("[性能监控] 加载完成，生成性能报告:",t),t}generatePerformanceReport(){const t=this.metrics.cacheHits+this.metrics.cacheMisses>0?(this.metrics.cacheHits/(this.metrics.cacheHits+this.metrics.cacheMisses)*100).toFixed(1):0,e=this.metrics.networkRequests>0?(this.metrics.bulkRequests/this.metrics.networkRequests*100).toFixed(1):0;return{summary:{totalLoadingTime:"".concat(this.metrics.totalLoadingTime.toFixed(2),"ms"),dataLoaded:{plants:this.metrics.plantsLoaded,annotations:this.metrics.annotationsLoaded,notes:this.metrics.notesLoaded},networkRequests:this.metrics.networkRequests,dataTransferred:"".concat((this.metrics.totalDataTransferred/1024).toFixed(2),"KB")},networkPerformance:{totalRequests:this.metrics.networkRequests,bulkRequests:this.metrics.bulkRequests,individualRequests:this.metrics.individualRequests,bulkRequestRatio:"".concat(e,"%"),averageRequestSize:this.metrics.networkRequests>0?"".concat((this.metrics.totalDataTransferred/this.metrics.networkRequests/1024).toFixed(2),"KB"):"0KB"},cachePerformance:{hits:this.metrics.cacheHits,misses:this.metrics.cacheMisses,hitRate:"".concat(t,"%"),cacheSize:"".concat((this.metrics.cacheSize/1024).toFixed(2),"KB")},reliability:{errors:this.metrics.errors.length,fallbacksUsed:this.metrics.fallbacksUsed,errorDetails:this.metrics.errors},timeline:this.checkpoints,performanceGrade:this.calculatePerformanceGrade(),optimizationSuggestions:this.generateOptimizationSuggestions()}}calculatePerformanceGrade(){let t=100;this.metrics.totalLoadingTime>5e3?t-=30:this.metrics.totalLoadingTime>2e3?t-=15:this.metrics.totalLoadingTime>1e3&&(t-=5);const e=this.metrics.bulkRequests/(this.metrics.networkRequests||1);e<.5?t-=20:e<.8&&(t-=10);const n=this.metrics.cacheHits/(this.metrics.cacheHits+this.metrics.cacheMisses||1);return n<.6?t-=15:n<.8&&(t-=8),t-=this.metrics.errors.length*5,t-=this.metrics.fallbacksUsed*3,t=Math.max(0,Math.min(100,t)),t>=90?"A+":t>=80?"A":t>=70?"B":t>=60?"C":t>=50?"D":"F"}generateOptimizationSuggestions(){const t=[];return this.metrics.totalLoadingTime>2e3&&t.push({category:"加载性能",suggestion:"考虑实现数据分页或增量加载",priority:"high",impact:"减少初始加载时间50%+"}),this.metrics.bulkRequests/(this.metrics.networkRequests||1)<.8&&t.push({category:"网络优化",suggestion:"增加批量API的使用，减少单独请求",priority:"high",impact:"减少网络请求80%+"}),this.metrics.cacheHits/(this.metrics.cacheHits+this.metrics.cacheMisses||1)<.7&&t.push({category:"缓存优化",suggestion:"优化缓存策略，增加缓存时间或改进缓存键设计",priority:"medium",impact:"提高响应速度30%+"}),this.metrics.errors.length>0&&t.push({category:"错误处理",suggestion:"改进错误处理和重试机制",priority:"medium",impact:"提高系统稳定性"}),this.metrics.fallbacksUsed>0&&t.push({category:"兼容性",suggestion:"确保批量API的可用性，减少回退方案的使用",priority:"low",impact:"提高性能一致性"}),t}exportMetrics(){return{metrics:this.metrics,report:this.generatePerformanceReport(),exportTime:new Date().toISOString()}}reset(){this.metrics={loadingStartTime:null,loadingEndTime:null,totalLoadingTime:0,plantsLoaded:0,annotationsLoaded:0,notesLoaded:0,networkRequests:0,bulkRequests:0,individualRequests:0,totalDataTransferred:0,cacheHits:0,cacheMisses:0,cacheSize:0,errors:[],fallbacksUsed:0,timeToFirstInteraction:0,timeToFullyLoaded:0},this.isMonitoring=!1,this.startTime=null,this.checkpoints=[],console.log("[性能监控] 指标已重置")}}class ye{constructor(t,e){this.plantDataManager=t,this.annotationStorageManager=e,this.isEnabled=!1,this.isSyncing=!1,this.syncQueue=[],this.OPERATION_TYPES={ADD_KEYPOINT:"ADD_KEYPOINT",MOVE_KEYPOINT:"MOVE_KEYPOINT",DELETE_KEYPOINT:"DELETE_KEYPOINT",EDIT_DIRECTION:"EDIT_DIRECTION",CUSTOM_ANNOTATION_CREATE:"CUSTOM_ANNOTATION_CREATE",CUSTOM_ANNOTATION_UPDATE:"CUSTOM_ANNOTATION_UPDATE",CUSTOM_ANNOTATION_DELETE:"CUSTOM_ANNOTATION_DELETE",CUSTOM_TYPE_CREATE:"CUSTOM_TYPE_CREATE"},this.eventListeners=new Map,console.log("🔄 RealTimeSyncManager initialized")}setEnabled(t){this.isEnabled=!!t,console.log("🔄 Real-time sync ".concat(this.isEnabled?"enabled":"disabled")),this.emit("syncToggled",{enabled:this.isEnabled})}isRealTimeSyncEnabled(){return this.isEnabled}isSyncInProgress(){return this.isSyncing}on(t,e){this.eventListeners.has(t)||this.eventListeners.set(t,[]),this.eventListeners.get(t).push(e)}off(t,e){if(this.eventListeners.has(t)){const n=this.eventListeners.get(t),o=n.indexOf(e);o>-1&&n.splice(o,1)}}emit(t,e){this.eventListeners.has(t)&&this.eventListeners.get(t).forEach(n=>{try{n(e)}catch(o){console.error("Error in sync event listener for ".concat(t,":"),o)}})}async getFutureImages(t,e){if(!t||!e)return console.warn("🔄 Cannot get future images: missing current image or plant"),[];try{const n=await this.plantDataManager.getPlantImages(e.id,e.selectedViewAngle);if(!n||n.length===0)return[];const o=new Date(t.dateTime),i=n.findIndex(a=>a.id===t.id),s=[];for(let a=i+1;a<n.length;a++){const l=n[a];new Date(l.dateTime)>o&&s.push(l)}return s.sort((a,l)=>new Date(a.dateTime)-new Date(l.dateTime)),console.log("🔄 Found ".concat(s.length," future images for sync (from index ").concat(i+1,")")),s}catch(n){return console.error("🔄 Error getting future images:",n),[]}}async syncKeypointAddition(t,e,n){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};console.log("🔄 Starting keypoint addition sync for keypoint ".concat(t.id)),console.log("🔄 Current image: ".concat(e.id,", Plant: ").concat(n.id,", View: ").concat(n.selectedViewAngle));try{const o=await this.getFutureImages(e,n);if(o.length===0)return console.log("🔄 No future images found for sync"),{success:!0,message:"No future images to sync",synced:0};console.log("🔄 Found ".concat(o.length," future images:"),o.map(l=>l.id));let i=0;const s=[];for(const l of o)try{console.log("🔄 Syncing keypoint ".concat(t.id," to image ").concat(l.id,"...")),await this.addKeypointToImage(t,l),i++,console.log("🔄 Successfully synced to image ".concat(l.id))}catch(c){console.error("🔄 Error syncing to image ".concat(l.id,":"),c),s.push({imageId:l.id,error:c.message})}const a={success:s.length===0,message:"Synced to ".concat(i," future images"),synced:i,errors:s.length>0?s:void 0};return console.log("🔄 Keypoint addition sync completed:",a),a}catch(o){return console.error("🔄 Error in keypoint addition sync:",o),{success:!1,message:o.message,synced:0}}}async syncKeypointMovement(t,e,n,o){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};console.log("🔄 Starting keypoint movement sync for keypoint ".concat(t.id));try{const i=await this.getFutureImages(n,o);if(i.length===0)return{success:!0,message:"No future images to sync",synced:0};let s=0;const a=[];for(const c of i)try{await this.moveKeypointInImage(t,c),s++}catch(d){console.error("🔄 Error syncing movement to image ".concat(c.id,":"),d),a.push({imageId:c.id,error:d.message})}const l={success:a.length===0,message:"Synced movement to ".concat(s," future images"),synced:s,errors:a.length>0?a:void 0};return console.log("🔄 Keypoint movement sync completed:",l),l}catch(i){return console.error("🔄 Error in keypoint movement sync:",i),{success:!1,message:i.message,synced:0}}}async syncKeypointDeletion(t){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};const{keypoint:e,currentImage:n,currentPlant:o}=t;console.log("🔄 Starting keypoint deletion sync for keypoint ".concat(e.id)),console.log("🔄 Current image: ".concat(n.id,", Plant: ").concat(o.id,", View: ").concat(o.selectedViewAngle));try{const i=await this.getFutureImages(n,o);if(i.length===0)return console.log("🔄 No future images found for deletion sync"),{success:!0,message:"No future images to sync",synced:0};console.log("🔄 Found ".concat(i.length," future images:"),i.map(c=>c.id));let s=0;const a=[];for(const c of i)try{console.log("🔄 Syncing keypoint deletion to image ".concat(c.id,"...")),await this.deleteKeypointFromImage(e,c),s++,console.log("🔄 Successfully synced deletion to image ".concat(c.id))}catch(d){console.error("🔄 Error syncing deletion to image ".concat(c.id,":"),d),a.push({imageId:c.id,error:d.message})}const l={success:a.length===0,message:"Synced deletion to ".concat(s," future images"),synced:s,errors:a.length>0?a:void 0};return console.log("🔄 Keypoint deletion sync completed:",l),l}catch(i){return console.error("🔄 Error in keypoint deletion sync:",i),{success:!1,message:i.message,synced:0}}}async addKeypointToImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(a=>{const l=a.order===t.order,c=a.annotationType===t.annotationType,d=t.annotationType==="custom"?a.customTypeId===t.customTypeId:!0;return l&&c&&d});if(i){i.x=t.x,i.y=t.y,i.direction=t.direction,i.directionType=t.directionType,i.directions=t.directions,i.maxDirections=t.maxDirections,i.timestamp=new Date().toISOString();const a=t.annotationType==="custom"?"custom(".concat(t.customTypeId,")"):"regular";console.log("🔄 Updated existing ".concat(a," keypoint order ").concat(t.order," in image ").concat(e.id))}else{const a={...t,timestamp:new Date().toISOString()};o.push(a);const l=t.annotationType==="custom"?"custom(".concat(t.customTypeId,")"):"regular";console.log("🔄 Added new ".concat(l," keypoint order ").concat(t.order," to image ").concat(e.id))}const s={imageId:e.id,annotations:o,lastModified:new Date().toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,s)}async moveKeypointInImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(a=>{const l=a.order===t.order,c=a.annotationType===t.annotationType,d=t.annotationType==="custom"?a.customTypeId===t.customTypeId:!0;return l&&c&&d});if(i){i.x=t.x,i.y=t.y,i.direction=t.direction,i.directionType=t.directionType,i.directions=t.directions,i.maxDirections=t.maxDirections,i.timestamp=new Date().toISOString();const a=t.annotationType==="custom"?"custom(".concat(t.customTypeId,")"):"regular";console.log("🔄 Moved ".concat(a," keypoint order ").concat(t.order," in image ").concat(e.id))}else{const a={...t,timestamp:new Date().toISOString()};o.push(a);const l=t.annotationType==="custom"?"custom(".concat(t.customTypeId,")"):"regular";console.log("🔄 Added new ".concat(l," keypoint order ").concat(t.order," to image ").concat(e.id," (move operation)"))}const s={imageId:e.id,annotations:o,lastModified:new Date().toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,s)}async deleteKeypointFromImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[];if(o.length===0){console.log("🔄 No annotations found in image ".concat(e.id," - skipping deletion"));return}const i=o.findIndex(a=>{const l=a.order===t.order,c=a.annotationType===t.annotationType,d=t.annotationType==="custom"?a.customTypeId===t.customTypeId:!0;return l&&c&&d});if(i!==-1){const a=o[i];o.splice(i,1),console.log("🔄 Deleted keypoint from image ".concat(e.id,":")),console.log("  - Order: ".concat(a.order)),console.log("  - Type: ".concat(a.annotationType)),console.log("  - Custom Type ID: ".concat(a.customTypeId||"N/A")),console.log("  - ID: ".concat(a.id))}else{console.log("🔄 No matching keypoint found in image ".concat(e.id," for deletion:")),console.log("  - Looking for order: ".concat(t.order)),console.log("  - Looking for type: ".concat(t.annotationType)),console.log("  - Looking for custom type ID: ".concat(t.customTypeId||"N/A")),console.log("  - Available annotations:",o.map(a=>({order:a.order,type:a.annotationType,customTypeId:a.customTypeId,id:a.id})));return}const s={imageId:e.id,annotations:o,lastModified:new Date().toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,s)}async queueSyncOperation(t){this.isEnabled&&(this.syncQueue.push(t),this.isSyncing||await this.processSyncQueue())}async processSyncQueue(){if(!(this.isSyncing||this.syncQueue.length===0)){this.isSyncing=!0,this.emit("syncStarted",{queueLength:this.syncQueue.length});try{for(;this.syncQueue.length>0;){const t=this.syncQueue.shift();try{await this.executeOperation(t)}catch(e){console.error("🔄 Error executing sync operation:",e),this.emit("syncError",{operation:t,error:e})}}}finally{this.isSyncing=!1,this.emit("syncCompleted",{})}}}async executeOperation(t){const{type:e,keypoint:n,currentImage:o,currentPlant:i,previousPosition:s,syncData:a}=t;switch(e){case this.OPERATION_TYPES.ADD_KEYPOINT:return await this.syncKeypointAddition(n,o,i);case this.OPERATION_TYPES.MOVE_KEYPOINT:return await this.syncKeypointMovement(n,s,o,i);case this.OPERATION_TYPES.DELETE_KEYPOINT:return await this.syncKeypointDeletion(t);case this.OPERATION_TYPES.EDIT_DIRECTION:return await this.syncDirectionEdit(t);case this.OPERATION_TYPES.CUSTOM_ANNOTATION_CREATE:return await this.syncCustomAnnotationCreate(a);case this.OPERATION_TYPES.CUSTOM_ANNOTATION_UPDATE:return await this.syncCustomAnnotationUpdate(a);case this.OPERATION_TYPES.CUSTOM_ANNOTATION_DELETE:return await this.syncCustomAnnotationDelete(a);case this.OPERATION_TYPES.CUSTOM_TYPE_CREATE:return await this.syncCustomTypeCreate(a);default:console.warn("🔄 Unknown sync operation type: ".concat(e))}}async syncDirectionEdit(t){if(!this.isEnabled)return{success:!0,message:"Sync disabled",synced:0};const{keypoint:e,currentImage:n,currentPlant:o}=t;console.log("🔄 Starting direction edit sync for keypoint order ".concat(e.order)),console.log("🔄 Current image: ".concat(n.id,", Plant: ").concat(o.id,", View: ").concat(o.selectedViewAngle));try{const i=await this.getFutureImages(n,o);if(i.length===0)return console.log("🔄 No future images found for direction edit sync"),{success:!0,message:"No future images to sync",synced:0};console.log("🔄 Found ".concat(i.length," future images:"),i.map(c=>c.id));let s=0;const a=[];for(const c of i)try{console.log("🔄 Syncing direction edit to image ".concat(c.id,"...")),await this.editDirectionInImage(e,c),s++,console.log("🔄 Successfully synced direction edit to image ".concat(c.id))}catch(d){console.error("🔄 Error syncing direction edit to image ".concat(c.id,":"),d),a.push({imageId:c.id,error:d.message})}const l={success:a.length===0,message:"Synced direction edit to ".concat(s," future images"),synced:s,errors:a.length>0?a:void 0};return console.log("🔄 Direction edit sync completed:",l),l}catch(i){return console.error("🔄 Error in direction edit sync:",i),{success:!1,message:i.message,synced:0}}}async editDirectionInImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(a=>{const l=a.order===t.order,c=a.annotationType===t.annotationType,d=t.annotationType==="custom"?a.customTypeId===t.customTypeId:!0;return l&&c&&d});if(i){i.direction=t.direction,i.directionType=t.directionType,i.directions=t.directions,i.maxDirections=t.maxDirections,i.timestamp=new Date().toISOString();const a=t.annotationType==="custom"?"custom(".concat(t.customTypeId,")"):"regular";console.log("🔄 Updated direction for ".concat(a," keypoint order ").concat(t.order," in image ").concat(e.id))}else{const a={...t,timestamp:new Date().toISOString()};o.push(a);const l=t.annotationType==="custom"?"custom(".concat(t.customTypeId,")"):"regular";console.log("🔄 Added new ".concat(l," keypoint order ").concat(t.order," to image ").concat(e.id," (direction edit operation)"))}const s={imageId:e.id,annotations:o,lastModified:new Date().toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,s)}async syncCustomAnnotationCreate(t){console.log("🔄 Starting custom annotation creation sync:",t);try{const{annotation:e,context:n}=t,{appState:o}=n;if(!(o!=null&&o.currentImage)||!(o!=null&&o.currentPlant))return console.warn("🔄 Missing app state for custom annotation sync"),{success:!1,message:"Missing app state",synced:0};const i=await this.getFutureImages(o.currentImage,o.currentPlant);if(i.length===0)return console.log("🔄 No future images found for custom annotation sync"),{success:!0,message:"No future images to sync",synced:0};let s=0;const a=[];for(const c of i)try{console.log("🔄 Syncing custom annotation to image ".concat(c.id,"...")),await this.addCustomAnnotationToImage(e,c),s++,console.log("🔄 Successfully synced custom annotation to image ".concat(c.id))}catch(d){console.error("🔄 Error syncing custom annotation to image ".concat(c.id,":"),d),a.push({imageId:c.id,error:d.message})}const l={success:a.length===0,message:"Synced custom annotation to ".concat(s," future images"),synced:s,errors:a.length>0?a:void 0};return console.log("🔄 Custom annotation creation sync completed:",l),l}catch(e){return console.error("🔄 Error in custom annotation creation sync:",e),{success:!1,message:e.message,synced:0}}}async syncCustomAnnotationUpdate(t){console.log("🔄 Starting custom annotation update sync:",t);try{const{annotation:e,context:n}=t,{appState:o}=n;if(!(o!=null&&o.currentImage)||!(o!=null&&o.currentPlant))return console.warn("🔄 Missing app state for custom annotation update sync"),{success:!1,message:"Missing app state",synced:0};const i=await this.getFutureImages(o.currentImage,o.currentPlant);if(i.length===0)return{success:!0,message:"No future images to sync",synced:0};let s=0;const a=[];for(const c of i)try{await this.updateCustomAnnotationInImage(e,c),s++}catch(d){console.error("🔄 Error updating custom annotation in image ".concat(c.id,":"),d),a.push({imageId:c.id,error:d.message})}const l={success:a.length===0,message:"Updated custom annotation in ".concat(s," future images"),synced:s,errors:a.length>0?a:void 0};return console.log("🔄 Custom annotation update sync completed:",l),l}catch(e){return console.error("🔄 Error in custom annotation update sync:",e),{success:!1,message:e.message,synced:0}}}async syncCustomAnnotationDelete(t){console.log("🔄 Starting custom annotation deletion sync:",t);try{const{annotation:e,context:n}=t,{appState:o}=n;if(!(o!=null&&o.currentImage)||!(o!=null&&o.currentPlant))return console.warn("🔄 Missing app state for custom annotation deletion sync"),{success:!1,message:"Missing app state",synced:0};const i=await this.getFutureImages(o.currentImage,o.currentPlant);if(i.length===0)return{success:!0,message:"No future images to sync",synced:0};let s=0;const a=[];for(const c of i)try{await this.deleteCustomAnnotationFromImage(e,c),s++}catch(d){console.error("🔄 Error deleting custom annotation from image ".concat(c.id,":"),d),a.push({imageId:c.id,error:d.message})}const l={success:a.length===0,message:"Deleted custom annotation from ".concat(s," future images"),synced:s,errors:a.length>0?a:void 0};return console.log("🔄 Custom annotation deletion sync completed:",l),l}catch(e){return console.error("🔄 Error in custom annotation deletion sync:",e),{success:!1,message:e.message,synced:0}}}async syncCustomTypeCreate(t){return console.log("🔄 Starting custom type creation sync:",t),console.log("🔄 Custom type creation sync - no image sync needed"),{success:!0,message:"Custom type created (no image sync required)",synced:0}}async addCustomAnnotationToImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(a=>a.annotationType==="custom"&&a.customTypeId===t.customTypeId&&a.order===t.order);if(i)Object.assign(i,t),i.timestamp=new Date().toISOString(),console.log("🔄 Updated existing custom annotation order ".concat(t.order," type ").concat(t.customTypeId," in image ").concat(e.id));else{const a={...t,timestamp:new Date().toISOString()};o.push(a),console.log("🔄 Added new custom annotation order ".concat(t.order," type ").concat(t.customTypeId," to image ").concat(e.id))}const s={imageId:e.id,annotations:o,lastModified:new Date().toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,s)}async updateCustomAnnotationInImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[],i=o.find(a=>a.annotationType==="custom"&&a.customTypeId===t.customTypeId&&a.order===t.order);if(i)Object.assign(i,t),i.timestamp=new Date().toISOString(),console.log("🔄 Updated custom annotation order ".concat(t.order," type ").concat(t.customTypeId," in image ").concat(e.id));else{const a={...t,timestamp:new Date().toISOString()};o.push(a),console.log("🔄 Added new custom annotation order ".concat(t.order," type ").concat(t.customTypeId," to image ").concat(e.id," (update operation)"))}const s={imageId:e.id,annotations:o,lastModified:new Date().toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,s)}async deleteCustomAnnotationFromImage(t,e){const n=await this.annotationStorageManager.getImageAnnotation(e.id),o=n?n.annotations:[];if(o.length===0){console.log("🔄 No annotations found in image ".concat(e.id," - skipping custom annotation deletion"));return}const i=o.findIndex(a=>a.annotationType==="custom"&&a.customTypeId===t.customTypeId&&a.order===t.order);if(i!==-1){const a=o[i];o.splice(i,1),console.log("🔄 Deleted custom annotation order ".concat(a.order," type ").concat(a.customTypeId," from image ").concat(e.id))}else{console.log("🔄 No matching custom annotation order ".concat(t.order," type ").concat(t.customTypeId," found in image ").concat(e.id," for deletion"));return}const s={imageId:e.id,annotations:o,lastModified:new Date().toISOString()};await this.annotationStorageManager.saveImageAnnotation(e.id,s)}async triggerKeypointAddSync(t,e,n){if(!this.isEnabled)return;const o={type:this.OPERATION_TYPES.ADD_KEYPOINT,keypoint:t,currentImage:e,currentPlant:n,timestamp:new Date().toISOString()};await this.queueSyncOperation(o)}async triggerKeypointMoveSync(t,e,n,o){if(!this.isEnabled)return;const i={type:this.OPERATION_TYPES.MOVE_KEYPOINT,keypoint:t,previousPosition:e,currentImage:n,currentPlant:o,timestamp:new Date().toISOString()};await this.queueSyncOperation(i)}async triggerKeypointDeleteSync(t,e,n){if(!this.isEnabled)return;const o={type:this.OPERATION_TYPES.DELETE_KEYPOINT,keypoint:t,currentImage:e,currentPlant:n,timestamp:new Date().toISOString()};await this.queueSyncOperation(o)}async triggerDirectionEditSync(t,e,n){if(!this.isEnabled)return;const o={type:this.OPERATION_TYPES.EDIT_DIRECTION,keypoint:t,currentImage:e,currentPlant:n,timestamp:new Date().toISOString()};await this.queueSyncOperation(o)}async triggerCustomAnnotationSync(t){if(!this.isEnabled){console.log("🔄 Custom annotation sync disabled, skipping");return}console.log("🔄 Processing custom annotation sync:",t);const e={type:t.type,syncData:t,timestamp:new Date().toISOString()};await this.queueSyncOperation(e)}getSyncStats(){return{isEnabled:this.isEnabled,isSyncing:this.isSyncing,queueLength:this.syncQueue.length}}clearSyncQueue(){this.syncQueue=[],console.log("🔄 Sync queue cleared")}destroy(){this.clearSyncQueue(),this.eventListeners.clear(),this.isEnabled=!1,this.isSyncing=!1,console.log("🔄 RealTimeSyncManager destroyed")}}class we{constructor(t,e){this.customAnnotationManager=t,this.settingsController=e,this.initializeElements(),this.bindEvents(),this.updateDisplay(),console.log("CustomAnnotationToolbarController initialized")}initializeElements(){this.customModeIndicator=document.getElementById("custom-mode-indicator"),this.customTypeIndicator=document.getElementById("custom-type-indicator"),this.toolbarCustomTypeSelect=document.getElementById("toolbar-custom-type-select"),this.switchCustomModeBtn=null,this.normalModeBtn=null,this.customSettingsBtn=document.getElementById("custom-settings-btn")}bindEvents(){this.toolbarCustomTypeSelect.addEventListener("change",()=>{this.onCustomTypeSelected();const t=this.toolbarCustomTypeSelect.value;if(t)try{this.customAnnotationManager.setCustomAnnotationMode(t),this.showModeChangeNotification("custom",t)}catch(e){alert("Error switching type: ".concat(e.message))}else this.customAnnotationManager.setNormalMode(),this.showModeChangeNotification("normal")}),this.customSettingsBtn.addEventListener("click",()=>{this.openSettings()}),this.customAnnotationManager.addEventListener("onModeChange",()=>{this.updateDisplay()}),this.customAnnotationManager.addEventListener("onTypeCreate",t=>{console.log("Toolbar controller received onTypeCreate event:",t),this.refreshCustomTypeSelector()}),this.customAnnotationManager.addEventListener("onTypeUpdate",t=>{console.log("Toolbar controller received onTypeUpdate event:",t),this.refreshCustomTypeSelector()}),this.customAnnotationManager.addEventListener("onTypeDelete",t=>{console.log("Toolbar controller received onTypeDelete event:",t),this.refreshCustomTypeSelector()})}refreshCustomTypeSelector(){console.log("Refreshing custom type selector...");const t=this.customAnnotationManager.getAllCustomTypes();console.log("Retrieved custom types:",t);const e=this.toolbarCustomTypeSelect.value;this.toolbarCustomTypeSelect.innerHTML='<option value="">Select custom type...</option>',t.forEach(n=>{console.log("Adding type to selector:",n);const o=document.createElement("option");o.value=n.id,o.textContent="".concat(n.name," (").concat(n.type,")"),o.style.color=n.color,this.toolbarCustomTypeSelect.appendChild(o)}),e&&t.find(n=>n.id===e)&&(this.toolbarCustomTypeSelect.value=e),console.log("Custom type selector updated. Total options:",this.toolbarCustomTypeSelect.options.length),this.updateButtonStates()}onCustomTypeSelected(){this.updateButtonStates()}switchToCustomMode(){const t=this.toolbarCustomTypeSelect.value;if(!t){alert("Please select an annotation type first.");return}try{this.customAnnotationManager.setCustomAnnotationMode(t),this.updateDisplay(),this.showModeChangeNotification("custom",t)}catch(e){alert("Error switching to custom mode: ".concat(e.message))}}switchToNormalMode(){this.customAnnotationManager.setNormalMode(),this.updateDisplay(),this.showModeChangeNotification("normal")}openSettings(){this.settingsController.show()}updateDisplay(){this.updateModeIndicators(),this.updateButtonStates()}updateModeIndicators(){const t=this.customAnnotationManager.currentMode,e=this.customAnnotationManager.getCurrentCustomType();if(t==="custom"?(this.customModeIndicator.textContent="Type",this.customModeIndicator.style.color="#059669",this.customModeIndicator.style.fontWeight="600"):(this.customModeIndicator.textContent="Off",this.customModeIndicator.style.color="var(--text-primary)",this.customModeIndicator.style.fontWeight="500"),e){this.customTypeIndicator.textContent=e.name,this.customTypeIndicator.style.color=e.color,this.customTypeIndicator.style.fontWeight="600";const n=e.type==="point"?"●":"▭";this.customTypeIndicator.textContent="".concat(n," ").concat(e.name)}else this.customTypeIndicator.textContent="None",this.customTypeIndicator.style.color="var(--text-secondary)",this.customTypeIndicator.style.fontWeight="500"}updateButtonStates(){this.customAnnotationManager.currentMode,this.toolbarCustomTypeSelect.value;const t=this.customAnnotationManager.getAllCustomTypes().length>0;this.toolbarCustomTypeSelect.disabled=!1,t?(this.toolbarCustomTypeSelect.style.display="block",this.hideNoTypesMessage()):(this.toolbarCustomTypeSelect.style.display="none",this.showNoTypesMessage())}showNoTypesMessage(){let t=document.getElementById("no-custom-types-message");t||(t=document.createElement("div"),t.id="no-custom-types-message",t.style.cssText="\n        padding: 8px;\n        background: var(--bg-secondary);\n        border: 1px dashed var(--border-color);\n        border-radius: 4px;\n        text-align: center;\n        font-size: 0.75rem;\n        color: var(--text-secondary);\n        margin-bottom: 10px;\n      ",t.innerHTML='\n        <div style="margin-bottom: 4px;">No annotation types created</div>\n        <div style="font-size: 0.7rem;">Click Annotation Type Setting to create types</div>\n      ',this.toolbarCustomTypeSelect.parentNode.appendChild(t)),t.style.display="block"}hideNoTypesMessage(){const t=document.getElementById("no-custom-types-message");t&&(t.style.display="none")}showModeChangeNotification(t,e=null){const n=document.createElement("div");if(n.style.cssText="\n      position: fixed;\n      top: 80px;\n      right: 20px;\n      background: var(--bg-primary);\n      border: 1px solid var(--border-color);\n      border-radius: 6px;\n      padding: 12px 16px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      font-size: 0.875rem;\n      max-width: 300px;\n      animation: slideInRight 0.3s ease-out;\n    ",t==="custom"){const o=this.customAnnotationManager.getCustomType(e),i=o.type==="point"?"●":"▭";n.innerHTML='\n        <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">\n          <span style="color: #059669; font-size: 1.2em;">🎯</span>\n          <strong style="color: #059669;">Custom Mode Active</strong>\n        </div>\n        <div style="color: var(--text-secondary); font-size: 0.8rem;">\n          Type: <span style="color: '.concat(o.color,'; font-weight: 600;">').concat(i," ").concat(o.name,'</span>\n        </div>\n        <div style="color: var(--text-secondary); font-size: 0.75rem; margin-top: 4px;">\n          ').concat(o.type==="point"?"Click to place points":"Drag to draw regions","\n        </div>\n      ")}else n.innerHTML='\n        <div style="display: flex; align-items: center; gap: 8px;">\n          <span style="color: var(--text-primary); font-size: 1.2em;">⚪</span>\n          <strong style="color: var(--text-primary);">Normal Mode</strong>\n        </div>\n        <div style="color: var(--text-secondary); font-size: 0.8rem;">\n          Standard keypoint annotation\n        </div>\n      ';if(!document.getElementById("notification-animation-style")){const o=document.createElement("style");o.id="notification-animation-style",o.textContent="\n        @keyframes slideInRight {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n        @keyframes slideOutRight {\n          from {\n            transform: translateX(0);\n            opacity: 1;\n          }\n          to {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n        }\n      ",document.head.appendChild(o)}document.body.appendChild(n),setTimeout(()=>{n.style.animation="slideOutRight 0.3s ease-in",setTimeout(()=>{n.parentElement&&n.remove()},300)},3e3)}initialize(){console.log("Initializing custom annotation toolbar controller..."),this.refreshCustomTypeSelector(),this.updateDisplay()}forceRefresh(){console.log("Force refreshing toolbar controller..."),this.refreshCustomTypeSelector(),this.updateDisplay()}getSelectedCustomTypeId(){return this.toolbarCustomTypeSelect.value}setSelectedCustomType(t){this.toolbarCustomTypeSelect.value=t,this.updateButtonStates()}hasCustomTypes(){return this.customAnnotationManager.getAllCustomTypes().length>0}getStatusSummary(){const t=this.customAnnotationManager.currentMode,e=this.customAnnotationManager.getCurrentCustomType(),n=this.customAnnotationManager.getAllCustomTypes().length;return{mode:t,selectedType:e?{id:e.id,name:e.name,type:e.type,color:e.color}:null,totalCustomTypes:n,hasCustomTypes:n>0}}}class ve{constructor(t){this.customAnnotationManager=t,this.modal=null,this.currentEditingTypeId=null,this.currentTab="manage-types",this.initializeElements(),this.bindEvents(),console.log("CustomAnnotationSettingsController initialized")}initializeElements(){this.modal=document.getElementById("custom-annotation-settings-modal"),this.closeBtn=document.getElementById("custom-annotation-settings-close"),this.tabButtons=document.querySelectorAll(".tab-button"),this.tabContents=document.querySelectorAll(".tab-content"),this.customTypesList=document.getElementById("custom-types-list"),this.noCustomTypesMessage=document.getElementById("no-custom-types"),this.addTypeBtn=document.getElementById("add-custom-type-btn"),this.typeFormSection=document.getElementById("type-form-section"),this.typeForm=document.getElementById("custom-type-form"),this.formTitle=document.getElementById("form-title"),this.formSubmitText=document.getElementById("form-submit-text"),this.cancelFormBtn=document.getElementById("cancel-form-btn"),this.typeNameInput=document.getElementById("type-name"),this.typeIdInput=document.getElementById("type-id"),this.typeTypeSelect=document.getElementById("type-type"),this.typeColorInput=document.getElementById("type-color"),this.typeColorTextInput=document.getElementById("type-color-text"),this.typeDescriptionInput=document.getElementById("type-description"),this.typeCategoryInput=document.getElementById("type-category"),this.typeDefaultAngleGroup=document.getElementById("type-default-angle-group"),this.typeDefaultAngleInput=document.getElementById("type-default-angle"),this.typeIsDirectionalInput=document.getElementById("type-is-directional"),this.associateTypeSelect=document.getElementById("associate-type-select"),this.currentModeValue=document.getElementById("current-mode-value"),this.currentTypeValue=document.getElementById("current-type-value"),this.switchToNormalBtn=document.getElementById("switch-to-normal-btn"),this.selectCustomTypeSelect=document.getElementById("select-custom-type"),this.switchToCustomBtn=document.getElementById("switch-to-custom-btn"),this.exportTypesCount=document.getElementById("export-types-count"),this.exportAnnotationsCount=document.getElementById("export-annotations-count"),this.exportCustomDataBtn=document.getElementById("export-custom-data-btn"),this.selectImportFileBtn=document.getElementById("select-import-file-btn"),this.importFileInput=document.getElementById("import-file-input"),this.importFileInfo=document.getElementById("import-file-info"),this.importFileName=document.getElementById("import-file-name"),this.importExecuteBtn=document.getElementById("import-execute-btn"),this.importResults=document.getElementById("import-results"),this.importResultsContent=document.getElementById("import-results-content")}bindEvents(){this.closeBtn.addEventListener("click",()=>this.hide()),this.modal.addEventListener("click",t=>{t.target===this.modal&&this.hide()}),this.tabButtons.forEach(t=>{t.addEventListener("click",()=>{const e=t.dataset.tab;this.switchTab(e)})}),this.addTypeBtn.addEventListener("click",()=>this.showAddTypeForm()),this.cancelFormBtn.addEventListener("click",()=>this.hideTypeForm()),this.typeForm.addEventListener("submit",t=>this.handleFormSubmit(t)),this.typeColorInput.addEventListener("input",()=>{this.typeColorTextInput.value=this.typeColorInput.value}),this.typeColorTextInput.addEventListener("input",()=>{/^#[0-9A-Fa-f]{6}$/.test(this.typeColorTextInput.value)&&(this.typeColorInput.value=this.typeColorTextInput.value)}),this.typeNameInput.addEventListener("input",()=>{if(!this.currentEditingTypeId){const t=this.generateIdFromName(this.typeNameInput.value);this.typeIdInput.value=t}}),this.typeTypeSelect.addEventListener("change",()=>this.updateAngleVisibility()),this.switchToNormalBtn&&(this.switchToNormalBtn.style.display="none"),this.switchToCustomBtn&&(this.switchToCustomBtn.style.display="none"),this.selectCustomTypeSelect.addEventListener("change",()=>{const t=this.selectCustomTypeSelect.value;t?this.customAnnotationManager.setCustomAnnotationMode(t):this.customAnnotationManager.setNormalMode(),this.updateModeDisplay()}),this.exportCustomDataBtn.addEventListener("click",()=>this.exportCustomData()),this.selectImportFileBtn.addEventListener("click",()=>this.importFileInput.click()),this.importFileInput.addEventListener("change",()=>this.handleFileSelection()),this.importExecuteBtn.addEventListener("click",()=>this.executeImport()),this.customAnnotationManager.addEventListener("onModeChange",t=>{this.updateModeDisplay()})}show(){this.refreshAllData(),this.modal.style.display="flex"}hide(){this.modal.style.display="none",this.hideTypeForm()}switchTab(t){this.currentTab=t,this.tabButtons.forEach(e=>{e.dataset.tab===t?e.classList.add("active"):e.classList.remove("active")}),this.tabContents.forEach(e=>{e.id==="".concat(t,"-tab")?e.classList.add("active"):e.classList.remove("active")}),this.refreshTabData(t)}refreshTabData(t){switch(t){case"manage-types":this.refreshCustomTypesList();break;case"current-mode":this.updateModeDisplay(),this.refreshCustomTypeSelector();break;case"export-import":this.updateExportStats();break}}refreshAllData(){this.refreshCustomTypesList(),this.updateModeDisplay(),this.refreshCustomTypeSelector(),this.updateExportStats()}refreshCustomTypesList(){const t=this.customAnnotationManager.getAllCustomTypes();if(t.length===0)this.customTypesList.innerHTML='\n        <div id="no-custom-types" class="placeholder-message" style="text-align: center; color: #6b7280; padding: 40px;">\n          <div style="font-size: 48px; margin-bottom: 16px;">🎯</div>\n          <h4 style="margin: 0 0 8px 0;">No Custom Types Created</h4>\n          <p style="margin: 0;">Create custom annotation types for special keypoints and regions</p>\n        </div>\n      ';else{const e=t.map(n=>this.createTypeItemHTML(n)).join("");this.customTypesList.innerHTML=e,this.bindTypeActionButtons(),this.typeFormSection&&this.typeFormSection.style.display!=="none"&&this.associateTypeSelect&&this.populateAssociateOptions(this.currentEditingTypeId)}}populateAssociateOptions(t){if(!this.associateTypeSelect)return;const e=this.customAnnotationManager.getAllCustomTypes();this.associateTypeSelect.innerHTML='<option value="">None</option>',e.forEach(n=>{if(n.id===t)return;const o=document.createElement("option");o.value=n.id;const i=n.type==="point"?"keypoint":n.type==="region"?"rectangle":n.type;o.textContent="".concat(n.name," (").concat(i,")"),this.associateTypeSelect.appendChild(o)})}createTypeItemHTML(t){var n;const e=t.type==="point"?"keypoint":t.type==="region"?"rectangle":t.type;return'\n      <div class="custom-type-item" data-type-id="'.concat(t.id,'">\n        <div class="custom-type-info">\n          <div class="type-color-preview" style="background-color: ').concat(t.color,';"></div>\n          <div class="type-details">\n            <div class="type-name">').concat(t.name,'</div>\n            <div class="type-meta">\n              <span class="type-badge ').concat(t.type,'">').concat(e,"</span>\n              <span>ID: ").concat(t.id,"</span>\n              ").concat((n=t.metadata)!=null&&n.category?"<span>Category: ".concat(t.metadata.category,"</span>"):"",'\n            </div>\n          </div>\n        </div>\n        <div class="type-actions">\n          <button class="type-action-btn edit" data-action="edit" data-type-id="').concat(t.id,'">Edit</button>\n          <button class="type-action-btn delete" data-action="delete" data-type-id="').concat(t.id,'">Delete</button>\n        </div>\n      </div>\n    ')}bindTypeActionButtons(){this.customTypesList.querySelectorAll(".type-action-btn").forEach(e=>{e.addEventListener("click",()=>{const n=e.dataset.action,o=e.dataset.typeId;n==="edit"?this.editCustomType(o):n==="delete"&&this.deleteCustomType(o)})})}showAddTypeForm(){this.currentEditingTypeId=null,this.formTitle.textContent="Add New Type",this.formSubmitText.textContent="Create Type",this.typeForm.reset(),this.typeColorInput.value="#ff6b35",this.typeColorTextInput.value="#ff6b35",this.typeDefaultAngleInput&&(this.typeDefaultAngleInput.value=""),this.associateTypeSelect&&(this.populateAssociateOptions(null),this.associateTypeSelect.value=""),this.typeFormSection.style.display="block",this.updateAngleVisibility()}editCustomType(t){var n,o,i,s;const e=this.customAnnotationManager.getCustomType(t);if(e){if(this.currentEditingTypeId=t,this.formTitle.textContent="Edit Type",this.formSubmitText.textContent="Update Type",this.typeNameInput.value=e.name,this.typeIdInput.value=e.id,this.typeTypeSelect.value=e.type,this.typeColorInput.value=e.color,this.typeColorTextInput.value=e.color,this.typeDescriptionInput.value=e.description||"",this.typeCategoryInput.value=((n=e.metadata)==null?void 0:n.category)||"",this.typeDefaultAngleInput){const a=(o=e.metadata)==null?void 0:o.defaultAngle;this.typeDefaultAngleInput.value=(a!=null?a:"").toString()}this.typeIsDirectionalInput&&(this.typeIsDirectionalInput.checked=!!((i=e.metadata)!=null&&i.isDirectional)),this.associateTypeSelect&&(this.populateAssociateOptions(t),this.associateTypeSelect.value=((s=e.metadata)==null?void 0:s.associateTypeId)||""),this.typeIdInput.disabled=!0,this.typeTypeSelect.disabled=!0,this.typeFormSection.style.display="block",this.updateAngleVisibility()}}deleteCustomType(t){const e=this.customAnnotationManager.getCustomType(t);e&&confirm('Are you sure you want to delete the custom type "'.concat(e.name,'"? This will also delete all annotations of this type.'))&&(this.customAnnotationManager.deleteCustomType(t),this.refreshCustomTypesList(),this.refreshCustomTypeSelector())}hideTypeForm(){this.typeFormSection.style.display="none",this.currentEditingTypeId=null,this.typeIdInput.disabled=!1,this.typeTypeSelect.disabled=!1}handleFormSubmit(t){var o;t.preventDefault();const e=new FormData(this.typeForm),n={id:e.get("id"),name:e.get("name"),type:e.get("type"),color:e.get("color"),description:e.get("description"),metadata:{category:e.get("category")}};if(this.typeIsDirectionalInput&&this.typeIsDirectionalInput.checked?n.metadata.isDirectional=!0:n.metadata.isDirectional=!1,this.associateTypeSelect&&this.associateTypeSelect.value?n.metadata.associateTypeId=this.associateTypeSelect.value:delete n.metadata.associateTypeId,n.type==="point"){const i=(((o=this.typeDefaultAngleInput)==null?void 0:o.value)||"").trim();if(i!==""){const s=parseFloat(i);Number.isNaN(s)||(n.metadata.defaultAngle=s)}}try{if(this.currentEditingTypeId){const{type:i,...s}=n;this.customAnnotationManager.updateCustomType(this.currentEditingTypeId,s)}else this.customAnnotationManager.createCustomType(n);this.hideTypeForm(),this.refreshCustomTypesList(),this.refreshCustomTypeSelector()}catch(i){alert("Error: ".concat(i.message))}}generateIdFromName(t){return t.toLowerCase().replace(/[^a-z0-9\u4e00-\u9fff]/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"").substring(0,50)}updateModeDisplay(){const t=this.customAnnotationManager.currentMode,e=this.customAnnotationManager.getCurrentCustomType();this.currentModeValue.textContent=t==="custom"?"Type":"Off",this.currentTypeValue.textContent=e?e.name:"None",this.switchToNormalBtn&&(this.switchToNormalBtn.disabled=t==="normal")}refreshCustomTypeSelector(){const t=this.customAnnotationManager.getAllCustomTypes();this.selectCustomTypeSelect.innerHTML='<option value="">Choose a type...</option>',t.forEach(o=>{var l;const i=document.createElement("option");i.value=o.id;const s=o.type==="point"?"keypoint":o.type==="region"?"rectangle":o.type,a=(l=o.metadata)!=null&&l.builtin?"★ ":"";i.textContent="".concat(a).concat(o.name," (").concat(s,")"),this.selectCustomTypeSelect.appendChild(i)});const e=Array.from(this.selectCustomTypeSelect.options),n=e.findIndex(o=>o.value==="builtin-regular-keypoint");if(n>1){const o=e[n];this.selectCustomTypeSelect.remove(n),this.selectCustomTypeSelect.add(o,1)}this.switchToCustomBtn&&(this.switchToCustomBtn.disabled=!0)}switchToNormalMode(){this.customAnnotationManager.setNormalMode(),this.updateModeDisplay()}switchToCustomMode(){const t=this.selectCustomTypeSelect.value;if(t)try{this.customAnnotationManager.setCustomAnnotationMode(t),this.updateModeDisplay()}catch(e){alert("Error: ".concat(e.message))}}updateAngleVisibility(){if(!this.typeDefaultAngleGroup)return;const t=this.typeTypeSelect.value==="point";this.typeDefaultAngleGroup.style.display=t?"flex":"none"}updateExportStats(){var i,s;const t=this.customAnnotationManager.getAllCustomTypes(),e=this.customAnnotationManager.getStats();this.exportTypesCount.textContent=t.length,this.exportAnnotationsCount.textContent=e.totalAnnotations;const n=(i=window.PlantAnnotationTool)==null?void 0:i.appState,o=(s=n==null?void 0:n.currentImage)==null?void 0:s.id;if(o){const a=this.customAnnotationManager.getAnnotationStats(o);this.updateCurrentImageStats(a)}}updateCurrentImageStats(t){let e=document.getElementById("current-image-stats");if(!e){e=document.createElement("div"),e.id="current-image-stats",e.style.cssText="\n        margin-top: 16px;\n        padding: 12px;\n        background: #f8f9fa;\n        border-radius: 6px;\n        border: 1px solid #e5e7eb;\n      ";const o=document.querySelector(".export-stats");o&&o.appendChild(e)}let n='\n      <div style="font-weight: 600; margin-bottom: 8px; color: #374151;">\n        📊 Current Image Statistics\n      </div>\n      <div style="margin-bottom: 8px;">\n        Total Annotations: <span style="font-weight: 600;">'.concat(t.total,"</span>\n      </div>\n    ");if(t.total>0){n+='\n        <div style="margin-bottom: 8px;">\n          Order Range: #'.concat(t.orderRange.min," - #").concat(t.orderRange.max,"\n        </div>\n      "),t.gaps.length>0&&(n+='\n          <div style="margin-bottom: 8px; color: #f59e0b;">\n            ⚠️ Missing Numbers: '.concat(t.gaps.join(", "),"\n          </div>\n        "));const o=Object.entries(t.byType).map(([i,s])=>'\n          <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">\n            <div style="width: 12px; height: 12px; background: '.concat(s.typeColor,'; border-radius: 50%;"></div>\n            <span>').concat(s.typeName,": ").concat(s.count,"</span>\n          </div>\n        ")).join("");o&&(n+='\n          <div style="margin-top: 12px;">\n            <div style="font-weight: 600; margin-bottom: 6px; color: #374151;">By Type:</div>\n            '.concat(o,"\n          </div>\n        "))}e.innerHTML=n}exportCustomData(){const t=this.customAnnotationManager.exportData(),e=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),n=URL.createObjectURL(e),o=document.createElement("a");o.href=n,o.download="custom_annotations_".concat(new Date().toISOString().split("T")[0],".json"),document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n),console.log("Custom annotation data exported")}handleFileSelection(){const t=this.importFileInput.files[0];t?(this.importFileName.textContent=t.name,this.importFileInfo.style.display="flex",this.importResults.style.display="none"):this.importFileInfo.style.display="none"}async executeImport(){var e,n;const t=this.importFileInput.files[0];if(t)try{const o=await t.text(),i=JSON.parse(o),s=this.customAnnotationManager.importData(i);s.success?(this.importResultsContent.innerHTML='\n          <div style="color: #059669;">\n            ✅ Import successful!<br>\n            Imported '.concat(((e=i.customTypes)==null?void 0:e.length)||0," custom types and ").concat(((n=i.customAnnotations)==null?void 0:n.length)||0," annotations.\n          </div>\n        "),this.refreshAllData()):this.importResultsContent.innerHTML='\n          <div style="color: #dc2626;">\n            ❌ Import failed: '.concat(s.error,"\n          </div>\n        "),this.importResults.style.display="block"}catch(o){this.importResultsContent.innerHTML='\n        <div style="color: #dc2626;">\n          ❌ Error reading file: '.concat(o.message,"\n        </div>\n      "),this.importResults.style.display="block"}}}window.addEventListener("unhandledrejection",r=>{var t;if(console.error("🚨 Unhandled Promise Rejection:",r.reason),r.reason&&typeof r.reason=="object"&&r.reason.message&&r.reason.message.includes("message channel closed")){console.warn("Chrome extension message channel error detected - this is usually harmless"),r.preventDefault();return}console.error("Unhandled promise rejection details:",{reason:r.reason,promise:r.promise,stack:(t=r.reason)==null?void 0:t.stack})});window.addEventListener("error",r=>{if(console.error("🚨 Uncaught Error:",r.error),r.error&&r.error.message&&r.error.message.includes("asynchronous response")){console.warn("Async response listener error detected - likely Chrome extension related");return}console.error("Global error details:",{message:r.message,filename:r.filename,lineno:r.lineno,colno:r.colno,error:r.error})});let Ie=null,pt=null,nt=null,H=null,w=null,p=null,$=null,X=null,$t=null,kt=null,z=null,v=null,Rt=null,Z=null,J=null;const g={isInitialized:!1,hasBackendAccess:!1,currentDatasetPath:null,plants:[],currentPlant:null,currentImage:null,annotations:new Map,navigation:{isNavigating:!1,lastNavigationTime:0,throttleDelay:150}};function ft(){if(J||Z){console.log("Custom annotation controllers already initialized, skipping...");return}if(!p||!p.customAnnotationManager){console.warn("CustomAnnotationManager not ready, retrying..."),setTimeout(()=>{ft()},200);return}try{J=new ve(p.customAnnotationManager),Z=new we(p.customAnnotationManager,J),Z.initialize(),window.PlantAnnotationTool.customAnnotationToolbarController=Z,window.PlantAnnotationTool.customAnnotationSettingsController=J,console.log("自定义标注控制器初始化成功")}catch(r){console.error("自定义标注控制器初始化失败:",r)}}window.onCustomAnnotationSystemReady=ft;async function Se(){console.log("初始化植物图像关键点标注工具...");try{M(10,"Initializing managers...","Setting up core components"),Ie=document.getElementById("app"),pt=document.getElementById("loading-screen"),nt=document.getElementById("main-app"),H=document.getElementById("error-modal"),M(20,"Creating data managers...","Initializing plant data manager"),w=new de,M(30,"Setting up window objects...","Making managers globally available"),window.PlantAnnotationTool={appState:g,plantDataManager:w,annotationTool:null,showError:A,hideError:mt,updateProgressInfo:P},M(40,"Initializing annotation tool...","Setting up the annotation interface");try{console.log("[调试] 在initializeApp开始时初始化AnnotationTool"),p=new ut("annotation-canvas"),window.PlantAnnotationTool.annotationTool=p}catch(r){console.warn("AnnotationTool初始化延迟:",r.message)}M(50,"Setting up preview manager...","Initializing branch point preview functionality");try{$=new Ot,$.setPlantDataManager(w),window.PlantAnnotationTool.branchPointPreviewManager=$}catch(r){console.warn("BranchPointPreviewManager初始化延迟:",r.message)}M(52,"Setting up custom annotation system...","Initializing custom annotation controllers");try{setTimeout(()=>{ft()},500),console.log("自定义标注系统初始化已启动")}catch(r){console.warn("自定义标注系统初始化延迟:",r.message)}M(55,"Setting up note system...","Initializing note management functionality");try{X=new ge(w.fileSystemManager),$t=new me(X),X.startAutoCleanup(),window.PlantAnnotationTool.noteManager=X,window.PlantAnnotationTool.noteUI=$t,console.log("笔记系统初始化成功")}catch(r){console.warn("NoteManager初始化延迟:",r.message)}M(60,"Setting up annotation manager...","Initializing bulk annotation loading system");try{kt=new pe(w.fileSystemManager),window.PlantAnnotationTool.annotationManager=kt,console.log("标注管理器初始化成功")}catch(r){console.warn("AnnotationManager初始化延迟:",r.message)}M(63,"Setting up real-time sync...","Initializing real-time synchronization manager");try{z=new ye(w,w.annotationStorage),window.PlantAnnotationTool.realTimeSyncManager=z,console.log("🔄 实时同步管理器初始化成功")}catch(r){console.warn("🔄 RealTimeSyncManager初始化延迟:",r.message)}M(65,"Setting up performance monitoring...","Initializing bulk loading performance tracking");try{v=new fe,window.PlantAnnotationTool.performanceMonitor=v,console.log("性能监控器初始化成功")}catch(r){console.warn("性能监控器初始化延迟:",r.message)}if(M(70,"Checking compatibility...","Verifying browser support and backend connection"),await xe(),M(70,"Setting up interface...","Binding event listeners and UI components"),Ae(),M(80,"Finalizing setup...","Completing initialization process"),await ze(),je(),p)console.log("[调试] AnnotationTool已存在，跳过初始化");else try{console.log("[调试] 在initializeApp中初始化AnnotationTool"),p=new ut("annotation-canvas"),window.PlantAnnotationTool.annotationTool=p}catch(r){console.error("无法初始化AnnotationTool:",r)}M(90,"Connecting to dataset...","Automatically connecting to plant dataset"),setTimeout(async()=>{try{await ne()}catch(r){console.error("自动连接数据集失败:",r),j(),A("自动连接数据集失败",r.message)}},500),g.isInitialized=!0,console.log("应用初始化完成")}catch(r){console.error("应用初始化失败:",r),j(),A("应用初始化失败",r.message)}}async function xe(){console.log("检查浏览器兼容性...");try{if(await w.fileSystemManager.checkConnection())await w.fileSystemManager.initialize(),g.hasBackendAccess=!0,console.log("✅ 后端服务连接成功");else throw new Error("后端服务不可用")}catch(e){g.hasBackendAccess=!1;const n=e.message.includes("fetch")||e.message.includes("ERR_CONNECTION_REFUSED")?"后端服务未启动，请运行 ./start-backend.sh 启动服务器":e.message;console.warn("❌ 后端服务连接失败:",n)}const t=[{name:"Canvas API",check:()=>!!document.createElement("canvas").getContext},{name:"IndexedDB",check:()=>!!window.indexedDB},{name:"Web Workers",check:()=>!!window.Worker},{name:"Intersection Observer",check:()=>!!window.IntersectionObserver}].filter(e=>!e.check());if(t.length>0){const e=t.map(n=>n.name).join(", ");throw new Error("浏览器不支持以下必要API: ".concat(e))}console.log("✅ 浏览器兼容性检查通过")}function Ae(){console.log("绑定事件监听器...");const r=document.getElementById("select-dataset-btn");r&&r.addEventListener("click",Ut);const t=document.getElementById("error-close-btn");t&&t.addEventListener("click",mt);const e=document.getElementById("reset-zoom-btn");e&&e.addEventListener("click",()=>{p&&p.resetView()});const n=document.getElementById("fit-screen-btn");n&&n.addEventListener("click",()=>{p&&p.fitToScreen()}),document.addEventListener("click",E=>{if(E.target.classList.contains("btn-view-angle")){const ct=E.target.dataset.viewAngle;Ce(ct)}});const o=document.getElementById("undo-btn");o&&o.addEventListener("click",()=>{p&&p.undo()});const i=document.getElementById("redo-btn");i&&i.addEventListener("click",()=>{p&&p.redo()});const s=document.getElementById("clear-all-btn");s&&s.addEventListener("click",Tn);const a=document.getElementById("sift-match-btn");a&&a.addEventListener("click",oe);const l=document.getElementById("toggle-preview-btn");l&&l.addEventListener("click",()=>{$&&$.toggleVisibility()});const c=document.getElementById("auto-direction-btn");c&&c.addEventListener("click",ot);const d=document.getElementById("auto-direction-mode-selector");d&&d.addEventListener("change",ln);const u=document.getElementById("auto-order-btn");u&&u.addEventListener("click",cn);const h=document.getElementById("zoom-lock-checkbox"),m=document.getElementById("zoom-lock-value");h&&m&&(h.addEventListener("change",on),m.addEventListener("change",sn));const f=document.getElementById("auto-move-checkbox");f&&f.addEventListener("change",an);const y=document.getElementById("real-time-change-checkbox");y&&y.addEventListener("change",rn);const S=document.getElementById("skip-modal-close"),x=document.getElementById("skip-cancel-btn"),I=document.getElementById("skip-confirm-btn");S&&S.addEventListener("click",Q),x&&x.addEventListener("click",Q),I&&I.addEventListener("click",Xe);const b=document.getElementById("skip-plant-modal");b&&b.addEventListener("click",E=>{E.target===b&&Q()});const C=document.getElementById("status-filter");C&&C.addEventListener("change",Je);const D=document.getElementById("plant-search");D&&D.addEventListener("input",Qe);const T=document.getElementById("save-annotation-btn");T&&T.addEventListener("click",Wt);const N=document.getElementById("save-annotation-cancel-btn");N&&N.addEventListener("click",gt);const O=document.getElementById("save-annotation-confirm-btn");O&&O.addEventListener("click",()=>{const E=document.querySelector('input[name="save-mode"]:checked');if(E){const ct=E.value==="current-only";Be(ct)}});const W=document.getElementById("complete-plant-btn");W&&W.addEventListener("click",Yt);const Y=document.getElementById("export-data-btn");Y&&Y.addEventListener("click",Le);const k=document.getElementById("delete-plant-annotations-btn");k&&k.addEventListener("click",fn);const L=document.getElementById("delete-modal-close"),U=document.getElementById("delete-cancel-btn"),St=document.getElementById("delete-confirm-btn"),xt=document.getElementById("delete-confirmation-checkbox");L&&L.addEventListener("click",et),U&&U.addEventListener("click",et),St&&St.addEventListener("click",vn),xt&&xt.addEventListener("change",wn);const it=document.getElementById("delete-plant-annotations-modal");it&&it.addEventListener("click",E=>{E.target===it&&et()}),document.addEventListener("keydown",Ke);const At=document.getElementById("canvas-container");At&&At.addEventListener("contextmenu",E=>E.preventDefault()),document.addEventListener("plantUpdated",Fe);const st=document.getElementById("error-modal");st&&st.addEventListener("click",E=>{E.target===st&&mt()});const at=document.getElementById("save-annotation-modal");at&&at.addEventListener("click",E=>{E.target===at&&gt()});const bt=document.getElementById("unskip-modal-close"),Tt=document.getElementById("unskip-cancel-btn"),Ct=document.getElementById("unskip-confirm-btn");bt&&bt.addEventListener("click",G),Tt&&Tt.addEventListener("click",G),Ct&&Ct.addEventListener("click",tn);const Mt=document.getElementById("uncomplete-modal-close"),Pt=document.getElementById("uncomplete-cancel-btn"),Dt=document.getElementById("uncomplete-confirm-btn");Mt&&Mt.addEventListener("click",tt),Pt&&Pt.addEventListener("click",tt),Dt&&Dt.addEventListener("click",nn);const rt=document.getElementById("unskip-plant-modal");rt&&rt.addEventListener("click",E=>{E.target===rt&&G()});const lt=document.getElementById("uncomplete-plant-modal");lt&&lt.addEventListener("click",E=>{E.target===lt&&tt()}),console.log("✅ 事件监听器绑定完成")}async function Ut(){if(console.log("开始连接数据集..."),!w){console.error("PlantDataManager未初始化"),A("系统错误","数据管理器未正确初始化，请刷新页面重试");return}try{const r=document.getElementById("select-dataset-btn"),t=r.textContent;r.textContent="Connecting...",r.disabled=!0,P("Connecting to backend...");const e=await w.fileSystemManager.getDatasetInfo();if(!e)throw new Error("无法连接到后端服务，请确保后端服务已启动");console.log("连接的数据集:",e.datasetPath),await Ft(),P("Loading plants...");const n=await w.loadDataset();g.currentDatasetPath=e.datasetPath,g.plants=n,Rt={path:e.datasetPath,name:"Brassica napus dataset",plantCount:n.length},P("Loaded ".concat(n.length," plants")),r.textContent="Reconnect Dataset",yt(n),B(),console.log("成功加载数据集: ".concat(n.length," 个植物"))}catch(r){console.error("选择数据集失败:",r),A("连接数据集失败",r.message)}finally{const r=document.getElementById("select-dataset-btn");r.textContent=g.currentDatasetPath?"重新连接数据集":"连接数据集",r.disabled=!1}}async function Ft(){console.log("验证数据集结构...");try{const r=await w.fileSystemManager.traversePlantDirectories();if(!r||r.length===0)throw new Error("数据集中未找到植物文件夹（以BR开头的文件夹）");const t=r[0],e=await w.fileSystemManager.readPlantImages(t.id);if(!e||Object.keys(e).length===0)throw new Error("植物文件夹 ".concat(t.id," 中未找到有效的视角目录"));if(!e["sv-000"]||e["sv-000"].length===0)throw new Error("植物文件夹 ".concat(t.id," 中未找到 sv-000 视角图像"));console.log("✅ 数据集结构验证通过，发现 ".concat(r.length," 个植物文件夹"))}catch(r){throw console.error("数据集结构验证失败:",r),r}}function B(){if(!w){be();return}const r=w.getProgress(),t=document.getElementById("progress-stats"),e=document.getElementById("completed-images-count"),n=document.getElementById("total-images-count"),o=document.getElementById("completion-percentage"),i=document.getElementById("completed-plants-count"),s=document.getElementById("total-plants-count"),a=document.getElementById("progress-bar-fill");if(!t)return;if(t.style.display="block",e){const c=r.totalCompleted||r.completed+r.skipped;e.textContent=c}if(n&&(n.textContent=r.total),o&&(o.textContent=r.completionRate+"%"),i){const c=r.totalCompleted||r.completed+r.skipped,d=r.skipped>0?" (".concat(r.skipped," skipped)"):"";i.textContent="".concat(c," plants finished ").concat(d)}if(s&&(s.textContent="Total ".concat(r.total," plants")),a){const c=parseFloat(r.completionRate)||0;a.style.width=c+"%",c>=100?a.style.background="linear-gradient(90deg, #059669 0%, #047857 100%)":c>=75?a.style.background="linear-gradient(90deg, #10b981 0%, #059669 100%)":c>=50?a.style.background="linear-gradient(90deg, #34d399 0%, #10b981 100%)":c>=25?a.style.background="linear-gradient(90deg, #fbbf24 0%, #f59e0b 100%)":a.style.background="linear-gradient(90deg, #f87171 0%, #ef4444 100%)"}const l=r.totalCompleted||r.completed+r.skipped;console.log("统计更新: ".concat(l,"/").concat(r.total," 植株 (").concat(r.completionRate,"%)"))}function be(){const r=document.getElementById("progress-stats");r&&(r.style.display="none")}function yt(r){const t=document.getElementById("plant-list-container");if(!t)return;if(t.innerHTML="",r.length===0){t.innerHTML='<div class="no-data">no data</div>';return}r.forEach(n=>{const o=K(n);t.appendChild(o)}),B(),setTimeout(async()=>{var s,a;console.log("[Badge Update] Starting automatic badge loading for all plants");let n=0;const o=15,i=300;for(;n<o;){if((s=window.PlantAnnotationTool)!=null&&s.noteManager&&((a=window.PlantAnnotationTool)!=null&&a.noteUI))try{console.log("[Badge Update] Note system available, starting bulk badge update");const l=performance.now();let c=window.PlantAnnotationTool.noteManager.bulkNoteData;if(!c){console.log("[Badge Update] No pre-cached data, fetching bulk notes for instant display...");try{c=await window.PlantAnnotationTool.noteManager.getAllNotesInBulk(),console.log("[Badge Update] Bulk data fetched successfully")}catch(d){console.warn("[Badge Update] Bulk API failed, using optimized individual requests:",d.message),await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges();const u=performance.now();console.log("[Badge Update] Individual badge update completed in ".concat((u-l).toFixed(2),"ms"));return}}if(c){await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadgesFromBulk(c);const d=performance.now();console.log("[Badge Update] INSTANT bulk badge update completed in ".concat((d-l).toFixed(2),"ms")),console.log("[Badge Update] ✅ All plant note badges are now visible immediately")}else{console.log("[Badge Update] Using fallback individual badge updates"),await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges();const d=performance.now();console.log("[Badge Update] Fallback badge update completed in ".concat((d-l).toFixed(2),"ms"))}return}catch(l){if(console.error("[Badge Update] Badge update failed:",l),n++,n>=o){console.error("[Badge Update] Max retries reached, badge update failed permanently");return}}else console.log("[Badge Update] Note system not ready, retry ".concat(n+1,"/").concat(o)),n++;await new Promise(l=>setTimeout(l,i))}console.warn("[Badge Update] ❌ Note system initialization timeout, badges will load later")},100),console.log("渲染了 ".concat(r.length," 个植物列表项"))}function K(r){const t=document.createElement("div");t.className="plant-item",t.dataset.plantId=r.id;const e=zt(r.status),n=r.imageCount>0?"".concat(r.imageCount," images"):r.hasImages?"loading...":"no image",o=r.viewAngles.length>0?"view: ".concat(r.viewAngles.join(", ")):"view: checking...",i=r.selectedViewAngle?"Chosen: ".concat(r.selectedViewAngle):"",s=r.status==="skipped";r.status,s?t.classList.add("skipped"):t.classList.remove("skipped");const a=s&&r.skipReason?'<div class="skip-reason">skip reason: '.concat(r.skipReason,"</div>"):"";let l="";return s?l+='<button class="skip-button unskip-variant" onclick="handleUnskipPlant(\''.concat(r.id,"', event)\">Unskip</button>"):l+='<button class="skip-button" onclick="showSkipPlantModal(\''.concat(r.id,"', event)\">Skip</button>"),t.innerHTML='\n    <div class="plant-item-content">\n      <div class="plant-header">\n        <div class="plant-status">'.concat(e,'</div>\n        <div class="plant-id">').concat(r.id,'</div>\n        <div class="right-box">\n          <div class="plant-note-badge" id="note-badge-').concat(r.id,'" style="display: none;"></div>\n          <div class="state-buttons">').concat(l,'</div>\n        </div>\n      </div>\n      <div class="plant-info">\n        <div class="image-count">').concat(n,'</div>\n        <div class="status-text">').concat(jt(r.status),'</div>\n      </div>\n      <div class="plant-view-info">\n        <div class="view-angles">').concat(o,"</div>\n        ").concat(i?'<div class="selected-view">'.concat(i,"</div>"):"","\n      </div>\n      ").concat(a,"\n    </div>\n  "),t.addEventListener("click",()=>_t(r)),t}async function Kt(r,t){try{if(!window.PlantAnnotationTool||!window.PlantAnnotationTool.noteManager){console.warn("[Thumbnail] Note system not available for ".concat(t));return}const e=window.PlantAnnotationTool.noteManager;console.log("[Thumbnail] Loading note count for ".concat(r,"/").concat(t));const n=arguments[2];let o;if(n){console.log("[Thumbnail] Using direct API for forced refresh of ".concat(t));try{const a=await fetch("".concat(e.baseUrl,"/notes/image/").concat(r,"/").concat(t));if(a.ok){const l=await a.json();o=l.success?l.data||[]:[]}else o=[]}catch(a){console.warn("[Thumbnail] Direct API failed, falling back to cache for ".concat(t,":"),a),o=await e.getImageNotes(r,t)}}else o=await e.getImageNotes(r,t);const i=o?o.length:0;console.log("[Thumbnail] Found ".concat(i," notes for ").concat(t));const s=document.getElementById("image-note-badge-".concat(t));s?(console.log("[Thumbnail] Badge element found for ".concat(t)),i>0?(s.innerHTML='<span class="image-note-count">📝 '.concat(i,"</span>"),s.style.display="inline-block",s.className="image-note-badge",console.log("[Thumbnail] Badge updated with ".concat(i," notes for ").concat(t))):(s.innerHTML="",s.style.display="none",console.log("[Thumbnail] Badge cleared for ".concat(t," (no notes)"))),console.log("[Thumbnail] Badge updated for ".concat(t,": ").concat(i," notes"))):console.error("[Thumbnail] Badge element NOT FOUND for ".concat(t," (ID: image-note-badge-").concat(t,")"))}catch(e){console.error("[Thumbnail] Note loading failed for image ".concat(t,":"),e.message);const n=document.getElementById("image-note-badge-".concat(t));n&&(n.innerHTML="",n.style.display="none",console.log("[Thumbnail] Badge cleared on error for ".concat(t)))}}window.loadImageNoteCount=Kt;window.navigateToNextImage=vt;window.navigateToPreviousImage=te;function zt(r){switch(r){case"completed":return"✅";case"in-progress":return"🔄";case"skipped":return"⏭️";case"pending":default:return"⭕"}}function jt(r){switch(r){case"completed":return"Finished";case"in-progress":return"In progress";case"skipped":return"Skipped";case"pending":default:return"Not started"}}function Ht(){var t;console.log("初始化空工作区状态"),g.currentPlant=null,g.currentImage=null,Vt(),$&&($.reset(),console.log("[EmptyWorkspace] Branch point preview reset - entering empty state"));const r=document.getElementById("view-angle-section");r&&(r.style.display="none"),(t=window.PlantAnnotationTool)!=null&&t.noteUI&&(window.PlantAnnotationTool.noteUI.updateImageNoteButton(null,null),console.log("[EmptyWorkspace] Image note button badge cleared")),P("Please connect to dataset and select a plant"),It(),q()}function Vt(){var n;console.log("清空工作区状态"),p&&p.clearImage(),$&&($.reset(),console.log("[Workspace] Branch point preview reset - no previous image context")),g.currentImage=null,ht();const r=document.getElementById("thumbnail-container");r&&(r.innerHTML='<div class="no-images">Please choose view</div>'),document.querySelectorAll(".btn-view-angle").forEach(o=>{o.classList.remove("selected"),o.disabled=!0});const e=document.getElementById("current-plant-title");e&&!g.currentPlant&&(e.textContent="Plant: Please select"),(n=window.PlantAnnotationTool)!=null&&n.noteUI&&(window.PlantAnnotationTool.noteUI.updateImageNoteButton(null,null),console.log("[Workspace] Image note button badge cleared"))}async function _t(r){var t,e;if(console.log("选择植物:",r.id),!w){console.error("PlantDataManager未初始化"),A("系统错误","数据管理器未正确初始化，请刷新页面重试");return}try{if(g.currentImage&&p)try{const o=p.getAnnotationData();o.keypoints.length>0&&(console.log("植物切换前自动保存当前图像标注:",g.currentImage.id),await w.saveImageAnnotations(g.currentImage.id,o.keypoints),console.log("植物切换前标注保存成功"),await refreshThumbnailAnnotationStatus(g.currentImage.id),console.log("植物切换前缩略图状态已刷新"))}catch(o){console.warn("植物切换前自动保存标注失败:",o)}Vt(),g.currentPlant=r,Me(r),Pe(r.id),P("Loading ".concat(r.id," image data..."));const n=await w.getPlantImages(r.id);if(console.log("植物 ".concat(r.id," 图像数据:"),n),(t=window.PlantAnnotationTool)!=null&&t.noteUI&&window.PlantAnnotationTool.noteUI.setCurrentPlant(r.id),(e=window.PlantAnnotationTool)!=null&&e.noteManager){const o=Object.values(n).flat().map(i=>i.id);window.PlantAnnotationTool.noteManager.preloadNotes(r.id,o.slice(0,5))}await Te(r,n),P("Loaded ".concat(r.id," - Total ").concat(r.imageCount," images")),It(),q()}catch(n){console.error("选择植物失败:",n),A("加载植物数据失败",n.message)}}async function Te(r,t){const e=document.getElementById("view-angle-section"),n=document.getElementById("thumbnail-container"),o=document.getElementById("view-angle-info");if(!e||!n||!o)return;e.style.display="block",n.innerHTML='<div class="no-images">Please choose view</div>';const i=Object.keys(t).filter(a=>t[a].length>0);if(o.textContent="available view: ".concat(i.length),document.querySelectorAll(".btn-view-angle").forEach(a=>{const l=a.dataset.viewAngle,c=t[l]&&t[l].length>0;a.disabled=!c,a.classList.remove("selected");const d=c?t[l].length:0,u=a.textContent.split("(")[0].trim();a.textContent="".concat(u," (").concat(d,")"),c?a.title="".concat(l,": ").concat(d," images"):a.title="".concat(l,": no image")}),r.selectedViewAngle){const a=document.querySelector('[data-view-angle="'.concat(r.selectedViewAngle,'"]'));a&&!a.disabled&&(a.classList.add("selected"),await qt(t[r.selectedViewAngle]||[]))}}async function Ce(r){if(console.log("选择视角:",r),!g.currentPlant){A("操作失败","请先选择植物");return}try{document.querySelectorAll(".btn-view-angle").forEach(n=>{n.classList.remove("selected"),n.dataset.viewAngle===r&&n.classList.add("selected")}),w.setSelectedViewAngle(g.currentPlant.id,r),g.currentPlant.selectedViewAngle=r,P("Loading ".concat(r," image view..."));const e=await w.getPlantImages(g.currentPlant.id,r);console.log("".concat(r," 视角包含 ").concat(e.length," 张图像")),await qt(e),e.length>0&&await V(e[0],!1),P("已选择 ".concat(r," 视角 - ").concat(e.length," 张图像"))}catch(t){console.error("选择视角失败:",t),A("加载视角数据失败",t.message)}}function Me(r){const t=document.getElementById("current-plant-title");t&&(t.textContent="Plant: ".concat(r.id))}function Pe(r){document.querySelectorAll(".plant-item").forEach(e=>{e.classList.remove("selected")});const t=document.querySelector('[data-plant-id="'.concat(r,'"]'));t&&t.classList.add("selected")}async function qt(r){const t=document.getElementById("thumbnail-container");if(t){if(t.innerHTML="",r.length===0){t.innerHTML='<div class="no-images">该植物暂无图像</div>';return}for(let e=0;e<r.length;e++){const n=r[e],o=await De(n,e===0);t.appendChild(o)}console.log("渲染了 ".concat(r.length," 个图像缩略图"))}}async function De(r,t=!1){const e=document.createElement("div");e.className="image-thumbnail",e.dataset.imageId=r.id,t&&e.classList.add("selected");let n=!1,o=0;try{if(w){const s=await w.getImageAnnotations(r.id);s&&s.length>0&&(n=!0,o=s.length,e.classList.add("has-annotations"))}}catch(s){}e.innerHTML='\n    <div class="thumbnail-image">\n      <img src="" alt="'.concat(r.name,'" data-src="').concat(r.id,'" />\n      <div class="thumbnail-loading">Loading...</div>\n      ').concat(n?'<div class="annotation-badge">'.concat(o,"</div>"):"",'\n      <div class="image-note-badge" id="image-note-badge-').concat(r.id,'" style="display: none;"></div>\n    </div>\n    <div class="thumbnail-info">\n      <div class="image-time">').concat(r.timeString,"</div>\n      ").concat(n?'<div class="annotation-status">✓ Annotated</div>':"","\n    </div>\n  ");async function i(s){console.log("[缩略图刷新] 开始刷新图像: ".concat(s));const a=document.querySelector('[data-image-id="'.concat(s,'"]'));if(!a){console.warn("[缩略图刷新] 找不到图像 ".concat(s," 的缩略图元素"));return}try{console.log("[缩略图刷新] 正在获取图像 ".concat(s," 的标注数据..."));const l=await w.getImageAnnotations(s),c=l&&l.length>0,d=l?l.length:0;console.log("[缩略图刷新] 图像 ".concat(s," 标注数据: ").concat(d," 个标注点")),c?(a.classList.add("has-annotations"),console.log("[缩略图刷新] 添加了 has-annotations 类")):(a.classList.remove("has-annotations"),console.log("[缩略图刷新] 移除了 has-annotations 类"));let u=a.querySelector(".annotation-badge");c?(u||(u=document.createElement("div"),u.className="annotation-badge",a.querySelector(".thumbnail-image").appendChild(u),console.log("[缩略图刷新] 创建了新的标注徽章")),u.textContent=d,console.log("[缩略图刷新] 更新徽章数量: ".concat(d))):u&&(u.remove(),console.log("[缩略图刷新] 移除了标注徽章"));let h=a.querySelector(".annotation-status");c?h||(h=document.createElement("div"),h.className="annotation-status",h.textContent="✓ Annotated",a.querySelector(".thumbnail-info").appendChild(h),console.log("[缩略图刷新] 创建了 '✓ Annotated' 状态")):h&&(h.remove(),console.log("[缩略图刷新] 移除了 '✓ Annotated' 状态")),console.log("[缩略图刷新] 完成刷新图像 ".concat(s))}catch(l){console.error("[缩略图刷新] 刷新失败:",l)}}return window.refreshThumbnailAnnotationStatus=i,e.addEventListener("click",()=>V(r,!0)),Ee(e,r),g.currentPlant&&Kt(g.currentPlant.id,r.id),e}async function Ee(r,t){try{const e=r.querySelector("img"),n=r.querySelector(".thumbnail-loading");if(!w||!w.fileSystemManager){console.error("PlantDataManager或FileSystemManager未初始化"),n.textContent="初始化错误",n.style.color="#dc2626";return}const o=await w.fileSystemManager.createImageURL(t);e.onload=()=>{n.style.display="none",e.style.display="block"},e.onerror=()=>{n.textContent="加载失败",n.style.color="#dc2626"},e.src=o}catch(e){console.error("加载缩略图失败:",e);const n=r.querySelector(".thumbnail-loading");n.textContent="加载失败",n.style.color="#dc2626"}}async function V(r,t=!0){var n,o;if(g.navigation.isNavigating){console.log("[Navigation] Blocked concurrent navigation to ".concat(r.name," - already navigating"));return}const e=Date.now();if(e-g.navigation.lastNavigationTime<g.navigation.throttleDelay){if(console.log("[Navigation] Throttled navigation to ".concat(r.name," - too fast (").concat(e-g.navigation.lastNavigationTime,"ms since last)")),window.updateProgressInfo){const i=g.navigation.throttleDelay-(e-g.navigation.lastNavigationTime);window.updateProgressInfo("Navigation throttled - please wait ".concat(i,"ms")),setTimeout(()=>{window.updateProgressInfo&&window.updateProgressInfo("Ready for navigation")},i+100)}return}g.navigation.isNavigating=!0,g.navigation.lastNavigationTime=e;try{if(console.log("选择图像:",r.name),g.currentImage&&p)try{const s=g.currentImage.id,a=p.getAnnotationData();a.keypoints.length>0&&(console.log("[Auto-save] Saving ".concat(a.keypoints.length," annotations for ").concat(s)),await w.saveImageAnnotations(s,a.keypoints),console.log("[Auto-save] Successfully saved annotations for ".concat(s)),await refreshThumbnailAnnotationStatus(s),console.log("[Auto-save] Thumbnail status refreshed for ".concat(s)))}catch(s){console.warn("[Auto-save] Failed to save annotations for ".concat((n=g.currentImage)==null?void 0:n.id,":"),s)}const i=!g.currentImage||g.currentPlant&&g.currentImage&&!g.currentImage.id.startsWith(g.currentPlant.id);if(g.currentImage=r,$e(r.id),(o=window.PlantAnnotationTool)!=null&&o.noteUI&&window.PlantAnnotationTool.noteUI.setCurrentImage(r.id),g.currentPlant&&w.setSelectedImage(g.currentPlant.id,r),p){p.resizeCanvas();const s=un(),a=dn(),l=t&&!i;console.log("[调试] isImageSwitch: ".concat(t,", isFirstImageForPlant: ").concat(i,", shouldPreserveView: ").concat(l)),await p.loadImage(r,l),ie(),i?(console.log("首张图像：重置视图到适合屏幕"),setTimeout(()=>{p.fitToScreen()},100)):t&&s.isLocked?(p.setZoom(s.lockValue),console.log("图片切换：应用锁定倍数 ".concat(s.lockValue,"x"))):t?console.log("图片切换：保持当前缩放和视图状态"):(console.log("其他情况：重置视图到适合屏幕"),p.fitToScreen());try{console.log("[标注] 开始加载图像标注: ".concat(r.id));const c=await w.getImageAnnotations(r.id);if(c&&c.length>0){if(p.loadAnnotationData({keypoints:c}),console.log("[标注] 加载了 ".concat(c.length," 个已有标注点")),p.customAnnotationManager){const d=c.filter(u=>u.annotationType==="custom");d.length>0&&(console.log("[自定义标注] 发现 ".concat(d.length," 个自定义标注，同步到CustomAnnotationManager")),p.customAnnotationManager.syncAnnotationsFromKeypoints(r.id,d))}p.state.autoMoveToExpectedPosition?setTimeout(()=>{p.moveToHighestKeypoint(),console.log("[自动移动] 移动视角到最高标记点（auto-move已开启）")},100):console.log("[自动移动] 跳过移动到最高标记点（auto-move已关闭）")}else p.clearKeypoints(),console.log("[标注] 图像 ".concat(r.id," 无标注数据"))}catch(c){console.warn("[标注] 加载标注数据失败:",c),p.clearKeypoints()}}else console.error("AnnotationTool未初始化"),A("标注工具错误","标注工具未正确初始化，请刷新页面重试");if($&&g.currentPlant)try{const a=(await w.getPlantImages(g.currentPlant.id,g.currentPlant.selectedViewAngle)).findIndex(c=>c.id===r.id),l=p?p.keypoints.length:0;await $.updateContext(g.currentPlant.id,g.currentPlant.selectedViewAngle,a,l)}catch(s){console.warn("更新分支点预览失败:",s)}await R(),p&&setTimeout(()=>{p.moveToExpectedPosition(t)},100),console.log("图像选择完成")}catch(i){console.error("图像选择失败:",i),A("图像加载失败",i.message)}finally{g.navigation.isNavigating=!1,console.log("[Navigation] Navigation unlocked after processing ".concat(r.name))}}function $e(r){document.querySelectorAll(".image-thumbnail").forEach(e=>{e.classList.remove("selected")});const t=document.querySelector('[data-image-id="'.concat(r,'"]'));t&&(t.classList.add("selected"),ke(t))}function ke(r){const t=document.getElementById("thumbnail-container");if(!(!t||!r))try{const e=t.getBoundingClientRect(),n=r.getBoundingClientRect(),o=t.scrollTop,i=r.offsetTop,s=e.height,a=n.height,l=i-s/2+a/2;t.scrollTo({top:l,behavior:"smooth"}),console.log("滚动到缩略图: ".concat(r.dataset.imageId))}catch(e){console.warn("滚动到缩略图失败:",e)}}async function R(){if(!g.currentPlant||!g.currentImage){ht();return}const r=document.getElementById("annotation-status-section"),t=document.getElementById("current-image-index"),e=document.getElementById("annotation-source"),n=document.getElementById("time-series-stats"),o=document.getElementById("manual-adjustment-notice");if(r){r.style.display="block";try{const i=await w.getPlantImages(g.currentPlant.id,g.currentPlant.selectedViewAngle),s=i.findIndex(u=>u.id===g.currentImage.id);t.textContent=s>=0?"".concat(s+1," / ").concat(i.length):"- / -";const a=await w.getImageAnnotations(g.currentImage.id);a&&a.length>0?e.textContent="Document":e.textContent="No annotation";let c=0;for(const u of i){const h=await w.getImageAnnotations(u.id);h&&h.length>0&&c++}const d=i.length>0?Math.round(c/i.length*100):0;n.textContent="".concat(c,"/").concat(i.length," (").concat(d,"%)"),o.style.display="none"}catch(i){console.error("更新标注状态显示失败:",i),ht()}}}function ht(){const r=document.getElementById("annotation-status-section"),t=document.getElementById("manual-adjustment-notice");r&&(r.style.display="none"),t&&(t.style.display="none")}async function Wt(){if(!p||!g.currentPlant){A("保存失败","请先选择植物和图像");return}if(p.getAnnotationData().keypoints.length===0){A("保存失败","请先添加标注点");return}Ne()}function Ne(){const r=document.getElementById("save-annotation-modal");r&&(r.style.display="flex")}function gt(){const r=document.getElementById("save-annotation-modal");r&&(r.style.display="none")}async function Be(r){var t;if(!p||!g.currentPlant){A("保存失败","请先选择植物和图像");return}try{const e=p.getAnnotationData();if(e.keypoints.length===0){A("保存失败","请先添加标注点");return}const n=document.querySelector('input[name="direction-save-mode"]:checked'),o=n&&n.value==="directions-only",i=await w.savePlantAnnotations(g.currentPlant.id,e.keypoints,r,{saveDirectionsOnly:o});if(P(i.message||"已保存 ".concat(e.keypoints.length," 个标注点")),R(),B(),$&&g.currentPlant&&g.currentImage){const a=(await w.getPlantImages(g.currentPlant.id,g.currentPlant.selectedViewAngle)).findIndex(d=>d.id===g.currentImage.id),l=await w.getImageAnnotations(g.currentImage.id),c=l?l.length:0;await $.updateContext(g.currentPlant.id,g.currentPlant.selectedViewAngle,a,c)}if(console.log("标注数据已保存到持久化存储"),g.currentImage&&(await refreshThumbnailAnnotationStatus(g.currentImage.id),console.log("缩略图标注状态已刷新")),!r&&i.affectedImages&&i.affectedImages.length>0){console.log("刷新 ".concat(i.affectedImages.length," 个受影响图像的缩略图状态"));for(const s of i.affectedImages)await refreshThumbnailAnnotationStatus(s)}(t=window.PlantAnnotationTool)!=null&&t.noteUI&&g.currentPlant&&(await window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(g.currentPlant.id),console.log("植物笔记徽章已刷新")),gt()}catch(e){console.error("保存标注失败:",e),A("保存失败","保存标注数据时出错: ".concat(e.message))}}function Yt(){var t;if(!g.currentPlant){A("操作失败","请先选择植物");return}const r=g.currentPlant;if(r.status==="completed")en(r.id);else{if(r.status==="skipped"){A("操作错误","无法完成已跳过的植株，请先撤销跳过");return}const e='确定要标记植株 "'.concat(r.id,'" 为已完成吗？');if(!confirm(e))return;try{w.updatePlantStatus(r.id,"completed"),r.status="completed";const n=document.querySelector('[data-plant-id="'.concat(r.id,'"]'));if(n){const i=K(r);n.parentNode.replaceChild(i,n),(t=window.PlantAnnotationTool)!=null&&t.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(r.id)},100)}B(),q(),_("完成成功","植株 ".concat(r.id," 已标记为完成"));const o=w.getNextPendingPlant(r.id);o?confirm("植株 ".concat(r.id," 已完成！\n\n是否跳转到下一个未完成的植株 ").concat(o.id,"？"))&&(_t(o),P("已完成 ".concat(r.id,"，跳转到 ").concat(o.id))):P("恭喜！所有植物都已完成标注")}catch(n){console.error("完成植物失败:",n),A("操作失败",n.message)}}}async function Le(){if(!w){A("导出失败","请先加载数据集");return}try{await Oe()}catch(r){console.error("导出数据失败:",r),A("导出失败",r.message)}}async function Oe(){const r='\n    <div id="export-modal" class="modal" style="display: flex;">\n      <div class="modal-content" style="max-width: 600px; max-height: 90vh; overflow-y: auto;">\n        <h3>Export Annotation Data</h3>\n\n        <!-- Statistics Area -->\n        <div id="export-stats" style="background: #f9fafb; padding: 15px; border-radius: 8px; margin: 20px 0; font-size: 14px;">\n          <div style="font-weight: 600; margin-bottom: 10px;">Data Statistics:</div>\n          <div id="stats-content">Loading...</div>\n        </div>\n\n        <!-- Preview Area -->\n        <div style="margin: 20px 0;">\n          <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px;">\n            <h4 style="margin: 0;">Export Data Preview</h4>\n            <button id="refresh-preview-btn" class="btn btn-secondary" style="padding: 5px 15px; font-size: 14px;">Refresh Preview</button>\n          </div>\n          <div id="export-preview" style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; max-height: 400px; overflow-y: auto;">\n            Generating preview...\n          </div>\n        </div>\n\n        <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;">\n          <button id="export-cancel-btn" class="btn btn-secondary">Cancel</button>\n          <button id="export-confirm-btn" class="btn btn-primary">Confirm Export</button>\n        </div>\n      </div>\n    </div>\n  ',t=document.getElementById("export-modal");t&&t.remove(),document.body.insertAdjacentHTML("beforeend",r),await Re(),await Nt(),document.getElementById("export-cancel-btn").addEventListener("click",()=>{document.getElementById("export-modal").remove()}),document.getElementById("export-confirm-btn").addEventListener("click",async()=>{document.getElementById("export-modal").remove(),await Ue()}),document.getElementById("refresh-preview-btn").addEventListener("click",async()=>{await Nt()})}async function Re(){const r=document.getElementById("stats-content");if(r)try{const t=await wt(),e=Xt(t),n="\n      <div>📊 Annotated Images: <strong>".concat(e.annotatedImages,"</strong></div>\n      <div>🎯 Total Keypoints: <strong>").concat(e.totalKeypoints,"</strong></div>\n      <div>📈 Average per Image: <strong>").concat(e.averageKeypointsPerImage,'</strong> keypoints</div>\n      <div style="margin-top: 10px; color: #059669;">✅ Pure annotation data, ready for data analysis</div>\n      <div style="color: #059669;">✅ Includes all annotated images and skipped plant information</div>\n    ');r.innerHTML=n}catch(t){console.error("Failed to get export statistics:",t),r.innerHTML='<div style="color: #dc2626;">Failed to load statistics, please check console</div>'}}async function Ue(){try{const r=await wt(),t=Xt(r);if(t.annotatedImages===0){A("Export Failed","No annotation data available for export");return}const e={exportTime:new Date().toISOString(),version:"3.0",format:"pure_annotations",description:"Pure annotation data, including image annotations and skipped plant information",stats:{annotatedImages:t.annotatedImages,totalKeypoints:t.totalKeypoints,averageKeypointsPerImage:t.averageKeypointsPerImage,skippedPlants:t.skippedPlants},annotations:r.annotations,skippedPlants:r.skippedPlants},n=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),o=URL.createObjectURL(n),i=document.createElement("a");i.href=o,i.download="annotations_".concat(new Date().toISOString().split("T")[0],".json"),document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(o);const s="Exported annotation data for ".concat(t.annotatedImages," images with ").concat(t.totalKeypoints," keypoints");P(s),console.log("Annotation data exported",e)}catch(r){console.error("Failed to export data:",r),A("Export Failed",r.message)}}async function wt(){const r={annotations:{},skippedPlants:{}};if(!w||!w.annotationStorage)throw new Error("数据管理器未初始化");const t=w.annotationStorage;if(t.useFileSystem&&t.fileSystemManager){const e=t.fileSystemManager.getAnnotationsDirectory();if(!e)throw new Error("无法访问标注目录");for await(const[n,o]of e.entries())if(o.kind==="file"&&n.endsWith(".json"))try{const s=await(await o.getFile()).text(),a=JSON.parse(s);if(n.endsWith("_skip_info.json")){const l=n.replace("_skip_info.json","");r.skippedPlants[l]={plantId:a.plantId,skipReason:a.skipReason,skipDate:a.skipDate,status:a.status}}else{const l=n.replace(".json","");if(a.annotations&&a.annotations.length>0){const c=a.plantId||Zt(l);r.annotations[l]={imageId:a.imageId||l,plantId:c,annotations:a.annotations,timestamp:a.timestamp,version:a.version}}}}catch(i){console.warn("读取文件失败 (".concat(n,"):"),i)}}else{for(const[e,n]of t.annotations)n.status==="skipped"&&(r.skippedPlants[e]={plantId:e,skipReason:n.skipReason,skipDate:n.skipDate,status:n.status});for(const[e,n]of t.imageAnnotations)n.annotations&&n.annotations.length>0&&(r.annotations[e]={imageId:e,plantId:n.plantId,annotations:n.annotations,timestamp:n.timestamp,version:n.version})}return r}function Xt(r){const t=Object.keys(r.annotations).length,e=Object.keys(r.skippedPlants).length;let n=0;for(const i of Object.values(r.annotations))n+=i.annotations.length;const o=t>0?(n/t).toFixed(1):"0";return{annotatedImages:t,totalKeypoints:n,averageKeypointsPerImage:o,skippedPlants:e}}function Fe(r){const{plant:t}=r.detail,e=document.querySelector('[data-plant-id="'.concat(t.id,'"]'));if(e){const o=e.querySelector(".plant-status");o&&(o.textContent=zt(t.status));const i=e.querySelector(".status-text");i&&(i.textContent=jt(t.status));const s=e.querySelector(".image-count");s&&t.imageCount>0&&(s.textContent="".concat(t.imageCount," images"));const a=e.querySelector(".view-angles");if(a){const c=t.viewAngles.length>0?"view: ".concat(t.viewAngles.join(", ")):"view: detecting...";a.textContent=c}const l=e.querySelector(".plant-view-info");if(l){let c=l.querySelector(".selected-view");t.selectedViewAngle?(c||(c=document.createElement("div"),c.className="selected-view",l.appendChild(c)),c.textContent="Choosed: ".concat(t.selectedViewAngle)):c&&c.remove()}}B();const n=w.getProgress();P("Progress: ".concat(n.completed,"/").concat(n.total," (").concat(n.completionRate,"%)"))}function Ke(r){if(r.ctrlKey||r.metaKey)switch(r.key){case"o":r.preventDefault(),Ut();break;case"s":r.preventDefault(),Wt();break}if(r.shiftKey&&r.key.toLowerCase()==="s"){if(r.preventDefault(),p){let t=!1;if(p.customAnnotationManager){const e=p.customAnnotationManager.currentMode,n=p.customAnnotationManager.selectedCustomType;t=e==="custom"&&n==="builtin-regular-keypoint"}if(!t){A("SIFT匹配不可用","SIFT匹配仅支持Regular (Builtin)标注，请先选择该类型");return}}oe();return}if(nt&&nt.style.display!=="none")switch(r.key){case"Enter":r.preventDefault(),p&&p.state.isAutoOrderMode?p.advanceToNextOrderNumber():Yt();break;case"ArrowLeft":r.preventDefault(),g.navigation.isNavigating?console.log("[Navigation] Previous image blocked - navigation in progress"):te();break;case"ArrowRight":r.preventDefault(),g.navigation.isNavigating?console.log("[Navigation] Next image blocked - navigation in progress"):vt();break}}async function ze(){const r=["正在初始化标注工具...","检查浏览器兼容性...","加载组件模块...","准备用户界面..."],t=pt.querySelector("p");for(const e of r)t.textContent=e,await new Promise(n=>setTimeout(n,300))}function je(){pt.style.display="none",nt.style.display="flex",setTimeout(()=>{if(p)console.log("[调试] AnnotationTool已存在，跳过延迟初始化，调整Canvas尺寸"),p.resizeCanvas();else try{console.log("[调试] 在showMainApp中延迟初始化AnnotationTool"),p=new ut("annotation-canvas"),window.PlantAnnotationTool.annotationTool=p,console.log("AnnotationTool延迟初始化完成")}catch(r){console.error("延迟初始化AnnotationTool失败:",r)}if(!$)try{$=new Ot,$.setPlantDataManager(w),window.PlantAnnotationTool.branchPointPreviewManager=$,console.log("BranchPointPreviewManager延迟初始化完成")}catch(r){console.error("延迟初始化BranchPointPreviewManager失败:",r)}},300)}function P(r){const t=document.getElementById("progress-text");t&&(t.textContent=r)}function A(r,t){const e=document.getElementById("error-message");e&&H&&(e.textContent=t,H.style.display="flex"),console.error("".concat(r,": ").concat(t))}function mt(){H&&(H.style.display="none")}function _(r,t){P("✅ ".concat(r,": ").concat(t)),console.log("".concat(r,": ").concat(t))}document.addEventListener("DOMContentLoaded",()=>{console.log("DOM加载完成，开始初始化应用..."),Se()});async function Nt(){const r=document.getElementById("export-preview");if(r)try{r.innerHTML="正在生成预览...";const t=await wt();if(Object.keys(t.annotations).length===0&&Object.keys(t.skippedPlants).length===0){r.innerHTML='<div style="color: #6b7280; text-align: center; padding: 20px;">No annotation data available</div>';return}const e=He(t);r.innerHTML=e,Ve()}catch(t){console.error("Failed to generate export preview:",t),r.innerHTML='<div style="color: #dc2626;">Failed to generate preview, please check console</div>'}}function Zt(r){if(r.includes("_")){const t=r.split("_");if(t.length>0)return t[0]}if(r.includes("-")){const t=r.split("-");if(t.length>=2)return"".concat(t[0],"-").concat(t[1])}return r.split(".")[0].split("_")[0]}function He(r){let t="";const e=Object.keys(r.annotations).length;if(e>0){t+='\n      <div style="margin-bottom: 20px;">\n        <div style="font-weight: 600; margin-bottom: 10px; color: #374151;">\n          📊 Annotation Data ('.concat(e,' images)\n        </div>\n        <div style="max-height: 200px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px; padding: 10px;">\n    ');const o=Object.keys(r.annotations).slice(0,10);for(const i of o){const s=r.annotations[i],a=s.plantId||Zt(i);t+='\n        <div style="margin-bottom: 8px; padding: 8px; background: #f9fafb; border-radius: 4px; font-size: 13px;">\n          <div style="font-weight: 500;">'.concat(i,'</div>\n          <div style="color: #6b7280;">\n            Plant: ').concat(a," |\n            Keypoints: ").concat(s.annotations.length," |\n            Time: ").concat(s.timestamp?new Date(s.timestamp).toLocaleString():"N/A","\n          </div>\n        </div>\n      ")}e>10&&(t+='<div style="text-align: center; color: #6b7280; margin-top: 10px;">... '.concat(e-10," more images</div>")),t+="</div></div>"}const n=Object.keys(r.skippedPlants).length;if(n>0){t+='\n      <div style="margin-bottom: 20px;">\n        <div style="font-weight: 600; margin-bottom: 10px; color: #374151;">\n          ⏭️ Skipped Plants ('.concat(n,')\n        </div>\n        <div style="max-height: 150px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px; padding: 10px;">\n    ');for(const[o,i]of Object.entries(r.skippedPlants))t+='\n        <div style="margin-bottom: 8px; padding: 8px; background: #fef3c7; border-radius: 4px; font-size: 13px;">\n          <div style="font-weight: 500;">'.concat(o,'</div>\n          <div style="color: #92400e;">\n            Reason: ').concat(i.skipReason," |\n            Time: ").concat(i.skipDate?new Date(i.skipDate).toLocaleString():"N/A","\n          </div>\n        </div>\n      ");t+="</div></div>"}return t===""&&(t='<div style="color: #6b7280; text-align: center; padding: 20px;">No data available</div>'),t}function Ve(){window.togglePlantPreview=function(r){const t=document.getElementById("preview-".concat(r)),e=t.parentElement.querySelector(".preview-plant-header .preview-toggle");t.style.display==="none"?(t.style.display="block",e.textContent="▲",setTimeout(()=>Bt(t),100)):(t.style.display="none",e.textContent="▼")},window.toggleViewPreview=function(r,t){const e=document.getElementById("preview-".concat(r,"-").concat(t)),n=e.parentElement.querySelector(".preview-view-header .preview-toggle");e.style.display==="none"?(e.style.display="block",n.textContent="▼",setTimeout(()=>Bt(e),100)):(e.style.display="none",n.textContent="▶")},window.showImageDetail=function(r){_e(r)},setTimeout(()=>{document.querySelectorAll(".annotation-preview-canvas").forEach(t=>{Jt(t)&&Qt(t)})},500)}function Bt(r){r.querySelectorAll(".annotation-preview-canvas").forEach(e=>{Jt(e)&&Qt(e)})}function Jt(r){const t=r.getBoundingClientRect();return t.width>0&&t.height>0}async function Qt(r){try{const t=r.dataset.imageId,e=JSON.parse(r.dataset.annotations),n=r.parentElement.querySelector(".preview-loading");if(r.dataset.rendered==="true")return;n&&(n.style.display="block",n.textContent="加载图像...");const o=await Gt(t);if(!o)throw new Error("无法获取图像数据");const i=new Image;i.crossOrigin="anonymous",await new Promise((x,I)=>{i.onload=()=>x(),i.onerror=()=>I(new Error("图像加载失败")),i.src=o.url});const a=r.parentElement.getBoundingClientRect(),l=a.width-2,c=a.height-2;r.width=l*window.devicePixelRatio,r.height=c*window.devicePixelRatio,r.style.width=l+"px",r.style.height=c+"px";const d=r.getContext("2d");d.scale(window.devicePixelRatio,window.devicePixelRatio);const u=i.width/i.height,h=l/c;let m,f,y,S;if(u>h?(m=l,f=l/u,y=0,S=(c-f)/2):(f=c,m=c*u,y=(l-m)/2,S=0),d.clearRect(0,0,l,c),d.drawImage(i,y,S,m,f),e&&e.length>0){const x=m/i.width,I=f/i.height;e.forEach((b,C)=>{const D=b.x*x+y,T=b.y*I+S;d.fillStyle="#ef4444",d.strokeStyle="#ffffff",d.lineWidth=2,d.beginPath(),d.arc(D,T,6,0,2*Math.PI),d.fill(),d.stroke(),d.fillStyle="#ffffff",d.font="bold 10px Arial",d.textAlign="center",d.textBaseline="middle",d.fillText((C+1).toString(),D,T)})}n&&(n.style.display="none"),r.dataset.rendered="true"}catch(t){console.error("渲染标注预览失败:",t);const e=r.parentElement.querySelector(".preview-loading");e&&(e.textContent="加载失败",e.style.color="#dc2626")}}async function Gt(r){try{const t=r.split("_");if(t.length<2)throw new Error("无效的图像ID格式");const e=t[0],n=t[1];if(!w)throw new Error("PlantDataManager未初始化");const i=(await w.getPlantImages(e,n)).find(a=>a.id===r);if(!i)throw new Error("未找到图像: ".concat(r));return{url:await w.fileSystemManager.createImageURL(i),data:i}}catch(t){return console.error("获取图像数据失败:",t),null}}function _e(r){const t='\n    <div id="image-detail-modal" class="modal" style="display: flex; z-index: 2000;">\n      <div class="modal-content" style="max-width: 90vw; max-height: 90vh; padding: 20px;">\n        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">\n          <h3 style="margin: 0;">图像详情</h3>\n          <button onclick="closeImageDetailModal()" class="modal-close"></button>\n        </div>\n        <div style="text-align: center;">\n          <div style="font-size: 14px; color: #6b7280; margin-bottom: 10px; word-break: break-all;">\n            '.concat(r,'\n          </div>\n          <div style="max-width: 100%; max-height: 70vh; overflow: auto; border: 1px solid #e5e7eb; border-radius: 8px;">\n            <canvas id="detail-canvas" style="max-width: 100%; height: auto;"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  '),e=document.getElementById("image-detail-modal");e&&e.remove(),document.body.insertAdjacentHTML("beforeend",t),qe(r),window.closeImageDetailModal=function(){const n=document.getElementById("image-detail-modal");n&&n.remove()}}async function qe(r){const t=document.getElementById("detail-canvas");if(t)try{const e=document.querySelector('[data-image-id="'.concat(r,'"]')),n=e?JSON.parse(e.dataset.annotations):[],o=await Gt(r);if(!o)throw new Error("无法获取图像数据");const i=new Image;i.crossOrigin="anonymous",await new Promise((u,h)=>{i.onload=()=>u(),i.onerror=()=>h(new Error("图像加载失败")),i.src=o.url});const s=800,a=600;let l=i.width,c=i.height;if(l>s||c>a){const u=Math.min(s/l,a/c);l*=u,c*=u}t.width=l,t.height=c;const d=t.getContext("2d");if(d.drawImage(i,0,0,l,c),n&&n.length>0){const u=l/i.width,h=c/i.height;n.forEach((m,f)=>{const y=m.x*u,S=m.y*h;d.fillStyle="#ef4444",d.strokeStyle="#ffffff",d.lineWidth=3,d.beginPath(),d.arc(y,S,8,0,2*Math.PI),d.fill(),d.stroke(),d.fillStyle="#ffffff",d.font="bold 14px Arial",d.textAlign="center",d.textBaseline="middle",d.fillText((f+1).toString(),y,S)})}}catch(e){console.error("渲染图像详情失败:",e),t.parentElement.innerHTML='<div style="color: #dc2626; padding: 20px;">图像加载失败</div>'}}window.toggleBranchPointPreview=function(r=null){$&&$.toggleVisibility(r)};async function te(){if(g.navigation.isNavigating){console.log("[Navigation] navigateToPreviousImage blocked - already navigating");return}if(!g.currentPlant||!g.currentImage){console.log("没有当前植物或图像，无法导航");return}try{const r=await w.getPlantImages(g.currentPlant.id,g.currentPlant.selectedViewAngle);if(r.length<=1){console.log("只有一张图像，无法导航到上一张");return}const t=r.findIndex(o=>o.id===g.currentImage.id);if(t===-1){console.warn("未找到当前图像在列表中的位置");return}const e=t===0?r.length-1:t-1,n=r[e];console.log("导航：从第".concat(t+1,"张切换到第").concat(e+1,"张")),await V(n,!0)}catch(r){console.error("导航到上一张图像失败:",r),A("图像导航失败",r.message)}}async function vt(r=!1){if(g.navigation.isNavigating)return console.log("[Navigation] navigateToNextImage blocked - already navigating"),!1;if(!g.currentPlant||!g.currentImage)return console.log("没有当前植物或图像，无法导航"),!1;try{const t=await w.getPlantImages(g.currentPlant.id,g.currentPlant.selectedViewAngle);if(t.length<=1)return console.log("只有一张图像，无法导航到下一张"),!1;const e=t.findIndex(i=>i.id===g.currentImage.id);if(e===-1)return console.warn("未找到当前图像在列表中的位置"),!1;if(e===t.length-1&&r)return console.log("自动化模式：已经是最后一张图片，不循环"),!1;const n=e===t.length-1?0:e+1,o=t[n];return console.log("导航：从第".concat(e+1,"张切换到第").concat(n+1,"张")),await V(o,!0),!0}catch(t){return console.error("导航到下一张图像失败:",t),A("图像导航失败",t.message),!1}}function ot(){var o,i,s,a;if(!p){A("功能不可用","标注工具未初始化");return}if(!p.keypoints||p.keypoints.length===0){A("传统标注升级","当前图像没有标注点，请先添加标注点");return}const r=(a=(s=(i=(o=window.PlantAnnotationTool)==null?void 0:o.annotationTool)==null?void 0:i.customAnnotationManager)==null?void 0:s.getCurrentCustomType)==null?void 0:a.call(s);if(r&&r.metadata&&r.metadata.isDirectional===!1){A("Auto Direction Disabled","当前选择的类型未启用方向功能");return}const t=document.getElementById("auto-direction-mode-selector");if(t&&t.value?(console.log("[调试] 从UI选择器读取模式: ".concat(t.value)),p.autoDirectionMode=t.value):(console.log("[调试] UI选择器无值，使用默认longitudinal模式"),p.autoDirectionMode="longitudinal",t&&(t.value="longitudinal")),!p.startAutoDirectionMode())return;const n=document.getElementById("auto-direction-btn");if(n){console.log("[调试] 更新按钮状态为自动模式"),n.removeEventListener("click",ot),n.textContent="Exit Auto Mode",n.classList.add("active");const l=()=>{console.log("[调试] 自动化按钮被点击，暂停模式"),p.pauseAutoDirectionMode()};n.addEventListener("click",l),n._pauseHandler=l}P("传统标注升级模式已启动。移动鼠标选择方向，左键确认，右键暂停。")}function We(){const r=document.getElementById("auto-direction-btn");r&&(console.log("[调试] 重置自动方向按钮状态"),r._pauseHandler&&(r.removeEventListener("click",r._pauseHandler),r._pauseHandler=null),r.textContent="Auto Direction",r.classList.remove("active"),r.addEventListener("click",ot),console.log("[调试] 自动方向按钮已重置为初始状态"))}window.resetAutoDirectionButton=We;function Ye(r,t){t&&t.stopPropagation();const e=g.plants.find(s=>s.id===r);if(!e){A("错误","未找到指定的植株");return}const n=document.getElementById("skip-plant-name");n&&(n.textContent=e.id);const o=document.getElementById("skip-reason");o&&(o.value="");const i=document.getElementById("skip-plant-modal");i&&(i.style.display="flex",i.dataset.plantId=r,setTimeout(()=>{o&&o.focus()},100))}function Q(){const r=document.getElementById("skip-plant-modal");r&&(r.style.display="none",r.dataset.plantId="")}async function Xe(){var o,i;const r=document.getElementById("skip-plant-modal"),t=r==null?void 0:r.dataset.plantId,e=document.getElementById("skip-reason"),n=e==null?void 0:e.value.trim();if(!t){A("错误","未找到要跳过的植株");return}if(!n){A("输入错误","请输入跳过原因"),e==null||e.focus();return}try{await w.skipPlant(t,n);const s=g.plants.find(a=>a.id===t);if(s){s.status="skipped",s.skipReason=n,s.skipDate=new Date().toISOString();const a=document.querySelector('[data-plant-id="'.concat(t,'"]'));if(a){const l=K(s);a.parentNode.replaceChild(l,a),(o=window.PlantAnnotationTool)!=null&&o.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(t)},100)}B(),((i=g.currentPlant)==null?void 0:i.id)===t&&(console.log("当前植株被跳过，初始化空工作区"),Ht())}Q(),_("跳过成功","植株 ".concat(t," 已标记为跳过"))}catch(s){console.error("跳过植株失败:",s),A("跳过失败",s.message)}}async function Ze(r,t){t&&t.stopPropagation();const e=g.plants.find(n=>n.id===r);if(!e){A("错误","未找到指定的植株");return}if(e.status!=="skipped"){A("操作错误","植株当前状态不是跳过状态");return}Ge(r,e.skipReason)}function Je(){const r=document.getElementById("status-filter"),t=document.getElementById("plant-search");if(!r||!w)return;const e=r.value,n=(t==null?void 0:t.value.trim())||"";ee(e,n)}function Qe(){const r=document.getElementById("status-filter"),t=document.getElementById("plant-search");if(!t||!w)return;const e=t.value.trim(),n=(r==null?void 0:r.value)||"all";ee(n,e)}function ee(r,t){if(!w)return;let e=w.filterPlantsByStatus(r);if(t){const n=t.toLowerCase();e=e.filter(o=>o.id.toLowerCase().includes(n)||o.name.toLowerCase().includes(n))}yt(e),console.log("过滤结果: 状态=".concat(r,', 搜索="').concat(t,'", 结果=').concat(e.length,"个植株"))}function Ge(r,t){const e=document.getElementById("unskip-plant-modal"),n=document.getElementById("unskip-plant-id"),o=document.getElementById("unskip-skip-reason"),i=document.getElementById("unskip-new-status");if(!e){console.error("Unskip plant modal not found");return}n&&(n.textContent=r),o&&(o.textContent=t||"无"),i&&(i.textContent="Pending (will be determined by annotations)"),e.style.display="flex",e.dataset.plantId=r}function G(){const r=document.getElementById("unskip-plant-modal");r&&(r.style.display="none",r.dataset.plantId="")}async function tn(){var e;const r=document.getElementById("unskip-plant-modal"),t=r==null?void 0:r.dataset.plantId;if(!t){A("错误","未找到要撤销跳过的植株");return}try{await w.unskipPlant(t),console.log("[Debug] 后端unskip操作完成，植物ID: ".concat(t));const n=g.plants.find(o=>o.id===t);if(n){console.log("[Debug] 更新前植物状态: ".concat(n.status,", skipReason: ").concat(n.skipReason));const o=await w.getPlantAnnotations(t);n.status=o&&o.length>0?"in-progress":"pending",delete n.skipReason,delete n.skipDate,console.log("[Debug] 更新后植物状态: ".concat(n.status,", skipReason: ").concat(n.skipReason));const i=document.querySelector('[data-plant-id="'.concat(t,'"]'));if(i){const s=K(n);i.parentNode.replaceChild(s,i),console.log("[Debug] 植物列表项已重新渲染: ".concat(t)),(e=window.PlantAnnotationTool)!=null&&e.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(t)},100)}B(),q()}G(),_("撤销成功","植株 ".concat(t," 已恢复到正常状态"))}catch(n){console.error("撤销跳过植株失败:",n),A("撤销失败",n.message)}}function en(r){const t=document.getElementById("uncomplete-plant-modal"),e=document.getElementById("uncomplete-plant-id");if(!t){console.error("Uncomplete plant modal not found");return}e&&(e.textContent=r),t.style.display="flex",t.dataset.plantId=r}function tt(){const r=document.getElementById("uncomplete-plant-modal");r&&(r.style.display="none",r.dataset.plantId="")}async function nn(){var e;const r=document.getElementById("uncomplete-plant-modal"),t=r==null?void 0:r.dataset.plantId;if(!t){A("错误","未找到要撤销完成的植株");return}try{await w.uncompletePlant(t);const n=g.plants.find(o=>o.id===t);if(n){const o=await w.getPlantAnnotations(t);n.status=o&&o.length>0?"in-progress":"pending";const i=document.querySelector('[data-plant-id="'.concat(t,'"]'));if(i){const s=K(n);i.parentNode.replaceChild(s,i),(e=window.PlantAnnotationTool)!=null&&e.noteUI&&setTimeout(()=>{window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(t)},100)}B(),q()}tt(),_("撤销成功","植株 ".concat(t," 已恢复到进行中状态"))}catch(n){console.error("撤销完成植株失败:",n),A("撤销失败",n.message)}}window.handleAutoDirectionSelection=ot;window.navigateToNextImage=vt;window.showSkipPlantModal=Ye;window.handleUnskipPlant=Ze;window.handleImageSelect=V;function on(){const r=document.getElementById("zoom-lock-checkbox"),t=document.getElementById("zoom-lock-value");if(r&&t){const e=r.checked;if(t.disabled=!e,console.log("缩放锁定: ".concat(e?"开启":"关闭")),e){const n=parseFloat(t.value);console.log("锁定倍数设置为: ".concat(n,"x"))}}}function sn(){const r=document.getElementById("zoom-lock-value");if(r){const t=parseFloat(r.value);console.log("锁定倍数更新为: ".concat(t,"x"))}}function an(){const r=document.getElementById("auto-move-checkbox");if(r){const t=r.checked;console.log("自动切换到预期位置: ".concat(t?"开启":"关闭")),p&&typeof p.setAutoMoveToExpectedPosition=="function"&&p.setAutoMoveToExpectedPosition(t)}}function rn(){const r=document.getElementById("real-time-change-checkbox");if(r){const t=r.checked;console.log("🔄 实时变更同步: ".concat(t?"开启":"关闭")),z&&typeof z.setEnabled=="function"&&z.setEnabled(t),P("实时变更同步已".concat(t?"开启":"关闭"))}}function ln(){const r=document.getElementById("auto-direction-mode-selector");if(r){const t=r.value;console.log("Auto direction mode changed to: ".concat(t)),p&&typeof p.setAutoDirectionMode=="function"&&p.setAutoDirectionMode(t);const e=t==="cross-sectional"?"Vertical Mode (Order by Order)":"Horizontal Mode (Image by Image)";P("Auto direction mode set to: ".concat(e));const n=document.getElementById("auto-direction-btn");n&&(n.classList.remove("longitudinal-mode","cross-sectional-mode"),n.classList.add("".concat(t,"-mode")))}}function cn(){if(!p){A("自动排序失败","标注工具未初始化");return}if(!p.customAnnotationManager||!p.customAnnotationManager.isInCustomMode()){A("自动排序不可用","请先选择一个标注类型");return}const r=p.customAnnotationManager.getCurrentCustomType();if(!r){A("自动排序不可用","请先选择一个标注类型");return}p.state.isAutoOrderMode?p.stopAutoOrderMode():p.startAutoOrderMode(r.id)}function dn(){const r=document.getElementById("auto-move-checkbox");return{isEnabled:r?r.checked:!1}}function un(){const r=document.getElementById("zoom-lock-checkbox"),t=document.getElementById("zoom-lock-value");return r&&t?{isLocked:r.checked,lockValue:parseFloat(t.value)||2.5}:{isLocked:!1,lockValue:2.5}}function M(r,t,e){const n=document.getElementById("progress-fill"),o=document.getElementById("progress-text"),i=document.getElementById("loading-subtitle"),s=document.getElementById("loading-details");n&&(n.style.width="".concat(r,"%")),o&&(o.textContent="".concat(r,"%")),i&&(i.textContent=t),s&&(s.textContent=e)}function j(){const r=document.getElementById("fullscreen-loading");r&&(r.style.display="none")}async function ne(){var r,t,e;console.log("开始自动连接数据集 - 完整批量加载模式..."),v&&(v.startMonitoring(),v.addCheckpoint("开始数据集连接"));try{M(5,"Connecting to backend...","Establishing connection to the dataset service");let n;try{n=await w.fileSystemManager.getDatasetInfo(),v==null||v.addCheckpoint("后端连接成功")}catch(d){throw v==null||v.recordError(d,"后端连接失败"),new Lt("无法连接到后端服务","请确保后端服务已启动。运行 ./start-backend.sh 启动服务器",{originalError:d,serverUrl:"http://localhost:3003",suggestion:"尝试运行: ./start-backend.sh"})}if(!n){const d=new Error("后端服务响应异常：数据集信息为空");throw v==null||v.recordError(d,"数据集信息验证"),d}console.log("连接的数据集:",n.datasetPath),M(15,"Validating dataset structure...","Checking plant directories and structure"),await Ft(),v==null||v.addCheckpoint("目录结构验证完成"),M(25,"Loading plant data...","Scanning plant directories and loading basic info");const o=await w.loadDataset();v==null||v.recordDataLoaded("plants",o.length),g.currentDatasetPath=n.datasetPath,g.plants=o,Rt={path:n.datasetPath,name:"Brassica napus dataset",plantCount:o.length},console.log("植物数据加载完成: ".concat(o.length," 个植物")),M(40,"Loading all data types...","Bulk loading annotations, notes, and statistics"),v==null||v.addCheckpoint("开始并行数据加载");const i=[],s={annotations:null,notes:null,annotationsLoaded:!1,notesLoaded:!1,errors:[]};(r=window.PlantAnnotationTool)!=null&&r.annotationManager&&i.push(window.PlantAnnotationTool.annotationManager.getAllAnnotationsInBulk().then(d=>{d?(s.annotations=d,s.annotationsLoaded=!0,v==null||v.recordNetworkRequest("annotations",!0),v==null||v.recordDataLoaded("annotations",Object.keys(d.plantAnnotations||{}).length+Object.keys(d.imageAnnotations||{}).length),console.log("[批量加载] 标注数据加载成功"),M(60,"Annotations loaded successfully...","Processing bulk annotation data")):(console.log("[批量加载] 标注批量API不可用，将使用懒加载模式"),v==null||v.recordFallback("标注批量API不可用"))}).catch(d=>{console.warn("[批量加载] 标注数据加载失败:",d.message),v==null||v.recordError(d,"标注数据批量加载"),s.errors.push("标注加载失败: ".concat(d.message))})),(t=window.PlantAnnotationTool)!=null&&t.noteManager&&i.push(window.PlantAnnotationTool.noteManager.getAllNotesInBulk().then(d=>{d?(s.notes=d,s.notesLoaded=!0,v==null||v.recordNetworkRequest("notes",!0),v==null||v.recordDataLoaded("notes",Object.keys(d.plantNotes||{}).length+Object.keys(d.imageNotes||{}).length),console.log("[批量加载] 笔记数据加载成功"),M(80,"Notes loaded successfully...","Processing bulk note data")):(console.log("[批量加载] 笔记批量API不可用，将使用懒加载模式"),v==null||v.recordFallback("笔记批量API不可用"))}).catch(d=>{console.warn("[批量加载] 笔记数据加载失败:",d.message),v==null||v.recordError(d,"笔记数据批量加载"),s.errors.push("笔记加载失败: ".concat(d.message))})),await Promise.allSettled(i),v==null||v.addCheckpoint("并行数据加载完成"),M(90,"Processing loaded data...","Updating caches and preparing UI components");const a=[];if(s.annotationsLoaded){const u=(s.annotations.statistics||{}).totalAnnotations||0;a.push("".concat(u," annotations"))}if(s.notesLoaded){const u=(s.notes.statistics||{}).totalNotes||0;a.push("".concat(u," notes"))}const l=a.length>0?"All data loaded: ".concat(o.length," plants, ").concat(a.join(", ")):"Dataset loaded: ".concat(o.length," plants (bulk APIs not available)");if(M(95,"Finalizing initialization...",l),s.notesLoaded&&((e=window.PlantAnnotationTool)!=null&&e.noteUI))try{await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadgesFromBulk(s.notes),v==null||v.addCheckpoint("笔记徽章预填充完成"),console.log("[批量加载] 笔记徽章预填充完成")}catch(d){console.warn("[批量加载] 笔记徽章预填充失败:",d.message),v==null||v.recordError(d,"笔记徽章预填充")}M(100,"Initialization complete!","All systems ready - entering main application"),console.log("[完整加载] 数据加载完成 - 标注: ".concat(s.annotationsLoaded,", 笔记: ").concat(s.notesLoaded)),s.errors.length>0&&console.warn("[完整加载] 部分数据加载失败:",s.errors);let c=null;v&&(c=v.endMonitoring(),console.log("🚀 [性能报告] 批量加载性能:",c),window.PlantAnnotationTool.lastPerformanceReport=c),setTimeout(()=>{if(j(),yt(o),B(),P(l),c&&c.performanceGrade){const d="性能评级: ".concat(c.performanceGrade," (").concat(c.summary.totalLoadingTime,")");console.log("[完整加载] ".concat(d))}console.log("[完整加载] 应用启动完成: ".concat(o.length," 个植物, 标注已加载: ").concat(s.annotationsLoaded,", 笔记已加载: ").concat(s.notesLoaded))},1500)}catch(n){throw console.error("自动连接数据集失败:",n),v==null||v.recordError(n,"数据集连接失败"),v==null||v.endMonitoring(),n instanceof Lt?(j(),hn(n)):(j(),A("数据集连接失败","".concat(n.message,"\n\n请检查网络连接和后端服务状态"))),n}}class Lt extends Error{constructor(t,e,n={}){super(e),this.name="ConnectionError",this.title=t,this.details=n}}function hn(r){const t="".concat(r.title,"\n\n").concat(r.message),e=r.details.suggestion?"\n\n建议解决方案：\n".concat(r.details.suggestion):"";A("后端服务连接失败",t+e+"\n\n服务器地址: "+(r.details.serverUrl||"http://localhost:3003")),gn()}function gn(){const r=document.getElementById("error-modal");if(!r||r.querySelector(".retry-button"))return;const t=document.createElement("button");t.textContent="重试连接",t.className="retry-button",t.style.cssText="\n    margin-left: 10px;\n    padding: 8px 16px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  ",t.onclick=async()=>{r.style.display="none",showFullscreenLoading();try{await ne()}catch(n){console.error("重试失败:",n)}},(r.querySelector(".error-buttons")||r).appendChild(t)}async function mn(r){const t=document.getElementById("delete-plant-annotations-modal"),e=document.getElementById("future-images-info"),n=document.getElementById("future-images-count"),o=t.querySelector('input[name="deletion-scope"][value="plant-all"]');if(o&&(o.checked=!0),e&&(e.style.display="none"),g.currentImage&&g.currentPlant&&g.currentPlant.id===r)try{const s=await se(),a=s?s.length:0;if(a>0){e&&n&&(n.textContent=a,e.style.display="block");const l=t.querySelector('input[name="deletion-scope"][value="current-and-future"]');l&&(l.disabled=!1,l.parentElement.style.opacity="1");const c=t.querySelector('input[name="deletion-scope"][value="current-only"]');c&&(c.disabled=!1,c.parentElement.style.opacity="1")}else F("current-and-future","No future images available"),F("current-only","Current image only (basic clear)")}catch(s){console.warn("Failed to check future images for deletion scope:",s),F("current-and-future","Cannot determine future images"),F("current-only","Current image context unavailable")}else F("current-and-future","No current image selected"),F("current-only","No current image selected");t.querySelectorAll('input[name="deletion-scope"]').forEach(s=>{s.addEventListener("change",pn)})}function F(r,t){const n=document.getElementById("delete-plant-annotations-modal").querySelector('input[name="deletion-scope"][value="'.concat(r,'"]'));n&&(n.disabled=!0,n.parentElement.style.opacity="0.5",n.parentElement.title=t)}function pn(){const r=document.querySelector('input[name="deletion-scope"]:checked'),t=document.getElementById("delete-confirmation-checkbox"),e=document.getElementById("delete-confirm-btn");if(r){const n=r.value,o=t.parentElement.querySelector("span");if(o)switch(n){case"plant-all":o.textContent="I understand that this action is irreversible and will delete all annotation data for this plant";break;case"current-and-future":o.textContent="I understand that this action is irreversible and will delete current and future annotations";break;case"current-only":o.textContent="I understand that this action is irreversible and will delete the current image annotations";break}if(e)switch(n){case"plant-all":e.textContent="🗑️ Delete All Plant Annotations";break;case"current-and-future":e.textContent="⚡ Delete Current + Future";break;case"current-only":e.textContent="🗑️ Delete Current Image";break}}}async function fn(){if(!g.currentPlant){A("删除失败","请先选择植物");return}console.log("[Delete Plant] 开始删除植物 ".concat(g.currentPlant.id," 的标注")),await yn(g.currentPlant.id)}async function yn(r){const t=document.getElementById("delete-plant-annotations-modal"),e=document.getElementById("delete-plant-id"),n=document.getElementById("stats-loading"),o=document.getElementById("stats-content"),i=document.getElementById("delete-confirmation-checkbox"),s=document.getElementById("delete-confirm-btn");if(t){e.textContent=r,n.style.display="block",o.style.display="none",i.checked=!1,s.disabled=!0,mn(r),t.style.display="flex";try{console.log("[Delete Plant] 加载植物 ".concat(r," 的统计信息"));const l=await(await fetch("http://localhost:3003/api/annotations/plant/".concat(r,"/stats"))).json();if(l.success)document.getElementById("annotation-files-count").textContent=l.statistics.annotationFiles,document.getElementById("annotation-points-count").textContent=l.statistics.totalAnnotationPoints,document.getElementById("related-files-count").textContent=l.statistics.relatedFiles,document.getElementById("total-files-count").textContent=l.statistics.totalFiles,n.style.display="none",o.style.display="block",console.log("[Delete Plant] 统计加载完成: ".concat(l.statistics.totalFiles," 个文件, ").concat(l.statistics.totalAnnotationPoints," 个标注点")),t.dataset.plantStats=JSON.stringify(l.statistics);else throw new Error(l.error||"获取统计信息失败")}catch(a){console.error("[Delete Plant] 加载统计信息失败:",a),n.innerHTML='<span style="color: #dc2626;">❌ 加载统计信息失败: '.concat(a.message,"</span>")}}}function et(){const r=document.getElementById("delete-plant-annotations-modal");if(r){r.style.display="none";const t=document.getElementById("delete-confirmation-checkbox"),e=document.getElementById("delete-confirm-btn");t&&(t.checked=!1),e&&(e.disabled=!0,e.textContent="🗑️ Delete All Annotations")}}function wn(){const r=document.getElementById("delete-confirmation-checkbox"),t=document.getElementById("delete-confirm-btn");r&&t&&(t.disabled=!r.checked)}async function vn(){if(!g.currentPlant){A("删除失败","未选择植物");return}const r=g.currentPlant.id,t=document.getElementById("delete-plant-annotations-modal"),e=document.getElementById("delete-confirm-btn");if(!t||!e)return;const n=t.querySelector('input[name="deletion-scope"]:checked'),o=n?n.value:"plant-all";try{const i=e.textContent;e.textContent="⏳ Deleting...",e.disabled=!0,console.log("[Delete Plant] 开始删除植物 ".concat(r," 的标注，范围: ").concat(o));let s;switch(o){case"plant-all":s=await In(r);break;case"current-and-future":s=await Sn(r);break;case"current-only":s=await xn(r);break;default:throw new Error("Unknown deletion scope: ".concat(o))}if(s.success){console.log("[Delete Plant] 删除成功:",s.statistics),e.textContent=i,et();const a=s.statistics,l=An(r,o,a);_("删除成功",l),P("植物 ".concat(r," 的标注数据已删除 (").concat(o,")")),await bn(r,o)}else throw new Error(s.error||"删除操作失败")}catch(i){console.error("[Delete Plant] 删除植物 ".concat(r," 失败:"),i),e.textContent=originalText,e.disabled=!1,A("删除失败","删除植物 ".concat(r," 的标注数据时出错: ").concat(i.message))}}async function In(r){return await(await fetch("http://localhost:3003/api/annotations/plant/".concat(r),{method:"DELETE",headers:{"Content-Type":"application/json"}})).json()}async function Sn(r){if(!g.currentImage||!g.currentPlant)throw new Error("No current image context for spreading deletion");try{const t=await se(),e=[g.currentImage,...t];let n=0,o=[];for(const i of e)try{i.id===g.currentImage.id&&p&&(console.log("[Spreading Delete] Clearing current image workspace: ".concat(i.id)),p.clearKeypoints(),typeof R=="function"&&setTimeout(R,100)),await ae(i.id),n++,P("已清除 ".concat(n,"/").concat(e.length," 个图像..."))}catch(s){console.error("Failed to clear image ".concat(i.id,":"),s),o.push("".concat(i.id,": ").concat(s.message))}if(window.refreshThumbnailAnnotationStatus)for(const i of e)await window.refreshThumbnailAnnotationStatus(i.id);return{success:!0,statistics:{totalFilesDeleted:n,totalFilesProcessed:e.length,annotationFilesDeleted:n,relatedFilesDeleted:0,backupPath:"N/A (in-memory operation)",errors:o}}}catch(t){return console.error("Spreading deletion failed:",t),{success:!1,error:t.message}}}async function xn(r){if(!g.currentImage)throw new Error("No current image selected");try{return await ae(g.currentImage.id),window.refreshThumbnailAnnotationStatus&&await window.refreshThumbnailAnnotationStatus(g.currentImage.id),p&&p.clearKeypoints(),{success:!0,statistics:{totalFilesDeleted:1,totalFilesProcessed:1,annotationFilesDeleted:1,relatedFilesDeleted:0,backupPath:"N/A (single image operation)"}}}catch(t){return console.error("Current image deletion failed:",t),{success:!1,error:t.message}}}function An(r,t,e){var o;let n="植物 ".concat(r," 的标注数据删除完成\n\n");switch(t){case"plant-all":n+="删除文件: ".concat(e.totalFilesDeleted,"/").concat(e.totalFilesProcessed,"\n"),n+="标注文件: ".concat(e.annotationFilesDeleted,"\n"),n+="相关文件: ".concat(e.relatedFilesDeleted,"\n"),e.backupPath&&(n+="备份已创建: ".concat(e.backupPath));break;case"current-and-future":n+="传播删除完成\n",n+="处理图像: ".concat(e.totalFilesDeleted,"/").concat(e.totalFilesProcessed,"\n"),e.errors&&e.errors.length>0&&(n+="错误: ".concat(e.errors.length," 个图像删除失败"));break;case"current-only":n+="当前图像标注已清除\n",n+="图像ID: ".concat(((o=g.currentImage)==null?void 0:o.id)||"unknown");break}return n}async function bn(r,t){var e;switch(t){case"plant-all":if(g.currentPlant&&g.currentPlant.id===r){Ht();const n=g.plants.find(o=>o.id===r);if(n){n.status="pending";const o=document.querySelector('[data-plant-id="'.concat(r,'"]'));if(o){const i=K(n);o.parentNode.replaceChild(i,o)}}}break;case"current-and-future":case"current-only":typeof R=="function"&&await R();break}typeof B=="function"&&B(),(e=window.PlantAnnotationTool)!=null&&e.noteUI&&await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges()}function q(){const r=document.getElementById("complete-plant-btn");if(r)if(g.currentPlant){const t=g.currentPlant;t.status==="completed"?(r.textContent="Uncomplete Plant",r.className="btn btn-warning",r.title="撤销完成植株 ".concat(t.id),r.disabled=!1):t.status==="skipped"?(r.textContent="Complete Plant",r.className="btn btn-success",r.title="无法完成已跳过的植株，请先撤销跳过",r.disabled=!0):(r.textContent="Complete Plant",r.className="btn btn-success",r.title="标记植株 ".concat(t.id," 为完成"),r.disabled=!1)}else r.textContent="Complete Plant",r.className="btn btn-success",r.title="请先选择植物",r.disabled=!0}function It(){const r=document.getElementById("delete-plant-annotations-btn");r&&(g.currentPlant?(r.disabled=!1,r.title="删除植物 ".concat(g.currentPlant.id," 的所有标注数据")):(r.disabled=!0,r.title="请先选择植物"))}window.updateDeletePlantAnnotationsButtonState=It;async function Tn(){if(!p){A("清除失败","标注工具未初始化");return}const r=p.getAnnotationData();if(r.keypoints.length===0){A("清除失败","当前图像没有标注点");return}const t="确定要清除当前图像的 ".concat(r.keypoints.length," 个标注点吗？");confirm(t)&&(p.clearKeypoints(),P("已清除当前图像的标注"),window.refreshThumbnailAnnotationStatus&&g.currentImage&&await window.refreshThumbnailAnnotationStatus(g.currentImage.id),typeof R=="function"&&R())}async function oe(){if(!p){A("SIFT匹配失败","标注工具未初始化");return}if(!g.currentPlant){A("SIFT匹配失败","请先选择植物");return}let r=!1;if(p.customAnnotationManager){const e=p.customAnnotationManager.currentMode,n=p.customAnnotationManager.selectedCustomType;r=e==="custom"&&n==="builtin-regular-keypoint"}if(!r){A("SIFT匹配不可用","SIFT匹配仅支持Regular (Builtin)标注，请先选择该类型");return}const t=document.getElementById("sift-match-btn");t&&(t.disabled=!0,t.textContent="⏳");try{console.log("[SIFT] 开始执行SIFT匹配"),await p.performSiftMatching()}catch(e){console.error("[SIFT] 匹配失败:",e),A("SIFT匹配失败",e.message||"执行SIFT匹配时发生错误")}finally{t&&(t.disabled=!1,t.textContent="🔍")}}function ie(){const r=document.getElementById("sift-match-btn");if(!r||!p)return;let t=!1;if(p.customAnnotationManager){const e=p.customAnnotationManager.currentMode,n=p.customAnnotationManager.selectedCustomType;t=e==="custom"&&n==="builtin-regular-keypoint"}r.disabled=!t,r.style.opacity=t?"1":"0.5",r.style.cursor=t?"pointer":"not-allowed",r.title=t?"SIFT快捷匹配 (Shift+S)":"SIFT匹配仅支持Regular (Builtin)标注，请先选择该类型"}window.updateSiftButtonState=ie;async function se(){if(!g.currentImage||!g.currentPlant||!w)return[];try{const r=await w.getPlantImages(g.currentPlant.id,g.currentPlant.selectedViewAngle);if(!r||r.length===0)return[];const t=r.findIndex(i=>i.id===g.currentImage.id);if(t===-1)return[];const e=r[t],n=new Date(e.dateTime),o=r.filter(i=>new Date(i.dateTime)>n);return o.sort((i,s)=>new Date(i.dateTime)-new Date(s.dateTime)),o}catch(r){return console.error("Failed to get future images:",r),[]}}async function ae(r){if(!w)throw new Error("PlantDataManager not available");try{await w.saveImageAnnotations(r,[]),console.log("Cleared annotations for image: ".concat(r))}catch(t){throw console.error("Failed to clear annotations for image ".concat(r,":"),t),t}}export{Cn as __vite_legacy_guard};
//# sourceMappingURL=index-CyUrRCl5.js.map
