{"version":3,"file":"CustomAnnotationManager-legacy-A4rCdnUp.js","sources":["../../src/core/CustomAnnotationManager.js"],"sourcesContent":["/**\n * 自定义标注管理器\n * \n * 功能：\n * - 管理自定义标注类型（特殊关键点和关键区域）\n * - 支持点击式标注（点）和拖拽式标注（区域）\n * - 提供颜色自定义和元数据管理\n * - 支持编号系统和实时同步\n * - 与现有标注系统集成\n */\n\nexport class CustomAnnotationManager {\n  constructor() {\n    // 自定义标注类型存储\n    this.customTypes = new Map();\n    \n    // 自定义标注数据存储 (imageId -> annotations[])\n    this.customAnnotations = new Map();\n    \n    // 当前状态\n    this.isEnabled = true;\n    this.currentMode = 'normal'; // 'normal' | 'custom'\n    this.selectedCustomType = null;\n    \n    // 配置\n    this.config = {\n      maxCustomTypes: 20,\n      maxAnnotationsPerImage: 100,\n      minRegionSize: 10,\n      defaultPointRadius: 8,\n      defaultRegionStrokeWidth: 2\n    };\n    \n    // 实时同步管理器引用\n    this.realTimeSyncManager = null;\n    \n    // 事件处理器\n    this.eventHandlers = {\n      onAnnotationCreate: [],\n      onAnnotationUpdate: [],\n      onAnnotationDelete: [],\n      onModeChange: [],\n      onTypeCreate: [],\n      onTypeUpdate: [],\n      onTypeDelete: []\n    };\n    \n    // 加载已保存的数据\n    this.loadFromStorage();\n    \n    // 🔧 NEW: Ensure builtin regular type exists for migrated data\n    this.ensureBuiltinRegularType();\n    \n    console.log('CustomAnnotationManager initialized');\n  }\n\n  /**\n   * 🔧 NEW: 注册内置的“regular”类型（用于迁移后的数据渲染与选择）\n   */\n  ensureBuiltinRegularType() {\n    const builtinId = 'builtin-regular-keypoint';\n    if (!this.customTypes.has(builtinId)) {\n      const builtinType = {\n        id: builtinId,\n        name: 'Regular (Builtin)',\n        type: 'point',\n        color: '#22c55e',\n        description: 'Default keypoint type migrated from regular',\n        metadata: { builtin: true, defaultAngle: 0, isDirectional: true },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      this.customTypes.set(builtinId, builtinType);\n      // 触发UI更新（不触发远端同步/存储）\n      this.triggerEvent('onTypeCreate', { type: builtinType });\n      console.log('[CustomAnnotationManager] Registered builtin type:', builtinId);\n    }\n  }\n\n  /**\n   * 创建自定义标注类型\n   * @param {Object} typeData - 类型数据\n   * @returns {Object} 创建的类型对象\n   */\n  createCustomType(typeData) {\n    const { id, name, type, color, description = '', metadata = {} } = typeData;\n    \n    // 验证必要字段\n    if (!id || !name || !type || !color) {\n      throw new Error('Missing required fields: id, name, type, color');\n    }\n    \n    // 验证类型\n    if (!['point', 'region'].includes(type)) {\n      throw new Error('Invalid type: must be \"point\" or \"region\"');\n    }\n    \n    // 检查是否已存在\n    if (this.customTypes.has(id)) {\n      throw new Error(`Custom type with id \"${id}\" already exists`);\n    }\n    \n    // 检查数量限制\n    if (this.customTypes.size >= this.config.maxCustomTypes) {\n      throw new Error(`Maximum number of custom types (${this.config.maxCustomTypes}) reached`);\n    }\n    \n    // 创建类型对象\n    const customType = {\n      id,\n      name,\n      type,\n      color,\n      description,\n      metadata,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.customTypes.set(id, customType);\n    \n    // 触发类型创建事件\n    this.triggerEvent('onTypeCreate', { type: customType });\n    \n    // 🔄 NEW: 实时同步 - 自定义类型创建\n    this.triggerCustomTypeCreateSync(customType, {\n      timestamp: new Date().toISOString()\n    });\n    \n    // 自动保存数据\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    console.log(`Created custom type: ${id} (${name})`);\n    return customType;\n  }\n\n  /**\n   * 更新自定义标注类型\n   * @param {string} id - 类型ID\n   * @param {Object} updateData - 更新数据\n   * @returns {Object} 更新后的类型对象\n   */\n  updateCustomType(id, updateData) {\n    const existingType = this.customTypes.get(id);\n    if (!existingType) {\n      throw new Error(`Custom type with id \"${id}\" not found`);\n    }\n    \n    // 不允许更改ID和type\n    const { id: newId, type: newType, ...allowedUpdates } = updateData;\n    \n    if (newId && newId !== id) {\n      console.warn('Cannot change custom type ID');\n    }\n    \n    if (newType && newType !== existingType.type) {\n      console.warn('Cannot change custom type type');\n    }\n    \n    // 更新类型\n    const updatedType = {\n      ...existingType,\n      ...allowedUpdates,\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.customTypes.set(id, updatedType);\n    \n    // 触发类型更新事件\n    this.triggerEvent('onTypeUpdate', { type: updatedType });\n    \n    console.log(`Updated custom type: ${id}`);\n    return updatedType;\n  }\n\n  /**\n   * 删除自定义标注类型\n   * @param {string} id - 类型ID\n   * @returns {boolean} 是否成功删除\n   */\n  deleteCustomType(id) {\n    if (!this.customTypes.has(id)) {\n      return false;\n    }\n    \n    // 删除相关标注\n    this.deleteAnnotationsByTypeId(id);\n    \n    // 删除类型\n    this.customTypes.delete(id);\n    \n    // 触发类型删除事件\n    this.triggerEvent('onTypeDelete', { typeId: id });\n    \n    // 如果当前选中的是被删除的类型，切换回正常模式\n    if (this.selectedCustomType === id) {\n      this.setNormalMode();\n    }\n    \n    console.log(`Deleted custom type: ${id}`);\n    return true;\n  }\n\n  /**\n   * 获取所有自定义类型\n   * @returns {Array} 自定义类型数组\n   */\n  getAllCustomTypes() {\n    return Array.from(this.customTypes.values());\n  }\n\n  /**\n   * 获取指定类型\n   * @param {string} id - 类型ID\n   * @returns {Object|null} 类型对象\n   */\n  getCustomType(id) {\n    return this.customTypes.get(id) || null;\n  }\n\n  /**\n   * 创建自定义标注\n   * @param {Object} annotationData - 标注数据\n   * @returns {Object} 创建的标注对象\n   */\n  createCustomAnnotation(annotationData) {\n    const { typeId, x, y, width, height, imageId, metadata = {} } = annotationData;\n    \n    // 验证必要字段\n    if (!typeId || !imageId || x === undefined || y === undefined) {\n      throw new Error('Missing required fields: typeId, imageId, x, y');\n    }\n    \n    // 验证类型是否存在\n    const customType = this.customTypes.get(typeId);\n    if (!customType) {\n      throw new Error(`Custom type with id \"${typeId}\" not found`);\n    }\n    \n    // 验证区域类型的尺寸\n    if (customType.type === 'region') {\n      if (width === undefined || height === undefined) {\n        throw new Error('Width and height are required for region annotations');\n      }\n      if (width < this.config.minRegionSize || height < this.config.minRegionSize) {\n        throw new Error(`Region size must be at least ${this.config.minRegionSize}px`);\n      }\n    }\n    \n    // 获取或创建图像标注数组\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 检查数量限制\n    if (imageAnnotations.length >= this.config.maxAnnotationsPerImage) {\n      throw new Error(`Maximum number of annotations per image (${this.config.maxAnnotationsPerImage}) reached`);\n    }\n    \n    // 🔧 FIX: 生成特定类型的下一个序号（每种类型独立计数）\n    const order = this.getNextOrderNumber(imageId, typeId);\n    \n    // 创建标注对象\n    const annotation = {\n      id: this.generateAnnotationId(),\n      typeId,\n      x,\n      y,\n      ...(customType.type === 'region' && { width, height }),\n      imageId,\n      order,\n      metadata,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    imageAnnotations.push(annotation);\n    \n    // 触发事件\n    this.triggerEvent('onAnnotationCreate', annotation);\n    \n    // 🔄 NEW: 实时同步 - 自定义标注创建\n    this.triggerCustomAnnotationCreateSync(annotation, {\n      imageId: imageId,\n      typeId: typeId,\n      timestamp: new Date().toISOString()\n    });\n    \n    // 自动保存数据\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    console.log(`Created custom annotation: ${annotation.id} (type: ${typeId}, order: ${order})`);\n    return annotation;\n  }\n\n  /**\n   * 获取指定图像的标注\n   * @param {string} imageId - 图像ID\n   * @returns {Array} 标注数组\n   */\n  getAnnotationsByImageId(imageId) {\n    return this.customAnnotations.get(imageId) || [];\n  }\n\n  /**\n   * 删除自定义标注\n   * @param {string} annotationId - 标注ID\n   * @returns {boolean} 是否成功删除\n   */\n  deleteCustomAnnotation(annotationId) {\n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const index = annotations.findIndex(ann => ann.id === annotationId);\n      if (index !== -1) {\n        const deletedAnnotation = annotations.splice(index, 1)[0];\n        \n        // 如果图像没有标注了，删除图像条目\n        if (annotations.length === 0) {\n          this.customAnnotations.delete(imageId);\n        }\n        \n        // 触发事件\n        this.triggerEvent('onAnnotationDelete', deletedAnnotation);\n        \n        // 🔄 NEW: 实时同步 - 自定义标注删除\n        this.triggerCustomAnnotationDeleteSync(deletedAnnotation, {\n          imageId: imageId,\n          typeId: deletedAnnotation.typeId,\n          timestamp: new Date().toISOString()\n        });\n        \n        // 自动保存数据\n        this.saveToStorage();\n        \n        // 🔄 NEW: 集成数据库自动保存\n        this.triggerDatabaseAutoSave();\n        \n        console.log(`Deleted custom annotation: ${annotationId}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * 根据类型ID删除所有标注\n   * @param {string} typeId - 类型ID\n   */\n  deleteAnnotationsByTypeId(typeId) {\n    let deletedCount = 0;\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const originalLength = annotations.length;\n      const filtered = annotations.filter(ann => ann.typeId !== typeId);\n      \n      if (filtered.length !== originalLength) {\n        deletedCount += originalLength - filtered.length;\n        \n        if (filtered.length === 0) {\n          this.customAnnotations.delete(imageId);\n        } else {\n          this.customAnnotations.set(imageId, filtered);\n        }\n      }\n    }\n    \n    if (deletedCount > 0) {\n      console.log(`Deleted ${deletedCount} annotations of type ${typeId}`);\n    }\n  }\n\n  /**\n   * 设置自定义标注模式\n   * @param {string} typeId - 类型ID\n   */\n  setCustomAnnotationMode(typeId) {\n    const customType = this.customTypes.get(typeId);\n    if (!customType) {\n      throw new Error(`Custom type with id \"${typeId}\" not found`);\n    }\n    \n    this.currentMode = 'custom';\n    this.selectedCustomType = typeId;\n    \n    // 触发模式变化事件\n    this.triggerEvent('onModeChange', {\n      mode: 'custom',\n      typeId,\n      customType\n    });\n    \n    console.log(`Switched to custom annotation mode: ${typeId}`);\n  }\n\n  /**\n   * 设置正常模式\n   */\n  setNormalMode() {\n    this.currentMode = 'normal';\n    this.selectedCustomType = null;\n    \n    // 触发模式变化事件\n    this.triggerEvent('onModeChange', {\n      mode: 'normal',\n      typeId: null,\n      customType: null\n    });\n    \n    console.log('Switched to normal annotation mode');\n  }\n\n  /**\n   * 检查是否处于自定义模式\n   * @returns {boolean} 是否处于自定义模式\n   */\n  isInCustomMode() {\n    return this.currentMode === 'custom' && this.selectedCustomType !== null;\n  }\n\n  /**\n   * 获取当前选中的自定义类型\n   * @returns {Object|null} 当前选中的类型对象\n   */\n  getCurrentCustomType() {\n    if (!this.selectedCustomType) {\n      return null;\n    }\n    return this.customTypes.get(this.selectedCustomType);\n  }\n\n  /**\n   * 处理画布点击（点类型标注）\n   * @param {Object} clickData - 点击数据（包含图像坐标）\n   * @returns {Object} 处理结果\n   */\n  handleCanvasClick(clickData) {\n    if (!this.isInCustomMode()) {\n      return { success: false, reason: 'Not in custom mode' };\n    }\n    \n    const customType = this.getCurrentCustomType();\n    if (!customType) {\n      return { success: false, reason: 'No custom type selected' };\n    }\n    \n    if (customType.type !== 'point') {\n      return { success: false, reason: 'Selected type is not a point type' };\n    }\n    \n    // 验证点击数据\n    if (!clickData.imageId || typeof clickData.x !== 'number' || typeof clickData.y !== 'number') {\n      return { success: false, reason: 'Invalid click data' };\n    }\n    \n    try {\n      const annotation = this.createCustomAnnotation({\n        typeId: customType.id,\n        x: clickData.x,\n        y: clickData.y,\n        imageId: clickData.imageId\n      });\n      \n      return { success: true, annotation };\n    } catch (error) {\n      return { success: false, reason: error.message };\n    }\n  }\n\n  /**\n   * 处理区域拖拽（区域类型标注）\n   * @param {Object} dragData - 拖拽数据\n   * @returns {Object} 处理结果\n   */\n  handleRegionDrag(dragData) {\n    if (!this.isInCustomMode()) {\n      return { success: false, reason: 'Not in custom mode' };\n    }\n    \n    const customType = this.getCurrentCustomType();\n    if (!customType) {\n      return { success: false, reason: 'No custom type selected' };\n    }\n    \n    if (customType.type !== 'region') {\n      return { success: false, reason: 'Selected type is not a region type' };\n    }\n    \n    const { startX, startY, endX, endY, imageId } = dragData;\n    \n    // 计算区域位置和尺寸\n    const x = Math.min(startX, endX);\n    const y = Math.min(startY, endY);\n    const width = Math.abs(endX - startX);\n    const height = Math.abs(endY - startY);\n    \n    try {\n      const annotation = this.createCustomAnnotation({\n        typeId: customType.id,\n        x,\n        y,\n        width,\n        height,\n        imageId\n      });\n      \n      return { success: true, annotation };\n    } catch (error) {\n      return { success: false, reason: error.message };\n    }\n  }\n\n  /**\n   * 获取下一个序号\n   * @param {string} imageId - 图像ID\n   * @param {string} typeId - 类型ID（可选，用于按类型编号）\n   * @returns {number} 下一个序号\n   */\n  getNextOrderNumber(imageId, typeId = null) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    \n    // 如果指定了类型ID，只考虑该类型的标注\n    const relevantAnnotations = typeId \n      ? annotations.filter(ann => ann.typeId === typeId)\n      : annotations;\n    \n    if (relevantAnnotations.length === 0) {\n      return 1;\n    }\n    \n    const maxOrder = Math.max(...relevantAnnotations.map(ann => ann.order || 0));\n    return maxOrder + 1;\n  }\n\n  /**\n   * 重新整理指定图像的标注序号，确保序号连续\n   * @param {string} imageId - 图像ID\n   * @param {string} typeId - 类型ID（可选，只重新整理指定类型）\n   */\n  reorderAnnotations(imageId, typeId = null) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    \n    if (typeId) {\n      // 只重新整理指定类型的标注\n      const typeAnnotations = annotations.filter(ann => ann.typeId === typeId);\n      typeAnnotations.sort((a, b) => (a.order || 0) - (b.order || 0));\n      \n      typeAnnotations.forEach((annotation, index) => {\n        annotation.order = index + 1;\n        annotation.updatedAt = new Date().toISOString();\n      });\n      \n      console.log(`Reordered ${typeAnnotations.length} annotations of type ${typeId} for image ${imageId}`);\n    } else {\n      // 重新整理所有标注\n      annotations.sort((a, b) => (a.order || 0) - (b.order || 0));\n      \n      annotations.forEach((annotation, index) => {\n        annotation.order = index + 1;\n        annotation.updatedAt = new Date().toISOString();\n      });\n      \n      console.log(`Reordered ${annotations.length} annotations for image ${imageId}`);\n    }\n    \n    // 保存更改\n    this.saveToStorage();\n    \n    // 🔄 NEW: 集成数据库自动保存\n    this.triggerDatabaseAutoSave();\n    \n    // 触发更新事件\n    this.triggerEvent('onAnnotationUpdate', { imageId, typeId });\n  }\n\n  /**\n   * 获取标注统计信息（按类型）\n   * @param {string} imageId - 图像ID\n   * @returns {Object} 统计信息\n   */\n  getAnnotationStats(imageId) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    const stats = {\n      total: annotations.length,\n      byType: {},\n      orderRange: { min: 0, max: 0 },\n      gaps: []\n    };\n    \n    if (annotations.length === 0) {\n      return stats;\n    }\n    \n    // 按类型统计\n    annotations.forEach(annotation => {\n      const typeId = annotation.typeId;\n      if (!stats.byType[typeId]) {\n        const customType = this.getCustomType(typeId);\n        stats.byType[typeId] = {\n          count: 0,\n          typeName: customType?.name || 'Unknown',\n          typeColor: customType?.color || '#000000',\n          annotationType: customType?.type || 'unknown'\n        };\n      }\n      stats.byType[typeId].count++;\n    });\n    \n    // 序号范围和间隙检测\n    const orders = annotations.map(ann => ann.order || 0).filter(order => order > 0).sort((a, b) => a - b);\n    if (orders.length > 0) {\n      stats.orderRange.min = orders[0];\n      stats.orderRange.max = orders[orders.length - 1];\n      \n      // 检测序号间隙\n      for (let i = orders[0]; i <= orders[orders.length - 1]; i++) {\n        if (!orders.includes(i)) {\n          stats.gaps.push(i);\n        }\n      }\n    }\n    \n    return stats;\n  }\n\n  /**\n   * 查找具有指定序号的标注\n   * @param {string} imageId - 图像ID\n   * @param {number} order - 序号\n   * @returns {Object|null} 标注对象\n   */\n  findAnnotationByOrder(imageId, order) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    return annotations.find(ann => ann.order === order) || null;\n  }\n\n  /**\n   * 更新标注序号\n   * @param {string} annotationId - 标注ID\n   * @param {number} newOrder - 新序号\n   * @returns {boolean} 是否成功更新\n   */\n  updateAnnotationOrder(annotationId, newOrder) {\n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      const annotation = annotations.find(ann => ann.id === annotationId);\n      if (annotation) {\n        // 检查新序号是否与其他标注冲突\n        const conflictAnnotation = annotations.find(ann => ann.id !== annotationId && ann.order === newOrder);\n        if (conflictAnnotation) {\n          console.warn(`Order ${newOrder} is already used by annotation ${conflictAnnotation.id}`);\n          return false;\n        }\n        \n        const oldOrder = annotation.order;\n        annotation.order = newOrder;\n        annotation.updatedAt = new Date().toISOString();\n        \n        // 触发更新事件\n        this.triggerEvent('onAnnotationUpdate', annotation);\n        \n        // 🔄 NEW: 实时同步 - 标注序号更新\n        this.triggerCustomAnnotationUpdateSync(annotation, {\n          imageId: imageId,\n          orderChange: { from: oldOrder, to: newOrder },\n          timestamp: new Date().toISOString()\n        });\n        \n        // 保存更改\n        this.saveToStorage();\n        \n        // 🔄 NEW: 集成数据库自动保存\n        this.triggerDatabaseAutoSave();\n        \n        console.log(`Updated annotation ${annotationId} order from ${oldOrder} to ${newOrder}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * 生成标注ID\n   * @returns {string} 标注ID\n   */\n  generateAnnotationId() {\n    return `custom_ann_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 导出数据\n   * @returns {Object} 导出的数据\n   */\n  exportData() {\n    const customTypes = Array.from(this.customTypes.values());\n    const customAnnotations = [];\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      customAnnotations.push(...annotations);\n    }\n    \n    return {\n      version: '1.0',\n      exportTime: new Date().toISOString(),\n      customTypes,\n      customAnnotations\n    };\n  }\n\n  /**\n   * 导入数据\n   * @param {Object} importData - 导入的数据\n   * @returns {Object} 导入结果\n   */\n  importData(importData) {\n    try {\n      const { version, customTypes = [], customAnnotations = [] } = importData;\n      \n      if (version !== '1.0') {\n        console.warn(`Importing data with version ${version}, expected 1.0`);\n      }\n      \n      // 导入自定义类型\n      for (const typeData of customTypes) {\n        if (!this.customTypes.has(typeData.id)) {\n          this.customTypes.set(typeData.id, typeData);\n        }\n      }\n      \n      // 导入标注\n      for (const annotation of customAnnotations) {\n        if (!this.customAnnotations.has(annotation.imageId)) {\n          this.customAnnotations.set(annotation.imageId, []);\n        }\n        \n        const imageAnnotations = this.customAnnotations.get(annotation.imageId);\n        \n        // 避免重复导入\n        if (!imageAnnotations.find(ann => ann.id === annotation.id)) {\n          imageAnnotations.push(annotation);\n        }\n      }\n      \n      console.log(`Imported ${customTypes.length} custom types and ${customAnnotations.length} annotations`);\n      return { success: true };\n    } catch (error) {\n      console.error('Import failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * 添加事件监听器\n   * @param {string} eventName - 事件名称\n   * @param {Function} handler - 事件处理函数\n   */\n  addEventListener(eventName, handler) {\n    if (!this.eventHandlers[eventName]) {\n      this.eventHandlers[eventName] = [];\n    }\n    this.eventHandlers[eventName].push(handler);\n  }\n\n  /**\n   * 移除事件监听器\n   * @param {string} eventName - 事件名称\n   * @param {Function} handler - 事件处理函数\n   */\n  removeEventListener(eventName, handler) {\n    if (this.eventHandlers[eventName]) {\n      const index = this.eventHandlers[eventName].indexOf(handler);\n      if (index > -1) {\n        this.eventHandlers[eventName].splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * 触发事件\n   * @param {string} eventName - 事件名称\n   * @param {any} data - 事件数据\n   */\n  triggerEvent(eventName, data) {\n    if (this.eventHandlers[eventName]) {\n      this.eventHandlers[eventName].forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventName}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * 设置实时同步管理器\n   * @param {Object} realTimeSyncManager - 实时同步管理器\n   */\n  setRealTimeSyncManager(realTimeSyncManager) {\n    this.realTimeSyncManager = realTimeSyncManager;\n    console.log('Real-time sync manager set for custom annotations');\n  }\n\n  /**\n   * 触发自定义标注创建的实时同步\n   * @param {Object} annotation - 标注数据\n   * @param {Object} context - 上下文信息 (imageId, plantId等)\n   */\n  triggerCustomAnnotationCreateSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping create sync');\n      return;\n    }\n\n    try {\n      // 获取当前应用状态\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_CREATE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation create sync:', syncData);\n      \n      // Call the real-time sync manager's custom annotation sync method\n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation create sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义标注更新的实时同步\n   * @param {Object} annotation - 更新后的标注数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomAnnotationUpdateSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping update sync');\n      return;\n    }\n\n    try {\n      // 🔧 FIX: 获取当前应用状态 - 与create方法保持一致\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注更新同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_UPDATE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation update sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation update sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义标注删除的实时同步\n   * @param {Object} annotation - 被删除的标注数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomAnnotationDeleteSync(annotation, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom annotation real-time sync disabled, skipping delete sync');\n      return;\n    }\n\n    try {\n      // 🔧 FIX: 获取当前应用状态 - 与create方法保持一致\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过自定义标注删除同步');\n        return;\n      }\n\n      const syncData = {\n        type: 'CUSTOM_ANNOTATION_DELETE',\n        annotation: annotation,\n        context: {\n          ...context,\n          plantId: appState.currentPlant.id,\n          imageId: appState.currentImage.id,\n          viewAngle: appState.currentPlant.selectedViewAngle,\n          appState: appState\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom annotation delete sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom annotation delete sync:', error);\n    }\n  }\n\n  /**\n   * 触发自定义类型创建的实时同步\n   * @param {Object} customType - 自定义类型数据\n   * @param {Object} context - 上下文信息\n   */\n  triggerCustomTypeCreateSync(customType, context = {}) {\n    if (!this.realTimeSyncManager || !this.realTimeSyncManager.isRealTimeSyncEnabled()) {\n      console.log('🔄 Custom type real-time sync disabled, skipping create sync');\n      return;\n    }\n\n    try {\n      const syncData = {\n        type: 'CUSTOM_TYPE_CREATE',\n        customType: customType,\n        context: context,\n        timestamp: new Date().toISOString()\n      };\n\n      console.log('🔄 Triggering custom type create sync:', syncData);\n      \n      if (typeof this.realTimeSyncManager.triggerCustomAnnotationSync === 'function') {\n        this.realTimeSyncManager.triggerCustomAnnotationSync(syncData);\n      } else {\n        console.warn('🔄 Real-time sync manager does not support custom annotation sync');\n      }\n    } catch (error) {\n      console.error('🔄 Failed to trigger custom type create sync:', error);\n    }\n  }\n\n  /**\n   * 获取统计信息\n   * @returns {Object} 统计信息\n   */\n  getStats() {\n    const totalTypes = this.customTypes.size;\n    let totalAnnotations = 0;\n    let annotatedImages = 0;\n    \n    for (const [imageId, annotations] of this.customAnnotations.entries()) {\n      if (annotations.length > 0) {\n        annotatedImages++;\n        totalAnnotations += annotations.length;\n      }\n    }\n    \n    return {\n      totalTypes,\n      totalAnnotations,\n      annotatedImages,\n      averageAnnotationsPerImage: annotatedImages > 0 ? (totalAnnotations / annotatedImages).toFixed(2) : 0\n    };\n  }\n\n  /**\n   * 保存数据到localStorage\n   */\n  saveToStorage() {\n    try {\n      const data = {\n        customTypes: Array.from(this.customTypes.entries()),\n        customAnnotations: Array.from(this.customAnnotations.entries()),\n        version: '1.0',\n        savedAt: new Date().toISOString()\n      };\n      \n      localStorage.setItem('customAnnotationData', JSON.stringify(data));\n      console.log('Custom annotation data saved to localStorage');\n    } catch (error) {\n      console.error('Failed to save custom annotation data:', error);\n    }\n  }\n\n  /**\n   * 从localStorage加载数据\n   */\n  loadFromStorage() {\n    try {\n      const savedData = localStorage.getItem('customAnnotationData');\n      if (!savedData) {\n        console.log('No saved custom annotation data found');\n        return;\n      }\n\n      const data = JSON.parse(savedData);\n      \n      // 恢复自定义类型\n      if (data.customTypes) {\n        this.customTypes.clear();\n        data.customTypes.forEach(([id, type]) => {\n          this.customTypes.set(id, type);\n        });\n      }\n      \n      // 恢复自定义标注\n      if (data.customAnnotations) {\n        this.customAnnotations.clear();\n        data.customAnnotations.forEach(([imageId, annotations]) => {\n          this.customAnnotations.set(imageId, annotations);\n        });\n      }\n      \n      console.log(`Loaded custom annotation data from localStorage (version: ${data.version})`);\n      \n      // 触发事件通知UI更新 - 为每个加载的类型触发事件\n      if (data.customTypes && data.customTypes.length > 0) {\n        console.log(`Triggering type events for ${data.customTypes.length} loaded types`);\n        // 延迟触发事件，确保所有UI组件都已初始化\n        setTimeout(() => {\n          data.customTypes.forEach(([id, type]) => {\n            this.triggerEvent('onTypeCreate', { type });\n          });\n        }, 100);\n      }\n      \n    } catch (error) {\n      console.error('Failed to load custom annotation data:', error);\n    }\n  }\n\n  /**\n   * 清除localStorage中的数据\n   */\n  clearStorage() {\n    try {\n      localStorage.removeItem('customAnnotationData');\n      console.log('Custom annotation data cleared from localStorage');\n    } catch (error) {\n      console.error('Failed to clear custom annotation data:', error);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 触发数据库自动保存\n   */\n  async triggerDatabaseAutoSave() {\n    try {\n      // 通过全局对象访问AnnotationTool的自动保存功能\n      const annotationTool = window.PlantAnnotationTool?.annotationTool;\n      if (annotationTool && typeof annotationTool.autoSaveCurrentImage === 'function') {\n        await annotationTool.autoSaveCurrentImage();\n        console.log('Custom annotation database auto-save triggered');\n      } else {\n        console.warn('AnnotationTool auto-save not available');\n      }\n    } catch (error) {\n      console.error('Failed to trigger database auto-save:', error);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 获取自定义标注数据用于数据库保存\n   */\n  getCustomAnnotationsForSave(imageId) {\n    const annotations = this.getAnnotationsByImageId(imageId);\n    return annotations.map(annotation => {\n      const customType = this.getCustomType(annotation.typeId);\n      return {\n        ...annotation,\n        customType: customType ? {\n          id: customType.id,\n          name: customType.name,\n          type: customType.type,\n          color: customType.color,\n          description: customType.description\n        } : null\n      };\n    });\n  }\n  \n  /**\n   * 🔄 NEW: 从数据库保存数据中恢复自定义标注\n   */\n  loadCustomAnnotationsFromSave(imageId, savedCustomAnnotations) {\n    if (!savedCustomAnnotations || !Array.isArray(savedCustomAnnotations)) {\n      return;\n    }\n    \n    // 确保图像标注数组存在\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 加载自定义标注\n    savedCustomAnnotations.forEach(savedAnnotation => {\n      // 检查是否已存在\n      const exists = imageAnnotations.find(ann => ann.id === savedAnnotation.id);\n      if (!exists) {\n        // 移除customType字段（这是为了保存而添加的），保持标注数据的纯净\n        const { customType, ...annotation } = savedAnnotation;\n        imageAnnotations.push(annotation);\n      }\n    });\n    \n    console.log(`Loaded ${savedCustomAnnotations.length} custom annotations for image ${imageId}`);\n  }\n  \n  /**\n   * 🔧 FIX: 从主键点数组同步自定义标注到内部状态\n   * @param {string} imageId - 图像ID\n   * @param {Array} customAnnotations - 自定义标注数组\n   */\n  syncAnnotationsFromKeypoints(imageId, customAnnotations) {\n    if (!imageId || !customAnnotations || customAnnotations.length === 0) {\n      return;\n    }\n    \n    // 确保图像标注数组存在\n    if (!this.customAnnotations.has(imageId)) {\n      this.customAnnotations.set(imageId, []);\n    }\n    \n    const imageAnnotations = this.customAnnotations.get(imageId);\n    \n    // 为每个自定义标注添加到内部状态\n    customAnnotations.forEach(annotation => {\n      // 检查是否已存在\n      const existingIndex = imageAnnotations.findIndex(existing => existing.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        // 创建标注副本并添加到内部状态\n        const annotationCopy = { ...annotation };\n        imageAnnotations.push(annotationCopy);\n        console.log(`[同步] 添加自定义标注到内部状态: ${annotation.id} (类型: ${annotation.customTypeId})`);\n      } else {\n        // 更新现有标注\n        imageAnnotations[existingIndex] = { ...annotation };\n        console.log(`[同步] 更新自定义标注在内部状态: ${annotation.id} (类型: ${annotation.customTypeId})`);\n      }\n    });\n    \n    // 保存到localStorage\n    this.saveToStorage();\n    \n    console.log(`[同步] 同步了 ${customAnnotations.length} 个自定义标注到图像 ${imageId}`);\n  }\n  \n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注创建事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationCreateFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation create');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 检查是否已存在该标注\n      const existingAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const exists = existingAnnotations.find(ann => ann.id === annotation.id);\n      \n      if (exists) {\n        console.log('🔄 Custom annotation already exists, skipping');\n        return;\n      }\n\n      // 确保自定义类型存在\n      if (!this.customTypes.has(annotation.typeId)) {\n        console.warn(`🔄 Custom type ${annotation.typeId} not found for synced annotation`);\n        return;\n      }\n\n      // 确保图像标注数组存在\n      if (!this.customAnnotations.has(context.imageId)) {\n        this.customAnnotations.set(context.imageId, []);\n      }\n\n      // 添加标注（不触发同步，避免循环）\n      this.customAnnotations.get(context.imageId).push(annotation);\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationCreate', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation created from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation create from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注更新事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationUpdateFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation update');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 查找并更新标注\n      const imageAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const existingIndex = imageAnnotations.findIndex(ann => ann.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        console.warn('🔄 Custom annotation not found for update from sync:', annotation.id);\n        return;\n      }\n\n      // 更新标注（不触发同步，避免循环）\n      imageAnnotations[existingIndex] = { ...imageAnnotations[existingIndex], ...annotation };\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationUpdate', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation updated from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation update from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义标注删除事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomAnnotationDeleteFromSync(syncData) {\n    try {\n      if (!syncData.annotation) {\n        console.warn('🔄 Invalid sync data for custom annotation delete');\n        return;\n      }\n\n      const { annotation, context } = syncData;\n      \n      // 查找并删除标注\n      const imageAnnotations = this.getAnnotationsByImageId(context.imageId);\n      const existingIndex = imageAnnotations.findIndex(ann => ann.id === annotation.id);\n      \n      if (existingIndex === -1) {\n        console.warn('🔄 Custom annotation not found for delete from sync:', annotation.id);\n        return;\n      }\n\n      // 删除标注（不触发同步，避免循环）\n      imageAnnotations.splice(existingIndex, 1);\n      \n      // 如果图像没有标注了，删除图像条目\n      if (imageAnnotations.length === 0) {\n        this.customAnnotations.delete(context.imageId);\n      }\n      \n      // 触发UI更新事件\n      this.triggerEvent('onAnnotationDelete', annotation);\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom annotation deleted from sync:', annotation.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom annotation delete from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 接收来自实时同步的自定义类型创建事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleCustomTypeCreateFromSync(syncData) {\n    try {\n      if (!syncData.customType) {\n        console.warn('🔄 Invalid sync data for custom type create');\n        return;\n      }\n\n      const { customType } = syncData;\n      \n      // 检查是否已存在该类型\n      if (this.customTypes.has(customType.id)) {\n        console.log('🔄 Custom type already exists, skipping');\n        return;\n      }\n\n      // 添加类型（不触发同步，避免循环）\n      this.customTypes.set(customType.id, customType);\n      \n      // 触发UI更新事件\n      this.triggerEvent('onTypeCreate', { type: customType });\n      \n      // 保存到本地存储\n      this.saveToStorage();\n      \n      console.log('🔄 Custom type created from sync:', customType.id);\n    } catch (error) {\n      console.error('🔄 Failed to handle custom type create from sync:', error);\n    }\n  }\n\n  /**\n   * 🔄 NEW: 处理来自实时同步的所有自定义标注相关事件\n   * @param {Object} syncData - 同步数据\n   */\n  handleSyncEvent(syncData) {\n    if (!syncData || !syncData.type) {\n      console.warn('🔄 Invalid sync data received');\n      return;\n    }\n\n    console.log('🔄 Processing custom annotation sync event:', syncData.type);\n\n    switch (syncData.type) {\n      case 'CUSTOM_ANNOTATION_CREATE':\n        this.handleCustomAnnotationCreateFromSync(syncData);\n        break;\n      case 'CUSTOM_ANNOTATION_UPDATE':\n        this.handleCustomAnnotationUpdateFromSync(syncData);\n        break;\n      case 'CUSTOM_ANNOTATION_DELETE':\n        this.handleCustomAnnotationDeleteFromSync(syncData);\n        break;\n      case 'CUSTOM_TYPE_CREATE':\n        this.handleCustomTypeCreateFromSync(syncData);\n        break;\n      default:\n        console.warn('🔄 Unknown custom annotation sync event type:', syncData.type);\n    }\n  }\n}"],"names":["exports","constructor","this","customTypes","Map","customAnnotations","isEnabled","currentMode","selectedCustomType","config","maxCustomTypes","maxAnnotationsPerImage","minRegionSize","defaultPointRadius","defaultRegionStrokeWidth","realTimeSyncManager","eventHandlers","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","onModeChange","onTypeCreate","onTypeUpdate","onTypeDelete","loadFromStorage","ensureBuiltinRegularType","console","log","builtinId","has","builtinType","id","name","type","color","description","metadata","builtin","defaultAngle","isDirectional","createdAt","Date","toISOString","updatedAt","set","triggerEvent","createCustomType","typeData","Error","includes","size","customType","triggerCustomTypeCreateSync","timestamp","saveToStorage","triggerDatabaseAutoSave","updateCustomType","updateData","existingType","get","newId","newType","allowedUpdates","warn","updatedType","deleteCustomType","deleteAnnotationsByTypeId","delete","typeId","setNormalMode","getAllCustomTypes","Array","from","values","getCustomType","createCustomAnnotation","annotationData","x","y","width","height","imageId","undefined","imageAnnotations","length","order","getNextOrderNumber","annotation","generateAnnotationId","push","triggerCustomAnnotationCreateSync","getAnnotationsByImageId","deleteCustomAnnotation","annotationId","annotations","entries","index","findIndex","ann","deletedAnnotation","splice","triggerCustomAnnotationDeleteSync","deletedCount","originalLength","filtered","filter","setCustomAnnotationMode","mode","isInCustomMode","getCurrentCustomType","handleCanvasClick","clickData","success","reason","error","message","handleRegionDrag","dragData","startX","startY","endX","endY","Math","min","abs","relevantAnnotations","max","map","reorderAnnotations","typeAnnotations","sort","a","b","forEach","getAnnotationStats","stats","total","byType","orderRange","gaps","count","typeName","typeColor","annotationType","orders","i","findAnnotationByOrder","find","updateAnnotationOrder","newOrder","conflictAnnotation","oldOrder","triggerCustomAnnotationUpdateSync","orderChange","to","now","random","toString","substr","exportData","version","exportTime","importData","addEventListener","eventName","handler","removeEventListener","indexOf","data","setRealTimeSyncManager","context","isRealTimeSyncEnabled","appState","window","PlantAnnotationTool","currentPlant","currentImage","syncData","plantId","viewAngle","selectedViewAngle","triggerCustomAnnotationSync","getStats","totalTypes","totalAnnotations","annotatedImages","averageAnnotationsPerImage","toFixed","savedAt","localStorage","setItem","JSON","stringify","savedData","getItem","parse","clear","setTimeout","clearStorage","removeItem","annotationTool","autoSaveCurrentImage","getCustomAnnotationsForSave","loadCustomAnnotationsFromSave","savedCustomAnnotations","isArray","savedAnnotation","syncAnnotationsFromKeypoints","existingIndex","existing","annotationCopy","customTypeId","handleCustomAnnotationCreateFromSync","existingAnnotations","handleCustomAnnotationUpdateFromSync","handleCustomAnnotationDeleteFromSync","handleCustomTypeCreateFromSync","handleSyncEvent"],"mappings":"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"}