{"version":3,"mappings":"0xBASO,MAAMA,EAAsB,CACjC,aAAc,CACZ,KAAK,QAAU,4BACf,KAAK,YAAc,iDACnB,KAAK,cAAgB,GACrB,KAAK,WAAa,EAClB,KAAK,WAAa,IAClB,KAAK,kBAAoB,IACzB,KAAK,oBAAsB,EAC3B,KAAK,wBAA0B,GACnC,CAKE,MAAM,YAAa,CACjB,OAAO,KAAK,UAAU,SAAY,CAChC,MAAMC,EAAa,IAAI,gBACjBC,EAAY,WAAW,IAAMD,EAAW,MAAK,EAAI,KAAK,iBAAiB,EAE7E,GAAI,CACF,MAAME,EAAW,MAAM,MAAM,GAAG,YAAK,QAAO,WAAW,CACrD,OAAQF,EAAW,OACnB,QAAS,CAAE,gBAAiB,UAAU,CAChD,CAAS,EAID,GAFA,aAAaC,CAAS,EAElB,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAKnE,IAFe,MAAMA,EAAS,KAAI,GAEvB,QACT,YAAK,cAAgB,GACrB,KAAK,oBAAsB,KAAK,IAAG,EACnC,QAAQ,IAAI,6BAA6B,EAClC,GAGT,MAAM,IAAI,MAAM,+CAA+C,CACvE,OAAeC,EAAO,CAEd,MADA,aAAaF,CAAS,EAClBE,EAAM,OAAS,aACX,IAAI,MAAM,SAAS,YAAK,kBAAiB,MAAK,EAEhDA,CACd,CACA,EAAO,QAAQ,CACf,CAKE,OAAO,aAAc,CACnB,MAAO,EACX,CAKE,MAAM,UAAUC,EAAWC,EAAgB,KAAMC,EAAa,KAAK,WAAY,CAC7E,IAAIC,EAEJ,QAASC,EAAU,EAAGA,GAAWF,EAAYE,IAC3C,GAAI,CACF,OAAIA,EAAU,IACZ,QAAQ,IAAI,GAAG,OAAAH,EAAa,SAAQ,OAAAG,EAAU,EAAC,QAAO,EACtD,MAAM,KAAK,MAAM,KAAK,WAAaA,CAAO,GAGrC,MAAMJ,EAAS,CAC9B,OAAeD,EAAO,CAGd,GAFAI,EAAYJ,EAER,KAAK,kBAAkBA,CAAK,GAAKK,EAAUF,EAAY,CACzD,QAAQ,KAAK,GAAG,OAAAD,EAAa,YAAW,OAAAG,EAAO,KAAI,OAAAF,EAAU,MAAMH,EAAM,OAAO,EAChF,QACV,CAEQ,cAAQ,MAAM,GAAG,OAAAE,EAAa,UAAUF,CAAK,EACvCA,CACd,CAGI,MAAMI,CACV,CAKE,kBAAkBJ,EAAO,CACvB,OAAOA,EAAM,QAAQ,SAAS,iBAAiB,GACxCA,EAAM,QAAQ,SAAS,wBAAwB,GAC/CA,EAAM,QAAQ,SAAS,MAAM,GAC7BA,EAAM,QAAQ,SAAS,MAAM,GAC7BA,EAAM,OAAS,aAAeA,EAAM,QAAQ,SAAS,OAAO,CACvE,CAKE,MAAMM,EAAI,CACR,OAAO,IAAI,QAAQC,GAAW,WAAWA,EAASD,CAAE,CAAC,CACzD,CAKE,MAAM,iBAAkB,CACtB,MAAME,EAAM,KAAK,IAAG,EACpB,GAAIA,EAAM,KAAK,oBAAsB,KAAK,wBACxC,OAAO,KAAK,cAGd,GAAI,CACF,MAAMX,EAAa,IAAI,gBACvB,WAAW,IAAMA,EAAW,MAAK,EAAI,GAAI,EAOzC,MAAMY,GALW,MAAM,MAAM,GAAG,YAAK,QAAO,WAAW,CACrD,OAAQZ,EAAW,OACnB,QAAS,CAAE,gBAAiB,UAAU,CAC9C,CAAO,GAE4B,GAC7B,YAAK,cAAgBY,EACrB,KAAK,oBAAsBD,EAEpBC,CACb,OAAaT,EAAO,CACd,YAAK,cAAgB,GACrB,KAAK,oBAAsBQ,EACpB,EACb,CACA,CAKE,MAAM,gBAAiB,CACrB,aAAM,KAAK,iBAAgB,EAEpB,KAAK,UAAU,SAAY,CAChC,MAAMT,EAAW,MAAM,MAAM,GAAG,YAAK,QAAO,gBAAe,EAE3D,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QACT,OAAOA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,WAAW,CACjD,EAAO,SAAS,CAChB,CAKE,MAAM,kBAAmB,CACvB,GAAI,CAAE,MAAM,KAAK,gBAAe,EAC9B,MAAM,IAAI,MAAM,6CAA6C,CAEnE,CAKE,MAAM,0BAA2B,CAC/B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,UAAU,SAAY,CAChC,MAAMX,EAAW,MAAM,MAAM,GAAG,YAAK,QAAO,qBAAoB,EAEhE,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QACT,eAAQ,IAAI,MAAM,OAAAA,EAAO,KAAK,OAAM,YAAW,EACxCA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,WAAW,CACjD,EAAO,SAAS,CAChB,CAKE,MAAM,gBAAgBC,EAAS,CAC7B,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,UAAU,SAAY,CAChC,MAAMZ,EAAW,MAAM,MAAM,GAAG,YAAK,QAAO,kBAAiB,0BAAmBY,CAAO,EAAG,EAE1F,GAAI,CAACZ,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QAAS,CAClB,MAAME,EAAeF,EAAO,KAEtBG,EAAc,OAAO,OAAOD,CAAY,EAAE,OAAO,CAACE,EAAOC,IAAWD,EAAQC,EAAO,OAAQ,CAAC,EAClG,eAAQ,IAAI,MAAM,OAAAJ,EAAO,QAAO,OAAAE,EAAW,OAAM,EAE1CD,CACf,CAEM,MAAM,IAAI,MAAMF,EAAO,OAAS,UAAU,CAChD,EAAO,QAAQ,OAAAC,EAAO,MAAK,CAC3B,CAKE,YAAYA,EAASK,EAAWC,EAAW,CACzC,MAAO,GAAG,YAAK,QAAO,WAAU,OAAAN,EAAO,KAAI,OAAAK,EAAS,KAAI,OAAAC,EAC5D,CAKE,MAAM,eAAeC,EAAW,CAC9B,GAAI,CACF,QAAQ,IAAI,qBAAsBA,CAAS,EAG3C,MAAMC,EAAQD,EAAU,GAAG,MAAM,GAAG,EAGpC,GAFA,QAAQ,IAAI,YAAaC,CAAK,EAE1BA,EAAM,QAAU,EAAG,CACrB,MAAMR,EAAUQ,EAAM,CAAC,EACjBH,EAAYG,EAAM,CAAC,EACnBF,EAAYE,EAAM,MAAM,CAAC,EAAE,KAAK,GAAG,EAEnCC,EAAW,KAAK,YAAYT,EAASK,EAAWC,CAAS,EAC/D,eAAQ,IAAI,YAAaG,CAAQ,EAE1BA,CACf,CAEM,MAAM,IAAI,MAAM,kCAAkC,OAAAF,EAAU,GAAE,iDAAgD,CACpH,OAAalB,EAAO,CACd,cAAQ,MAAM,aAAa,OAAAkB,EAAU,KAAI,KAAKlB,CAAK,EACnD,QAAQ,MAAM,aAAckB,CAAS,EAC/BlB,CACZ,CACA,CAKE,MAAM,mBAAmBqB,EAASC,EAAgB,CAChD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,UAAU,EAE5B,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,UAAU,SAAY,CAChC,MAAMvB,EAAW,MAAM,MAAM,GAAG,YAAK,QAAO,gBAAe,0BAAmBsB,CAAO,GAAK,CACxF,OAAQ,OACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAU,CAAE,eAAAC,CAAc,CAAE,CAC/C,CAAO,EAED,GAAI,CAACvB,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QACT,eAAQ,IAAI,WAAW,OAAAW,EAAS,EACzB,GAGT,MAAM,IAAI,MAAMX,EAAO,OAAS,UAAU,CAChD,EAAO,UAAU,OAAAW,EAAS,CAC1B,CAKE,MAAM,mBAAmBA,EAAS,OAChC,GAAI,CAEF,MAAMX,EAAS,MADE,MAAM,MAAM,GAAG,YAAK,QAAO,gBAAe,OAAAW,EAAS,GACtC,KAAI,EAElC,GAAIX,EAAO,QACT,OAAIA,EAAO,MACT,QAAQ,IAAI,aAAa,OAAAW,EAAO,SAAQ,SAAAE,EAAAb,EAAO,KAAK,cAAZ,YAAAa,EAAyB,SAAU,EAAC,QAAO,EAE9Eb,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,eAAQ,MAAM,kBAAkB,OAAAqB,EAAO,MAAMrB,CAAK,EAC3C,IACb,CACA,CAKE,MAAM,uBAAwB,CAC5B,GAAI,CAEF,MAAMU,EAAS,MADE,MAAM,MAAM,GAAG,YAAK,QAAO,eAAc,GAC5B,KAAI,EAElC,GAAIA,EAAO,QACT,eAAQ,IAAI,gBAAgB,OAAAA,EAAO,KAAK,OAAM,SAAQ,EAC/CA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,YAAY,CAClD,OAAaV,EAAO,CACd,eAAQ,MAAM,mBAAoBA,CAAK,EAChC,EACb,CACA,CAKE,MAAM,qBAAqBqB,EAAS,CAClC,GAAI,CAKF,MAAMX,EAAS,MAJE,MAAM,MAAM,GAAG,YAAK,QAAO,gBAAe,OAAAW,GAAW,CACpE,OAAQ,QAChB,CAAO,GAE6B,KAAI,EAElC,GAAIX,EAAO,QACT,eAAQ,IAAI,WAAW,OAAAW,EAAS,EACzB,GAGT,MAAM,IAAI,MAAMX,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,eAAQ,MAAM,aAAa,OAAAqB,EAAO,MAAMrB,CAAK,EACtC,EACb,CACA,CAKE,MAAM,kBAAkBwB,EAAU,KAAM,CACtC,GAAI,CACF,MAAMC,EAAMD,EACV,GAAG,YAAK,QAAO,6BAA4B,0BAAmBA,CAAO,GACrE,GAAG,YAAK,QAAO,oBAGXd,EAAS,MADE,MAAM,MAAMe,CAAG,GACF,KAAI,EAElC,GAAIf,EAAO,QACT,OAAOA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,cAAQ,MAAM,YAAaA,CAAK,EAC1BA,CACZ,CACA,CAKE,YAAY0B,EAAU,CACpB,MAAMC,EAAkB,CAAC,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAO,EACpEC,EAAMF,EAAS,YAAW,EAAG,UAAUA,EAAS,YAAY,GAAG,CAAC,EACtE,OAAOC,EAAgB,SAASC,CAAG,CACvC,CAKE,mBAAmBF,EAAU,CAC3B,MAAMG,EAAQ,mDACRC,EAAQJ,EAAS,MAAMG,CAAK,EAElC,GAAIC,EAAO,CACT,MAAMC,EAAUD,EAAM,CAAC,EACjBE,EAAUF,EAAM,CAAC,EAEvB,OADiB,IAAI,KAAK,GAAG,OAAAC,EAAO,KAAI,OAAAC,EAAO,SAAQ,CAE7D,CAEI,eAAQ,KAAK,gBAAgB,OAAAN,EAAU,EAChC,IAAI,KAAK,CAAC,CACrB,CAKE,gBAAgBA,EAAU,CACxB,MAAMG,EAAQ,mDACRC,EAAQJ,EAAS,MAAMG,CAAK,EAElC,GAAIC,EAAO,CACT,MAAMC,EAAUD,EAAM,CAAC,EACjBE,EAAUF,EAAM,CAAC,EACjBG,EAAO,IAAI,KAAK,GAAG,OAAAF,EAAO,KAAI,OAAAC,EAAO,SAAQ,EAEnD,MAAO,GAAG,OAAAC,EAAK,YAAW,EAAE,KAAI,OAAAA,EAAK,SAAQ,EAAK,EAAC,KAAI,OAAAA,EAAK,QAAO,EACzE,CAEI,OAAOP,CACX,CAKE,MAAM,gBAAiB,CACrB,GAAI,CAEF,MAAMhB,EAAS,MADE,MAAM,MAAM,GAAG,YAAK,QAAO,aAAY,GAC1B,KAAI,EAElC,GAAIA,EAAO,QACT,OAAOA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,eAAQ,MAAM,YAAaA,CAAK,EACzB,EACb,CACA,CAKE,MAAM,YAAYW,EAAS,CACzB,GAAI,CAEF,MAAMD,EAAS,MADE,MAAM,MAAM,GAAG,YAAK,QAAO,eAAc,OAAAC,EAAS,GACrC,KAAI,EAElC,GAAID,EAAO,QACT,OAAOA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,eAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACvC,IACb,CACA,CAKE,MAAM,aAAaW,EAASuB,EAAU,CACpC,GAAI,CASF,MAAMxB,EAAS,MARE,MAAM,MAAM,GAAG,YAAK,QAAO,eAAc,OAAAC,GAAW,CACnE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAU,CAAE,SAAAuB,CAAQ,CAAE,CACzC,CAAO,GAE6B,KAAI,EAElC,GAAIxB,EAAO,QACT,eAAQ,IAAI,WAAW,OAAAC,EAAS,EACzB,GAGT,MAAM,IAAI,MAAMD,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACxCA,CACZ,CACA,CAKE,MAAM,eAAeW,EAAS,CAC5B,GAAI,CAKF,MAAMD,EAAS,MAJE,MAAM,MAAM,GAAG,YAAK,QAAO,eAAc,OAAAC,GAAW,CACnE,OAAQ,QAChB,CAAO,GAE6B,KAAI,EAElC,GAAID,EAAO,QACT,eAAQ,IAAI,WAAW,OAAAC,EAAS,EACzB,GAGT,MAAM,IAAI,MAAMD,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,eAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACvC,EACb,CACA,CAKE,MAAM,eAAeW,EAAS,SAC5B,GAAI,CACF,MAAMZ,EAAW,MAAM,MAAM,GAAG,YAAK,QAAO,kBAAiB,OAAAY,EAAS,EAChED,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QACT,eAAQ,IAAI,mBAAmB,OAAAC,EAAO,SAAQ,SAAAY,EAAAb,EAAO,OAAP,YAAAa,EAAa,SAAU,OAAQ,EACtEb,EAAO,KAIhB,GAAIX,EAAS,SAAW,MAAOoC,EAAAzB,EAAO,UAAP,MAAAyB,EAAgB,SAAS,OACtD,eAAQ,IAAI,aAAa,OAAAxB,EAAO,SAAQ,EACjC,KAGT,MAAM,IAAI,MAAMD,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,eAAQ,MAAM,QAAQ,OAAAW,EAAO,UAAUX,CAAK,EACrC,IACb,CACA,CAKE,MAAM,gBAAgBW,EAASyB,EAAQ,CACrC,GAAI,CAYF,MAAM1B,EAAS,MAXE,MAAM,MAAM,GAAG,YAAK,QAAO,kBAAiB,OAAAC,GAAW,CACtE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAU,CACnB,OAAAyB,EACA,aAAc,IAAI,KAAI,EAAG,YAAW,CAC9C,CAAS,CACT,CAAO,GAE6B,KAAI,EAElC,GAAI1B,EAAO,QACT,eAAQ,IAAI,eAAe,OAAAC,EAAO,SAAQ,OAAAyB,EAAQ,EAC3C,GAGT,MAAM,IAAI,MAAM1B,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,UAAUX,CAAK,EACtCA,CACZ,CACA,CAKE,MAAM,kBAAkBW,EAAS,CAC/B,GAAI,CAKF,MAAMD,EAAS,MAJE,MAAM,MAAM,GAAG,YAAK,QAAO,kBAAiB,OAAAC,GAAW,CACtE,OAAQ,QAChB,CAAO,GAE6B,KAAI,EAElC,GAAID,EAAO,QACT,eAAQ,IAAI,eAAe,OAAAC,EAAO,MAAK,EAChC,GAGT,MAAM,IAAI,MAAMD,EAAO,OAAS,UAAU,CAChD,OAAaV,EAAO,CACd,eAAQ,MAAM,QAAQ,OAAAW,EAAO,UAAUX,CAAK,EACrC,EACb,CACA,CAKE,SAAU,CACR,QAAQ,IAAI,4BAA4B,CAC5C,CAKE,yBAA0B,CACxB,OAAO,KAAK,cAAgB,CAAE,OAAQ,EAAI,EAAK,IACnD,CAKE,MAAM,4BAA6B,CAEjC,MAAO,CAAE,OAAQ,EAAI,CACzB,CACA,CC3mBO,MAAMqC,EAAyB,CACpC,aAAc,CACZ,KAAK,WAAa,4BAClB,KAAK,YAAc,IAAI,IACvB,KAAK,iBAAmB,IAAI,IAC5B,KAAK,cAAgB,GACrB,KAAK,kBAAoB,KACzB,KAAK,cAAgB,EACzB,CAKE,qBAAqBC,EAAmB,CAMtC,GALA,KAAK,kBAAoBA,EACzB,KAAK,cAAgB,CAAC,CAACA,EACvB,QAAQ,IAAI,gBAAgB,EAGxBA,EAAmB,CACrB,MAAMC,EAAoBD,EAAkB,wBAAuB,EACnE,QAAQ,IAAI,2CAA2C,OAAAC,EAAoB,KAAO,MAAO,CAC/F,CACA,CAKE,MAAM,YAAa,CACjB,GAAI,CACF,GAAI,KAAK,eAAiB,KAAK,kBAAmB,CAEhD,MAAM,KAAK,oBAAmB,EAC9B,QAAQ,IAAI,yCAAyC,EACrD,KAAK,cAAgB,GACrB,MACR,CAGM,GAAI,CACF,MAAM,KAAK,0BAAyB,EACpC,MAAM,KAAK,+BAA8B,EACzC,QAAQ,IAAI,wCAAwC,CAC5D,OAAeC,EAAa,CACpB,QAAQ,KAAK,+BAAgCA,EAAY,OAAO,EAEhE,KAAK,qBAAoB,EACzB,KAAK,qCAAoC,EACzC,QAAQ,IAAI,iDAAiD,CACrE,CAEM,KAAK,cAAgB,EAC3B,OAAaxC,EAAO,CACd,QAAQ,MAAM,gBAAiBA,CAAK,EACpC,KAAK,cAAgB,EAC3B,CACA,CAKE,MAAM,2BAA4B,CAChC,GAAI,CAEF,MAAMU,EAAS,MADE,MAAM,MAAM,GAAG,YAAK,WAAU,oBAAmB,GACpC,KAAI,EAElC,GAAIA,EAAO,SAAWA,EAAO,KAAM,CAEjC,SAAW,CAACC,EAASW,CAAc,IAAK,OAAO,QAAQZ,EAAO,KAAK,aAAe,EAAE,EAClF,KAAK,YAAY,IAAIC,EAASW,CAAc,EAG9C,eAAQ,IAAI,WAAW,YAAK,YAAY,KAAI,YAAW,EAChDZ,EAAO,IACtB,KACQ,OAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAElD,OAAaV,EAAO,CACd,eAAQ,KAAK,kCAAmCA,EAAM,OAAO,EAC7D,KAAK,qBAAoB,EAClB,CAAE,YAAa,EAAE,CAC9B,CACA,CAKE,MAAM,yBAA0B,CAC9B,GAAI,CACF,MAAMyC,EAAa,CACjB,SAAU,IAAI,KAAI,EAAG,YAAW,EAChC,YAAa,KAAK,YAAY,KAC9B,YAAa,EACrB,EAGM,SAAW,CAAC9B,EAASW,CAAc,IAAK,KAAK,YAC3CmB,EAAW,YAAY9B,CAAO,EAAIW,EAYpC,MAAMZ,EAAS,MARE,MAAM,MAAM,GAAG,YAAK,WAAU,qBAAqB,CAClE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAU+B,CAAU,CACvC,CAAO,GAE6B,KAAI,EAElC,GAAI/B,EAAO,QACT,eAAQ,IAAI,QAAQ,YAAK,YAAY,KAAI,gBAAe,EAExD,KAAK,mBAAkB,EAChB,GAEP,MAAM,IAAI,MAAMA,EAAO,OAAS,SAAS,CAEjD,OAAaV,EAAO,CACd,eAAQ,MAAM,gBAAiBA,CAAK,EAEpC,KAAK,mBAAkB,EAChB,EACb,CACA,CAKE,oBAAqB,CACnB,GAAI,CACF,MAAM0C,EAAO,GACb,SAAW,CAAC/B,EAASW,CAAc,IAAK,KAAK,YAC3CoB,EAAK/B,CAAO,EAAIW,EAElB,aAAa,QAAQ,2BAA4B,KAAK,UAAU,CAC9D,SAAU,IAAI,KAAI,EAAG,YAAW,EAChC,YAAaoB,CACrB,CAAO,CAAC,EACF,QAAQ,IAAI,sBAAsB,CACxC,OAAa1C,EAAO,CACd,QAAQ,MAAM,qBAAsBA,CAAK,CAC/C,CACA,CAKE,sBAAuB,CACrB,GAAI,CACF,MAAM2C,EAAS,aAAa,QAAQ,0BAA0B,EAC9D,GAAIA,EAAQ,CACV,MAAMD,EAAO,KAAK,MAAMC,CAAM,EAC9B,SAAW,CAAChC,EAASW,CAAc,IAAK,OAAO,QAAQoB,EAAK,aAAe,EAAE,EACtE,KAAK,YAAY,IAAI/B,CAAO,GAC/B,KAAK,YAAY,IAAIA,EAASW,CAAc,EAGhD,QAAQ,IAAI,sBAAsB,CAC1C,CACA,OAAatB,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,CACjD,CACA,CAKE,MAAM,qBAAqBW,EAASiC,EAAaC,EAAY,GAAI,WAC/D,MAAMvB,EAAiB,CACrB,QAAAX,EACA,YAAAiC,EACA,gBAAerB,EAAAsB,EAAU,gBAAV,YAAAtB,EAAyB,OAAQ,KAChD,oBAAmBY,EAAAU,EAAU,gBAAV,YAAAV,EAAyB,KAAM,KAClD,UAAWU,EAAU,mBAAqB,KAC1C,OAAQD,EAAY,OAAS,EAAI,YAAc,cAC/C,aAAc,IAAI,KAAI,EAAG,YAAW,EACpC,gBAAeE,EAAAD,EAAU,gBAAV,YAAAC,EAAyB,WAAY,KACpD,cAAeF,EAAY,OAG3B,eAAgBC,EAAU,gBAAkB,KAC5C,oBAAqB,CAAC,CAACA,EAAU,eAGjC,gBAAiBA,EAAU,iBAAmB,GAC9C,yBAA0BA,EAAU,0BAA4B,GAChE,mBAAoBA,EAAU,oBAAsB,EAC1D,EAEI,YAAK,YAAY,IAAIlC,EAASW,CAAc,EAG5C,MAAM,KAAK,wBAAuB,EAE3BA,CACX,CAKE,oBAAoBX,EAAS,CAC3B,MAAM+B,EAAO,KAAK,YAAY,IAAI/B,CAAO,EACzC,OAAO+B,EAAOA,EAAK,YAAc,EACrC,CAKE,eAAe/B,EAAS,CACtB,MAAM+B,EAAO,KAAK,YAAY,IAAI/B,CAAO,EACzC,OAAK+B,EAEEA,EAAK,YAAY,OAAS,EAAI,YAAc,cAFjC,SAGtB,CAKE,sBAAuB,CACrB,OAAO,MAAM,KAAK,KAAK,YAAY,KAAI,CAAE,CAC7C,CAKE,MAAM,aAAa/B,EAASoC,EAAU,CACpC,GAAI,CAEF,IAAIzB,EAAiB,KAAK,YAAY,IAAIX,CAAO,EAwBjD,GAvBKW,IACHA,EAAiB,CACf,QAAAX,EACA,YAAa,GACb,aAAc,IAAI,KAAI,EAAG,YAAW,EACpC,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,kBAAmB,KACnB,cAAe,KACf,gBAAiB,GACjB,yBAA0B,GAC1B,mBAAoB,EAC9B,GAIMW,EAAe,OAASyB,EAAS,OACjCzB,EAAe,WAAayB,EAAS,WACrCzB,EAAe,SAAWyB,EAAS,SACnCzB,EAAe,aAAeyB,EAAS,aAEvC,KAAK,YAAY,IAAIpC,EAASW,CAAc,EAGxC,KAAK,eAAiB,KAAK,kBAAkB,aAC/C,GAAI,CAEF,MAAM,KAAK,kBAAkB,aAAaX,EAASW,CAAc,EACjE,QAAQ,IAAI,MAAM,OAAAX,EAAO,cAAa,CAChD,OAAiBqC,EAAU,CACjB,QAAQ,KAAK,2BAA4BA,CAAQ,EACjD,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAArC,EAAO,wBAAuB,CAC1D,SACiB,KAAK,mBAAqB,KAAK,kBAAkB,wBAAuB,EACjF,GAAI,CAEF,MAAMsC,EAAW,GAAG,OAAAtC,EAAO,mBAGrBuC,EAAW,MADE,MADO,KAAK,kBAAkB,wBAAuB,EAC7B,cAAcD,EAAU,CAAE,OAAQ,GAAM,GACjD,eAAc,EAEhD,MAAMC,EAAS,MAAM,KAAK,UAAU5B,EAAgB,KAAM,CAAC,CAAC,EAC5D,MAAM4B,EAAS,MAAK,EAEpB,QAAQ,IAAI,MAAM,OAAAvC,EAAO,mBAAkB,OAAAsC,EAAU,CAC/D,OAAiBE,EAAS,CAChB,QAAQ,KAAK,6BAA8BA,CAAO,EAClD,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAAxC,EAAO,wBAAuB,CAC1D,MAGQ,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAAA,EAAO,wBAAuB,CAGxD,OAAaX,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACxCA,CACZ,CACA,CAKE,MAAM,eAAeW,EAAS,CAC5B,GAAI,CAEF,MAAMW,EAAiB,KAAK,YAAY,IAAIX,CAAO,EAcnD,GAbIW,IACF,OAAOA,EAAe,OACtB,OAAOA,EAAe,WACtB,OAAOA,EAAe,SACtBA,EAAe,aAAe,IAAI,KAAI,EAAG,YAAW,GAGhD,CAACA,EAAe,aAAeA,EAAe,YAAY,SAAW,IACvE,KAAK,YAAY,OAAOX,CAAO,GAK/B,KAAK,eAAiB,KAAK,kBAAkB,eAC/C,GAAI,CAEF,MAAM,KAAK,kBAAkB,eAAeA,CAAO,EACnD,QAAQ,IAAI,MAAM,OAAAA,EAAO,cAAa,CAChD,OAAiBqC,EAAU,CACjB,QAAQ,KAAK,2BAA4BA,CAAQ,EACjD,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAArC,EAAO,wBAAuB,CAC1D,SACiB,KAAK,mBAAqB,KAAK,kBAAkB,wBAAuB,EACjF,GAAI,CAEF,MAAMsC,EAAW,GAAG,OAAAtC,EAAO,mBACrB4B,EAAoB,KAAK,kBAAkB,wBAAuB,EAExE,GAAI,CACF,MAAMA,EAAkB,YAAYU,CAAQ,EAC5C,QAAQ,IAAI,MAAM,OAAAtC,EAAO,gBAAe,OAAAsC,EAAU,CAC9D,OAAmBG,EAAa,CAEpB,GAAIA,EAAY,OAAS,gBACvB,MAAMA,EAER,QAAQ,IAAI,MAAM,OAAAzC,EAAO,kBAAiB,CACtD,CACA,OAAiBwC,EAAS,CAChB,QAAQ,KAAK,6BAA8BA,CAAO,EAClD,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAAxC,EAAO,wBAAuB,CAC1D,MAGQ,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAAA,EAAO,wBAAuB,CAGxD,OAAaX,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACxCA,CACZ,CACA,CAKE,MAAM,gBAAgBW,EAASyB,EAAQ,CACrC,GAAI,CAEF,IAAId,EAAiB,KAAK,YAAY,IAAIX,CAAO,EAsBjD,GArBKW,IACHA,EAAiB,CACf,QAAAX,EACA,YAAa,GACb,aAAc,IAAI,KAAI,EAAG,YAAW,EACpC,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,kBAAmB,KACnB,cAAe,KACf,gBAAiB,GACjB,yBAA0B,GAC1B,mBAAoB,EAC9B,GAIMW,EAAe,OAASc,EACxBd,EAAe,aAAe,IAAI,KAAI,EAAG,YAAW,EAEpD,KAAK,YAAY,IAAIX,EAASW,CAAc,EAGxC,KAAK,eAAiB,KAAK,kBAAkB,gBAC/C,GAAI,CAEF,MAAM,KAAK,kBAAkB,gBAAgBX,EAASyB,CAAM,EAC5D,QAAQ,IAAI,MAAM,OAAAzB,EAAO,QAAO,OAAAyB,EAAM,aAAY,CAC5D,OAAiBY,EAAU,CACjB,QAAQ,KAAK,gCAAiCA,CAAQ,EACtD,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAArC,EAAO,sBAAqB,CACxD,SACiB,KAAK,mBAAqB,KAAK,kBAAkB,wBAAuB,EACjF,GAAI,CAEF,MAAMsC,EAAW,GAAG,OAAAtC,EAAO,gBAGrBuC,EAAW,MADE,MADO,KAAK,kBAAkB,wBAAuB,EAC7B,cAAcD,EAAU,CAAE,OAAQ,GAAM,GACjD,eAAc,EAE1CI,EAAa,CACjB,QAAA1C,EACA,OAAAyB,EACA,aAAc,IAAI,KAAI,EAAG,YAAW,EACpC,UAAW,IAAI,KAAI,EAAG,YAAW,CAC7C,EAEU,MAAMc,EAAS,MAAM,KAAK,UAAUG,EAAY,KAAM,CAAC,CAAC,EACxD,MAAMH,EAAS,MAAK,EAEpB,QAAQ,IAAI,MAAM,OAAAvC,EAAO,QAAO,OAAAyB,EAAM,eAAc,OAAAa,EAAU,CACxE,OAAiBE,EAAS,CAChB,QAAQ,KAAK,+BAAgCA,CAAO,EACpD,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAAxC,EAAO,sBAAqB,CACxD,MAGQ,KAAK,mBAAkB,EACvB,QAAQ,IAAI,MAAM,OAAAA,EAAO,QAAO,OAAAyB,EAAM,oBAAmB,EAG3D,QAAQ,IAAI,UAAU,OAAAzB,EAAO,MAAK,OAAAyB,EAAM,YAAW,CAEzD,OAAapC,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,UAAUX,CAAK,EACtCA,CACZ,CACA,CAKE,MAAM,gBAAgBW,EAAS,OAC7B,GAAI,CACF,QAAQ,IAAI,gBAAgB,OAAAA,EAAO,WAAU,EAC7C,QAAQ,IAAI,yBAAyB,YAAK,cAAa,2BAA0B,QAAC,CAAC,KAAK,kBAAmB,EAG3G,MAAM2C,EAAe,KAAK,YAAY,IAAI3C,CAAO,EACjD,GAAI2C,GAAgBA,EAAa,OAC/B,eAAQ,IAAI,UAAU,OAAA3C,EAAO,cAAa,OAAA2C,EAAa,OAAQ,EACxDA,EAAa,OAItB,GAAI,KAAK,eAAiB,KAAK,kBAAkB,eAC/C,GAAI,CACF,QAAQ,IAAI,uBAAuB,OAAA3C,EAAO,SAAQ,EAClD,MAAM0C,EAAa,MAAM,KAAK,kBAAkB,eAAe1C,CAAO,EAEtE,GADA,QAAQ,IAAI,kBAAmB0C,CAAU,EACrCA,GAAcA,EAAW,OAC3B,eAAQ,IAAI,UAAU,OAAA1C,EAAO,iBAAgB,OAAA0C,EAAW,OAAQ,EACzDA,EAAW,MAE9B,OAAiBL,EAAU,CACjB,QAAQ,KAAK,cAAc,OAAArC,EAAO,UAAUqC,CAAQ,CAC9D,MAEQ,QAAQ,IAAI,iCAAiC,YAAK,cAAa,uBAAsB,QAAC,GAACzB,EAAA,KAAK,oBAAL,MAAAA,EAAwB,gBAAgB,EAIjI,GAAI,KAAK,eAAiB,KAAK,kBAAkB,YAC/C,GAAI,CACF,MAAMmB,EAAO,MAAM,KAAK,kBAAkB,YAAY/B,CAAO,EAC7D,GAAI+B,GAAQA,EAAK,OACf,eAAQ,IAAI,UAAU,OAAA/B,EAAO,yBAAwB,OAAA+B,EAAK,OAAM,UAAS,EAClEA,EAAK,MAExB,OAAiBa,EAAW,CAClB,QAAQ,KAAK,sBAAsB,OAAA5C,EAAO,UAAU4C,CAAS,CACvE,SACiB,KAAK,mBAAqB,KAAK,kBAAkB,wBAAuB,EACjF,GAAI,CAEF,MAAMN,EAAW,GAAG,OAAAtC,EAAO,gBAIrB6C,EAAU,MADH,MADM,MADO,KAAK,kBAAkB,wBAAuB,EAC7B,cAAcP,CAAQ,GACnC,QAAO,GACV,KAAI,EACzBI,EAAa,KAAK,MAAMG,CAAO,EAErC,GAAIH,EAAW,OACb,eAAQ,IAAI,UAAU,OAAA1C,EAAO,gBAAe,OAAA0C,EAAW,OAAQ,EACxDA,EAAW,MAE9B,OAAiBF,EAAS,CAEhB,QAAQ,IAAI,UAAU,OAAAxC,EAAO,iBAAgB,CACvD,CAIM,GAAI,CACF,MAAM8C,EAAY,aAAa,QAAQ,kBAAkB,EACzD,GAAIA,EAAW,CACb,MAAMC,EAAS,KAAK,MAAMD,CAAS,EACnC,GAAIC,EAAO/C,CAAO,GAAK+C,EAAO/C,CAAO,EAAE,OACrC,eAAQ,IAAI,UAAU,OAAAA,EAAO,wBAAuB,OAAA+C,EAAO/C,CAAO,EAAE,OAAQ,EACrE+C,EAAO/C,CAAO,EAAE,MAEnC,CACA,OAAegD,EAAY,CACnB,QAAQ,KAAK,uBAAwBA,CAAU,CACvD,CAGM,eAAQ,IAAI,UAAU,OAAAhD,EAAO,aAAY,EAClC,IAEb,OAAaX,EAAO,CACd,eAAQ,MAAM,QAAQ,OAAAW,EAAO,UAAUX,CAAK,EACrC,IACb,CACA,CAKE,eAAeW,EAAS,CACtB,MAAM+B,EAAO,KAAK,YAAY,IAAI/B,CAAO,EACzC,OAAO+B,GAAQA,EAAK,YAAY,OAAS,CAC7C,CAKE,MAAM,uBAAuB/B,EAAS,CACpC,KAAK,YAAY,OAAOA,CAAO,EAC/B,MAAM,KAAK,wBAAuB,CACtC,CAKE,mBAAmBiD,EAAa,CAC9B,MAAMC,EAAiB,KAAK,qBAAoB,EAAG,OAC7CC,EAAiB,MAAM,KAAK,KAAK,YAAY,OAAM,CAAE,EACxD,OAAOpB,GAAQA,EAAK,YAAY,OAAS,CAAC,EAAE,OAE/C,MAAO,CACL,MAAOkB,EACP,UAAWC,EACX,UAAWC,EACX,QAASF,EAAcC,EACvB,eAAgBD,EAAc,GAAKE,EAAiBF,EAAc,KAAK,QAAQ,CAAC,EAAI,CAC1F,CACA,CAKE,sBAAuB,CACrB,MAAMnB,EAAa,CACjB,WAAY,IAAI,KAAI,EAAG,YAAW,EAClC,QAAS,MACT,YAAa,KAAK,YAAY,KAC9B,YAAa,EACnB,EAEI,SAAW,CAAC9B,EAASW,CAAc,IAAK,KAAK,YAC3CmB,EAAW,YAAY9B,CAAO,EAAI,CAChC,GAAGW,EACH,WAAY,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,OAAOmB,CACX,CAKE,2BAA4B,CAC1B,MAAMA,EAAa,KAAK,qBAAoB,EAEtCsB,EAAO,IAAI,KAAK,CAAC,KAAK,UAAUtB,EAAY,KAAM,CAAC,CAAC,EAAG,CAC3D,KAAM,kBACZ,CAAK,EAEKhB,EAAM,IAAI,gBAAgBsC,CAAI,EAC9BC,EAAI,SAAS,cAAc,GAAG,EACpC,OAAAA,EAAE,KAAOvC,EACTuC,EAAE,SAAW,qBAAqB,WAAI,KAAI,EAAG,YAAW,EAAG,MAAM,GAAG,EAAE,CAAC,EAAC,SAExE,SAAS,KAAK,YAAYA,CAAC,EAC3BA,EAAE,MAAK,EACP,SAAS,KAAK,YAAYA,CAAC,EAE3B,IAAI,gBAAgBvC,CAAG,EAEhBgB,CACX,CAME,MAAM,4BAA6B,CACjC,MAAMwB,EAAuB,GAG7B,SAAW,CAAC5C,EAASC,CAAc,IAAK,KAAK,iBACvCA,EAAe,aAAeA,EAAe,YAAY,OAAS,IACpE2C,EAAqB5C,CAAO,EAAIC,EAAe,YAAY,IAAI4C,IAAe,CAC5E,GAAIA,EAAW,GACf,EAAGA,EAAW,EACd,EAAGA,EAAW,EACd,UAAWA,EAAW,UACtB,UAAWA,EAAW,WAAa,QACnC,MAAOA,EAAW,OAAS,CACrC,EAAU,GAIN,eAAQ,IAAI,MAAM,cAAO,KAAKD,CAAoB,EAAE,OAAM,cAAa,EAChEA,CACX,CAKE,MAAM,oCAAqC,CACzC,MAAME,EAAkB,MAAM,KAAK,2BAA0B,EACvDC,EAAQ,KAAK,wBAAwBD,CAAe,EAEpD1B,EAAa,CACjB,WAAY,IAAI,KAAI,EAAG,YAAW,EAClC,QAAS,MACT,OAAQ,yBACR,YAAa,yBACb,MAAO,CACL,YAAa2B,EAAM,YACnB,gBAAiBA,EAAM,gBACvB,eAAgBA,EAAM,eACtB,eAAgBA,EAAM,cAC9B,EACM,YAAaD,CACnB,EAEUJ,EAAO,IAAI,KAAK,CAAC,KAAK,UAAUtB,EAAY,KAAM,CAAC,CAAC,EAAG,CAC3D,KAAM,kBACZ,CAAK,EAEKhB,EAAM,IAAI,gBAAgBsC,CAAI,EAC9BC,EAAI,SAAS,cAAc,GAAG,EACpC,OAAAA,EAAE,KAAOvC,EACTuC,EAAE,SAAW,0BAA0B,WAAI,KAAI,EAAG,YAAW,EAAG,MAAM,GAAG,EAAE,CAAC,EAAC,SAE7E,SAAS,KAAK,YAAYA,CAAC,EAC3BA,EAAE,MAAK,EACP,SAAS,KAAK,YAAYA,CAAC,EAE3B,IAAI,gBAAgBvC,CAAG,EAEvB,QAAQ,IAAI,OAAO,OAAA2C,EAAM,gBAAe,kBAAiB,OAAAA,EAAM,eAAc,QAAO,EAE7E3B,CACX,CAKE,wBAAwB0B,EAAiB,CACvC,MAAMtD,EAAc,OAAO,KAAKsD,CAAe,EAAE,OACjD,IAAIE,EAAiB,EAErB,UAAWzB,KAAe,OAAO,OAAOuB,CAAe,EACrDE,GAAkBzB,EAAY,OAGhC,MAAO,CACL,YAAA/B,EACA,gBAAiBA,EACjB,eAAAwD,EACA,yBAA0BxD,EAAc,GAAKwD,EAAiBxD,GAAa,QAAQ,CAAC,EAAI,EACxF,eAAgB,OACtB,CACA,CAKE,qBAAqByD,EAAmB,CACtC,KAAK,kBAAoBA,CAC7B,CAKE,MAAM,qBAAsB,CAC1B,KAAK,YAAY,MAAK,EACtB,MAAM,KAAK,wBAAuB,CACtC,CAKE,YAAa,CACX,MAAMC,EAAU,CACd,iBAAkB,KAAK,YAAY,KACnC,gBAAiB,EACjB,eAAgB,EAChB,aAAc,IACpB,EAEI,SAAW,CAAC5D,EAAS+B,CAAI,IAAK,KAAK,YAC7BA,EAAK,YAAY,OAAS,IAC5B6B,EAAQ,kBACRA,EAAQ,gBAAkB7B,EAAK,YAAY,QAEvC,CAAC6B,EAAQ,cAAgB7B,EAAK,aAAe6B,EAAQ,gBACvDA,EAAQ,aAAe7B,EAAK,eAKlC,OAAO6B,CACX,CAKE,sBAAsBD,EAAmB,CACvC,SAAW,CAAC3D,EAAS+B,CAAI,IAAK,KAAK,YACjC,GAAIA,EAAK,qBAAuBA,EAAK,eACnC,GAAI,CAEF,KAAK,2BAA2B4B,EAAmB3D,EAAS+B,CAAI,EAChE,QAAQ,IAAI,QAAQ,OAAA/B,EAAO,WAAU,CAC/C,OAAiBX,EAAO,CACd,QAAQ,MAAM,QAAQ,OAAAW,EAAO,cAAcX,CAAK,CAC1D,CAGA,CAKE,2BAA2BsE,EAAmB3D,EAASW,EAAgB,CACrE,KAAM,CAAE,eAAAkD,EAAgB,UAAAxD,CAAS,EAAKM,EAEtC,GAAI,CAACkD,GAAkB,CAACxD,EAAW,OAG9BsD,EAAkB,cAAc,IAAI3D,CAAO,GAC9C2D,EAAkB,cAAc,IAAI3D,EAAS,IAAI,GAAK,EAGnD2D,EAAkB,sBAAsB,IAAI3D,CAAO,GACtD2D,EAAkB,sBAAsB,IAAI3D,EAAS,IAAI,GAAK,EAIhE,MAAM8D,EAAWD,EAAe,eAAe,IAAIE,GAAQA,EAAK,OAAO,EACvEJ,EAAkB,cAAc,IAAI3D,CAAO,EAAE,IAAIK,EAAWyD,CAAQ,EAGpE,MAAME,EAAkB,IAAI,IAC5B,UAAWD,KAAQF,EAAe,eAChCG,EAAgB,IAAID,EAAK,QAAS,CAChC,YAAaA,EAAK,YAClB,UAAWA,EAAK,SAAS,UACzB,mBAAoBA,EAAK,SAAS,mBAClC,cAAeA,EAAK,SAAS,aACrC,CAAO,EAGHJ,EAAkB,sBAAsB,IAAI3D,CAAO,EAAE,IAAIK,EAAW2D,CAAe,EAGnF,MAAMC,EAAgB,GAAG,OAAAjE,EAAO,KAAI,OAAAK,GAC/BsD,EAAkB,kBAAkB,IAAIM,CAAa,GACxDN,EAAkB,kBAAkB,IAAIM,EAAe,IAAI,GAAK,EAGlE,MAAMC,EAAoBP,EAAkB,kBAAkB,IAAIM,CAAa,EAC/E,UAAWF,KAAQF,EAAe,eAC5BE,EAAK,SAAS,oBAChBG,EAAkB,IAAIH,EAAK,OAAO,CAG1C,CAKE,yBAAyB/D,EAAS,CAChC,MAAM+B,EAAO,KAAK,YAAY,IAAI/B,CAAO,EACzC,OAAO+B,GAAA,YAAAA,EAAM,2BAA4B,EAC7C,CAKE,0BAA0B/B,EAAS,CACjC,MAAM+B,EAAO,KAAK,YAAY,IAAI/B,CAAO,EACzC,GAAI,CAAC+B,EAAM,OAAO,KAElB,MAAM6B,EAAU,CACd,QAAA5D,EACA,OAAQ+B,EAAK,OACb,aAAcA,EAAK,aACnB,kBAAmBA,EAAK,UACxB,oBAAqBA,EAAK,iBAAmB,GAC7C,oBAAqBA,EAAK,oBAC1B,iBAAkB,CAChB,UAAWA,EAAK,cAChB,QAASA,EAAK,kBACd,SAAUA,EAAK,aACvB,CACA,EAGI,OAAIA,EAAK,iBACP6B,EAAQ,gBAAkB,CACxB,YAAa7B,EAAK,eAAe,YACjC,gBAAiBA,EAAK,eAAe,eAAe,OACpD,kBAAmBA,EAAK,eAAe,eAAe,OACpDgC,GAAQA,EAAK,SAAS,kBAChC,EAAU,MACV,GAGWH,CACX,CAKE,MAAM,oBAAoBlD,EAASC,EAAgB,CAEjD,GAAI,KAAK,cACP,GAAI,CAEF,GADgB,MAAM,KAAK,gCAAgCD,EAASC,CAAc,EAEhF,eAAQ,IAAI,UAAU,OAAAD,EAAO,cAAa,EAE1C,KAAK,iBAAiB,IAAIA,EAASC,CAAc,EAEjD,KAAK,mCAAkC,EAChC,EAEjB,OAAetB,EAAO,CACd,QAAQ,MAAM,QAAQ,OAAAqB,EAAO,iBAAiBrB,CAAK,CAC3D,MAGM,KAAK,iBAAiB,IAAIqB,EAASC,CAAc,EAInD,GAAI,CAYF,MAAMZ,EAAS,MAXE,MAAM,MAAM,GAAG,YAAK,WAAU,0BAA0B,CACvE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAU,CACnB,QAAAW,EACA,eAAAC,CACV,CAAS,CACT,CAAO,GAE6B,KAAI,EAElC,GAAIZ,EAAO,QACT,eAAQ,IAAI,UAAU,OAAAW,EAAO,aAAY,EAEzC,KAAK,mCAAkC,EAChC,GAEP,MAAM,IAAI,MAAMX,EAAO,OAAS,SAAS,CAEjD,OAAaV,EAAO,CACd,eAAQ,MAAM,QAAQ,OAAAqB,EAAO,gBAAgBrB,CAAK,EAElD,KAAK,mCAAkC,EAChC,EACb,CACA,CAKE,MAAM,mBAAmBqB,EAAS,OAEhC,GAAI,KAAK,eAAiB,KAAK,kBAC7B,GAAI,CACF,MAAMC,EAAiB,MAAM,KAAK,kBAAkB,mBAAmBD,CAAO,EAC9E,OAAIC,GACF,QAAQ,IAAI,aAAa,OAAAD,EAAO,MAAK,SAAAE,EAAAD,EAAe,cAAf,YAAAC,EAA4B,SAAU,EAAC,QAAO,EAE9ED,CACf,OAAetB,EAAO,CACd,eAAQ,KAAK,gBAAgB,OAAAqB,EAAO,MAAMrB,CAAK,EACxC,IACf,CAII,OAAO,KAAK,iBAAiB,IAAIqB,CAAO,GAAK,IACjD,CAKE,MAAM,gCAAiC,CACrC,GAAI,CAEF,MAAMX,EAAS,MADE,MAAM,MAAM,GAAG,YAAK,WAAU,0BAAyB,GAC1C,KAAI,EAElC,GAAIA,EAAO,SAAWA,EAAO,KAAM,CAEjC,SAAW,CAACW,EAASC,CAAc,IAAK,OAAO,QAAQZ,EAAO,KAAK,kBAAoB,EAAE,EACvF,KAAK,iBAAiB,IAAIW,EAASC,CAAc,EAGnD,eAAQ,IAAI,WAAW,YAAK,iBAAiB,KAAI,YAAW,EACrDZ,EAAO,IACtB,KACQ,gBAAQ,IAAI,kBAAkB,EACvB,CAAE,iBAAkB,EAAE,CAErC,OAAaV,EAAO,CACd,eAAQ,KAAK,oCAAqCA,EAAM,OAAO,EAC/D,KAAK,qCAAoC,EAClC,CAAE,iBAAkB,EAAE,CACnC,CACA,CAKE,oCAAqC,CACnC,GAAI,CACF,MAAM0C,EAAO,GACb,SAAW,CAACrB,EAASC,CAAc,IAAK,KAAK,iBAC3CoB,EAAKrB,CAAO,EAAIC,EAElB,aAAa,QAAQ,2BAA4B,KAAK,UAAU,CAC9D,SAAU,IAAI,KAAI,EAAG,YAAW,EAChC,iBAAkBoB,CAC1B,CAAO,CAAC,EACF,QAAQ,IAAI,wBAAwB,CAC1C,OAAa1C,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,CACnD,CACA,CAKE,sCAAuC,CACrC,GAAI,CACF,MAAM2C,EAAS,aAAa,QAAQ,0BAA0B,EAC9D,GAAIA,EAAQ,CACV,MAAMD,EAAO,KAAK,MAAMC,CAAM,EAC9B,SAAW,CAACtB,EAASC,CAAc,IAAK,OAAO,QAAQoB,EAAK,kBAAoB,EAAE,EAC3E,KAAK,iBAAiB,IAAIrB,CAAO,GACpC,KAAK,iBAAiB,IAAIA,EAASC,CAAc,EAGrD,QAAQ,IAAI,0BAA0B,CAC9C,CACA,OAAatB,EAAO,CACd,QAAQ,MAAM,2BAA4BA,CAAK,CACrD,CACA,CAKE,2BAA4B,CAC1B,MAAMyC,EAAa,CACjB,WAAY,IAAI,KAAI,EAAG,YAAW,EAClC,QAAS,MACT,OAAQ,2BACR,YAAa,KAAK,iBAAiB,KACnC,YAAa,EACnB,EAEI,SAAW,CAACpB,EAASC,CAAc,IAAK,KAAK,iBACvCA,EAAe,aAAeA,EAAe,YAAY,OAAS,IACpEmB,EAAW,YAAYpB,CAAO,EAAIC,EAAe,aAIrD,OAAOmB,CACX,CAKE,yBAA0B,CACxB,IAAIqC,EAAkB,EAClBT,EAAiB,EAErB,SAAW,CAAChD,EAASC,CAAc,IAAK,KAAK,iBACvCA,EAAe,aAAeA,EAAe,YAAY,OAAS,IACpEwD,IACAT,GAAkB/C,EAAe,YAAY,QAIjD,MAAO,CACL,YAAa,KAAK,iBAAiB,KACnC,gBAAAwD,EACA,eAAAT,EACA,yBAA0BS,EAAkB,GAAKT,EAAiBS,GAAiB,QAAQ,CAAC,EAAI,CACtG,CACA,CAKE,MAAM,+BAAgC,OACpC,GAAI,CAAC,KAAK,kBACR,MAAM,IAAI,MAAM,YAAY,EAG9B,QAAQ,IAAI,kBAAkB,EAE9B,GAAI,CACF,MAAML,EAAW,MAAM,KAAK,kBAAkB,sBAAqB,EACnE,QAAQ,IAAI,MAAM,OAAAA,EAAS,OAAM,WAAWA,CAAQ,EAEpD,IAAIM,EAAc,EAClB,UAAW1D,KAAWoD,EACpB,GAAI,CACF,MAAMnD,EAAiB,MAAM,KAAK,kBAAkB,mBAAmBD,CAAO,EAC1EC,IACF,KAAK,iBAAiB,IAAID,EAASC,CAAc,EACjDyD,IACA,QAAQ,IAAI,aAAa,OAAA1D,EAAO,SAAQ,SAAAE,EAAAD,EAAe,cAAf,YAAAC,EAA4B,SAAU,EAAC,QAAO,EAElG,OAAiBvB,EAAO,CACd,QAAQ,MAAM,aAAa,OAAAqB,EAAO,MAAMrB,CAAK,CACvD,CAGM,QAAQ,IAAI,YAAY,OAAA+E,EAAW,iBAAgB,YAAK,iBAAiB,KAAI,WAAU,CAC7F,OAAa/E,EAAO,CACd,cAAQ,MAAM,iBAAkBA,CAAK,EAC/BA,CACZ,CACA,CAKE,MAAM,gCAAgCqB,EAASC,EAAgB,CAC7D,GAAI,CAAC,KAAK,kBACR,eAAQ,KAAK,qBAAqB,EAC3B,GAGT,GAAI,CACF,aAAM,KAAK,kBAAkB,mBAAmBD,EAASC,CAAc,EAChE,EACb,OAAatB,EAAO,CACd,eAAQ,MAAM,gBAAgB,OAAAqB,EAAO,MAAMrB,CAAK,EACzC,EACb,CACA,CAKE,MAAM,oCAAoCqB,EAAS,CACjD,GAAI,CAAC,KAAK,kBACR,MAAO,GAGT,GAAI,CACF,OAAO,MAAM,KAAK,kBAAkB,qBAAqBA,CAAO,CACtE,OAAarB,EAAO,CACd,eAAQ,MAAM,gBAAgB,OAAAqB,EAAO,MAAMrB,CAAK,EACzC,EACb,CACA,CAKE,MAAM,qBAAsB,CAC1B,GAAK,KAAK,kBAIV,GAAI,CACF,MAAMyE,EAAW,MAAM,KAAK,kBAAkB,sBAAqB,EAEnE,QAAQ,IAAI,gBAAgB,OAAAA,EAAS,OAAM,SAAQ,EAGnD,MAAM,KAAK,kBAAiB,CAClC,OAAazE,EAAO,CACd,QAAQ,MAAM,iBAAkBA,CAAK,CAC3C,CACA,CAKE,MAAM,mBAAoB,CACxB,GAAK,KAAK,kBAIV,GAAI,CACF,GAAI,KAAK,eAAiB,KAAK,kBAAkB,eAAgB,CAE/D,MAAMgF,EAAe,MAAM,KAAK,kBAAkB,eAAc,EAEhE,IAAIC,EAAgB,EACpB,SAAW,CAACtE,EAASuB,CAAQ,IAAK,OAAO,QAAQ8C,CAAY,EAC3D,KAAK,YAAY,IAAIrE,EAASuB,CAAQ,EACtC+C,IACA,QAAQ,IAAI,gBAAgB,OAAAtE,EAAO,OAAM,OAAAuB,EAAS,WAAY,EAG5D+C,EAAgB,GAClB,QAAQ,IAAI,aAAa,OAAAA,EAAa,YAAW,CAE3D,KAAa,CAEL,MAAM1C,EAAoB,KAAK,kBAAkB,wBAAuB,EACxE,GAAI,CAACA,EACH,OAGF,IAAI0C,EAAgB,EACpB,eAAiB,CAACC,EAAMC,CAAM,IAAK5C,EAAkB,QAAO,EAC1D,GAAI4C,EAAO,OAAS,QAAUD,EAAK,SAAS,iBAAiB,EAC3D,GAAI,CAEF,MAAM1B,EAAU,MADH,MAAM2B,EAAO,QAAO,GACN,KAAI,EACzBjD,EAAW,KAAK,MAAMsB,CAAO,EAGnC,KAAK,YAAY,IAAItB,EAAS,QAASA,CAAQ,EAC/C+C,IAEA,QAAQ,IAAI,gBAAgB,OAAA/C,EAAS,QAAO,OAAM,OAAAA,EAAS,WAAY,CACrF,OAAqBlC,EAAO,CACd,QAAQ,KAAK,oBAAoB,OAAAkF,EAAI,MAAMlF,CAAK,CAC9D,CAIYiF,EAAgB,GAClB,QAAQ,IAAI,aAAa,OAAAA,EAAa,YAAW,CAE3D,CACA,OAAajF,EAAO,CACd,QAAQ,MAAM,mBAAoBA,CAAK,CAC7C,CACA,CACA,CC3oCO,MAAMoF,EAA4B,CACvC,aAAc,CAEZ,KAAK,sBAAwB,IAAI,IAEjC,KAAK,cAAgB,IAAI,IAEzB,KAAK,kBAAoB,IAAI,GACjC,CAKE,0BAA0BzE,EAASK,EAAWD,EAAQ,CAKpD,MAAM0D,EADe1D,EAAO,KAAK,CAACiD,EAAGqB,IAAMrB,EAAE,SAAWqB,EAAE,QAAQ,EACpC,IAAIC,GAAOA,EAAI,EAAE,EAG/C,OAAK,KAAK,cAAc,IAAI3E,CAAO,GACjC,KAAK,cAAc,IAAIA,EAAS,IAAI,GAAK,EAE3C,KAAK,cAAc,IAAIA,CAAO,EAAE,IAAIK,EAAWyD,CAAQ,EAGlD,KAAK,sBAAsB,IAAI9D,CAAO,GACzC,KAAK,sBAAsB,IAAIA,EAAS,IAAI,GAAK,EAE9C,KAAK,sBAAsB,IAAIA,CAAO,EAAE,IAAIK,CAAS,GACxD,KAAK,sBAAsB,IAAIL,CAAO,EAAE,IAAIK,EAAW,IAAI,GAAK,EAGlE,QAAQ,IAAI,SAAS,OAAAL,EAAO,QAAO,OAAAK,EAAS,aAAY,OAAAyD,EAAS,OAAM,QAAO,EAEvE,CACL,QAAA9D,EACA,UAAAK,EACA,SAAAyD,EACA,YAAaA,EAAS,OACtB,aAAcA,EAAS,CAAC,EACxB,YAAaA,EAASA,EAAS,OAAS,CAAC,CAC/C,CACA,CAKE,gBAAgB9D,EAASK,EAAWK,EAASuB,EAAa2C,EAAqB,GAAO,OACpF,MAAMC,EAAmB,KAAK,sBAAsB,IAAI7E,CAAO,EAC/D,GAAI,CAAC6E,EACH,MAAM,IAAI,MAAM,MAAM,OAAA7E,EAAO,QAAO,EAGtC,MAAMgE,EAAkBa,EAAiB,IAAIxE,CAAS,EACtD,GAAI,CAAC2D,EACH,MAAM,IAAI,MAAM,MAAM,OAAAhE,EAAO,QAAO,OAAAK,EAAS,QAAO,EAGtD,MAAMyE,GAAelE,EAAA,KAAK,cAAc,IAAIZ,CAAO,IAA9B,YAAAY,EAAiC,IAAIP,GAC1D,GAAI,CAACyE,EACH,MAAM,IAAI,MAAM,MAAM,OAAA9E,EAAO,QAAO,OAAAK,EAAS,YAAW,EAG1D,MAAM0E,EAAoBD,EAAa,QAAQpE,CAAO,EACtD,GAAIqE,IAAsB,GACxB,MAAM,IAAI,MAAM,MAAM,OAAArE,EAAO,WAAU,EAWzC,GAPAsD,EAAgB,IAAItD,EAAS,CAC3B,YAAAuB,EACA,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,mBAAA2C,CACN,CAAK,EAGGA,EAAoB,CACtB,MAAMX,EAAgB,GAAG,OAAAjE,EAAO,KAAI,OAAAK,GAC/B,KAAK,kBAAkB,IAAI4D,CAAa,GAC3C,KAAK,kBAAkB,IAAIA,EAAe,IAAI,GAAK,EAErD,KAAK,kBAAkB,IAAIA,CAAa,EAAE,IAAIvD,CAAO,CAC3D,CAGI,YAAK,qBAAqBV,EAASK,EAAWK,EAASuB,EAAa8C,CAAiB,EAErF,QAAQ,IAAI,QAAQ,OAAA/E,EAAO,QAAO,OAAAK,EAAS,QAAO,OAAAK,EAAO,YAAW,OAAAuB,EAAY,OAAM,QAAO,EAEtF,CACL,aAAcvB,EACd,gBAAiB,KAAK,oBAAoBV,EAASK,EAAW0E,CAAiB,EAC/E,kBAAmBA,IAAsB,GAAK,CAACH,EAC/C,mBAAAA,CACN,CACA,CAKE,qBAAqB5E,EAASK,EAAW2E,EAAe/C,EAAagD,EAAkB,CACrF,MAAMH,EAAe,KAAK,cAAc,IAAI9E,CAAO,EAAE,IAAIK,CAAS,EAC5D2D,EAAkB,KAAK,sBAAsB,IAAIhE,CAAO,EAAE,IAAIK,CAAS,EACvE4D,EAAgB,GAAG,OAAAjE,EAAO,KAAI,OAAAK,GAC9B6D,EAAoB,KAAK,kBAAkB,IAAID,CAAa,GAAK,IAAI,IAG3E,GAAIgB,IAAqB,EAAG,CAC1B,QAASC,EAAI,EAAGA,EAAIJ,EAAa,OAAQI,IAAK,CAC5C,MAAMC,EAAgBL,EAAaI,CAAC,EAG/BhB,EAAkB,IAAIiB,CAAa,GACtCnB,EAAgB,IAAImB,EAAe,CACjC,YAAa,KAAK,qBAAqBlD,CAAW,EAClD,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,mBAAoB,GACpB,cAAe+C,CAC3B,CAAW,CAEX,CACM,QAAQ,IAAI,SAAS,OAAAA,EAAa,aAAY,OAAAF,EAAa,OAAS,EAAC,QAAO,CAClF,KAES,CACH,IAAIM,EAAkB,EACtB,QAASF,EAAID,EAAmB,EAAGC,EAAIJ,EAAa,OAAQI,IAAK,CAC/D,MAAMC,EAAgBL,EAAaI,CAAC,EAGpC,GAAI,CAAChB,EAAkB,IAAIiB,CAAa,EACtCnB,EAAgB,IAAImB,EAAe,CACjC,YAAa,KAAK,qBAAqBlD,CAAW,EAClD,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,mBAAoB,GACpB,cAAe+C,CAC3B,CAAW,EACDI,QAGA,MAEV,CAEUA,EAAkB,GACpB,QAAQ,IAAI,QAAQ,OAAAH,EAAgB,aAAY,OAAAG,EAAe,QAAO,CAE9E,CACA,CAKE,eAAepF,EAASK,EAAWK,EAAS,OAC1C,MAAMsD,GAAkBpD,EAAA,KAAK,sBAAsB,IAAIZ,CAAO,IAAtC,YAAAY,EAAyC,IAAIP,GACrE,GAAI,CAAC2D,EACH,MAAO,GAGT,MAAMrD,EAAiBqD,EAAgB,IAAItD,CAAO,EAClD,OAAOC,EAAiBA,EAAe,YAAc,EACzD,CAKE,sBAAsBX,EAASK,EAAWK,EAAS,SACjD,MAAMsD,GAAkBpD,EAAA,KAAK,sBAAsB,IAAIZ,CAAO,IAAtC,YAAAY,EAAyC,IAAIP,GACrE,GAAI,CAAC2D,EACH,OAAO,KAGT,MAAMjC,EAAOiC,EAAgB,IAAItD,CAAO,EACxC,GAAI,CAACqB,EACH,OAAO,KAGT,MAAM+C,GAAetD,EAAA,KAAK,cAAc,IAAIxB,CAAO,IAA9B,YAAAwB,EAAiC,IAAInB,GACpDgF,EAAaP,EAAeA,EAAa,QAAQpE,CAAO,EAAI,GAElE,MAAO,CACL,eAAgBqB,EAAK,YAAY,OAAS,EAC1C,mBAAoBA,EAAK,mBACzB,cAAeA,EAAK,cACpB,UAAWA,EAAK,UAChB,WAAAsD,EACA,aAAcA,IAAe,EAC7B,YAAaA,IAAeP,EAAa,OAAS,CACxD,CACA,CAKE,oBAAoB9E,EAASK,EAAWiF,EAAW,OACjD,MAAMR,GAAelE,EAAA,KAAK,cAAc,IAAIZ,CAAO,IAA9B,YAAAY,EAAiC,IAAIP,GAC1D,GAAI,CAACyE,EAAc,MAAO,GAE1B,GAAIQ,IAAc,EAEhB,OAAOR,EAAa,OAAS,EACxB,CAEL,MAAMb,EAAgB,GAAG,OAAAjE,EAAO,KAAI,OAAAK,GAC9B6D,EAAoB,KAAK,kBAAkB,IAAID,CAAa,GAAK,IAAI,IAE3E,IAAIsB,EAAQ,EACZ,QAASL,EAAII,EAAY,EAAGJ,EAAIJ,EAAa,QACvC,CAACZ,EAAkB,IAAIY,EAAaI,CAAC,CAAC,EADSA,IAEjDK,IAKJ,OAAOA,CACb,CACA,CAKE,eAAevF,EAASK,EAAWK,EAAS,CAE1C,OADoB,KAAK,eAAeV,EAASK,EAAWK,CAAO,EAChD,OAAS,CAChC,CAKE,mBAAmBV,EAASK,EAAW,SACrC,MAAMyE,GAAelE,EAAA,KAAK,cAAc,IAAIZ,CAAO,IAA9B,YAAAY,EAAiC,IAAIP,GAC1D,GAAI,CAACyE,EACH,MAAO,CAAE,MAAO,EAAG,UAAW,EAAG,OAAQ,EAAG,UAAW,CAAC,EAG1D,MAAMd,GAAkBxC,EAAA,KAAK,sBAAsB,IAAIxB,CAAO,IAAtC,YAAAwB,EAAyC,IAAInB,GACrE,GAAI,CAAC2D,EACH,MAAO,CAAE,MAAOc,EAAa,OAAQ,UAAW,EAAG,OAAQ,EAAG,UAAW,CAAC,EAG5E,IAAIU,EAAY,EACZC,EAAS,EACTC,EAAY,EAEhB,UAAWhF,KAAWoE,EAAc,CAClC,MAAM/C,EAAOiC,EAAgB,IAAItD,CAAO,EACpCqB,GAAQA,EAAK,YAAY,OAAS,IACpCyD,IACIzD,EAAK,mBACP0D,IACS1D,EAAK,eACd2D,IAGV,CAEI,MAAO,CACL,MAAOZ,EAAa,OACpB,UAAAU,EACA,OAAAC,EACA,UAAAC,EACA,UAAYF,EAAYV,EAAa,OAAU,KAAK,QAAQ,CAAC,CACnE,CACA,CAKE,qBAAqB7C,EAAa,CAChC,OAAOA,EAAY,IAAIsB,IAAe,CACpC,GAAGA,EACH,EAAGA,EAAW,EACd,EAAGA,EAAW,CACpB,EAAM,CACN,CAKE,sBAAsBvD,EAASK,EAAW,CACxC,MAAMwE,EAAmB,KAAK,sBAAsB,IAAI7E,CAAO,EAC3D6E,GAAoBA,EAAiB,IAAIxE,CAAS,GACpDwE,EAAiB,IAAIxE,CAAS,EAAE,MAAK,EAGvC,MAAM4D,EAAgB,GAAG,OAAAjE,EAAO,KAAI,OAAAK,GAChC,KAAK,kBAAkB,IAAI4D,CAAa,GAC1C,KAAK,kBAAkB,IAAIA,CAAa,EAAE,MAAK,EAGjD,QAAQ,IAAI,QAAQ,OAAAjE,EAAO,QAAO,OAAAK,EAAS,SAAQ,CACvD,CAKE,qBAAqBL,EAASK,EAAW,SACvC,MAAMyE,GAAelE,EAAA,KAAK,cAAc,IAAIZ,CAAO,IAA9B,YAAAY,EAAiC,IAAIP,GACpD2D,GAAkBxC,EAAA,KAAK,sBAAsB,IAAIxB,CAAO,IAAtC,YAAAwB,EAAyC,IAAInB,GAErE,GAAI,CAACyE,GAAgB,CAACd,EACpB,OAAO,KAGT,MAAMlC,EAAa,CACjB,QAAA9B,EACA,UAAAK,EACA,YAAayE,EAAa,OAC1B,eAAgB,EACtB,EAEI,UAAWpE,KAAWoE,EAAc,CAClC,MAAM/C,EAAOiC,EAAgB,IAAItD,CAAO,EACpCqB,GACFD,EAAW,eAAe,KAAK,CAC7B,QAAApB,EACA,YAAaqB,EAAK,YAClB,SAAU,CACR,UAAWA,EAAK,UAChB,mBAAoBA,EAAK,mBACzB,cAAeA,EAAK,aAChC,CACA,CAAS,CAET,CAEI,OAAOD,CACX,CAME,2BAA4B,CAC1B,MAAM6D,EAAsB,GAG5B,SAAW,CAAC3F,EAAS4F,CAAS,IAAK,KAAK,sBAEtC,SAAW,CAACvF,EAAW2D,CAAe,IAAK4B,EAEzC,SAAW,CAAClF,EAASC,CAAc,IAAKqD,EAElCrD,EAAe,aAAeA,EAAe,YAAY,OAAS,IAEpEgF,EAAoBjF,CAAO,EAAIC,EAAe,YAAY,IAAI4C,IAAe,CAC3E,GAAIA,EAAW,GACf,EAAGA,EAAW,EACd,EAAGA,EAAW,EACd,UAAWA,EAAW,SACpC,EAAc,GAMV,OAAOoC,CACX,CAKE,4BAA4B3F,EAAS,CACnC,MAAM6F,EAAwB,GACxBD,EAAY,KAAK,sBAAsB,IAAI5F,CAAO,EAExD,GAAI,CAAC4F,EACH,OAAOC,EAIT,SAAW,CAACxF,EAAW2D,CAAe,IAAK4B,EAEzC,SAAW,CAAClF,EAASC,CAAc,IAAKqD,EAClCrD,EAAe,aAAeA,EAAe,YAAY,OAAS,IAEpEkF,EAAsBnF,CAAO,EAAIC,EAAe,YAAY,IAAI4C,IAAe,CAC7E,GAAIA,EAAW,GACf,EAAGA,EAAW,EACd,EAAGA,EAAW,EACd,UAAWA,EAAW,SAClC,EAAY,GAKR,OAAOsC,CACX,CAKE,gBAAiB,CACf,IAAI3F,EAAc,EACdiE,EAAkB,EAClBT,EAAiB,EACrB,MAAMoC,EAAa,GAEnB,SAAW,CAAC9F,EAAS4F,CAAS,IAAK,KAAK,sBAAuB,CAC7D,IAAIG,EAAc,EACdC,EAAuB,EACvBC,EAAiB,EAErB,SAAW,CAAC5F,EAAW2D,CAAe,IAAK4B,EACzC,SAAW,CAAClF,EAASC,CAAc,IAAKqD,EACtC+B,IACA7F,IAEIS,EAAe,aAAeA,EAAe,YAAY,OAAS,IACpEqF,IACA7B,IACA8B,GAAkBtF,EAAe,YAAY,OAC7C+C,GAAkB/C,EAAe,YAAY,QAKnDmF,EAAW9F,CAAO,EAAI,CACpB,YAAa+F,EACb,gBAAiBC,EACjB,eAAgBC,EAChB,eAAgBF,EAAc,GAAMC,EAAuBD,EAAe,KAAK,QAAQ,CAAC,EAAI,CACpG,CACA,CAEI,MAAO,CACL,YAAA7F,EACA,gBAAAiE,EACA,eAAAT,EACA,eAAgBxD,EAAc,GAAMiE,EAAkBjE,EAAe,KAAK,QAAQ,CAAC,EAAI,EACvF,WAAA4F,CACN,CACA,CAKE,gBAAiB,CACf,MAAMrE,EAAS,CACb,YAAa,KAAK,sBAAsB,KACxC,eAAgB,EAChB,qBAAsB,EACtB,aAAc,EACpB,EAEI,SAAW,CAACzB,EAAS4F,CAAS,IAAK,KAAK,sBAAuB,CAC7D,MAAMM,EAAc,CAClB,gBAAiBN,EAAU,KAC3B,WAAY,EACpB,EAEM,SAAW,CAACvF,EAAW2D,CAAe,IAAK4B,EAAW,CACpDnE,EAAO,iBACP,MAAM0C,EAAkB,MAAM,KAAKH,EAAgB,OAAM,CAAE,EAAE,OAC3DjC,GAAQA,EAAK,aAAeA,EAAK,YAAY,OAAS,CAChE,EAAU,OAEFN,EAAO,sBAAwB0C,EAE/B+B,EAAY,WAAW7F,CAAS,EAAI,CAClC,YAAa2D,EAAgB,KAC7B,gBAAAG,EACA,SAAU,MAAM,KAAKH,EAAgB,KAAI,CAAE,CACrD,CACA,CAEMvC,EAAO,aAAazB,CAAO,EAAIkG,CACrC,CAEI,eAAQ,IAAI,aAAczE,CAAM,EACzBA,CACX,CAKE,8BAA+B,OAC7B,MAAM0E,EAAY,CAChB,cAAe,KAAK,sBAAsB,KAC1C,QAAS,EACf,EAEI,SAAW,CAACnG,EAAS4F,CAAS,IAAK,KAAK,sBAAuB,CAC7DO,EAAU,QAAQnG,CAAO,EAAI,GAE7B,SAAW,CAACK,EAAW2D,CAAe,IAAK4B,EAAW,CACpDO,EAAU,QAAQnG,CAAO,EAAEK,CAAS,EAAI,GAExC,SAAW,CAACK,EAASC,CAAc,IAAKqD,EACtCmC,EAAU,QAAQnG,CAAO,EAAEK,CAAS,EAAEK,CAAO,EAAI,CAC/C,eAAgB,CAAC,EAAEC,EAAe,aAAeA,EAAe,YAAY,OAAS,GACrF,kBAAiBC,EAAAD,EAAe,cAAf,YAAAC,EAA4B,SAAU,EACvD,YAAaD,EAAe,aAAe,GAC3C,SAAU,CACR,UAAWA,EAAe,UAC1B,mBAAoBA,EAAe,mBACnC,cAAeA,EAAe,aAC5C,CACA,CAEA,CACA,CAEI,eAAQ,IAAI,YAAawF,CAAS,EAC3BA,CACX,CACA,CCxfO,MAAMC,EAAiB,CAC5B,aAAc,CACZ,KAAK,kBAAoB,IAAInH,GAC7B,KAAK,kBAAoB,IAAIyC,GAC7B,KAAK,kBAAoB,IAAI+C,GAC7B,KAAK,OAAS,IAAI,IAClB,KAAK,YAAc,IAAI,IACvB,KAAK,iBAAmB,IAAI,IAC5B,KAAK,cAAgB,IAAI,GAC7B,CAKE,MAAM,YAAa,CACjB,GAAI,CAEF,MAAM,KAAK,kBAAkB,WAAU,EAEvC,MAAM,KAAK,kBAAkB,WAAU,EAGvC,KAAK,kBAAkB,sBAAsB,KAAK,iBAAiB,EAGnE,KAAK,kBAAkB,qBAAqB,KAAK,iBAAiB,EAElE,QAAQ,IAAI,wBAAwB,CAC1C,OAAapF,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,CACpD,CACA,CAKE,MAAM,aAAc,CAClB,QAAQ,IAAI,YAAY,EAExB,GAAI,CAGF,KAAK,OAAO,MAAK,EACjB,KAAK,YAAY,MAAK,EACtB,KAAK,iBAAiB,MAAK,EAC3B,KAAK,cAAc,MAAK,EAGxB,KAAK,kBAAkB,qBAAqB,KAAK,iBAAiB,EAGlE,KAAK,kBAAkB,cAAgB,GACvC,MAAM,KAAK,kBAAkB,WAAU,EAGvC,KAAK,kBAAkB,sBAAsB,KAAK,iBAAiB,EACnE,KAAK,kBAAkB,qBAAqB,KAAK,iBAAiB,EAGlE,MAAMgH,EAAe,MAAM,KAAK,kBAAkB,yBAAwB,EAE1E,GAAIA,EAAa,SAAW,EAC1B,MAAM,IAAI,MAAM,iBAAiB,EAInC,MAAMC,EAAS,GACf,UAAWC,KAAeF,EAAc,CACtC,MAAMG,EAAQ,MAAM,KAAK,gBAAgBD,CAAW,EACpDD,EAAO,KAAKE,CAAK,EACjB,KAAK,OAAO,IAAIA,EAAM,GAAIA,CAAK,CACvC,CAGM,aAAM,KAAK,wBAAwBF,CAAM,EAGzCA,EAAO,KAAK,CAACjD,EAAGqB,IAAMrB,EAAE,GAAG,cAAcqB,EAAE,EAAE,CAAC,EAE9C,QAAQ,IAAI,QAAQ,OAAA4B,EAAO,OAAM,OAAM,EAChCA,CAEb,OAAajH,EAAO,CACd,cAAQ,MAAM,WAAYA,CAAK,EACzBA,CACZ,CACA,CAKE,MAAM,wBAAwBiH,EAAQ,CACpC,GAAI,KAAK,kBAAkB,cAEzB,MAAM,KAAK,sCAAsCA,CAAM,MAClD,CAEL,MAAMG,EAAoB,KAAK,kBAAkB,qBAAoB,EAErE,UAAWD,KAASF,EAClB,GAAIG,EAAkB,SAASD,EAAM,EAAE,EAAG,CACxC,MAAM/E,EAAS,KAAK,kBAAkB,eAAe+E,EAAM,EAAE,EACvDvE,EAAc,KAAK,kBAAkB,oBAAoBuE,EAAM,EAAE,EACjE5C,EAAU,KAAK,kBAAkB,0BAA0B4C,EAAM,EAAE,EAEzEA,EAAM,OAAS/E,EACf+E,EAAM,YAAcvE,EAGpB,MAAMtB,EAAiB,KAAK,kBAAkB,YAAY,IAAI6F,EAAM,EAAE,EAOtE,GANI7F,GAAkBA,EAAe,SAAW,YAC9C6F,EAAM,WAAa7F,EAAe,WAClC6F,EAAM,SAAW7F,EAAe,UAI9BiD,EAAS,CACX4C,EAAM,kBAAoB5C,EAAQ,kBAClC4C,EAAM,WAAa5C,EAAQ,oBAE3B,MAAMxB,EAAWoE,EAAM,SAAW,UAAY,SAAS,OAAAA,EAAM,WAAU,KAAM,GAC7E,QAAQ,IAAI,QAAQ,OAAAA,EAAM,GAAE,YAAW,OAAA/E,EAAM,UAAS,OAAAmC,EAAQ,kBAAiB,MAAK,OAAA3B,EAAY,OAAM,SAAQ,OAAAG,EAAU,CACpI,CAGU,KAAK,iBAAiB,IAAIoE,EAAM,GAAIvE,CAAW,CACzD,CAEA,CACA,CAKE,MAAM,sCAAsCqE,EAAQ,OAClD,QAAQ,IAAI,uBAAuB,EAGnC,IAAII,EAAqB,KACzB,GAAI,CAEF,IAAI9F,EAAA,OAAO,sBAAP,MAAAA,EAA4B,oBAC9B,QAAQ,IAAI,4BAA4B,EACxC8F,EAAqB,MAAM,OAAO,oBAAoB,kBAAkB,wBAAuB,EAE3FA,GAAoB,CACtB,QAAQ,IAAI,yBAAyB,EACrC,MAAM,KAAK,0BAA0BJ,EAAQI,CAAkB,EAC/D,MACV,CAEA,OAAarH,EAAO,CACd,QAAQ,KAAK,2BAA4BA,CAAK,CACpD,CAGI,QAAQ,IAAI,mBAAmB,EAC/B,MAAM,KAAK,iCAAiCiH,CAAM,CACtD,CAKE,MAAM,0BAA0BA,EAAQK,EAAU,CAChD,QAAQ,IAAI,wBAAwB,EACpC,MAAMC,EAAY,YAAY,IAAG,EAG3BC,EAAsBF,EAAS,kBAAoB,GACnDG,EAAsBH,EAAS,kBAAoB,GAEzD,UAAWH,KAASF,EAClB,GAAI,CACF,IAAIS,EAAiB,GACjBC,EAAmB,EACnBC,EAAoB,KACxB,MAAMC,EAAiB,GAGvB,GAAI,CAAC,KAAK,YAAY,IAAIV,EAAM,EAAE,EAAG,CACnC,MAAMvG,EAAe,MAAM,KAAK,kBAAkB,gBAAgBuG,EAAM,EAAE,EAC1E,KAAK,YAAY,IAAIA,EAAM,GAAIvG,CAAY,CACrD,CAEQ,MAAMA,EAAe,KAAK,YAAY,IAAIuG,EAAM,EAAE,EAGlD,SAAW,CAACnG,EAAWD,CAAM,IAAK,OAAO,QAAQH,CAAY,EAAG,CAC9D,IAAIkH,EAAsB,EAE1B,UAAWC,KAAShH,EAAQ,CAE1B,MAAMiH,EAAmBR,EAAoBO,EAAM,EAAE,EACrD,GAAIC,GAAoBA,EAAiB,OAAS,EAAG,CACnDN,EAAiB,GACjB,MAAMxB,EAAQ8B,EAAiB,OAC/BL,GAAoBzB,EACpB4B,GAAuB5B,GAGnB,CAAC0B,GAAqBE,GAAuBD,EAAeD,CAAiB,GAAK,MACpFA,EAAoB5G,EAEpC,CACA,CAEc8G,EAAsB,IACxBD,EAAe7G,CAAS,EAAI8G,EAExC,CAGQ,MAAMtC,EAAmBiC,EAAoBN,EAAM,EAAE,EACjD3B,GAAoBA,EAAiB,OAAS,IAChDkC,EAAiB,GACjBC,GAAoBnC,EAAiB,QAIvC,MAAMtD,EAAW,KAAK,kBAAkB,YAAY,IAAIiF,EAAM,EAAE,EAChE,GAAIjF,GAAYA,EAAS,SAAW,UAElCiF,EAAM,OAAS,UACfA,EAAM,WAAajF,EAAS,WAC5BiF,EAAM,SAAWjF,EAAS,aACrB,CAEL,QAAQ,IAAI,eAAe,OAAAiF,EAAM,GAAE,eAAc,EACjD,MAAMc,EAAkB,MAAM,KAAK,kBAAkB,gBAAgBd,EAAM,EAAE,EAC7E,QAAQ,IAAI,aAAa,OAAAA,EAAM,GAAE,cAAa,OAAAc,EAAiB,EAE3DA,IAAoB,aAEtBd,EAAM,OAAS,YACfA,EAAM,kBAAoBS,EAC1B,QAAQ,IAAI,aAAa,OAAAT,EAAM,GAAE,yBAAwB,GAChDO,GAETP,EAAM,OAAS,cACfA,EAAM,kBAAoBS,EAC1B,QAAQ,IAAI,aAAa,OAAAT,EAAM,GAAE,wBAAuB,IAGxDA,EAAM,OAAS,UACf,QAAQ,IAAI,aAAa,OAAAA,EAAM,GAAE,kBAAiB,EAE9D,CAEA,OAAenH,EAAO,CACd,QAAQ,KAAK,aAAa,OAAAmH,EAAM,GAAE,UAAUnH,CAAK,EACjDmH,EAAM,OAAS,SACvB,CAGI,MAAMe,EAAU,YAAY,IAAG,EAC/B,QAAQ,IAAI,qBAAsB,QAAAA,EAAUX,GAAW,QAAQ,CAAC,EAAC,KAAI,CACzE,CAKE,MAAM,iCAAiCN,EAAQ,CAC7C,QAAQ,IAAI,wBAAwB,EAGpC,MAAMkB,EAAqB,MAAM,KAAK,kBAAkB,kBAAkB,sBAAqB,EACzFC,EAAoB,IAAI,IAAID,CAAkB,EAEpD,UAAWhB,KAASF,EAClB,GAAI,CACF,IAAIS,EAAiB,GACjBC,EAAmB,EACnBC,EAAoB,KACxB,MAAMC,EAAiB,GAGvB,GAAI,CAAC,KAAK,YAAY,IAAIV,EAAM,EAAE,EAAG,CACnC,MAAMvG,EAAe,MAAM,KAAK,kBAAkB,gBAAgBuG,EAAM,EAAE,EAC1E,KAAK,YAAY,IAAIA,EAAM,GAAIvG,CAAY,CACrD,CAEQ,MAAMA,EAAe,KAAK,YAAY,IAAIuG,EAAM,EAAE,EAGlD,SAAW,CAACnG,EAAWD,CAAM,IAAK,OAAO,QAAQH,CAAY,EAAG,CAC9D,IAAIkH,EAAsB,EAE1B,UAAWC,KAAShH,EAElB,GAAIqH,EAAkB,IAAIL,EAAM,EAAE,EAAG,CACnC,MAAMzG,EAAiB,MAAM,KAAK,kBAAkB,mBAAmByG,EAAM,EAAE,EAC/E,GAAIzG,GAAkBA,EAAe,aAAeA,EAAe,YAAY,OAAS,EAAG,CACzFoG,EAAiB,GACjB,MAAMxB,EAAQ5E,EAAe,YAAY,OACzCqG,GAAoBzB,EACpB4B,GAAuB5B,GAGnB,CAAC0B,GAAqBE,GAAuBD,EAAeD,CAAiB,GAAK,MACpFA,EAAoB5G,EAEtC,CACA,CAGc8G,EAAsB,IACxBD,EAAe7G,CAAS,EAAI8G,EAExC,CAGQ,MAAM5F,EAAW,KAAK,kBAAkB,YAAY,IAAIiF,EAAM,EAAE,EAChE,GAAIjF,GAAYA,EAAS,SAAW,UAElCiF,EAAM,OAAS,UACfA,EAAM,WAAajF,EAAS,WAC5BiF,EAAM,SAAWjF,EAAS,SAC1B,QAAQ,IAAI,WAAW,OAAAiF,EAAM,GAAE,eAAc,OAAAjF,EAAS,WAAU,IAAG,MAC9D,CAEL,QAAQ,IAAI,iBAAiB,OAAAiF,EAAM,GAAE,aAAY,EACjD,MAAMc,EAAkB,MAAM,KAAK,kBAAkB,gBAAgBd,EAAM,EAAE,EAC7E,QAAQ,IAAI,aAAa,OAAAA,EAAM,GAAE,cAAa,OAAAc,EAAiB,EAE3DA,IAAoB,aAEtBd,EAAM,OAAS,YACfA,EAAM,kBAAoBS,EAC1B,QAAQ,IAAI,WAAW,OAAAT,EAAM,GAAE,yBAAwB,GAC9CO,GAETP,EAAM,OAAS,cACfA,EAAM,kBAAoBS,EAC1B,QAAQ,IAAI,WAAW,OAAAT,EAAM,GAAE,yBAAwB,OAAAS,EAAiB,MAAK,OAAAD,EAAgB,SAAQ,IAGrGR,EAAM,OAAS,UACf,QAAQ,IAAI,WAAW,OAAAA,EAAM,GAAE,2BAA0B,EAErE,CAEA,OAAenH,EAAO,CACd,QAAQ,KAAK,aAAa,OAAAmH,EAAM,GAAE,UAAUnH,CAAK,EACjDmH,EAAM,OAAS,SACvB,CAGI,QAAQ,IAAI,eAAe,CAC/B,CAKE,MAAM,gBAAgBD,EAAa,CACjC,MAAMC,EAAQ,CACZ,GAAID,EAAY,GAChB,KAAMA,EAAY,KAClB,KAAMA,EAAY,KAClB,OAAQ,UACR,WAAY,EACZ,UAAW,GACX,WAAY,GACZ,kBAAmB,KACnB,cAAe,KACf,YAAa,GACb,aAAc,KACd,SAAU,IAAI,KAAI,EAAG,YAAW,CACtC,EAGI,YAAK,oBAAoBC,CAAK,EAEvBA,CACX,CAKE,MAAM,oBAAoBA,EAAO,CAC/B,GAAI,MAAK,cAAc,IAAIA,EAAM,EAAE,EAInC,MAAK,cAAc,IAAIA,EAAM,EAAE,EAE/B,GAAI,CACF,MAAMvG,EAAe,MAAM,KAAK,kBAAkB,gBAAgBuG,EAAM,EAAE,EAGpEkB,EAAa,OAAO,KAAKzH,CAAY,EAAE,OAAO0H,GAAQ1H,EAAa0H,CAAI,EAAE,OAAS,CAAC,EACnFzH,EAAc,OAAO,OAAOD,CAAY,EAAE,OAAO,CAACE,EAAOC,IAAWD,EAAQC,EAAO,OAAQ,CAAC,EAGlGoG,EAAM,WAAakB,EACnBlB,EAAM,WAAatG,EACnBsG,EAAM,UAAYtG,EAAc,EAG5BA,EAAc,GAChB,KAAK,YAAY,IAAIsG,EAAM,GAAIvG,CAAY,EAG7C,QAAQ,IAAI,MAAM,OAAAuG,EAAM,GAAE,QAAO,OAAAtG,EAAW,aAAY,OAAAwH,EAAW,KAAK,IAAI,EAAG,EAG/E,KAAK,iBAAiBlB,CAAK,CAEjC,OAAanH,EAAO,CACd,QAAQ,MAAM,QAAQ,OAAAmH,EAAM,GAAE,YAAYnH,CAAK,EAC/CmH,EAAM,UAAY,GAClBA,EAAM,WAAa,EACnBA,EAAM,WAAa,EACzB,QAAK,CACC,KAAK,cAAc,OAAOA,EAAM,EAAE,CACxC,EACA,CAKE,cAAe,CACb,OAAO,MAAM,KAAK,KAAK,OAAO,OAAM,CAAE,EAAE,KAAK,CAACnD,EAAGqB,IAAMrB,EAAE,GAAG,cAAcqB,EAAE,EAAE,CAAC,CACnF,CAKE,SAAS1E,EAAS,CAChB,OAAO,KAAK,OAAO,IAAIA,CAAO,CAClC,CAKE,MAAM,eAAeA,EAASK,EAAY,KAAM,CAE9C,GAAI,KAAK,YAAY,IAAIL,CAAO,EAAG,CACjC,MAAMC,EAAe,KAAK,YAAY,IAAID,CAAO,EAEjD,OAAIK,EACKJ,EAAaI,CAAS,GAAK,GAG3BJ,CAEf,CAGI,GAAI,KAAK,cAAc,IAAID,CAAO,EAChC,OAAO,IAAI,QAASJ,GAAY,CAC9B,MAAMgI,EAAe,IAAM,CACzB,GAAK,KAAK,cAAc,IAAI5H,CAAO,EAIjC,WAAW4H,EAAc,GAAG,MAJQ,CACpC,MAAM3H,EAAe,KAAK,YAAY,IAAID,CAAO,GAAK,GACtDJ,EAAQS,EAAaJ,EAAaI,CAAS,GAAK,GAAMJ,CAAY,CAC9E,CAGA,EACQ2H,EAAY,CACpB,CAAO,EAIH,MAAMpB,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACrC,GAAI,CAACwG,EACH,MAAM,IAAI,MAAM,MAAM,OAAAxG,EAAO,OAAM,EAGrC,GAAI,CACF,MAAMC,EAAe,MAAM,KAAK,kBAAkB,gBAAgBuG,EAAM,EAAE,EAG1E,OAFA,KAAK,YAAY,IAAIxG,EAASC,CAAY,EAEtCI,EACKJ,EAAaI,CAAS,GAAK,GAE3BJ,CAEf,OAAaZ,EAAO,CACd,eAAQ,MAAM,QAAQ,OAAAW,EAAO,UAAUX,CAAK,EACrCgB,EAAY,GAAK,EAC9B,CACA,CAKE,kBAAkBL,EAASyB,EAAQ,CACjC,MAAM+E,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACjCwG,IACFA,EAAM,OAAS/E,EACf+E,EAAM,aAAe,IAAI,KAAI,EAAG,YAAW,EAGvC,KAAK,mBAEP,KAAK,kBAAkB,gBAAgBxG,EAASyB,CAAM,EACnD,KAAK,IAAM,CACV,QAAQ,IAAI,UAAU,OAAAzB,EAAO,MAAK,OAAAyB,EAAM,eAAc,CAClE,CAAW,EACA,MAAMpC,GAAS,CACd,QAAQ,MAAM,YAAaA,CAAK,EAEhC,MAAM4C,EAAc,KAAK,oBAAoBjC,CAAO,EACpD,GAAIiC,EAAY,OAAS,EAAG,CAC1B,MAAMC,EAAY,CAChB,cAAesE,EAAM,cACrB,kBAAmBA,EAAM,iBACzC,EACc,OAAO,KAAK,kBAAkB,qBAAqBxG,EAASiC,EAAaC,CAAS,CAChG,CACA,CAAW,EAGL,KAAK,iBAAiBsE,CAAK,EAEjC,CAKE,MAAM,UAAUxG,EAAS6H,EAAQ,CAC/B,MAAMrB,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACrC,GAAI,CAACwG,EACH,MAAM,IAAI,MAAM,MAAM,OAAAxG,EAAO,OAAM,EAIrCwG,EAAM,OAAS,UACfA,EAAM,WAAaqB,EACnBrB,EAAM,SAAW,IAAI,KAAI,EAAG,YAAW,EACvCA,EAAM,aAAe,IAAI,KAAI,EAAG,YAAW,EAG3C,GAAI,CACF,MAAMpE,EAAW,CACf,OAAQ,UACR,WAAYyF,EACZ,SAAUrB,EAAM,SAChB,aAAcA,EAAM,YAC5B,EAEM,MAAM,KAAK,kBAAkB,aAAaxG,EAASoC,CAAQ,EAC3D,QAAQ,IAAI,MAAM,OAAApC,EAAO,aAAY,OAAA6H,EAAQ,EAE7C,KAAK,iBAAiBrB,CAAK,CAEjC,OAAanH,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACxCA,CACZ,CACA,CAKE,MAAM,YAAYW,EAAS,CACzB,MAAMwG,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACrC,GAAI,CAACwG,EACH,MAAM,IAAI,MAAM,MAAM,OAAAxG,EAAO,OAAM,EAGrC,GAAIwG,EAAM,SAAW,UACnB,MAAM,IAAI,MAAM,MAAM,OAAAxG,EAAO,cAAa,EAG5C,GAAI,CAEF,MAAMiC,EAAc,MAAM,KAAK,oBAAoBjC,CAAO,EACpD8H,EAAa7F,GAAeA,EAAY,OAAS,EAAK,cAAgB,UAG5EuE,EAAM,OAASsB,EACftB,EAAM,aAAe,IAAI,KAAI,EAAG,YAAW,EAG3C,OAAOA,EAAM,WACb,OAAOA,EAAM,SAGb,MAAM,KAAK,kBAAkB,eAAexG,CAAO,EAGnD,MAAM,KAAK,kBAAkB,gBAAgBA,EAAS8H,CAAS,EAE/D,QAAQ,IAAI,MAAM,OAAA9H,EAAO,kBAAiB,OAAA8H,EAAW,EACrD,KAAK,iBAAiBtB,CAAK,CAEjC,OAAanH,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACxCA,CACZ,CACA,CAKE,MAAM,gBAAgBW,EAAS,CAC7B,MAAMwG,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACrC,GAAI,CAACwG,EACH,MAAM,IAAI,MAAM,MAAM,OAAAxG,EAAO,OAAM,EAGrC,GAAIwG,EAAM,SAAW,YACnB,MAAM,IAAI,MAAM,MAAM,OAAAxG,EAAO,eAAc,EAG7C,GAAI,CAEF,MAAMiC,EAAc,MAAM,KAAK,oBAAoBjC,CAAO,EACpD8H,EAAa7F,GAAeA,EAAY,OAAS,EAAK,cAAgB,UAG5EuE,EAAM,OAASsB,EACftB,EAAM,aAAe,IAAI,KAAI,EAAG,YAAW,EAG3C,MAAM,KAAK,kBAAkB,gBAAgBxG,EAAS8H,CAAS,EAE/D,QAAQ,IAAI,MAAM,OAAA9H,EAAO,kBAAiB,OAAA8H,EAAW,EACrD,KAAK,iBAAiBtB,CAAK,CAEjC,OAAanH,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACxCA,CACZ,CACA,CAKE,qBAAqBW,EAASK,EAAW,CACvC,MAAMmG,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACjCwG,IACFA,EAAM,kBAAoBnG,EAC1BmG,EAAM,cAAgB,KAGlBA,EAAM,SAAW,WACnB,KAAK,kBAAkBxG,EAAS,aAAa,EAG/C,KAAK,iBAAiBwG,CAAK,EAEjC,CAKE,iBAAiBxG,EAASO,EAAW,CACnC,MAAMiG,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACjCwG,IACFA,EAAM,cAAgBjG,EAGlB,CAACiG,EAAM,mBAAqBjG,EAAU,YACxCiG,EAAM,kBAAoBjG,EAAU,WAIlCiG,EAAM,mBACR,KAAK,6BAA6BxG,EAASwG,EAAM,iBAAiB,EAIhEA,EAAM,SAAW,WACnB,KAAK,kBAAkBxG,EAAS,aAAa,EAG/C,KAAK,iBAAiBwG,CAAK,EAEjC,CAKE,MAAM,6BAA6BxG,EAASK,EAAW,CACrD,GAAI,CACF,MAAMD,EAAS,MAAM,KAAK,eAAeJ,EAASK,CAAS,EAC3D,GAAID,EAAO,OAAS,EAAG,CACrB,MAAM2H,EAAa,KAAK,kBAAkB,0BAA0B/H,EAASK,EAAWD,CAAM,EAC9F,eAAQ,IAAI,YAAY,OAAA2H,EAAW,YAAW,OAAM,EAC7CA,CACf,CACA,OAAa1I,EAAO,CACd,QAAQ,MAAM,aAAcA,CAAK,CACvC,CACI,OAAO,IACX,CAKE,MAAM,qBAAqBW,EAASiC,EAAa2C,EAAqB,GAAOoD,EAAU,GAAI,CACzF,MAAMxB,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACrC,GAAI,CAACwG,EACH,MAAM,IAAI,MAAM,MAAM,OAAAxG,EAAO,OAAM,EAGrC,GAAI,CAACwG,EAAM,eAAiB,CAACA,EAAM,kBACjC,MAAM,IAAI,MAAM,WAAW,EAG7B,MAAMyB,EAAiBzB,EAAM,cAAc,GACrCnG,EAAYmG,EAAM,kBAExB,GAAI,CAEF,MAAMpG,EAAS,MAAM,KAAK,eAAeJ,EAASK,CAAS,EACrD0E,EAAoB3E,EAAO,UAAUuE,GAAOA,EAAI,KAAOsD,CAAc,EAE3E,GAAIlD,IAAsB,GACxB,MAAM,IAAI,MAAM,aAAa,EAG/B,IAAImD,EAAa,EAEjB,GAAItD,EAEF,MAAM,KAAK,qBAAqB5E,EAASiI,EAAgBhG,EAAa+F,CAAO,EAC7EE,EAAa,EACb,QAAQ,IAAI,cAAc,OAAAD,EAAgB,MACrC,CAEL,QAAS/C,EAAIH,EAAmBG,EAAI9E,EAAO,OAAQ8E,IAAK,CACtD,MAAMxE,EAAUN,EAAO8E,CAAC,EAAE,GAC1B,MAAM,KAAK,qBAAqBlF,EAASU,EAASuB,EAAa+F,CAAO,EACtEE,GACV,CACQ,QAAQ,IAAI,aAAa,OAAAA,EAAU,OAAM,CACjD,CAIM1B,EAAM,YAAcvE,EACpBuE,EAAM,aAAe,IAAI,KAAI,EAAG,YAAW,EAC3CA,EAAM,OAASvE,EAAY,OAAS,EAAI,cAAgB,UAGxD,KAAK,iBAAiB,IAAIjC,EAASiC,CAAW,EAG9C,KAAK,iBAAiBuE,CAAK,EAE3B,MAAM2B,EAAgBH,EAAQ,mBAAqB,WAAa,GAC1DI,EAAUxD,EACd,WAAW,OAAAuD,GACX,UAAU,OAAAD,EAAU,QAAO,OAAAC,GAE7B,MAAO,CACL,QAAS,GACT,WAAAD,EACA,QAAAE,EACA,UAAW/H,EACX,mBAAAuE,EACA,mBAAoBoD,EAAQ,kBACpC,CAEA,OAAa3I,EAAO,CACd,cAAQ,MAAM,QAAQ,OAAAW,EAAO,YAAYX,CAAK,EACxCA,CACZ,CACA,CAKE,MAAM,qBAAqBW,EAASU,EAASuB,EAAa+F,EAAU,GAAI,CACtE,IAAIK,EAAmBpG,EAGvB,GAAI+F,EAAQ,mBAAoB,CAC9B,MAAMrF,EAAe,MAAM,KAAK,kBAAkB,mBAAmBjC,CAAO,EACxEiC,GAAgBA,EAAa,cAC/B0F,EAAmB,KAAK,mBAAmB1F,EAAa,YAAaV,CAAW,EAExF,CAGI,MAAMtB,EAAiB,CACrB,QAAAX,EACA,QAAAU,EACA,YAAa2H,EACb,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,QAAS,KACf,EAGI,MAAM,KAAK,kBAAkB,oBAAoB3H,EAASC,CAAc,CAC5E,CAKE,mBAAmB2H,EAAqBC,EAAgB,CACtD,MAAMC,EAAS,CAAC,GAAGF,CAAmB,EAGtC,OAAAC,EAAe,QAAQE,GAAiB,CACtC,MAAMC,EAAgBF,EAAO,UAAUG,GAAYA,EAAS,QAAUF,EAAc,KAAK,EAErFC,IAAkB,GAEpBF,EAAOE,CAAa,EAAI,CACtB,GAAGF,EAAOE,CAAa,EACvB,UAAWD,EAAc,UACzB,cAAeA,EAAc,cAC7B,UAAW,IAAI,KAAI,EAAG,YAAW,CAC3C,EAGQD,EAAO,KAAKC,CAAa,CAEjC,CAAK,EAEMD,CACX,CAKE,MAAM,qBAAqB9H,EAASuB,EAAa,SAC/C,GAAI,CAEF,MAAM2G,IAAiBpH,GAAAZ,EAAA,OAAO,WAAP,YAAAA,EAAiB,eAAjB,YAAAY,EAA+B,KAAM,KAAK,2BAA2Bd,CAAO,EAG7FC,EAAiB,CACrB,QAAAD,EACA,QAASkI,EACT,YAAA3G,EACA,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,QAAS,KACjB,EAGM,MAAM,KAAK,kBAAkB,oBAAoBvB,EAASC,CAAc,EAExE,QAAQ,IAAI,aAAa,OAAAD,EAAO,UAAS,OAAAkI,EAAc,QAAO,OAAA3G,EAAY,OAAM,QAAO,CAE7F,OAAa5C,EAAO,CACd,cAAQ,MAAM,cAAeA,CAAK,EAC5BA,CACZ,CACA,CAKE,2BAA2BqB,EAAS,CAKlC,GAAIA,EAAQ,SAAS,GAAG,EAAG,CACzB,MAAMF,EAAQE,EAAQ,MAAM,GAAG,EAC/B,GAAIF,EAAM,OAAS,EAEjB,OAAOA,EAAM,CAAC,CAEtB,CAGI,GAAIE,EAAQ,SAAS,GAAG,EAAG,CACzB,MAAMF,EAAQE,EAAQ,MAAM,GAAG,EAC/B,GAAIF,EAAM,QAAU,EAElB,MAAO,GAAG,OAAAA,EAAM,CAAC,EAAC,KAAI,OAAAA,EAAM,CAAC,EAErC,CAGI,OAAOE,EAAQ,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAC7C,CAKE,MAAM,oBAAoBA,EAAS,CACjC,GAAI,CACF,MAAMC,EAAiB,MAAM,KAAK,kBAAkB,mBAAmBD,CAAO,EAE9E,GAAI,CAACC,GAAkB,CAACA,EAAe,YACrC,MAAO,GAGT,MAAMsB,EAActB,EAAe,YAQnC,eAAQ,IAAI,aAAa,OAAAsB,EAAY,OAAM,2BAA0B,OAAAvB,EAAO,+BAA8B,EAEnGuB,CACb,OAAa5C,EAAO,CACd,eAAQ,MAAM,YAAaA,CAAK,EACzB,EACb,CACA,CAKE,oBAAoBW,EAASU,EAAU,KAAM,CAC3C,OAAIA,EAEK,KAAK,oBAAoBA,CAAO,EAIlC,KAAK,iBAAiB,IAAIV,CAAO,GAAK,EACjD,CAKE,kCAAkCA,EAAS,CACzC,MAAMwG,EAAQ,KAAK,OAAO,IAAIxG,CAAO,EACrC,MAAI,CAACwG,GAAS,CAACA,EAAM,eAAiB,CAACA,EAAM,kBACpC,KAGF,KAAK,kBAAkB,sBAC5BxG,EACAwG,EAAM,kBACNA,EAAM,cAAc,EAC1B,CACA,CAKE,wBAAwBxG,EAASK,EAAW,CAC1C,OAAO,KAAK,kBAAkB,mBAAmBL,EAASK,CAAS,CACvE,CAKE,+BAA+BL,EAAS,CACtC,MAAM6I,EAAW,KAAK,kCAAkC7I,CAAO,EAC/D,OAAK6I,EAGE,CAACA,EAAS,cAAgBA,EAAS,eAHpB,EAI1B,CAKE,oBAAoBD,EAAiB,KAAM,CACzC,MAAMtC,EAAS,KAAK,aAAY,EAEhC,GAAI,CAACsC,EAEH,OAAOtC,EAAO,KAAKE,GAASA,EAAM,SAAW,WAAW,EAI1D,MAAMsC,EAAexC,EAAO,UAAUE,GAASA,EAAM,KAAOoC,CAAc,EAE1E,GAAIE,IAAiB,GACnB,OAAOxC,EAAO,KAAKE,GAASA,EAAM,SAAW,WAAW,EAI1D,QAAStB,EAAI4D,EAAe,EAAG5D,EAAIoB,EAAO,OAAQpB,IAChD,GAAIoB,EAAOpB,CAAC,EAAE,SAAW,YACvB,OAAOoB,EAAOpB,CAAC,EAKnB,QAASA,EAAI,EAAGA,EAAI4D,EAAc5D,IAChC,GAAIoB,EAAOpB,CAAC,EAAE,SAAW,YACvB,OAAOoB,EAAOpB,CAAC,EAInB,OAAO,IACX,CAKE,uBAAwB,CACtB,MAAMoB,EAAS,KAAK,aAAY,EAChC,IAAIpG,EAAc,EACd6I,EAAkB,EAClB9F,EAAcqD,EAAO,OACrB0C,EAAkB,EAEtB,MAAMlD,EAAa,GAEnB,UAAWU,KAASF,EAAQ,CAC1B,MAAM2C,EAAkBzC,EAAM,YAAc,EAC5CtG,GAAe+I,EAEf,MAAMC,EAAY,CAChB,QAAS1C,EAAM,GACf,WAAYyC,EACZ,OAAQzC,EAAM,OACd,YAAaA,EAAM,SAAW,WACtC,EAEUA,EAAM,SAAW,cACnBwC,IACAD,GAAmBE,GAGrBnD,EAAW,KAAKoD,CAAS,CAC/B,CAEI,MAAMC,EAAiBjJ,EAAc,EAAK6I,EAAkB7I,EAAc,IAAO,EAC3EkJ,EAAsBnG,EAAc,EAAK+F,EAAkB/F,EAAc,IAAO,EAEtF,MAAO,CACL,YAAA/C,EACA,gBAAA6I,EACA,YAAA9F,EACA,gBAAA+F,EACA,eAAgBG,EAAe,QAAQ,CAAC,EACxC,oBAAqBC,EAAoB,QAAQ,CAAC,EAClD,cAAelJ,EAAc6I,EAC7B,WAAAjD,CACN,CACA,CAKE,eAAgB,CACd,MAAMuD,EAAW,KAAK,sBAAqB,EAC3C,MAAO,CACL,YAAaA,EAAS,YACtB,gBAAiBA,EAAS,gBAC1B,YAAaA,EAAS,YACtB,gBAAiBA,EAAS,gBAC1B,eAAgBA,EAAS,cAC/B,CACA,CAKE,aAAc,CACZ,MAAM/C,EAAS,KAAK,aAAY,EAC1BnG,EAAQmG,EAAO,OAGfgD,EAAkB,KAAK,kBAAkB,mBAAmBnJ,CAAK,EAGjEoJ,EAAYjD,EAAO,OAAOE,GAASA,EAAM,SAAW,WAAW,EAAE,OACjEgD,EAAalD,EAAO,OAAOE,GAASA,EAAM,SAAW,aAAa,EAAE,OACpEiD,EAAUnD,EAAO,OAAOE,GAASA,EAAM,SAAW,SAAS,EAAE,OAC7DkD,EAAUpD,EAAO,OAAOE,GAASA,EAAM,SAAW,SAAS,EAAE,OAG7DmD,EAAiBJ,EAAYG,EAG7BE,EAAa,KAAK,cAAa,EAErC,MAAO,CACL,MAAAzJ,EACA,UAAW,KAAK,IAAIoJ,EAAWD,EAAgB,SAAS,EACxD,WAAAE,EACA,QAAAC,EACA,QAAAC,EACA,eAAAC,EACA,eAAgBxJ,EAAQ,GAAK,KAAK,IAAIwJ,EAAgBL,EAAgB,UAAYI,CAAO,EAAIvJ,EAAQ,KAAK,QAAQ,CAAC,EAAI,EACvH,WAAYmJ,EACZ,OAAQM,CACd,CACA,CAKE,aAAaC,EAAO,CAClB,GAAI,CAACA,EACH,OAAO,KAAK,aAAY,EAG1B,MAAMC,EAAaD,EAAM,YAAW,EACpC,OAAO,KAAK,eAAe,OAAOrD,GAChCA,EAAM,GAAG,cAAc,SAASsD,CAAU,GAC1CtD,EAAM,KAAK,YAAW,EAAG,SAASsD,CAAU,CAClD,CACA,CAKE,qBAAqBrI,EAAQ,CAC3B,OAAIA,IAAW,MACN,KAAK,aAAY,EAGnB,KAAK,eAAe,OAAO+E,GAASA,EAAM,SAAW/E,CAAM,CACtE,CAKE,iBAAiB+E,EAAO,CAEtB,MAAMuD,EAAQ,IAAI,YAAY,eAAgB,CAC5C,OAAQ,CAAE,MAAAvD,CAAK,CACrB,CAAK,EACD,SAAS,cAAcuD,CAAK,CAChC,CAKE,SAAU,CACR,KAAK,OAAO,MAAK,EACjB,KAAK,YAAY,MAAK,EACtB,KAAK,iBAAiB,MAAK,EAC3B,KAAK,cAAc,MAAK,EAEpB,KAAK,mBACP,KAAK,kBAAkB,QAAO,CAEpC,CAKE,sBAAuB,CAErB,OAAO,KAAK,kBAAkB,qBAAoB,CACtD,CAKE,2BAA4B,CAC1B,OAAO,KAAK,kBAAkB,0BAAyB,CAC3D,CAME,MAAM,4BAA6B,CACjC,OAAO,MAAM,KAAK,kBAAkB,2BAA0B,CAClE,CAKE,MAAM,oCAAqC,CACzC,OAAO,MAAM,KAAK,kBAAkB,mCAAkC,CAC1E,CAKE,MAAM,gBAAiB,CACrB,MAAMvG,EAAkB,MAAM,KAAK,2BAA0B,EACvDwG,EAAkB,KAAK,kBAAkB,eAAc,EAE7D,MAAO,CACL,WAAY,KAAK,kBAAkB,wBAAwBxG,CAAe,EAC1E,iBAAkBwG,EAClB,eAAgB,mBACtB,CACA,CAKE,MAAM,uBAAwB,CAC5B,QAAQ,IAAI,kBAAkB,EAG9B,MAAMC,EAAmB,KAAK,kBAAkB,eAAc,EAGxDpG,EAAiB,KAAK,kBAAkB,6BAA4B,EAGpEL,EAAkB,MAAM,KAAK,2BAA0B,EAC7D,QAAQ,IAAI,aAAcA,CAAe,EAGzC,MAAM0G,EAAqB,KAAK,kBAAkB,YAClD,QAAQ,IAAI,aAAc,MAAM,KAAKA,EAAmB,QAAO,CAAE,CAAC,EAGlE,MAAMC,EAAa,CACjB,wBAAyBF,EAAiB,qBAC1C,iBAAkB,OAAO,KAAKzG,CAAe,EAAE,OAC/C,qBAAsB0G,EAAmB,IAC/C,EAEI,eAAQ,IAAI,QAASC,CAAU,EAExB,CACL,iBAAAF,EACA,eAAApG,EACA,gBAAAL,EACA,YAAa,MAAM,KAAK0G,EAAmB,QAAO,CAAE,EACpD,WAAAC,CACN,CACA,CAKE,qBAAqBnK,EAAS+B,EAAM,CAClC,GAAI,CACF,MAAMqI,EAAa,oBAAoB,OAAApK,GACjCqK,EAAY,CAChB,GAAGtI,EACH,QAAS,IAAI,KAAI,EAAG,YAAW,CACvC,EACM,aAAa,QAAQqI,EAAY,KAAK,UAAUC,CAAS,CAAC,CAChE,OAAahL,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,CACtC,CACA,CAKE,qBAAqBW,EAAS,CAC5B,GAAI,CACF,MAAMoK,EAAa,oBAAoB,OAAApK,GACjCsK,EAAQ,aAAa,QAAQF,CAAU,EAE7C,GAAIE,EACF,OAAO,KAAK,MAAMA,CAAK,CAE/B,OAAajL,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,CACtC,CAEI,OAAO,IACX,CAME,uBAAuB4C,EAAa,CAClC,GAAI,CAACA,GAAeA,EAAY,SAAW,EACzC,OAIF,MAAMsI,EAAoB,GAG1BtI,EAAY,QAAQsB,GAAc,CAE3BA,EAAW,iBAEVA,EAAW,aACbA,EAAW,eAAiB,UAG5BA,EAAW,eAAiB,SAC5BA,EAAW,aAAeA,EAAW,cAAgB,6BAIzD,MAAMiH,EAAUjH,EAAW,iBAAmB,SAC1C,UAAU,OAAAA,EAAW,cAAgB,WACrC,kCAECgH,EAAkBC,CAAO,IAC5BD,EAAkBC,CAAO,EAAI,IAE/BD,EAAkBC,CAAO,EAAE,KAAKjH,CAAU,CAChD,CAAK,EAED,IAAIkH,EAAa,EAGjB,OAAO,QAAQF,CAAiB,EAAE,QAAQ,CAAC,CAACC,EAASE,CAAe,IAAM,CACxE,IAAIC,EAAiB,GAGrB,QAASzF,EAAI,EAAGA,EAAIwF,EAAgB,OAAQxF,IAC1C,GAAI,OAAOwF,EAAgBxF,CAAC,EAAE,OAAU,UAAYwF,EAAgBxF,CAAC,EAAE,OAAS,EAAG,CACjFyF,EAAiB,GACjB,KACV,CAIM,GAAI,CAACA,EAAgB,CACnB,MAAMC,EAASF,EAAgB,IAAIG,GAAMA,EAAG,KAAK,EAC5B,CAAC,GAAG,IAAI,IAAID,CAAM,CAAC,EACvB,SAAWA,EAAO,SACjCD,EAAiB,GAE3B,CAGM,GAAIA,EAAgB,CAClB,QAAQ,IAAI,MAAM,OAAAH,EAAO,kBAAiB,OAAAE,EAAgB,OAAM,eAAc,EAG9E,QAASxF,EAAI,EAAGA,EAAIwF,EAAgB,OAAQxF,IAC1CwF,EAAgBxF,CAAC,EAAE,MAAQA,EAAI,EAGjCuF,GAAcC,EAAgB,OAC9B,QAAQ,IAAI,MAAM,OAAAF,EAAO,cAAa,OAAAE,EAAgB,OAAQ,CACtE,CACA,CAAK,EAEGD,EAAa,GACf,QAAQ,IAAI,cAAc,OAAAA,EAAU,mBAAkB,CAE5D,CACA,ugCC9yCO,MAAMK,EAAe,CAC1B,YAAYC,EAAU/C,EAAU,GAAI,CAIlC,GAHA,QAAQ,IAAI,8BAA+B,CAAE,SAAA+C,EAAU,UAAW,KAAK,IAAG,EAAI,EAE9E,KAAK,OAAS,SAAS,eAAeA,CAAQ,EAC1C,CAAC,KAAK,OACR,MAAM,IAAI,MAAM,2BAA2B,OAAAA,EAAQ,cAAa,EAGlE,KAAK,IAAM,KAAK,OAAO,WAAW,IAAI,EACtC,KAAK,QAAU,CACb,QAAS,GACT,QAAS,GACT,UAAW,GAEX,mBAAoB,EACpB,kBAAmB,EACnB,kBAAmB,GACnB,oBAAqB,GAErB,kBAAmB,UACnB,mBAAoB,UACpB,mBAAoB,UACpB,sBAAuB,UACvB,oBAAqB,UACrB,oBAAqB,EAErB,oBAAqB,GACrB,mBAAoB,GACpB,YAAa,GAEb,mBAAoB,GACpB,qBAAsB,GACtB,GAAG/C,CACT,EAGI,KAAK,MAAQ,CACX,MAAO,EACP,WAAY,EACZ,WAAY,EACZ,WAAY,GACZ,UAAW,GACX,aAAc,KAEd,oBAAqB,GACrB,eAAgB,KAChB,iBAAkB,KAClB,gBAAiB,KAEjB,iBAAkB,KAClB,yBAA0B,GAC1B,wBAAyB,KAEzB,oBAAqB,GACrB,mBAAoB,EACpB,uBAAwB,GAExB,qBAAsB,GACtB,sBAAuB,EACvB,cAAe,EAEf,2BAA4B,GAE5B,uBAAwB,GACxB,uBAAwB,KACxB,yBAA0B,IAChC,EAGI,KAAK,aAAe,KACpB,KAAK,aAAe,KACpB,KAAK,YAAc,GAGnB,KAAK,UAAY,GACjB,KAAK,gBAAkB,KACvB,KAAK,gBAAkB,KAGvB,KAAK,QAAU,GACf,KAAK,aAAe,GACpB,KAAK,eAAiB,GAGtB,KAAK,wBAA0B,KAC/B,KAAK,yBAA2B,KAGhC,KAAK,0BAA4B,CAC/B,WAAY,GACZ,kBAAmB,KACnB,cAAe,IACrB,EAGI,KAAK,gBAAkB,CACrB,SAAU,GACV,sBAAuB,KACvB,cAAe,IACrB,EAGI,KAAK,kBAAoB,eACzB,KAAK,oBAAsB,KAC3B,KAAK,kBAAoB,IAAI,IAG7B,KAAK,WAAU,EAGf,KAAK,iBAAgB,EAGrB,KAAK,iCAAgC,EAGrC,KAAK,kCAAiC,EAEtC,QAAQ,IAAI,8FAA8F,CAC9G,CAKE,mCAAoC,CAElC,WAAW,IAAM,CACf,MAAMgD,EAAe,SAAS,eAAe,8BAA8B,EACvEA,GAAgBA,EAAa,OAC/B,KAAK,kBAAoBA,EAAa,MACtC,QAAQ,IAAI,wBAAyB,KAAK,iBAAiB,IAG3D,KAAK,kBAAoB,eACrBA,IACFA,EAAa,MAAQ,eACrB,QAAQ,IAAI,gCAAgC,GAGtD,EAAO,GAAG,CACV,CAKE,kBAAmB,CAEjB,KAAK,YAAc,CACjB,WAAY,GACZ,eAAgB,EAChB,gBAAiB,KACjB,kBAAmB,EACzB,EAGI,WAAW,IAAM,CACf,KAAK,sBAAqB,CAChC,EAAO,GAAG,EAGN,KAAK,OAAO,MAAM,OAAS,YAG3B,OAAO,iBAAiB,SAAU,IAAM,CACtC,KAAK,gBAAe,CAC1B,CAAK,CACL,CAKE,sBAAsBC,EAAa,EAAG,CAGpC,MAAMC,EADY,KAAK,OAAO,cACP,sBAAqB,EAG5C,GAAIA,EAAK,QAAU,GAAKA,EAAK,SAAW,EACtC,GAAID,EAAa,GAAY,CAC3B,QAAQ,KAAK,yBAAyB,OAAAA,EAAa,EAAC,OAAiB,EACrE,WAAW,IAAM,CACf,KAAK,sBAAsBA,EAAa,CAAC,CACnD,EAAW,GAAG,EACN,MACR,KAAa,CACL,QAAQ,MAAM,uBAAuB,EAErC,KAAK,OAAO,MAAQ,IACpB,KAAK,OAAO,OAAS,IACrB,KAAK,OAAO,MAAM,MAAQ,QAC1B,KAAK,OAAO,MAAM,OAAS,QAC3B,KAAK,OAAM,EACX,MACR,CAII,KAAK,aAAY,EACjB,KAAK,OAAM,CACf,CAKE,iBAAkB,CAChB,MAAMpL,EAAM,KAAK,IAAG,EAGpB,GAAI,KAAK,YAAY,YAAeA,EAAM,KAAK,YAAY,eAAkB,IAAK,CAChF,QAAQ,MAAM,uCAAuC,EACrD,MACN,CAGQ,KAAK,YAAY,iBACnB,aAAa,KAAK,YAAY,eAAe,EAI/C,KAAK,YAAY,gBAAkB,WAAW,IAAM,CAClD,KAAK,aAAY,EACjB,KAAK,OAAM,CACjB,EAAO,GAAG,CACV,CAKE,cAAe,CAEb,MAAMqL,EADY,KAAK,OAAO,cACP,sBAAqB,EAG5C,GAAIA,EAAK,QAAU,GAAKA,EAAK,SAAW,EAAG,CACzC,QAAQ,KAAK,mBAAmB,EAChC,MACN,CAGI,MAAMC,EAAoB,GAAG,OAAAD,EAAK,MAAK,KAAI,OAAAA,EAAK,QAC1CE,EAAU,KAAK,YAAY,kBAGjC,GAAIA,EAAQ,QAAU,EAAG,CACvB,MAAMC,EAASD,EAAQ,MAAM,EAAE,EAC/B,GAAIC,EAAO,SAASF,CAAiB,GAAKE,EAAO,OAAOC,GAAKA,IAAMH,CAAiB,EAAE,QAAU,EAAG,CACjG,QAAQ,KAAK,uCAAuC,OAAAA,EAAiB,oBAAmB,EACxF,MACR,CACA,CAGIC,EAAQ,KAAKD,CAAiB,EAC1BC,EAAQ,OAAS,GACnBA,EAAQ,MAAK,EAIf,KAAK,YAAY,WAAa,GAC9B,KAAK,YAAY,eAAiB,KAAK,IAAG,EAE1C,GAAI,CAEF,KAAK,OAAO,MAAQF,EAAK,MACzB,KAAK,OAAO,OAASA,EAAK,OAG1B,KAAK,OAAO,MAAM,MAAQA,EAAK,MAAQ,KACvC,KAAK,OAAO,MAAM,OAASA,EAAK,OAAS,KAEzC,QAAQ,IAAI,qBAAqB,OAAAA,EAAK,MAAK,KAAI,OAAAA,EAAK,OAAQ,EAGxD,KAAK,aAAe,KAAK,cAAgB,CAAC,KAAK,YAAY,iBAC7D,KAAK,gBAAe,CAE5B,QAAK,CAEC,WAAW,IAAM,CACf,KAAK,YAAY,WAAa,EACtC,EAAS,GAAG,CACZ,CACA,CAKE,YAAa,CACX,QAAQ,IAAI,gCAAiC,CAAE,UAAW,KAAK,IAAG,EAAI,EAGtE,KAAK,OAAO,iBAAiB,YAAcK,GAAM,KAAK,gBAAgBA,CAAC,CAAC,EACxE,KAAK,OAAO,iBAAiB,YAAcA,GAAM,KAAK,gBAAgBA,CAAC,CAAC,EACxE,KAAK,OAAO,iBAAiB,UAAYA,GAAM,KAAK,cAAcA,CAAC,CAAC,EACpE,KAAK,OAAO,iBAAiB,cAAgBA,GAAM,KAAK,kBAAkBA,CAAC,CAAC,EAG5E,KAAK,OAAO,iBAAiB,QAAUA,GAAM,KAAK,YAAYA,CAAC,EAAG,CAAE,QAAS,EAAK,CAAE,EAGpF,SAAS,iBAAiB,UAAYA,GAAM,KAAK,cAAcA,CAAC,CAAC,EACjE,SAAS,iBAAiB,QAAUA,GAAM,KAAK,YAAYA,CAAC,CAAC,EAG7D,KAAK,OAAO,iBAAiB,cAAgBA,GAAMA,EAAE,gBAAgB,CACzE,CAOE,MAAM,UAAUhL,EAAWiL,EAAe,GAAO,CAC/C,GAAI,CAaF,GAZA,QAAQ,IAAI,iBAAkBjL,EAAU,IAAI,EAG5C,KAAK,mBAAmB,GAAMA,EAAU,EAAE,EAG1C,KAAK,2BAA2B,cAAc,EAE9C,KAAK,aAAeA,EACpB,KAAK,YAAc,GAGf,CAAC,OAAO,qBAAuB,CAAC,OAAO,oBAAoB,iBAE7D,WAAK,mBAAmB,EAAK,EACvB,IAAI,MAAM,8BAA8B,EAGhD,MAAMkL,EAAmB,OAAO,oBAAoB,iBAEpD,GAAI,CAACA,EAAiB,kBAEpB,WAAK,mBAAmB,EAAK,EACvB,IAAI,MAAM,+BAA+B,EAIjD,MAAMC,EAAW,MAAMD,EAAiB,kBAAkB,eAAelL,CAAS,EAGlF,YAAK,aAAe,IAAI,MACxB,KAAK,aAAa,YAAc,YAEzB,IAAI,QAAQ,CAACX,EAAS+L,IAAW,CACtC,KAAK,aAAa,OAAS,IAAM,CAC/B,KAAK,YAAc,GACnB,QAAQ,IAAI,iBAAiB,YAAK,aAAa,MAAK,KAAI,YAAK,aAAa,OAAQ,EAG7EH,EAKH,QAAQ,IAAI,UAAU,GAHtB,KAAK,gBAAe,EACpB,QAAQ,IAAI,WAAW,GASzB,KAAK,OAAM,EAGX,KAAK,mBAAmB,EAAK,EAE7B5L,EAAO,CACjB,EAEQ,KAAK,aAAa,QAAU,IAAM,CAEhC,KAAK,mBAAmB,EAAK,EAC7B+L,EAAO,IAAI,MAAM,sBAAsB,CAAC,CAClD,EAEQ,KAAK,aAAa,IAAMD,CAChC,CAAO,CAEP,OAAarM,EAAO,CACd,cAAQ,MAAM,uBAAwBA,CAAK,EAE3C,KAAK,mBAAmB,EAAK,EACvBA,CACZ,CACA,CAKE,iBAAkB,CAEhB,GAAI,KAAK,YAAY,gBAAiB,CACpC,QAAQ,MAAM,2CAA2C,EACzD,MACN,CAEI,KAAK,YAAY,gBAAkB,GAEnC,GAAI,CACF,KAAK,YAAW,CACtB,QAAK,CAEC,WAAW,IAAM,CACf,KAAK,YAAY,gBAAkB,EAC3C,EAAS,EAAE,CACX,CACA,CAKE,aAAc,CACZ,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YAAa,OAE7C,MAAMuM,EAAc,KAAK,OAAO,MAC1BC,EAAe,KAAK,OAAO,OAC3BC,EAAa,KAAK,aAAa,MAC/BC,EAAc,KAAK,aAAa,OAGtC,GAAIH,GAAe,GAAKC,GAAgB,GAAKC,GAAc,GAAKC,GAAe,EAAG,CAChF,QAAQ,KAAK,gDAAgD,EAC7D,MACN,CAGI,MAAMC,EAAUJ,EAAc,GAAOE,EAC/BG,EAAUJ,EAAe,GAAOE,EAChCG,EAAQ,KAAK,IAAIF,EAAQC,CAAM,EAG/BE,EAAW,KAAK,IAAI,KAAK,QAAQ,QAAS,KAAK,IAAI,KAAK,QAAQ,QAASD,CAAK,CAAC,EAC/EE,EAAc,KAAK,IAAID,EAAW,KAAK,MAAM,KAAK,EAGpDC,EAAc,KAChB,KAAK,MAAM,MAAQD,EAGnB,KAAK,MAAM,YAAcP,EAAcE,EAAa,KAAK,MAAM,OAAS,EACxE,KAAK,MAAM,YAAcD,EAAeE,EAAc,KAAK,MAAM,OAAS,EAE1E,KAAK,eAAc,EACnB,QAAQ,IAAI,wBAAwB,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,cAAa,OAAAK,EAAY,QAAQ,CAAC,EAAC,IAAG,GAErG,QAAQ,MAAM,2BAA2B,OAAAA,EAAY,QAAQ,CAAC,EAAC,qBAAoB,CAEzF,CAKE,WAAY,CACN,CAAC,KAAK,cAAgB,CAAC,KAAK,cAEhC,KAAK,MAAM,MAAQ,EACnB,KAAK,MAAM,WAAa,EACxB,KAAK,MAAM,WAAa,EAExB,KAAK,eAAc,EACnB,KAAK,OAAM,EACf,CAKE,YAAa,CACX,QAAQ,IAAI,WAAW,EAGvB,KAAK,2BAA2B,cAAc,EAG9C,KAAK,aAAe,KACpB,KAAK,aAAe,KACpB,KAAK,YAAc,GAGnB,KAAK,MAAM,MAAQ,EACnB,KAAK,MAAM,WAAa,EACxB,KAAK,MAAM,WAAa,EAGxB,KAAK,0BAAyB,EAG9B,KAAK,oBAAmB,EAGxB,KAAK,eAAc,EACnB,KAAK,OAAM,CACf,CAKE,QAAS,OAIP,GAFA,KAAK,IAAI,UAAU,EAAG,EAAG,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAE1D,CAAC,KAAK,cAAgB,CAAC,KAAK,YAAa,CAC3C,KAAK,kBAAiB,EACtB,MACN,CAGI,KAAK,IAAI,KAAI,EAGb,KAAK,IAAI,UAAU,KAAK,MAAM,WAAY,KAAK,MAAM,UAAU,EAC/D,KAAK,IAAI,MAAM,KAAK,MAAM,MAAO,KAAK,MAAM,KAAK,EAGjD,KAAK,IAAI,UAAU,KAAK,aAAc,EAAG,CAAC,EAG1C,KAAK,IAAI,QAAO,GAGZxL,EAAA,KAAK,0BAAL,MAAAA,EAA8B,SAChC,KAAK,yBAAwB,EAG7B,KAAK,gBAAe,EAItB,KAAK,wBAAuB,CAChC,CAKE,mBAAoB,CAClB,MAAMyL,EAAU,KAAK,OAAO,MAAQ,EAC9BC,EAAU,KAAK,OAAO,OAAS,EAErC,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,SAAS,EAAG,EAAG,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAE7D,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,KAAO,yBAChB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,SAAS,kCAAmCD,EAASC,CAAO,CACzE,CAKE,iBAAkB,CAEhB,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YAAa,CAC3C,QAAQ,IAAI,6DAA6D,EACzE,MACN,CAGI,KAAK,oBAAmB,EAGxB,MAAMC,EAAkB,KAAK,2BAA0B,EAiBvD,GAdA,KAAK,UAAU,QAAQ,CAACC,EAAUC,IAAU,CAC1C,MAAMC,EAAY,KAAK,cAAcF,EAAS,EAAGA,EAAS,CAAC,EAG3D,GAAIA,EAAS,iBAAmB,SAC9B,KAAK,qBAAqBA,EAAUE,EAAWH,CAAe,MACzD,CAEL,MAAMI,EAAW,CAAE,GAAGH,EAAU,eAAgB,SAAU,aAAc,0BAA0B,EAClG,KAAK,qBAAqBG,EAAUD,EAAWH,CAAe,CACtE,CACA,CAAK,EAGG,KAAK,MAAM,qBAAuB,KAAK,MAAM,gBAAiB,CAChE,MAAMK,EAAa,KAAK,cAAc,KAAK,MAAM,gBAAgB,EAAG,KAAK,MAAM,gBAAgB,CAAC,EAC1FC,EAAY,KAAK,MAAM,gBAAgB,UACvCC,EAAYD,IAAc,OAAS,KAAK,QAAQ,kBAAoB,KAAK,QAAQ,mBAGvF,KAAK,IAAI,YAAc,GACvB,KAAK,qBAAqBD,EAAW,EAAGA,EAAW,EAAGE,EAAW,IAAKD,EAAWN,CAAe,EAChG,KAAK,IAAI,YAAc,EAGvB,KAAK,oBAAmB,CAC9B,CAGQ,KAAK,MAAM,wBACb,KAAK,0BAAyB,EAI5B,KAAK,MAAM,0BAA4B,KAAK,MAAM,kBAAoB,KAAK,MAAM,yBACnF,KAAK,8BAA6B,EAIpC,KAAK,oBAAoBA,CAAe,EAGxC,KAAK,yBAAyBA,CAAe,CACjD,CAKE,sBAAsBC,EAAUE,EAAWH,EAAiBE,EAAO,CAEjE,MAAMM,EAAY,KAAK,kBAAoBP,EACrCQ,EAAa,KAAK,MAAM,mBAAqBR,EACnD,IAAIM,EAEAE,EACFF,EAAY,KAAK,QAAQ,sBAChBC,EACTD,EAAY,KAAK,QAAQ,mBAChBN,EAAS,gBAAkB,SAAW,OAAOA,EAAS,WAAc,SAE7EM,EAAY,UACHN,EAAS,YAAc,OAChCM,EAAY,KAAK,QAAQ,kBAChBN,EAAS,YAAc,QAChCM,EAAY,KAAK,QAAQ,mBAGzBA,EAAY,UAId,MAAMG,EAAeT,EAAS,OAAUC,EAAQ,EAEhD,KAAK,qBAAqBC,EAAU,EAAGA,EAAU,EAAGI,EAAWG,EAAcT,EAAS,UAAWD,EAAiBC,CAAQ,EAGtHA,EAAS,YAAcA,EAAS,WAAW,OAAS,EACtD,KAAK,yBAAyBA,CAAQ,EAGtC,KAAK,yBAAyBE,EAAU,EAAGA,EAAU,EAAGF,EAAS,UAAWA,CAAQ,CAE1F,CAKE,qBAAqBA,EAAUE,EAAWH,EAAiB,CACzD,MAAMW,EAAa,KAAK,cAAcV,EAAS,YAAY,EAC3D,GAAI,CAACU,EAAY,CACf,QAAQ,KAAK,eAAe,OAAAV,EAAS,aAAY,aAAY,EAC7D,MACN,CAGI,MAAMO,EAAY,KAAK,kBAAoBP,EACrCQ,EAAa,KAAK,MAAM,mBAAqBR,EACnD,IAAIW,EAAQ,EAERH,EACFG,EAAQ,GACCJ,IACTI,EAAQ,IAGV,KAAK,IAAI,KAAI,EACb,KAAK,IAAI,YAAcA,EAEnBX,EAAS,OAASA,EAAS,OAE7B,KAAK,mBAAmBA,EAAUE,EAAWQ,EAAYX,CAAe,EAGxE,KAAK,kBAAkBC,EAAUE,EAAWQ,EAAYX,CAAe,EAGzE,KAAK,IAAI,QAAO,CACpB,CAKE,kBAAkBC,EAAUE,EAAWQ,EAAYX,EAAiB,CAElE,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,IAAIG,EAAU,EAAGA,EAAU,EAAGH,EAAgB,OAAQ,EAAG,EAAI,KAAK,EAAE,EAC7E,KAAK,IAAI,UAAYW,EAAW,MAChC,KAAK,IAAI,KAAI,EAGb,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAYX,EAAgB,YACrC,KAAK,IAAI,OAAM,EAGXA,EAAgB,mBAClB,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,KAAO,QAAQ,OAAAA,EAAgB,SAAQ,YAChD,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAASC,EAAS,MAAM,SAAQ,EAAIE,EAAU,EAAGA,EAAU,CAAC,GAC5DH,EAAgB,mBACzB,KAAK,uBAAuBC,EAAUE,EAAWQ,EAAYX,CAAe,EAIxEW,GAAcA,EAAW,UAAYA,EAAW,SAAS,gBAAkB,IAC/E,KAAK,yBAAyBR,EAAU,EAAGA,EAAU,EAAGF,EAAS,UAAWA,CAAQ,CAE1F,CAKE,mBAAmBA,EAAUE,EAAWQ,EAAYX,EAAiB,CAEnE,MAAMa,EAAoB,KAAK,cAC7BZ,EAAS,EAAIA,EAAS,MACtBA,EAAS,EAAIA,EAAS,MAC5B,EAEUa,EAAcD,EAAkB,EAAIV,EAAU,EAC9CY,EAAeF,EAAkB,EAAIV,EAAU,EAGrD,KAAK,IAAI,UAAYQ,EAAW,MAChC,KAAK,IAAI,YAAc,GACvB,KAAK,IAAI,SAASR,EAAU,EAAGA,EAAU,EAAGW,EAAaC,CAAY,EAGrE,KAAK,IAAI,YAAc,EACvB,KAAK,IAAI,YAAcJ,EAAW,MAClC,KAAK,IAAI,UAAYX,EAAgB,YACrC,KAAK,IAAI,WAAWG,EAAU,EAAGA,EAAU,EAAGW,EAAaC,CAAY,EAGvE,MAAMjB,EAAUK,EAAU,EAAIW,EAAc,EACtCf,EAAUI,EAAU,EAAIY,EAAe,EAEzCf,EAAgB,mBAAqB,KAAK,IAAIc,EAAaC,CAAY,EAAI,KAC7E,KAAK,IAAI,UAAYJ,EAAW,MAChC,KAAK,IAAI,KAAO,QAAQ,OAAAX,EAAgB,SAAQ,YAChD,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAASC,EAAS,MAAM,SAAQ,EAAIH,EAASC,CAAO,GAG3DC,EAAgB,mBAClB,KAAK,wBAAwBC,EAAU,CAAE,EAAGH,EAAS,EAAGK,EAAU,GAAKQ,EAAYX,CAAe,EAI9FW,GAAcA,EAAW,UAAYA,EAAW,SAAS,gBAAkB,IAC/E,KAAK,yBACHb,EACAC,EACAE,EAAS,UACTA,CACR,CAEA,CAKE,uBAAuBA,EAAUE,EAAWQ,EAAYX,EAAiB,CACvE,MAAMgB,EAASb,EAAU,EAAIH,EAAgB,OAASA,EAAgB,YAEtE,KAAK,IAAI,KAAI,EAGb,MAAMiB,EAAY,GAAG,OAAAN,EAAW,KAAI,MAAK,OAAAV,EAAS,OAClD,KAAK,IAAI,KAAO,GAAG,OAAAD,EAAgB,SAAQ,YAE3C,MAAMkB,EADc,KAAK,IAAI,YAAYD,CAAS,EACpB,MAGxBE,EAAU,EAChB,KAAK,IAAI,UAAYR,EAAW,MAChC,KAAK,IAAI,SACPR,EAAU,EAAIe,EAAY,EAAIC,EAC9BH,EAAShB,EAAgB,SAAW,EAAImB,EACxCD,EAAYC,EAAU,EACtBnB,EAAgB,SAAWmB,EAAU,CAC3C,EAGI,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAASF,EAAWd,EAAU,EAAGa,CAAM,EAEhD,KAAK,IAAI,QAAO,CACpB,CAKE,wBAAwBf,EAAUE,EAAWQ,EAAYX,EAAiB,CACxE,MAAMgB,EAASb,EAAU,EAAIH,EAAgB,YAE7C,KAAK,IAAI,KAAI,EAGb,MAAMiB,EAAY,GAAG,OAAAN,EAAW,KAAI,MAAK,OAAAV,EAAS,OAClD,KAAK,IAAI,KAAO,GAAG,OAAAD,EAAgB,SAAQ,YAE3C,MAAMkB,EADc,KAAK,IAAI,YAAYD,CAAS,EACpB,MAGxBE,EAAU,EAChB,KAAK,IAAI,UAAYR,EAAW,MAChC,KAAK,IAAI,SACPR,EAAU,EAAIe,EAAY,EAAIC,EAC9BH,EAAShB,EAAgB,SAAW,EAAImB,EACxCD,EAAYC,EAAU,EACtBnB,EAAgB,SAAWmB,EAAU,CAC3C,EAGI,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAASF,EAAWd,EAAU,EAAGa,CAAM,EAEhD,KAAK,IAAI,QAAO,CACpB,CAKE,2BAA4B,OAC1B,GAAI,CAAC,KAAK,MAAM,uBAAwB,OAExC,MAAMI,EAAiB,KAAK,MAAM,uBAC5BC,EAAmB,KAAK,MAAM,yBAEpC,GAAI,CAACD,GAAkB,CAACC,EAAkB,OAE1C,MAAMV,GAAatM,EAAA,KAAK,0BAAL,YAAAA,EAA8B,uBACjD,GAAI,CAACsM,GAAcA,EAAW,OAAS,SAAU,OAEjD,MAAMW,EAAO,KAAK,IAAIF,EAAe,EAAGC,EAAiB,CAAC,EACpDE,EAAM,KAAK,IAAIH,EAAe,EAAGC,EAAiB,CAAC,EACnDG,EAAQ,KAAK,IAAIH,EAAiB,EAAID,EAAe,CAAC,EACtDK,EAAS,KAAK,IAAIJ,EAAiB,EAAID,EAAe,CAAC,EAE7D,KAAK,IAAI,KAAI,EACb,KAAK,IAAI,YAAc,GAGvB,KAAK,IAAI,UAAYT,EAAW,MAChC,KAAK,IAAI,SAASW,EAAMC,EAAKC,EAAOC,CAAM,EAG1C,KAAK,IAAI,YAAcd,EAAW,MAClC,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAC3B,KAAK,IAAI,WAAWW,EAAMC,EAAKC,EAAOC,CAAM,EAG5C,KAAK,IAAI,YAAc,GACvB,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,KAAO,aAChB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SAExB,MAAMC,EAAW,GAAG,YAAK,MAAMF,CAAK,EAAC,KAAI,YAAK,MAAMC,CAAM,GAC1D,KAAK,IAAI,SAASC,EAAUJ,EAAOE,EAAM,EAAGD,EAAME,EAAO,CAAC,EAE1D,KAAK,IAAI,QAAO,CACpB,CAKE,qBAAqBE,EAAGC,EAAGrB,EAAWsB,EAAOvB,EAAWwB,EAAU7B,EAAW,KAAM,CAEjF,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,IAAI0B,EAAGC,EAAGE,EAAS,OAAQ,EAAG,EAAI,KAAK,EAAE,EAGlD,KAAK,IAAI,UAAYvB,EACrB,KAAK,IAAI,KAAI,EAGb,KAAK,IAAI,YAAc,KAAK,QAAQ,oBACpC,KAAK,IAAI,UAAYuB,EAAS,YAC9B,KAAK,IAAI,OAAM,EAGXA,EAAS,mBAEX,KAAK,IAAI,UAAY,KAAK,QAAQ,oBAClC,KAAK,IAAI,KAAO,QAAQ,OAAAA,EAAS,SAAQ,wBACzC,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAASD,EAAM,SAAQ,EAAIF,EAAGC,CAAC,GAI/BE,EAAS,kBAElB,KAAK,oBAAoBH,EAAGC,EAAGC,EAAOvB,EAAWC,EAAWuB,CAAQ,EAE3DA,EAAS,iBAEd7B,GAAY,KAAK,kBAAoBA,GACvC,KAAK,cAAc0B,EAAGC,EAAGC,EAAOvB,EAAWL,CAAQ,CAG3D,CAKE,qBAAsB,CACpB,GAAI,CAAC,KAAK,MAAM,gBAAkB,CAAC,KAAK,MAAM,iBAAkB,OAEhE,MAAM8B,EAAS,KAAK,MAAM,eAAe,EACnCC,EAAS,KAAK,MAAM,eAAe,EACnCC,EAAW,KAAK,MAAM,iBAAiB,EACvCC,EAAW,KAAK,MAAM,iBAAiB,EAGvCC,EAASF,EAAWF,EAG1B,GAFiB,KAAK,KAAKI,EAASA,GAAUD,EAAWF,IAAWE,EAAWF,EAAO,GAEtE,KAAK,QAAQ,mBAAoB,CAE/C,KAAK,IAAI,YAAcG,EAAS,EAAI,KAAK,QAAQ,kBAAoB,KAAK,QAAQ,mBAClF,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAE3B,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAOJ,EAAQC,CAAM,EAC9B,KAAK,IAAI,OAAOC,EAAUC,CAAQ,EAClC,KAAK,IAAI,OAAM,EAGf,KAAK,IAAI,YAAY,EAAE,EAGvB,MAAME,GAAQL,EAASE,GAAY,EAC7BI,GAAQL,EAASE,GAAY,EAAI,GAEvC,KAAK,IAAI,UAAYC,EAAS,EAAI,KAAK,QAAQ,kBAAoB,KAAK,QAAQ,mBAChF,KAAK,IAAI,KAAO,8BAChB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,SAASA,EAAS,EAAI,SAAW,UAAWC,EAAMC,CAAI,CACrE,CACA,CAKE,cAAcC,EAAQC,EAAQ,CAC5B,MAAO,CACL,EAAGD,EAAS,KAAK,MAAM,MAAQ,KAAK,MAAM,WAC1C,EAAGC,EAAS,KAAK,MAAM,MAAQ,KAAK,MAAM,UAChD,CACA,CAKE,cAAcC,EAASC,EAAS,CAC9B,MAAO,CACL,GAAID,EAAU,KAAK,MAAM,YAAc,KAAK,MAAM,MAClD,GAAIC,EAAU,KAAK,MAAM,YAAc,KAAK,MAAM,KACxD,CACA,CAKE,YAAYjF,EAAO,CACjB,MAAMmB,EAAO,KAAK,OAAO,sBAAqB,EAC9C,MAAO,CACL,EAAGnB,EAAM,QAAUmB,EAAK,KACxB,EAAGnB,EAAM,QAAUmB,EAAK,GAC9B,CACA,CAKE,uBAAwB,CACtB,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YAC9B,OAAO,KAIT,MAAMY,EAAa,KAAK,aAAa,MAAQ,KAAK,MAAM,MAClDC,EAAc,KAAK,aAAa,OAAS,KAAK,MAAM,MAGpDkD,EAAY,KAAK,MAAM,WACvBC,EAAW,KAAK,MAAM,WAGtBC,EAAgB,CACpB,KAAM,KAAK,IAAI,EAAGF,CAAS,EAC3B,IAAK,KAAK,IAAI,EAAGC,CAAQ,EACzB,MAAO,KAAK,IAAI,KAAK,OAAO,MAAOD,EAAYnD,CAAU,EACzD,OAAQ,KAAK,IAAI,KAAK,OAAO,OAAQoD,EAAWnD,CAAW,EAE3D,UAAAkD,EACA,SAAAC,EACA,WAAYD,EAAYnD,EACxB,YAAaoD,EAAWnD,CAC9B,EAGI,OAAI,KAAK,OAAM,EAAK,MAClB,QAAQ,IAAI,uCAAwC,CAClD,UAAW,CAAE,MAAO,KAAK,aAAa,MAAO,OAAQ,KAAK,aAAa,MAAM,EAC7E,WAAY,CAAE,MAAO,KAAK,OAAO,MAAO,OAAQ,KAAK,OAAO,MAAM,EAClE,MAAO,KAAK,MAAM,MAClB,UAAW,CAAE,EAAG,KAAK,MAAM,WAAY,EAAG,KAAK,MAAM,UAAU,EAC/D,cAAAoD,EACA,YAAa,KAAK,WAC1B,CAAO,EAGIA,CACX,CAKE,sBAAsBJ,EAASC,EAAS,CACtC,MAAMI,EAAS,KAAK,sBAAqB,EACzC,OAAKA,EAKEL,GAAWK,EAAO,MAClBL,GAAWK,EAAO,OAClBJ,GAAWI,EAAO,KAClBJ,GAAWI,EAAO,OAPhB,EAQb,CAKE,uBAAuBP,EAAQC,EAAQ,CACrC,MAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YACvB,GAGFD,GAAU,GACVA,GAAU,KAAK,aAAa,OAC5BC,GAAU,GACVA,GAAU,KAAK,aAAa,MACvC,CAKE,sBAAsBC,EAASC,EAAS,CAEtC,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YAC9B,eAAQ,KAAK,4DAA4D,EAClE,GAIT,GAAI,CAAC,KAAK,sBAAsBD,EAASC,CAAO,EAC9C,eAAQ,KAAK,mFAAmF,EACzF,GAIT,MAAMK,EAAW,KAAK,cAAcN,EAASC,CAAO,EACpD,OAAK,KAAK,uBAAuBK,EAAS,EAAGA,EAAS,CAAC,EAKhD,IAJL,QAAQ,KAAK,iFAAiF,EACvF,GAIb,CAKE,oBAAoBN,EAASC,EAAS,CAOpC,GALI,CAAC,KAAK,cAAgB,CAAC,KAAK,aAK5B,CAAC,KAAK,sBAAsBD,EAASC,CAAO,EAC9C,MAAO,GAIT,MAAMK,EAAW,KAAK,cAAcN,EAASC,CAAO,EACpD,MAAK,OAAK,uBAAuBK,EAAS,EAAGA,EAAS,CAAC,CAK3D,CAKE,cAAcN,EAASC,EAAS,CAG9B,GAFA,QAAQ,IAAI,0CAA2C,CAAE,QAAAD,EAAS,QAAAC,CAAO,CAAE,EAEvE,CAAC,KAAK,cAAgB,CAAC,KAAK,YAC9B,eAAQ,IAAI,oBAAoB,EACzB,GAGT,MAAMI,EAAS,KAAK,sBAAqB,EACzC,QAAQ,IAAI,qBAAsBA,CAAM,EAExC,MAAME,EAAgB,KAAK,sBAAsBP,EAASC,CAAO,EACjE,QAAQ,IAAI,sBAAuBM,CAAa,EAEhD,MAAMD,EAAW,KAAK,cAAcN,EAASC,CAAO,EAC9CO,EAAc,KAAK,uBAAuBF,EAAS,EAAGA,EAAS,CAAC,EACtE,QAAQ,IAAI,mBAAoBA,EAAU,SAAUE,CAAW,EAE/D,MAAMC,EAAc,KAAK,oBAAoBT,EAASC,CAAO,EAC7D,eAAQ,IAAI,kBAAmBQ,CAAW,EAEnCA,CACX,CAKE,MAAM,gBAAgBzF,EAAO,WAC3B,QAAQ,IAAI,2BAA4B,CACtC,OAAQA,EAAM,OACd,UAAW,KAAK,IAAG,EACnB,OAAQA,EAAM,OAAO,QACrB,UAAWA,EAAM,UACjB,KAAMA,EAAM,KACZ,WAAYA,EAAM,WAClB,QAASA,EAAM,QACf,WAAYA,EAAM,WAClB,WAAY,IAAI,QAAQ,KAC9B,CAAK,EAED,MAAM0F,EAAW,KAAK,YAAY1F,CAAK,EAEvC,GAAIA,EAAM,SAAW,EACnB,GAAIA,EAAM,SAER,KAAK,MAAM,UAAY,GACvB,KAAK,MAAM,aAAe0F,EAC1B,KAAK,OAAO,MAAM,OAAS,eACtB,CAEL,MAAMC,EAA0B,KAAK,sBAAsBD,CAAQ,EAEnE,GAAIC,EAAyB,CAE3B,KAAK,4BAA4BA,EAAyBD,CAAQ,EAGlE,KAAK,0BAA0BC,EAAyBD,CAAQ,EAChE,MACV,CAGQ,MAAME,EAAkB,KAAK,cAAcF,CAAQ,EAEnD,GAAIE,EAAiB,CASnB,GARA,QAAQ,IAAI,cAAe,CACzB,gBAAiBA,EAAgB,MACjC,yBAA0B,KAAK,MAAM,yBACrC,kBAAkB/O,EAAA,KAAK,MAAM,mBAAX,YAAAA,EAA6B,MAC/C,eAAgB,KAAK,MAAM,mBAAqB+O,CAC5D,CAAW,EAGG,KAAK,MAAM,0BAA4B,KAAK,MAAM,mBAAqBA,EAAiB,CAC1F,QAAQ,IAAI,aAAa,EACzB,GAAI,CACF,MAAM,KAAK,yBAAyBF,CAAQ,CAC1D,OAAqBpQ,EAAO,CACd,QAAQ,MAAM,mBAAoBA,CAAK,CACrD,CACY,MACZ,CAIU,KAAK,gBAAkBsQ,EACvB,KAAK,MAAM,eAAiBF,EAC5B,KAAK,MAAM,cAAgB,KAAK,IAAG,EACnC,KAAK,MAAM,wBAA0B,GACrC,KAAK,OAAO,MAAM,OAAS,WAG3B,MACV,KAAe,CAEL,GAAI,KAAK,MAAM,yBAA0B,CAEvC,QAAQ,IAAI,uBAAuB,EACnC,GAAI,CACF,MAAM,KAAK,yBAAyBA,CAAQ,CAC1D,OAAqBpQ,EAAO,CACd,QAAQ,MAAM,mBAAoBA,CAAK,CACrD,CACY,MACZ,CAGU,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YAAa,CAC3C,QAAQ,KAAK,4DAA4D,GACrEmC,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,kBAAmB,8DAA8D,EAExH,MACZ,CAGU,GAAI,KAAK,yBAA2B,KAAK,wBAAwB,eAAc,EAAI,CACjF,MAAM0L,EAAa,KAAK,wBAAwB,qBAAoB,EACpE,GAAI,CAACA,EAAY,CACf,QAAQ,KAAK,yBAAyB,EACtC,MACd,CACY,GAAIA,EAAW,OAAS,SAAU,CAEhC,KAAK,2BAA2BuC,CAAQ,EACxC,MACd,CACY,GAAIvC,EAAW,OAAS,QAAS,CAE/B,KAAK,MAAM,oBAAsBuC,EACjC,KAAK,MAAM,cAAgB,KAAK,IAAG,EACnC,KAAK,MAAM,wBAA0B,GACrC,MACd,CACA,CAGU,QAAQ,KAAK,6FAA6F,GACtGtN,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,sBAAuB,0EAA0E,EAExI,MACV,CACA,MACe4H,EAAM,SAAW,EACtB,KAAK,MAAM,oBAEb,KAAK,uBAAsB,EAClB,KAAK,MAAM,0BAEpB,KAAK,yBAAyB,EAAI,EAE3BA,EAAM,SAAW,GAC1B,KAAK,wBAAwB0F,CAAQ,CAE3C,CAKE,gBAAgB1F,EAAO,CACrB,MAAM0F,EAAW,KAAK,YAAY1F,CAAK,EAEvC,GAAI,KAAK,MAAM,WAAa,KAAK,MAAM,aAAc,CAEnD,MAAM2E,EAASe,EAAS,EAAI,KAAK,MAAM,aAAa,EAC9CG,EAASH,EAAS,EAAI,KAAK,MAAM,aAAa,EAEpD,KAAK,MAAM,YAAcf,EACzB,KAAK,MAAM,YAAckB,EAEzB,KAAK,MAAM,aAAeH,EAC1B,KAAK,OAAM,CAEjB,SAAe,KAAK,gBAAiB,CAE/B,MAAMJ,EAAW,KAAK,cAAcI,EAAS,EAAGA,EAAS,CAAC,EAGtD,KAAK,uBAAuBJ,EAAS,EAAGA,EAAS,CAAC,IACpD,KAAK,gBAAgB,EAAIA,EAAS,EAClC,KAAK,gBAAgB,EAAIA,EAAS,EAGlC,KAAK,MAAM,wBAA0B,GAErC,KAAK,OAAM,EAGX,KAAK,6BAA6B,KAAK,eAAe,EAI9D,SAAe,KAAK,0BAA0B,WAExC,KAAK,2BAA2BI,CAAQ,UAE/B,KAAK,MAAM,oBAEH,KAAK,KACpB,KAAK,IAAIA,EAAS,EAAI,KAAK,MAAM,oBAAoB,EAAG,CAAC,EACzD,KAAK,IAAIA,EAAS,EAAI,KAAK,MAAM,oBAAoB,EAAG,CAAC,CACjE,GAEsB,KAAK,QAAQ,qBAE3B,KAAK,MAAM,wBAA0B,GAGrC,KAAK,yBAAyB,KAAK,MAAM,mBAAmB,EAC5D,KAAK,MAAM,oBAAsB,KACjC,KAAK,wBAAwBA,CAAQ,WAG9B,KAAK,MAAM,oBAEpB,KAAK,wBAAwBA,CAAQ,UAE5B,KAAK,MAAM,uBAEpB,KAAK,uBAAuBA,CAAQ,UAE3B,KAAK,MAAM,yBAA0B,CAE9C,KAAK,MAAM,wBAA0BA,EAGrC,IAAII,EAAkB,YAGtB,GAAI,KAAK,MAAM,iBAAkB,CAC/B,MAAMC,EAAiB,KAAK,cAC1B,KAAK,MAAM,iBAAiB,EAC5B,KAAK,MAAM,iBAAiB,CACtC,EACyB,KAAK,KACpB,KAAK,IAAIL,EAAS,EAAIK,EAAe,EAAG,CAAC,EACzC,KAAK,IAAIL,EAAS,EAAIK,EAAe,EAAG,CAAC,CACnD,GAGyB,KAAK,QAAQ,mBAAqB,IACjDD,EAAkB,UAE5B,CAGU,KAAK,OAAO,MAAM,SAAWA,IAC/B,KAAK,OAAO,MAAM,OAASA,GAG7B,KAAK,OAAM,CAEjB,KAAW,CAEL,MAAME,EAA0B,KAAK,sBAAsBN,CAAQ,EAEnE,GAAIM,EAAyB,CAE3B,KAAK,OAAO,MAAM,OAAS,UAGvB,KAAK,0BACP,KAAK,yBAAyB,qBAAqBA,CAAuB,EAG5E,KAAK,OAAM,EACX,MACR,MAEY,KAAK,0BACP,KAAK,yBAAyB,qBAAqB,IAAI,EAK3D,MAAMC,EAAkB,KAAK,cAAcP,CAAQ,EAGnD,IAAIQ,EAAY,YAGZ,KAAK,MAAM,oBAETD,EACFC,EAAY,UAEZA,EAAY,YAEL,KAAK,yBAA2B,KAAK,wBAAwB,eAAc,EAEhFD,EACFC,EAAY,UAIZA,EADoB,KAAK,oBAAoBR,EAAS,EAAGA,EAAS,CAAC,EACzC,YAAc,cAItCO,EACFC,EAAY,UAIZA,EADoB,KAAK,oBAAoBR,EAAS,EAAGA,EAAS,CAAC,EACzC,YAAc,cAKxC,KAAK,OAAO,MAAM,SAAWQ,IAC/B,KAAK,OAAO,MAAM,OAASA,GAIzBD,IAAoB,KAAK,kBAC3B,KAAK,gBAAkBA,EACvB,KAAK,OAAM,EAEnB,CACA,CAKE,cAAcjG,EAAO,SACnB,MAAM0F,EAAW,KAAK,YAAY1F,CAAK,EASvC,GAPI,KAAK,MAAM,YACb,KAAK,MAAM,UAAY,GACvB,KAAK,MAAM,aAAe,KAC1B,KAAK,OAAO,MAAM,OAAS,aAIzB,KAAK,gBAAiB,CAExB,MAAMmG,EAAW,KAAK,MAAM,gBAAkBT,EACxCU,EAAW,KAAK,KACpB,KAAK,IAAIV,EAAS,EAAIS,EAAS,EAAG,CAAC,EACnC,KAAK,IAAIT,EAAS,EAAIS,EAAS,EAAG,CAAC,CAC3C,EAGYE,EAAc,KAAK,IAAG,EACtBC,EAAqBD,GAAe,KAAK,MAAM,eAAiBA,GAChEE,EAAa,KAAK,MAAM,yBAA2B,GAGrDH,EAAW,GAAKE,EAAqB,KAAO,CAACC,EAE/C,KAAK,oBAAoB,KAAK,eAAe,GAG7C,KAAK,UAAS,EACd,KAAK,qBAAoB,EAGzB,KAAK,oBAAoB,gBAAiB,KAAK,gBAAiB,KAAK,MAAM,cAAc,GAI3F,KAAK,gBAAkB,KACvB,KAAK,MAAM,wBAA0B,GACrC,KAAK,MAAM,cAAgB,KAC3B,KAAK,OAAO,MAAM,OAAS,YAC3B,KAAK,qBAAoB,CAC/B,CAGI,GAAI,KAAK,MAAM,oBAAqB,CAClC,MAAMH,EAAW,KAAK,KACpB,KAAK,IAAIV,EAAS,EAAI,KAAK,MAAM,oBAAoB,EAAG,CAAC,EACzD,KAAK,IAAIA,EAAS,EAAI,KAAK,MAAM,oBAAoB,EAAG,CAAC,CACjE,EAEYW,EAAc,KAAK,IAAG,EACtBC,EAAqBD,GAAe,KAAK,MAAM,eAAiBA,GAChEE,EAAa,KAAK,MAAM,yBAA2B,GAGzD,GAAIH,EAAW,GAAKE,EAAqB,KAAO,CAACC,EAE/C,KAD0B1P,EAAA,KAAK,0BAAL,YAAAA,EAA8B,qBAAoBY,EAAA,KAAK,wBAAwB,yBAA7B,YAAAA,EAAqD,QAAS,QACnH,CAErB,MAAM6N,EAAW,KAAK,cAAc,KAAK,MAAM,oBAAoB,EAAG,KAAK,MAAM,oBAAoB,CAAC,EAChGkB,EAAc,KAAK,wBAAwB,qBAAoB,EAE/D1F,EAAK,KAAK,yBAAyBwE,EAAS,EAAGA,EAAS,EAAG,OAAWkB,EAAY,EAAE,EACtF1F,IAEF,OAAOA,EAAG,UACV,OAAOA,EAAG,cACV,KAAK,OAAM,EACX,KAAK,qBAAoB,EAErC,MAEU,KAAK,0BAA0B,KAAK,MAAM,mBAAmB,EAKjE,KAAK,MAAM,oBAAsB,KACjC,KAAK,MAAM,cAAgB,KAC3B,KAAK,MAAM,wBAA0B,EAC3C,CAIQ,KAAK,0BAA0B,YACjC,KAAK,2BAA0B,EAG7B,KAAK,MAAM,qBAEb,KAAK,0BAAyB,EAG5B,KAAK,MAAM,wBAEb,KAAK,uBAAsB,CAEjC,CAKE,0BAA0B4E,EAAU,aAElC,GAAI,CAAC,KAAK,yBAA2B,CAAC,KAAK,wBAAwB,iBAAkB,EAC/E7O,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,sBAAuB,6DAA6D,EAE3H,MACN,CAGI,GAAI,CAAC,KAAK,sBAAsB6O,EAAS,EAAGA,EAAS,CAAC,EAAG,EACnDjO,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,mBAAoB,2FAA2F,EAEtJ,MACN,CAEI,MAAM6N,EAAW,KAAK,cAAcI,EAAS,EAAGA,EAAS,CAAC,EAGpDc,EAAc,KAAK,wBAAwB,qBAAoB,EACrE,GAAI,CAACA,EAAa,EACZpO,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,mBAAoB,qDAAqD,EAEhH,MACN,CAEI,GAAIoO,EAAY,OAAS,SAAU,CAEjC,KAAK,6BAA6Bd,EAAUc,EAAY,EAAE,EAC1D,MACN,CAGsB,eAAOC,EAAAD,EAAY,WAAZ,YAAAC,EAAsB,eAAiB,UAAWD,EAAY,SAAS,aAC/E,KAAK,yBAAyBlB,EAAS,EAAGA,EAAS,EAAGkB,EAAY,EAAE,CAGzF,CAKE,eAAe/D,EAAU,OACvB,QAAQ,IAAI,0BAA2B,CACrC,SAAUA,EAAS,MACnB,iBAAkBA,EAAS,UAC3B,cAAeA,EAAS,aAC9B,CAAK,EAGD,KAAK,4BAA4BA,CAAQ,EAEzC,KAAK,MAAM,iBAAmBA,EAC9B,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,wBAA0B,KAErC,QAAQ,IAAI,gBAAiB,CAC3B,yBAA0B,KAAK,MAAM,yBACrC,kBAAkB5L,EAAA,KAAK,MAAM,mBAAX,YAAAA,EAA6B,MAC/C,oBAAqB,KAAK,MAAM,mBACtC,CAAK,EAGD,KAAK,OAAO,MAAM,OAAS,YAG3B,KAAK,8BAA8B4L,CAAQ,EAE3C,KAAK,OAAM,EACX,QAAQ,IAAI,sBAAsB,OAAAA,EAAS,MAAK,2BAA0B,CAC9E,CAKE,oBAAoBA,EAAU,OAC5B,QAAQ,IAAI,+BAAgC,CAC1C,SAAUA,EAAS,MACnB,oBAAqB,KAAK,MAAM,oBAChC,yBAA0B,KAAK,MAAM,yBACrC,yBAAyB5L,EAAA,KAAK,MAAM,mBAAX,YAAAA,EAA6B,KAC5D,CAAK,EAEG,KAAK,MAAM,oBAEb,KAAK,eAAe4L,CAAQ,EAI5B,KAAK,eAAeA,CAAQ,CAElC,CAKE,MAAM,yBAAyBiD,EAAU,CAOvC,GANA,QAAQ,IAAI,oCAAqC,CAC/C,iBAAkB,KAAK,MAAM,iBAC7B,SAAAA,EACA,oBAAqB,KAAK,MAAM,mBACtC,CAAK,EAEG,CAAC,KAAK,MAAM,iBAAkB,CAChC,QAAQ,IAAI,sBAAsB,EAClC,MACN,CAEI,MAAMK,EAAiB,KAAK,cAC1B,KAAK,MAAM,iBAAiB,EAC5B,KAAK,MAAM,iBAAiB,CAClC,EAGUpB,EAASe,EAAS,EAAIK,EAAe,EACrCF,EAASH,EAAS,EAAIK,EAAe,EACrCW,EAAQ,KAAK,MAAMb,EAAQlB,CAAM,EAAI,IAAM,KAAK,GAGhDgC,GAAmBD,EAAQ,KAAO,IAGlCpB,EAAW,KAAK,cAAcI,EAAS,EAAGA,EAAS,CAAC,EACpDkB,EAAY,CAChB,EAAGtB,EAAS,EACZ,EAAGA,EAAS,EACZ,QAASI,EAAS,EAClB,QAASA,EAAS,EAClB,UAAW,KAAK,IAAG,CACzB,EASI,GAPA,QAAQ,IAAI,eAAgB,CAC1B,OAAAf,EAAQ,OAAAkB,EAAQ,MAAAa,EAAO,gBAAAC,EACvB,UAAAC,EACA,eAAgB,CAAC,GAAG,KAAK,MAAM,gBAAgB,CACrD,CAAK,EAGG,KAAK,MAAM,iBAAiB,cAAgB,EAAG,CAEjD,MAAM9D,EAAY,CAChB,MAAO6D,EACP,KAAM,QACN,cAAeC,CACvB,EAEU,KAAK,uBAAuB,KAAK,MAAM,iBAAkB9D,CAAS,IAEpE,KAAK,MAAM,gBAEX,QAAQ,IAAI,cAAc,YAAK,MAAM,cAAa,KAAI,YAAK,MAAM,iBAAiB,cAAa,MAAK,OAAA6D,EAAgB,QAAQ,CAAC,EAAC,IAAG,EAGjI,KAAK,2BAA0B,EAG/B,KAAK,oBAAoB,iBAAkB,KAAK,MAAM,gBAAgB,EAGlE,KAAK,MAAM,iBAAiB,WAAW,QAAU,KAAK,MAAM,iBAAiB,gBAC/E,QAAQ,IAAI,gBAAgB,EAC5B,KAAK,4BAA2B,GAG1C,KAAW,CAGL,MAAME,EAAe,KAAK,MAAM,iBAAiB,UACjD,KAAK,MAAM,iBAAiB,UAAYF,EACxC,KAAK,MAAM,iBAAiB,cAAgB,QAG5C,KAAK,MAAM,iBAAiB,eAAiBC,EAG7C,KAAK,MAAM,iBAAiB,WAAa,CAAC,CACxC,MAAOD,EACP,KAAM,QACN,cAAeC,CACvB,CAAO,EAED,QAAQ,IAAI,YAAa,CACvB,WAAY,KAAK,MAAM,iBAAiB,GACxC,MAAO,KAAK,MAAM,iBAAiB,MACnC,aAAAC,EACA,aAAcF,EACd,UAAAC,EACA,cAAe,CAAC,GAAG,KAAK,MAAM,gBAAgB,CACtD,CAAO,EAGD,KAAK,oBAAoB,iBAAkB,KAAK,MAAM,gBAAgB,EAGlE,KAAK,MAAM,qBACb,QAAQ,IAAI,mBAAoB,KAAK,iBAAiB,EAElD,KAAK,oBAAsB,kBAE7B,MAAM,KAAK,iCAAiCD,CAAe,EAG3D,KAAK,gCAA+B,IAGtC,QAAQ,IAAI,mBAAmB,EAC/B,KAAK,yBAAyB,EAAI,EAI9B,KAAK,MAAM,4BAA8B,KAAK,qBAChD,QAAQ,IAAI,4BAA4B,EACxC,KAAK,2BAA0B,EAC/B,KAAK,oBAAsB,IAE3B,QAAQ,IAAI,wCAAwC,EAG9D,CACA,CAME,MAAM,iCAAiC7D,EAAW,OAChD,GAAI,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,MAAM,sDAAsD,EACpE,MACN,CAEI,GAAI,CAIF,GAHA,QAAQ,IAAI,uCAAuC,OAAAA,EAAU,QAAQ,CAAC,EAAC,sBAAqB,EAGxF,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,KAAK,2DAA2D,EACxE,MACR,CAUM,GAPA,MAAM,KAAK,kCAAkCA,CAAS,EAGtD,KAAK,UAAS,EACd,KAAK,qBAAoB,EAGrB,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,KAAK,uDAAuD,EACpE,MACR,CAGU,KAAK,oBAAoB,gBAAkB,KAAK,oBAAoB,YACtE,QAAQ,IAAI,8DAA8D,EAC1E,KAAK,2BAA0B,GAG/B,QAAQ,IAAI,iDAAiD,CAIrE,OAAaxN,EAAO,CACd,QAAQ,MAAM,oDAAqDA,CAAK,GAGpEuB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,wBAAyB,gCAAgC,OAAAvB,EAAM,QAAS,EAI/G,GAAI,CACF,QAAQ,IAAI,2DAA2D,EAEnE,KAAK,qBACP,KAAK,oBAAoB,iBACzB,MAAM,KAAK,8BAA6B,GAExC,QAAQ,KAAK,mDAAmD,CAE1E,OAAewR,EAAc,CACrB,QAAQ,MAAM,mDAAoDA,CAAY,EAE1E,KAAK,oBACP,KAAK,2BAA0B,GAE/B,QAAQ,KAAK,iEAAiE,EAC9E,KAAK,sBAAqB,EAEpC,CACA,CACA,CAKE,yBAAyBC,EAAY,GAAO,OAC1C,QAAQ,IAAI,oCAAqC,CAC/C,mBAAoB,KAAK,MAAM,yBAC/B,kBAAkBlQ,EAAA,KAAK,MAAM,mBAAX,YAAAA,EAA6B,MAC/C,WAAY,KAAK,MAAM,oBACvB,UAAAkQ,CACN,CAAK,EAED,KAAK,MAAM,iBAAmB,KAC9B,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,wBAA0B,KAGjC,KAAK,MAAM,qBAAuBA,GACpC,QAAQ,IAAI,eAAe,EAC3B,KAAK,sBAAqB,GACjB,KAAK,MAAM,qBACpB,QAAQ,IAAI,0BAA0B,EAKpC,KAAK,MAAM,oBAEb,KAAK,OAAO,MAAM,OAAS,YAG3B,KAAK,OAAO,MAAM,OAAS,YAG7B,KAAK,qBAAoB,EACzB,KAAK,OAAM,EACX,QAAQ,IAAI,+BAA+B,CAC/C,CAKE,MAAM,wBAAyB,aAC7B,QAAQ,IAAI,wCAAyC,KAAK,iBAAiB,GAGvE,KAAK,MAAM,0BAA4B,KAAK,MAAM,uBACpD,QAAQ,IAAI,kBAAkB,EAC9B,KAAK,MAAM,iBAAmB,KAC9B,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,wBAA0B,KACrC,KAAK,MAAM,oBAAsB,IAInC,KAAK,oBAAsB,KAC3B,KAAK,kBAAkB,MAAK,EAE5B,GAAI,CAEF,GAAI,KAAK,wBAAyB,CAChC,MAAMC,GAAIvP,GAAAZ,EAAA,KAAK,yBAAwB,uBAA7B,YAAAY,EAAA,KAAAZ,GACV,GAAImQ,GAAKA,EAAE,UAAYA,EAAE,SAAS,gBAAkB,GAClD,OAAI5O,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,0BAA2B,gBAAgB,EAE3E,EAEjB,CACM,GAAI,KAAK,oBAAsB,kBAAmB,CAEhD,MAAM6O,EAAK,MAAM,KAAK,wBAAuB,EAC7C,OAAKA,IACH,KAAK,sBAAqB,EAC1B,KAAK,yBAAwB,GAExBA,CACf,KAAa,CAEL,MAAMA,EAAK,KAAK,sBAAqB,EACrC,OAAKA,IACH,KAAK,sBAAqB,EAC1B,KAAK,yBAAwB,GAExBA,CACf,CACA,OAAa3R,EAAO,CACd,eAAQ,MAAM,wDAAyDA,CAAK,GACxEmR,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,uBAAwBnR,EAAM,OAAO,EAErE,EACb,CACA,CAKE,MAAM,yBAA0B,SAC9B,QAAQ,IAAI,iDAAiD,EAE7D,GAAI,CAIF,GAFA,KAAK,kBAAoB,MAAM,KAAK,uBAAsB,EAEtD,KAAK,kBAAkB,OAAS,EAClC,eAAQ,IAAI,wEAAwE,GAChFuB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,UAC9B,OAAO,oBAAoB,SAAS,iBAAkB,6EAA6E,EAE9H,GAIT,KAAK,8BAA6B,EAGlC,KAAK,MAAM,oBAAsB,GAGjC,KAAK,0BAAyB,EAG9B,MAAMqQ,EAAe,KAAK,8BAA6B,EACvD,GAAIA,EACF,eAAQ,IAAI,+CAA+C,OAAAA,EAAa,WAAW,MAAK,QAAO,OAAAA,EAAa,UAAW,EAGvH,MAAM,KAAK,+BAA+BA,EAAa,OAAO,EAG9D,KAAK,+BAA8B,GAE/BzP,EAAA,OAAO,sBAAP,MAAAA,EAA4B,UAC9B,OAAO,oBAAoB,SAAS,uBAClC,cAAc,YAAK,oBAAoB,WAAU,wBAAuB,YAAK,oBAAoB,gBAAgB,OAAM,2CAA0C,EAG9J,GAEP,MAAM,IAAI,MAAM,mDAAmD,CAG3E,OAAanC,EAAO,CACd,cAAQ,MAAM,0DAA2DA,CAAK,EACxEA,CACZ,CACA,CAKE,uBAAwB,SACtB,QAAQ,IAAI,2CAA2C,EAGvD,MAAM6R,EAAyB,KAAK,UAAU,OAAOrG,GAAM,CAEzD,MAAMsG,GAAYtG,EAAG,YAAc,QAAUA,EAAG,YAAc,UAC9CA,EAAG,gBAAkB,SACrB,OAAOA,EAAG,WAAc,SAGlCuG,EAAgBvG,EAAG,YAAc,MAAQA,EAAG,YAAc,OAEhE,OAAOsG,GAAYC,CACzB,CAAK,EASD,OAPA,QAAQ,IAAI,8BAA+BF,EAAuB,IAAIrG,IAAO,CAC3E,MAAOA,EAAG,MACV,UAAWA,EAAG,UACd,cAAeA,EAAG,cAClB,KAAMA,EAAG,YAAc,KAAO,MAAQ,MAC5C,EAAM,CAAC,EAECqG,EAAuB,SAAW,GACpC,QAAQ,IAAI,6BAA6B,GAErCtQ,EAAA,OAAO,sBAAP,MAAAA,EAA4B,UAC9B,OAAO,oBAAoB,SAAS,OAAQ,kBAAkB,EAGhE,KAAK,sBAAqB,EAC1B,KAAK,yBAAwB,EACtB,KAITsQ,EAAuB,KAAK,CAAC7N,EAAGqB,KAAOrB,EAAE,OAAS,IAAMqB,EAAE,OAAS,EAAE,EAErE,KAAK,MAAM,oBAAsB,GACjC,KAAK,MAAM,uBAAyBwM,EACpC,KAAK,MAAM,mBAAqB,EAEhC,QAAQ,IAAI,0BAA2B,CACrC,oBAAqB,KAAK,MAAM,oBAChC,uBAAwB,KAAK,MAAM,uBAAuB,OAC1D,mBAAoB,KAAK,MAAM,kBACrC,CAAK,EAGD,KAAK,0BAAyB,EAG9B,KAAK,uBAAuBA,EAAuB,CAAC,CAAC,EAErD,QAAQ,IAAI,gCAAgC,OAAAA,EAAuB,OAAM,cAAa,GAGlF1P,EAAA,OAAO,sBAAP,MAAAA,EAA4B,UAC9B,OAAO,oBAAoB,SAAS,oBAClC,0BAA0B,OAAA0P,EAAuB,OAAM,yGAAwG,EAG5J,GACX,CAKE,uBAAuB1E,EAAU,SAC/B,QAAQ,IAAI,iCAAkC,CAC5C,SAAUA,EAAS,MACnB,WAAY,KAAK,MAAM,oBACvB,gBAAiB,KAAK,MAAM,wBAClC,CAAK,EAGD,KAAK,eAAeA,CAAQ,EAE5B,QAAQ,IAAI,4BAA6B,CACvC,WAAY,KAAK,MAAM,oBACvB,gBAAiB,KAAK,MAAM,yBAC5B,kBAAkB5L,EAAA,KAAK,MAAM,mBAAX,YAAAA,EAA6B,KACrD,CAAK,EAGD,MAAMyQ,EAAmB,IACnBC,EAAe,KAAK,MAAM,MAG1BC,EAAc,KAAK,IAAID,EAAcD,CAAgB,EACrDlF,EAAW,KAAK,IAAIoF,EAAa,KAAK,QAAQ,OAAO,EAGrDlF,EAAU,KAAK,OAAO,MAAQ,EAC9BC,EAAU,KAAK,OAAO,OAAS,EAGrC,KAAK,MAAM,MAAQH,EACnB,KAAK,MAAM,WAAaE,EAAWG,EAAS,EAAIL,EAChD,KAAK,MAAM,WAAaG,EAAWE,EAAS,EAAIL,EAGhD,KAAK,cAAa,EAElB,KAAK,eAAc,EACnB,KAAK,OAAM,EAEX,MAAMqF,EAAcF,GAAgBD,EAAmB,SAAW,SAClE,QAAQ,IAAI,aAAa,OAAA7E,EAAS,MAAK,SAAQ,OAAAL,EAAS,QAAQ,CAAC,EAAC,OAAM,OAAAqF,EAAW,IAAG,EAGtF,KAAK,sBAAsBhF,CAAQ,EAEnC,QAAQ,IAAI,oCAAqC,CAC/C,WAAY,KAAK,MAAM,oBACvB,gBAAiB,KAAK,MAAM,yBAC5B,kBAAkBhL,EAAA,KAAK,MAAM,mBAAX,YAAAA,EAA6B,KACrD,CAAK,CACL,CAKE,sBAAsBgL,EAAU,CAEP,KAAK,OAAO,KAAK,IAAI,EAC5C,IAAIiF,EAAa,EACjB,MAAMC,EAAY,EAEZC,EAAQ,IAAM,CAClB,GAAIF,GAAcC,EAChB,OAIF,MAAMhF,EAAY,KAAK,cAAcF,EAAS,EAAGA,EAAS,CAAC,EACrDoF,EAAM,KAAK,IAEjBA,EAAI,KAAI,EACRA,EAAI,YAAc,GAAOH,EAAa,GACtCG,EAAI,YAAc,UAClBA,EAAI,UAAY,EAChBA,EAAI,YAAY,EAAE,EAElB,MAAMC,EAAS,GAAMJ,EAAa,GAClCG,EAAI,UAAS,EACbA,EAAI,IAAIlF,EAAU,EAAGA,EAAU,EAAGmF,EAAQ,EAAG,EAAI,KAAK,EAAE,EACxDD,EAAI,OAAM,EAEVA,EAAI,QAAO,EAEXH,IACIA,EAAaC,GACf,WAAWC,EAAO,GAAG,CAE7B,EAGI,WAAWA,EAAO,GAAG,CACzB,CAKE,eAAgB,CACd,GAAI,CAAC,KAAK,aAAc,OAExB,MAAM7F,EAAa,KAAK,aAAa,MAAQ,KAAK,MAAM,MAClDC,EAAc,KAAK,aAAa,OAAS,KAAK,MAAM,MACpDH,EAAc,KAAK,OAAO,MAC1BC,EAAe,KAAK,OAAO,OAGjC,GAAIC,EAAaF,EACf,KAAK,MAAM,YAAcA,EAAcE,GAAc,MAChD,CAGL,MAAMgG,EAAgBlG,EAAcE,EACpC,KAAK,MAAM,WAAa,KAAK,IAAIgG,EAAe,KAAK,IAAI,EAAe,KAAK,MAAM,UAAU,CAAC,CACpG,CAEI,GAAI/F,EAAcF,EAChB,KAAK,MAAM,YAAcA,EAAeE,GAAe,MAClD,CAEL,MAAMgG,EAAgBlG,EAAeE,EACrC,KAAK,MAAM,WAAa,KAAK,IAAIgG,EAAe,KAAK,IAAI,EAAe,KAAK,MAAM,UAAU,CAAC,CACpG,CACA,CAKE,iCAAkC,CAGhC,GAFA,KAAK,MAAM,qBAEP,KAAK,MAAM,oBAAsB,KAAK,MAAM,uBAAuB,OAAQ,CAE7E,MAAMC,EAAgB,KAAK,MAAM,uBAAuB,OAIxD,GAHA,QAAQ,IAAI,mBAAmB,OAAAA,EAAa,QAAO,EAG/C,KAAK,2BAA4B,CACnC,QAAQ,IAAI,kBAAkB,EAC9B,MACR,CAGM,KAAK,sBAAqB,EAC1B,KAAK,yBAAwB,EAGzB,OAAO,aACT,OAAO,YAAY,OAAQ,aAAa,EAE1C,MACN,CAEI,MAAMC,EAAe,KAAK,MAAM,uBAAuB,KAAK,MAAM,kBAAkB,EACpF,KAAK,uBAAuBA,CAAY,EAExC,MAAMC,EAAW,GAAG,YAAK,MAAM,mBAAqB,EAAC,KAAI,YAAK,MAAM,uBAAuB,QAC3F,QAAQ,IAAI,iBAAiB,OAAAD,EAAa,MAAK,MAAK,OAAAC,EAAQ,IAAG,EAG3D,OAAO,UACT,OAAO,SAAS,OAAQ,SAAS,YAAK,MAAM,mBAAqB,EAAC,SAAQ,YAAK,MAAM,uBAAuB,OAAM,UAAS,CAEjI,CAKE,4BAA6B,CAE3B,MAAMC,EAAO,SAAS,cAAc,KAAK,EAoBzC,GAnBAA,EAAK,UAAY,iCACjBA,EAAK,YAAc,iBACnBA,EAAK,MAAM,QAAU,8aAiBjB,CAAC,SAAS,eAAe,4BAA4B,EAAG,CAC1D,MAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK,6BACXA,EAAM,YAAc,oZAepB,SAAS,KAAK,YAAYA,CAAK,CACrC,CAGI,MAAMC,EAAkB,SAAS,eAAe,kBAAkB,EAC9DA,IACFA,EAAgB,YAAYF,CAAI,EAGhC,WAAW,IAAM,CACXA,EAAK,eACPA,EAAK,OAAM,CAErB,EAAS,GAAI,EAEb,CAME,qBAAqBG,EAAM,CACzB,GAAI,CAAC,CAAC,eAAgB,iBAAiB,EAAE,SAASA,CAAI,EACpD,MAAM,IAAI,MAAM,gCAAkCA,CAAI,EAGxD,KAAK,kBAAoBA,EACzB,QAAQ,IAAI,+BAA+B,OAAAA,EAAM,EAGjD,KAAK,0BAAyB,CAClC,CAKE,2BAA4B,CAC1B,MAAMC,EAAmB,SAAS,eAAe,oBAAoB,EAC/DvH,EAAe,SAAS,eAAe,8BAA8B,EAE3E,GAAIuH,GAAoB,KAAK,kBAQ3B,GANAA,EAAiB,UAAU,OAAO,oBAAqB,sBAAsB,EAG7EA,EAAiB,UAAU,IAAI,GAAG,YAAK,kBAAiB,QAAO,EAG3D,KAAK,MAAM,oBAAqB,CAClC,MAAMC,EAAW,KAAK,oBAAsB,kBAAoB,qBAAuB,uBACvFD,EAAiB,YAAcC,CACvC,MACQD,EAAiB,YAAc,iBAM/BvH,GAAgB,KAAK,oBACvBA,EAAa,MAAQ,KAAK,kBAC1B,QAAQ,IAAI,iBAAkB,KAAK,iBAAiB,EAE1D,CAME,MAAM,wBAAyB,SAC7B,MAAMS,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBAC/C6R,GAAWjR,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAE7C,GAAI,CAACiK,GAAoB,EAACgH,GAAA,MAAAA,EAAU,cAClC,MAAM,IAAI,MAAM,mDAAmD,EAGrE,MAAMC,EAAoB,IAAI,IAE9B,GAAI,CAEF,MAAMC,EAAY,MAAMlH,EAAiB,eACvCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,iBAC9B,EAEM,GAAI,CAACE,GAAaA,EAAU,SAAW,EACrC,MAAM,IAAI,MAAM,kDAAkD,EAGpE,QAAQ,IAAI,+BAA+B,OAAAA,EAAU,OAAM,wCAAuC,EAGlG,UAAWvL,KAASuL,EAClB,GAAI,CACF,MAAM1Q,EAAc,MAAMwJ,EAAiB,oBAAoBrE,EAAM,EAAE,EAEvE,GAAInF,GAAeA,EAAY,OAAS,EAAG,CAEzC,MAAM2Q,EAA2B3Q,EAAY,OAAO4Q,GAClD,CAACA,EAAI,WAAaA,EAAI,YAAc,QAAUA,EAAI,YAAc,IAC9E,EAGY,UAAWtP,KAAcqP,EAA0B,CACjD,MAAME,EAAQvP,EAAW,OAAS,EAE7BmP,EAAkB,IAAII,CAAK,GAC9BJ,EAAkB,IAAII,EAAO,EAAE,EAGjCJ,EAAkB,IAAII,CAAK,EAAE,KAAK,CAChC,QAAS1L,EAAM,GACf,UAAWA,EAAM,KACjB,WAAY7D,CAC5B,CAAe,CACf,CACA,CACA,OAAiBlE,EAAO,CACd,QAAQ,KAAK,0DAA0D,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,CACnG,CAIM,SAAW,CAACyT,EAAOC,CAAoB,IAAKL,EAC1CK,EAAqB,KAAK,CAAC1P,EAAGqB,IAAMrB,EAAE,UAAU,cAAcqB,EAAE,SAAS,CAAC,EAG5E,eAAQ,IAAI,oCAAoC,OAAAgO,EAAkB,KAAI,kBACpE,MAAM,KAAKA,EAAkB,MAAM,EAAE,KAAK,CAAC,EAAGhO,IAAM,EAAIA,CAAC,CAAC,EAErDgO,CAEb,OAAarT,EAAO,CACd,cAAQ,MAAM,yDAA0DA,CAAK,EACvEA,CACZ,CACA,CAME,0BAA2B,CACzB,OAAK,KAAK,kBAIH,MAAM,KAAK,KAAK,kBAAkB,KAAI,CAAE,EAAE,KAAK,CAACgE,EAAGqB,IAAMrB,EAAIqB,CAAC,EAH5D,EAIb,CAOE,mBAAmBoO,EAAO,CACxB,MAAI,CAAC,KAAK,mBAAqB,CAAC,KAAK,kBAAkB,IAAIA,CAAK,EACvD,GAGF,KAAK,kBAAkB,IAAIA,CAAK,CAC3C,CAKE,+BAAgC,CAC9B,MAAME,EAAkB,KAAK,yBAAwB,EAErD,GAAIA,EAAgB,SAAW,EAC7B,MAAM,IAAI,MAAM,sDAAsD,EAGxE,KAAK,oBAAsB,CACzB,aAAcA,EAAgB,CAAC,EAC/B,kBAAmB,EACnB,eAAgB,EAChB,WAAY,KAAK,2BAA0B,EAAG,OAC9C,gBAAiBA,EACjB,UAAW,KAAK,IAAG,CACzB,EAEI,QAAQ,IAAI,uCAAwC,KAAK,mBAAmB,CAChF,CAME,4BAA6B,CAC3B,MAAMC,EAAY,GAElB,GAAI,CAAC,KAAK,kBACR,OAAOA,EAGT,UAAWF,KAAwB,KAAK,kBAAkB,OAAM,EAC9DE,EAAU,KAAK,GAAGF,CAAoB,EAGxC,OAAOE,CACX,CAME,+BAAgC,CAC9B,GAAI,CAAC,KAAK,oBACR,OAAO,KAGT,KAAM,CAAE,aAAAC,EAAc,kBAAAnO,CAAiB,EAAK,KAAK,oBAC3CoO,EAAyB,KAAK,mBAAmBD,CAAY,EAEnE,OAAInO,GAAqBoO,EAAuB,OACvC,KAGFA,EAAuBpO,CAAiB,CACnD,CAME,MAAM,kCAAkC8H,EAAW,OAEjD,GAAI,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,KAAK,wDAAwD,EACrE,MACN,CAEI,MAAMoE,EAAe,KAAK,8BAA6B,EAEvD,GAAI,CAACA,EAAc,CACjB,QAAQ,KAAK,+CAA+C,EAC5D,MACN,CAEI,GAAI,CAEFA,EAAa,WAAW,UAAYpE,EAGpC,MAAMpB,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBACrD,GAAI6K,EAAkB,CACpB,MAAM2H,EAAiB,MAAM3H,EAAiB,oBAAoBwF,EAAa,OAAO,EACtF,MAAMxF,EAAiB,qBAAqBwF,EAAa,QAASmC,CAAc,CACxF,CAGM,GAAI,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,KAAK,uDAAuD,EACpE,MACR,CAGM,KAAK,oBAAoB,iBAEzB,QAAQ,IAAI,2CAA2C,OAAAnC,EAAa,WAAW,MAAK,QAAO,OAAAA,EAAa,UAAS,qBAAoB,OAAApE,EAAW,EAGhJ,MAAM,KAAK,8BAA6B,CAE9C,OAAaxN,EAAO,CACd,cAAQ,MAAM,6CAA8CA,CAAK,EAC3DA,CACZ,CACA,CAKE,MAAM,+BAAgC,CACpC,GAAI,CAAC,KAAK,oBACR,OAGF,KAAM,CAAE,aAAA6T,EAAc,kBAAAnO,EAAmB,gBAAAiO,CAAe,EAAK,KAAK,oBAC5DG,EAAyB,KAAK,mBAAmBD,CAAY,EAGnE,GAAInO,EAAoB,EAAIoO,EAAuB,OAAQ,CAEzD,GAAI,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,KAAK,qEAAqE,EAClF,MACR,CAGM,KAAK,oBAAoB,oBACzB,MAAME,EAAgBF,EAAuB,KAAK,oBAAoB,iBAAiB,EAEvF,QAAQ,IAAI,oDAAoD,OAAAD,EAAY,MAAK,OAAAG,EAAc,UAAW,EAG1G,MAAM,KAAK,+BAA+BA,EAAc,OAAO,CAErE,KAAW,CAEL,MAAMC,EAAoBN,EAAgB,QAAQE,CAAY,EAE9D,GAAII,EAAoB,EAAIN,EAAgB,OAAQ,CAElD,GAAI,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,KAAK,qEAAqE,EAClF,MACV,CAGQ,MAAMO,EAAYP,EAAgBM,EAAoB,CAAC,EACvD,KAAK,oBAAoB,aAAeC,EACxC,KAAK,oBAAoB,kBAAoB,EAE7C,MAAMC,EAAkB,KAAK,mBAAmBD,CAAS,EACrDC,EAAgB,OAAS,IAC3B,QAAQ,IAAI,0CAA0C,OAAAD,EAAS,qBAAoB,OAAAC,EAAgB,CAAC,EAAE,UAAW,EAGjH,MAAM,KAAK,+BAA+BA,EAAgB,CAAC,EAAE,OAAO,EAE9E,MAEQ,QAAQ,IAAI,yDAAyD,EACrE,KAAK,2BAA0B,CAEvC,CAGI,KAAK,+BAA8B,CACvC,CAME,MAAM,+BAA+BrO,EAAe,WAClD,GAAI,CACF,QAAQ,IAAI,+CAA+C,OAAAA,EAAe,EAE1E,MAAMsG,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBAC/C6R,GAAWjR,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAE7C,GAAI,CAACiK,GAAoB,EAACgH,GAAA,MAAAA,EAAU,cAClC,MAAM,IAAI,MAAM,mDAAmD,EASrE,MAAMgB,GALY,MAAMhI,EAAiB,eACvCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,iBAC9B,GAEoC,KAAK9N,GAAOA,EAAI,KAAOQ,CAAa,EAClE,GAAI,CAACsO,EACH,MAAM,IAAI,MAAM,oBAAoB,OAAAtO,EAAe,EAMrD,GAHA,QAAQ,IAAI,yCAAyC,OAAAsO,EAAY,KAAM,EAGnE,OAAO,kBACT,QAAQ,IAAI,gDAAgD,EAC5D,MAAM,OAAO,kBAAkBA,EAAa,EAAI,EAChD,QAAQ,IAAI,4DAA4D,MAExE,OAAM,IAAI,MAAM,+CAA+C,EAIjE,QAAQ,IAAI,gDAAgD,EAC5D,MAAM,KAAK,iBAAgB,EAC3B,QAAQ,IAAI,6CAA6C,EAGzD,MAAMxC,EAAe,KAAK,8BAA6B,EACvD,GAAIA,GAAgBA,EAAa,WAAY,CAC3C,QAAQ,IAAI,6CAA6C,OAAAA,EAAa,WAAW,MAAK,uBAAsB,EAG5G,MAAMyC,EAAmB,KAAK,UAAU,KAAK7I,GAC3CA,EAAG,QAAUoG,EAAa,WAAW,KAC/C,EAEYyC,GACF,QAAQ,IAAI,uCAAuC,OAAAA,EAAiB,MAAK,iBAAgB,EACzF,KAAK,MAAM,iBAAmBA,EAC9B,KAAK,MAAM,yBAA2B,GAGtC,KAAK,uBAAuBA,CAAgB,GAE5C,QAAQ,KAAK,gDAAgD,OAAAzC,EAAa,WAAW,MAAK,uBAAsB,CAE1H,MACQ,QAAQ,KAAK,iEAAiE,CAGtF,OAAa5R,EAAO,CACd,QAAQ,MAAM,4CAA6CA,CAAK,GAE5D8C,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,sBAAuB9C,EAAM,OAAO,CAEjF,CACA,CAKE,MAAM,iBAAiBsU,EAAc,IAAM,CACzC,MAAM/M,EAAY,KAAK,IAAG,EAI1B,IAFA,QAAQ,IAAI,oDAAoD,OAAA+M,EAAW,MAAK,EAEzE,CAAC,KAAK,aAAgB,KAAK,IAAG,EAAK/M,EAAa+M,GACrD,MAAM,IAAI,QAAQ/T,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGvD,OAAK,KAAK,aAMV,QAAQ,IAAI,qCAAqC,YAAK,MAAQgH,EAAS,KAAI,EACpE,KANL,QAAQ,KAAK,8CAA8C,OAAA+M,EAAW,KAAI,EAEnE,GAKb,CAKE,4BAA6B,CAE3B,GAAI,CAAC,KAAK,oBAAqB,CAC7B,QAAQ,KAAK,mDAAmD,EAEhE,KAAK,sBAAqB,EAC1B,MACN,CAEI,MAAMC,EAAW,KAAK,IAAG,EAAK,KAAK,oBAAoB,UACjDC,EAAiB,KAAK,oBAAoB,eAEhD,QAAQ,IAAI,+CAA+C,OAAAA,EAAc,oBAAmB,OAAAD,EAAQ,KAAI,EAGpG,OAAO,oBACT,OAAO,mBAAmB,6CAA6C,OAAAC,EAAc,kCAAiC,EAIxH,KAAK,oBAAsB,KAC3B,KAAK,kBAAkB,MAAK,EAG5B,KAAK,sBAAqB,CAC9B,CAKE,gCAAiC,CAC/B,MAAMC,EAAoB,SAAS,eAAe,yBAAyB,EACrEC,EAAkB,SAAS,eAAe,kBAAkB,EAC5DC,EAAgB,SAAS,eAAe,gBAAgB,EACxDC,EAAe,SAAS,eAAe,8BAA8B,EACrEC,EAAmB,SAAS,eAAe,oBAAoB,EAErE,GAAI,CAAC,KAAK,oBAAqB,CACzBJ,IACFA,EAAkB,MAAM,QAAU,QAEpC,MACN,CAEI,KAAM,CAAE,eAAAD,EAAgB,WAAAM,EAAY,aAAAjB,EAAc,gBAAAF,CAAe,EAAK,KAAK,oBACrEoB,EAAqBD,EAAa,EAAKN,EAAiBM,EAAc,IAAM,EAmBlF,GAjBIL,IACFA,EAAkB,MAAM,QAAU,SAGhCC,IACFA,EAAgB,YAAcF,GAG5BG,IACFA,EAAc,YAAcG,GAG1BF,IACFA,EAAa,MAAM,MAAQ,GAAG,OAAAG,EAAkB,KAChDH,EAAa,UAAY,2CAGvBC,EAAkB,CACpB,MAAMZ,EAAoBN,EAAgB,QAAQE,CAAY,EAC9DgB,EAAiB,YAAc,SAAS,OAAAhB,EAAY,MAAK,OAAAI,EAAoB,EAAC,KAAI,OAAAN,EAAgB,OAAM,IAC9G,CACA,CAME,0BAA2B,CACzB,GAAI,KAAK,oBAAsB,mBAAqB,KAAK,oBAAqB,CAC5E,KAAM,CAAE,eAAAa,EAAgB,WAAAM,EAAY,aAAAjB,EAAc,gBAAAF,CAAe,EAAK,KAAK,oBAE3E,MAAO,CACL,MAAOmB,EACP,UAAWN,EACX,WAAYM,EAAa,EAAI,KAAK,MAAON,EAAiBM,EAAc,GAAG,EAAI,EAC/E,aAAcjB,EACd,YAAaF,EAAgB,OAC7B,KAAM,iBACd,CACA,SAAe,KAAK,oBAAsB,gBAAkB,KAAK,MAAM,oBAAqB,CACtF,MAAM7S,EAAQ,KAAK,MAAM,uBAAuB,OAC1CoJ,EAAY,KAAK,MAAM,mBAE7B,MAAO,CACL,MAAOpJ,EACP,UAAWoJ,EACX,WAAYpJ,EAAQ,EAAI,KAAK,MAAOoJ,EAAYpJ,EAAS,GAAG,EAAI,EAChE,KAAM,cACd,CACA,CAEI,MAAO,CACL,MAAO,EACP,UAAW,EACX,WAAY,EACZ,KAAM,KAAK,iBACjB,CACA,CAKE,uBAAwB,CACtB,QAAQ,IAAI,iCAAkC,CAC5C,WAAY,IAAI,QAAQ,KAC9B,CAAK,EAGD,MAAMkU,EAAqB,KAAK,kBAChC,QAAQ,IAAI,iBAAkBA,CAAkB,EAEhD,KAAK,MAAM,oBAAsB,GACjC,KAAK,MAAM,uBAAyB,GACpC,KAAK,MAAM,mBAAqB,EAGhC,KAAK,MAAM,iBAAmB,KAC9B,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,wBAA0B,KAIjC,KAAK,oBAAsB,mBAAqB,KAAK,qBACvD,QAAQ,IAAI,sCAAsC,EAGlD,KAAK,kBAAoBA,IAGzB,KAAK,oBAAsB,KAE3B,KAAK,kBAAoBA,GAG3B,KAAK,qBAAoB,EACzB,KAAK,OAAM,EAGX,KAAK,yBAAwB,EAG7B,MAAMrJ,EAAe,SAAS,eAAe,8BAA8B,EACvEA,GAAgBqJ,IAClBrJ,EAAa,MAAQqJ,EACrB,QAAQ,IAAI,kBAAmBA,CAAkB,GAGnD,QAAQ,IAAI,yDAA0DA,CAAkB,CAC5F,CAKE,8BAA8B7H,EAAU,OACtC,MAAM8H,GAA4B1T,EAAA,OAAO,sBAAP,YAAAA,EAA4B,0BAE1D0T,GAA6B9H,GAAYA,EAAS,OACpD8H,EAA0B,yBAAyB9H,EAAS,KAAK,CAEvE,CAKE,sBAAuB,OAErB,MAAM8H,GAA4B1T,EAAA,OAAO,sBAAP,YAAAA,EAA4B,0BAE1D0T,GAEFA,EAA0B,qBAAoB,CAEpD,CAKE,kBAAkBvK,EAAO,CACvBA,EAAM,eAAc,EAEpB,MAAM0F,EAAW,KAAK,YAAY1F,CAAK,EAGjC2F,EAA0B,KAAK,sBAAsBD,CAAQ,EACnE,GAAIC,EAAyB,CAC3B,KAAK,uBAAuBA,CAAuB,EACnD,MACN,CAGI,MAAMC,EAAkB,KAAK,cAAcF,CAAQ,EAC/CE,GACF,KAAK,eAAeA,CAAe,CAEzC,CAKE,YAAY5F,EAAO,CAIjB,GAHAA,EAAM,eAAc,EAGhB,KAAK,MAAM,qBAAsB,CACnC,KAAK,kBAAkBA,CAAK,EAC5B,MACN,CAEI,MAAM0F,EAAW,KAAK,YAAY1F,CAAK,EAEjCwK,EAAa,GADL,CAACxK,EAAM,OACW,EAAI,KAAK,QAAQ,UAAY,CAAC,KAAK,QAAQ,WAE3E,KAAK,OAAO0F,EAAS,EAAGA,EAAS,EAAG8E,CAAU,CAClD,CAKE,OAAOrG,EAAGC,EAAGqG,EAAQ,CACnB,MAAMrI,EAAW,KAAK,MAAM,MAAQqI,EAGhCrI,EAAW,KAAK,QAAQ,SAAWA,EAAW,KAAK,QAAQ,UAK/D,KAAK,MAAM,WAAa+B,GAAKA,EAAI,KAAK,MAAM,YAAcsG,EAC1D,KAAK,MAAM,WAAarG,GAAKA,EAAI,KAAK,MAAM,YAAcqG,EAC1D,KAAK,MAAM,MAAQrI,EAEnB,KAAK,eAAc,EACnB,KAAK,OAAM,EACf,CAKE,cAAcpC,EAAO,CACnB,GAAI,EAAAA,EAAM,OAAO,UAAY,SAAWA,EAAM,OAAO,UAAY,YAIjE,OAAQA,EAAM,IAAG,CACf,IAAK,IACHA,EAAM,eAAc,EAEpB,MAEF,IAAK,IACL,IAAK,IACHA,EAAM,eAAc,EACpB,KAAK,UAAS,EACd,MAEF,IAAK,IACHA,EAAM,eAAc,EACpB,KAAK,QAAQ,CAAC,EACd,MAEF,IAAK,KACCA,EAAM,SAAWA,EAAM,WACzBA,EAAM,eAAc,EAChBA,EAAM,SACR,KAAK,KAAI,EAET,KAAK,KAAI,GAGb,MAEF,IAAK,KACCA,EAAM,SAAWA,EAAM,WACzBA,EAAM,eAAc,EACpB,KAAK,KAAI,GAEX,KACR,CACA,CAKE,YAAYA,EAAO,CAErB,CAKE,QAAQmC,EAAO,CACb,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YAAa,OAE7C,MAAMG,EAAU,KAAK,OAAO,MAAQ,EAC9BC,EAAU,KAAK,OAAO,OAAS,EAErC,KAAK,OAAOD,EAASC,EAASJ,EAAQ,KAAK,MAAM,KAAK,CAC1D,CAKE,gBAAiB,CACf,MAAMuI,EAAc,SAAS,eAAe,YAAY,EACpDA,IACFA,EAAY,YAAc,KAAK,MAAM,KAAK,MAAM,MAAQ,GAAG,EAAI,IAErE,CAKE,cAAc/H,EAAW,CACvB,MAAMgI,EAAY,KAAK,QAAQ,mBAAqB,EAEpD,OAAO,KAAK,UAAU,KAAKlI,GAAY,CACrC,MAAMsD,EAAiB,KAAK,cAActD,EAAS,EAAGA,EAAS,CAAC,EAKhE,OAJiB,KAAK,KACpB,KAAK,IAAIE,EAAU,EAAIoD,EAAe,EAAG,CAAC,EAC1C,KAAK,IAAIpD,EAAU,EAAIoD,EAAe,EAAG,CAAC,CAClD,GACyB4E,CACzB,CAAK,CACL,CAKE,YAAYhI,EAAWG,EAAY,QAAS,CAE1C,GAAI,CAAC,KAAK,sBAAsBH,EAAU,EAAGA,EAAU,CAAC,EAAG,CACzD,QAAQ,KAAK,iFAAiF,EAC9F,MACN,CAEI,MAAM2C,EAAW,KAAK,cAAc3C,EAAU,EAAGA,EAAU,CAAC,EAC5D,KAAK,yBAAyB2C,EAAS,EAAGA,EAAS,EAAGxC,CAAS,CACnE,CAKE,yBAAyBqB,EAAGC,EAAGtB,EAAW8H,EAAe,KAAM5G,EAAQ,KAAMC,EAAS,KAAM,CAE1F,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,YAAa,CAC3C,QAAQ,KAAK,uDAAuD,EACpE,MACN,CAGI,GAAI,CAAC2G,GAAgB,KAAK,yBAA2B,KAAK,wBAAwB,iBAAkB,CAClG,MAAMpE,EAAc,KAAK,wBAAwB,qBAAoB,EACjEA,IAAgBA,EAAY,OAAS,SAAWA,EAAY,OAAS,YACvEoE,EAAepE,EAAY,IAEvB,CAACA,EAAY,UAAYA,EAAY,SAAS,gBAAkB,MAClE1D,EAAY,MAGtB,CAGI,MAAMiG,EAAQ6B,EAAe,KAAK,8BAA8BA,CAAY,EAAI,KAAK,uBAAsB,EAG3G,IAAIC,EAAsB/H,EACtBA,IAAc,OAChB+H,EAAsB,IACb/H,IAAc,QACvB+H,EAAsB,EACb,OAAO/H,GAAc,SAC9B+H,EAAsB/H,EACbA,IAAc,OAEvB+H,EAAsB,OAEtBA,EAAsB,EAGxB,MAAMpI,EAAW,CACf,GAAI,KAAK,IAAG,EACZ,EAAG0B,EACH,EAAGC,EACH,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,GAAIyG,IAAwB,QAAa,CAAE,UAAWA,CAAmB,EACzE,GAAIA,IAAwB,QAAa,CAAE,cAAe,OAAO,EACjE,MAAO9B,EAGP,eAAgB6B,EAAe,SAAW,UAC1C,GAAIA,GAAgB,CAAE,aAAAA,GACtB,GAAI,OAAO5G,GAAU,UAAY,CAAE,MAAAA,CAAK,EACxC,GAAI,OAAOC,GAAW,UAAY,CAAE,OAAAA,CAAM,CAChD,EAEI,KAAK,UAAU,KAAKxB,CAAQ,EAC5B,KAAK,UAAS,EACd,KAAK,OAAM,EAGX,KAAK,qBAAoB,EAGzB,KAAK,oBAAoB,eAAgBA,CAAQ,EAGjD,KAAK,uBAAsB,EAG3B,KAAK,oBAAsB,GAGvB,KAAK,MAAM,6BACb,KAAK,2BAA0B,EAC/B,KAAK,oBAAsB,IAG7B,MAAMqI,EAAWF,EAAe,UAAU,OAAAA,EAAY,KAAM,UACtDG,EAAgB,OAAOF,GAAwB,SAAW,GAAG,OAAAA,EAAmB,KAAMA,EAC5F,eAAQ,IAAI,SAAS,OAAAC,EAAQ,eAAc,OAAA/B,EAAK,SAAQ,OAAA5E,EAAE,QAAQ,CAAC,EAAC,MAAK,OAAAC,EAAE,QAAQ,CAAC,EAAC,qBAAoB,OAAA2G,EAAe,EAEjHtI,CACX,CAKE,yBAAyB0B,EAAGC,EAAGwG,EAAc,CAE3C,IAAI9H,EAAY,KAChB,GAAI,CACF,MAAMK,EAAa,KAAK,cAAcyH,CAAY,EAC9CzH,GAAcA,EAAW,UAAY,OAAOA,EAAW,SAAS,cAAiB,WACnFL,EAAYK,EAAW,SAAS,aAExC,OAAa3B,EAAG,CAEhB,CACI,OAAO,KAAK,yBAAyB2C,EAAGC,EAAGtB,EAAW8H,CAAY,CACtE,CAKE,0BAA0BzG,EAAGC,EAAGJ,EAAOC,EAAQ2G,EAAc,CAC3D,OAAO,KAAK,yBAAyBzG,EAAGC,EAAG,KAAMwG,EAAc5G,EAAOC,CAAM,CAChF,CAKE,cAAc2G,EAAc,OAE1B,OAAI,KAAK,wBACA,KAAK,wBAAwB,cAAcA,CAAY,IAEzD/T,EAAA,KAAK,cAAL,YAAAA,EAAkB,IAAI+T,KAAiB,IAClD,CAKE,eAAeI,EAAa,CAC1B,KAAK,YAAcA,CACvB,CAKE,kCAAkCtF,EAAU,CAC1C,GAAI,CAAC,KAAK,wBAAyB,CACjC,QAAQ,KAAK,yCAAyC,EACtD,MACN,CAEI,GAAI,CACF,MAAMvC,EAAa,KAAK,wBAAwB,qBAAoB,EACpE,GAAI,CAACA,EAAY,CACf,QAAQ,KAAK,yBAAyB,EACtC,MACR,CAEM,MAAMmC,EAAW,KAAK,cAAcI,EAAS,EAAGA,EAAS,CAAC,EAE1D,GAAIvC,EAAW,OAAS,QAAS,CAE/B,MAAMV,EAAW,KAAK,yBAAyB6C,EAAS,EAAGA,EAAS,EAAGnC,EAAW,EAAE,EAChFV,GACF,QAAQ,IAAI,2CAA4CA,CAAQ,CAE1E,MAAiBU,EAAW,OAAS,UAE7B,KAAK,6BAA6BuC,EAAUvC,EAAW,EAAE,CAEjE,OAAa7N,EAAO,CACd,QAAQ,MAAM,mDAAoDA,CAAK,CAC7E,CACA,CAKE,6BAA6BoQ,EAAUkF,EAAc,CACnD,GAAI,CAAC,KAAK,sBAAsBlF,EAAS,EAAGA,EAAS,CAAC,EAAG,CACvD,QAAQ,KAAK,wEAAwE,EACrF,MACN,CAEI,KAAK,MAAM,uBAAyB,GACpC,KAAK,MAAM,uBAAyBA,EACpC,KAAK,MAAM,yBAA2BA,EACtC,KAAK,MAAM,mBAAqBkF,EAChC,KAAK,OAAO,MAAM,OAAS,YAE3B,QAAQ,IAAI,yCAA0ClF,CAAQ,CAClE,CAKE,+BAAgC,CAC9B,GAAI,CAAC,KAAK,MAAM,wBAA0B,CAAC,KAAK,MAAM,wBAA0B,CAAC,KAAK,MAAM,yBAA0B,CACpH,KAAK,sBAAqB,EAC1B,MACN,CAEI,MAAMS,EAAW,KAAK,cAAc,KAAK,MAAM,uBAAuB,EAAG,KAAK,MAAM,uBAAuB,CAAC,EACtG8E,EAAS,KAAK,cAAc,KAAK,MAAM,yBAAyB,EAAG,KAAK,MAAM,yBAAyB,CAAC,EAGxGjH,EAAQ,KAAK,IAAIiH,EAAO,EAAI9E,EAAS,CAAC,EACtClC,EAAS,KAAK,IAAIgH,EAAO,EAAI9E,EAAS,CAAC,EACvC+E,EAAU,GAEhB,GAAIlH,EAAQkH,GAAWjH,EAASiH,EAAS,CACvC,QAAQ,IAAI,4BAA4B,EACxC,KAAK,sBAAqB,EAC1B,MACN,CAGI,MAAM/G,EAAI,KAAK,IAAIgC,EAAS,EAAG8E,EAAO,CAAC,EACjC7G,EAAI,KAAK,IAAI+B,EAAS,EAAG8E,EAAO,CAAC,EAGjCxI,EAAW,KAAK,0BAA0B0B,EAAGC,EAAGJ,EAAOC,EAAQ,KAAK,MAAM,kBAAkB,EAE9FxB,GACF,QAAQ,IAAI,4CAA6CA,CAAQ,EAGnE,KAAK,sBAAqB,CAC9B,CAKE,8BAA8BmI,EAAc,CAE1C,MAAMO,EAAoB,KAAK,UAAU,OAAOrK,GAC9CA,EAAG,iBAAmB,UAAYA,EAAG,eAAiB8J,CAC5D,EAEI,GAAIO,EAAkB,SAAW,EAC/B,MAAO,GAIT,MAAMC,EAAiBD,EACpB,IAAIrK,GAAMA,EAAG,OAAS,CAAC,EACvB,OAAOiI,GAASA,EAAQ,CAAC,EACzB,KAAK,CAACzP,EAAGqB,IAAMrB,EAAIqB,CAAC,EAGvB,QAASQ,EAAI,EAAGA,GAAKiQ,EAAe,OAAS,EAAGjQ,IAC9C,GAAI,CAACiQ,EAAe,SAASjQ,CAAC,EAC5B,OAAOA,EAKX,OAAOiQ,EAAe,OAAS,CACnC,CAKE,wBAAyB,CAGvB,MAAMC,EAAmB,KAAK,UAAU,OAAOvK,GAC7CA,EAAG,iBAAmB,WAAa,CAACA,EAAG,cAAc,EAEvD,GAAIuK,EAAiB,SAAW,EAC9B,MAAO,GAIT,MAAMD,EAAiBC,EACpB,IAAIvK,GAAMA,EAAG,OAAS,CAAC,EACvB,OAAOiI,GAASA,EAAQ,CAAC,EACzB,KAAK,CAACzP,EAAGqB,IAAMrB,EAAIqB,CAAC,EAGvB,QAASQ,EAAI,EAAGA,GAAKiQ,EAAe,OAAS,EAAGjQ,IAC9C,GAAI,CAACiQ,EAAe,SAASjQ,CAAC,EAC5B,OAAOA,EAKX,OAAOiQ,EAAe,OAAS,CACnC,CAKE,eAAe3I,EAAU,CACvB,MAAMC,EAAQ,KAAK,UAAU,QAAQD,CAAQ,EAC7C,GAAIC,IAAU,GAAI,CAChB,MAAM4I,EAAU,KAAK,UAAU,OAAO5I,EAAO,CAAC,EAAE,CAAC,EAKjD,KAAK,UAAS,EACd,KAAK,OAAM,EAGX,KAAK,oBAAoB,kBAAmB4I,CAAO,EAGnD,KAAK,qBAAoB,EAGzB,KAAK,uBAAsB,EAE3B,QAAQ,IAAI,qBAAqB,OAAAA,EAAQ,OAAS,UAAS,UAAS,OAAA7I,EAAS,GAAE,IAAG,EAClF,QAAQ,IAAI,kBAAkB,YAAK,uBAAsB,EAAI,CACnE,CACA,CAKE,gBAAiB,CACX,KAAK,UAAU,OAAS,IAC1B,KAAK,UAAY,GACjB,KAAK,UAAS,EACd,KAAK,OAAM,EAGX,KAAK,qBAAoB,EAGzB,KAAK,uBAAsB,EAE3B,QAAQ,IAAI,wCAAwC,EAE1D,CAKE,2BAA4B,CACtB,KAAK,UAAU,OAAS,IAC1B,KAAK,UAAY,GACjB,KAAK,UAAS,EACd,KAAK,OAAM,EAGX,KAAK,uBAAsB,EAE3B,QAAQ,IAAI,2DAA2D,EAE7E,CAKE,kBAAmB,CAEjB,KAAK,UAAU,KAAK,CAACnJ,EAAGqB,IAAM,CAC5B,MAAM4Q,EAASjS,EAAE,OAAS,EACpBkS,EAAS7Q,EAAE,OAAS,EAC1B,OAAO4Q,EAASC,CACtB,CAAK,EAGD,QAASrQ,EAAI,EAAGA,EAAI,KAAK,UAAU,OAAQA,IACzC,KAAK,UAAUA,CAAC,EAAE,MAAQA,EAAI,EAGhC,QAAQ,IAAI,aAAa,YAAK,UAAU,OAAM,aAAY,CAC9D,CAKE,WAAY,CACV,MAAMsQ,EAAQ,CACZ,UAAW,KAAK,MAAM,KAAK,UAAU,KAAK,SAAS,CAAC,EACpD,UAAW,KAAK,IAAG,CACzB,EAGI,KAAK,QAAU,KAAK,QAAQ,MAAM,EAAG,KAAK,aAAe,CAAC,EAG1D,KAAK,QAAQ,KAAKA,CAAK,EACvB,KAAK,aAAe,KAAK,QAAQ,OAAS,EAGtC,KAAK,QAAQ,OAAS,KAAK,iBAC7B,KAAK,QAAQ,MAAK,EAClB,KAAK,eAEX,CAKE,MAAO,CACL,GAAI,KAAK,aAAe,EAAG,CACzB,KAAK,eACL,MAAMA,EAAQ,KAAK,QAAQ,KAAK,YAAY,EAC5C,KAAK,UAAY,KAAK,MAAM,KAAK,UAAUA,EAAM,SAAS,CAAC,EAC3D,KAAK,OAAM,EAGX,KAAK,qBAAoB,EAGzB,KAAK,uBAAsB,EAE3B,QAAQ,IAAI,MAAM,CACxB,CACA,CAKE,MAAO,CACL,GAAI,KAAK,aAAe,KAAK,QAAQ,OAAS,EAAG,CAC/C,KAAK,eACL,MAAMA,EAAQ,KAAK,QAAQ,KAAK,YAAY,EAC5C,KAAK,UAAY,KAAK,MAAM,KAAK,UAAUA,EAAM,SAAS,CAAC,EAC3D,KAAK,OAAM,EAGX,KAAK,qBAAoB,EAGzB,KAAK,uBAAsB,EAE3B,QAAQ,IAAI,MAAM,CACxB,CACA,CAKE,mBAAoB,SAClB,MAAO,CACL,UAAW,KAAK,UAAU,IAAI3K,IAAO,CAAC,GAAGA,CAAE,EAAE,EAC7C,UAAW,KAAK,aAAe,CAC7B,KAAM,KAAK,aAAa,KACxB,OAAOjK,EAAA,KAAK,eAAL,YAAAA,EAAmB,MAC1B,QAAQY,EAAA,KAAK,eAAL,YAAAA,EAAmB,MACnC,EAAU,KACJ,UAAW,CACT,MAAO,KAAK,MAAM,MAClB,WAAY,KAAK,MAAM,WACvB,WAAY,KAAK,MAAM,UAC/B,CACA,CACA,CAKE,mBAAmBO,EAAM,CACnBA,EAAK,YACP,KAAK,UAAYA,EAAK,UAAU,IAAI8I,IAAO,CAAC,GAAGA,CAAE,EAAE,EAQnD,QAAQ,IAAI,aAAa,YAAK,UAAU,OAAM,yCAAwC,GAGpF9I,EAAK,YACP,KAAK,MAAM,MAAQA,EAAK,UAAU,OAAS,EAC3C,KAAK,MAAM,WAAaA,EAAK,UAAU,YAAc,EACrD,KAAK,MAAM,WAAaA,EAAK,UAAU,YAAc,EACrD,KAAK,eAAc,GAGrB,KAAK,UAAS,EACd,KAAK,OAAM,CACf,CAKE,sBAAuB,CAIrB,MAAMwI,EAAoB,GAE1B,KAAK,UAAU,QAAQiC,GAAY,CACjC,MAAMhC,EAAUgC,EAAS,iBAAmB,SACxC,UAAU,OAAAA,EAAS,cAAgB,WACnC,UAECjC,EAAkBC,CAAO,IAC5BD,EAAkBC,CAAO,EAAI,IAE/BD,EAAkBC,CAAO,EAAE,KAAKgC,CAAQ,CAC9C,CAAK,EAED,IAAI7B,EAAiB,GACjBF,EAAa,EAGjB,OAAO,QAAQF,CAAiB,EAAE,QAAQ,CAAC,CAACC,EAASE,CAAe,IAAM,CACxE,IAAI+K,EAAgB,GAGpB,QAASvQ,EAAI,EAAGA,EAAIwF,EAAgB,OAAQxF,IAC1C,GAAI,OAAOwF,EAAgBxF,CAAC,EAAE,OAAU,UAAYwF,EAAgBxF,CAAC,EAAE,OAAS,EAAG,CACjFuQ,EAAgB,GAChB,KACV,CAIM,GAAI,CAACA,EAAe,CAClB,MAAM7K,EAASF,EAAgB,IAAIG,GAAMA,EAAG,KAAK,EAC5B,CAAC,GAAG,IAAI,IAAID,CAAM,CAAC,EACvB,SAAWA,EAAO,SACjC6K,EAAgB,GAE1B,CAGM,GAAIA,EAAe,CACjB,QAAQ,IAAI,MAAM,OAAAjL,EAAO,kBAAiB,OAAAE,EAAgB,OAAM,eAAc,EAC9EC,EAAiB,GAGjB,QAASzF,EAAI,EAAGA,EAAIwF,EAAgB,OAAQxF,IAC1CwF,EAAgBxF,CAAC,EAAE,MAAQA,EAAI,EAGjCuF,GAAcC,EAAgB,OAC9B,QAAQ,IAAI,MAAM,OAAAF,EAAO,cAAa,OAAAE,EAAgB,OAAQ,CACtE,CACA,CAAK,EAEGC,IACF,QAAQ,IAAI,8BAA8B,EAC1C,QAAQ,IAAI,cAAc,OAAAF,EAAU,mBAAkB,EAE5D,CAKE,SAAU,CAKJ,KAAK,cAAgB,KAAK,aAAa,IAAI,WAAW,OAAO,GAC/D,IAAI,gBAAgB,KAAK,aAAa,GAAG,EAG3C,QAAQ,IAAI,0BAA0B,CAC1C,CAKE,yBAAyBgF,EAAU,OAEjC,GAAI,CAAC,KAAK,sBAAsBA,EAAS,EAAGA,EAAS,CAAC,EAAG,EACnD7O,EAAA,OAAO,sBAAP,MAAAA,EAA4B,WAC9B,OAAO,oBAAoB,UAAU,mBAAoB,qGAAqG,EAEhK,MACN,CAEI,MAAMyO,EAAW,KAAK,cAAcI,EAAS,EAAGA,EAAS,CAAC,EAE1D,KAAK,MAAM,oBAAsB,GACjC,KAAK,MAAM,eAAiBA,EAC5B,KAAK,MAAM,iBAAmBA,EAC9B,KAAK,MAAM,gBAAkB,CAC3B,EAAGJ,EAAS,EACZ,EAAGA,EAAS,EACZ,UAAW,EACX,cAAe,OACrB,EAEI,KAAK,OAAO,MAAM,OAAS,WAC3B,QAAQ,IAAI,8BAA8B,CAC9C,CAKE,wBAAwBI,EAAU,CAChC,KAAK,MAAM,iBAAmBA,EAG9B,MAAMf,EAASe,EAAS,EAAI,KAAK,MAAM,eAAe,EAChDG,EAASH,EAAS,EAAI,KAAK,MAAM,eAAe,EAGtD,GAFiB,KAAK,KAAKf,EAASA,EAASkB,EAASA,CAAM,GAE5C,KAAK,QAAQ,mBAAoB,CAG/C,MAAMc,GADQ,KAAK,MAAMd,EAAQlB,CAAM,EAAI,IAAM,KAAK,GACrB,KAAO,IAExC,KAAK,MAAM,gBAAgB,UAAYgC,EACvC,KAAK,MAAM,gBAAgB,cAAgB,OACjD,MAEM,KAAK,MAAM,gBAAgB,UAAY,EACvC,KAAK,MAAM,gBAAgB,cAAgB,QAG7C,KAAK,OAAM,CACf,CAKE,2BAA4B,CAC1B,GAAI,CAAC,KAAK,MAAM,gBAAiB,CAC/B,KAAK,uBAAsB,EAC3B,MACN,CAGI,MAAMhC,EAAS,KAAK,MAAM,iBAAiB,EAAI,KAAK,MAAM,eAAe,EACnEkB,EAAS,KAAK,MAAM,iBAAiB,EAAI,KAAK,MAAM,eAAe,EACnEO,EAAW,KAAK,KAAKzB,EAASA,EAASkB,EAASA,CAAM,EAEzD,IAAC/C,EAEAsD,GAAY,KAAK,QAAQ,oBAG3BtD,GADc,KAAK,MAAM+C,EAAQlB,CAAM,EAAI,IAAM,KAAK,GACjC,KAAO,IAG5B,QAAQ,IAAI,uCAAuC,OAAA7B,EAAU,QAAQ,CAAC,EAAC,UAAS,YAAK,MAAM,gBAAgB,EAAE,QAAQ,CAAC,EAAC,MAAK,YAAK,MAAM,gBAAgB,EAAE,QAAQ,CAAC,EAAC,IAAG,IAGtKA,EAAY,EAGZ,QAAQ,IAAI,mCAAmC,YAAK,MAAM,gBAAgB,EAAE,QAAQ,CAAC,EAAC,MAAK,YAAK,MAAM,gBAAgB,EAAE,QAAQ,CAAC,EAAC,IAAG,GAIvI,KAAK,yBACH,KAAK,MAAM,gBAAgB,EAC3B,KAAK,MAAM,gBAAgB,EAC3BA,CACN,EAEI,KAAK,uBAAsB,CAC/B,CAKE,wBAAyB,CACvB,KAAK,MAAM,oBAAsB,GACjC,KAAK,MAAM,eAAiB,KAC5B,KAAK,MAAM,iBAAmB,KAC9B,KAAK,MAAM,gBAAkB,KAC7B,KAAK,OAAO,MAAM,OAAS,YAC3B,KAAK,OAAM,CACf,CAKE,4BAA6B,CAC3B,MAAMX,EAAQ,KAAK,MAAM,MAGnBwJ,EAAc,EACpB,IAAIC,EAEJ,GAAIzJ,GAAS,IAAK,CAEhB,MAAM0J,EAAW,KAAK,IAAI,GAAI,KAAK,IAAI,GAAI,GAAK1J,CAAK,CAAC,EAIhD2J,EAAkB,KAAK,IAAI,EAAGD,EAAW,EAAG,EAG5CE,EAAyB,KAAK,IAAI,GAAI,GAAK5J,EAAQ,KAAO,CAAC,EAEjEyJ,EAAe,KAAK,IAAIE,EAAiBC,CAAsB,EAC/DH,EAAe,KAAK,IAAI,EAAGA,CAAY,CAC7C,MAEMA,EAAeD,GAAexJ,EAAQ,IAAO,IAC7CyJ,EAAe,KAAK,IAAID,EAAa,KAAK,IAAI,EAAGC,CAAY,CAAC,EAGhE,MAAO,CACL,MAAOzJ,EACP,OAAQyJ,EACR,kBAAmBzJ,GAAS,IAC5B,kBAAmBA,GAAS,KAAK,QAAQ,mBACzC,gBAAiBA,EAAQ,KAAK,QAAQ,mBACtC,SAAU,KAAK,IAAI,GAAI,KAAK,IAAI,GAAI,GAAKA,CAAK,CAAC,EAC/C,kBAAmB,KAAK,IAAI,EAAG,KAAK,IAAI,GAAI,GAAKA,CAAK,CAAC,EACvD,YAAa,EACb,YAAa,KAAK,IAAI,EAAG,KAAK,IAAI,EAAG,IAAMA,CAAK,CAAC,CACvD,CACA,CAKE,oBAAoBgC,EAAGC,EAAGC,EAAOvB,EAAWC,EAAWuB,EAAU,CAC/D,MAAM0H,EAAS,KAAK,OACdC,EAAYD,EAAO,cAGnBE,EAAe,SAAS,cAAc,KAAK,EACjDA,EAAa,UAAY,kBAAkB,OAAApJ,IAAc,OAAS,iBAAmB,mBACrFoJ,EAAa,YAAc7H,EAAM,SAAQ,EACzC6H,EAAa,QAAQ,WAAa,GAAG,OAAA/H,EAAC,KAAI,OAAAC,GAG1C,MAAMjD,EAAO6K,EAAO,sBAAqB,EACnCG,EAAgBF,EAAU,sBAAqB,EAE/CG,EAAUjL,EAAK,KAAOgL,EAAc,KACpCE,EAAUlL,EAAK,IAAMgL,EAAc,IAGnCG,EAAehI,EAAS,OAAS,EAAI,GAAK,GAEhD4H,EAAa,MAAM,KAAQE,EAAUjI,EAAI,EAAK,KAC9C+H,EAAa,MAAM,IAAOG,EAAUjI,EAAIE,EAAS,OAASgI,EAAgB,KAE1EL,EAAU,YAAYC,CAAY,CACtC,CAKE,cAAc/H,EAAGC,EAAGC,EAAOvB,EAAWL,EAAU,CAC9C,MAAMuJ,EAAS,KAAK,OACdC,EAAYD,EAAO,cAGnBO,EAAkBN,EAAU,cAAc,mBAAmB,EAC/DM,GACFA,EAAgB,OAAM,EAIxB,MAAMC,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,mBAEpB,MAAMC,EAAgB3J,IAAc,OAAS,OAAS,QAChD4J,EAAiB,IAAI,YAAK,MAAMjK,EAAS,CAAC,EAAC,MAAK,YAAK,MAAMA,EAAS,CAAC,EAAC,KAE5E+J,EAAQ,UAAY,qBACN,OAAAnI,EAAK,2BACN,OAAAoI,EAAa,2BACb,OAAAC,EAAc,gBAI3B,MAAMvL,EAAO6K,EAAO,sBAAqB,EACnCG,EAAgBF,EAAU,sBAAqB,EAE/CG,EAAUjL,EAAK,KAAOgL,EAAc,KACpCE,EAAUlL,EAAK,IAAMgL,EAAc,IAEzCK,EAAQ,MAAM,KAAQJ,EAAUjI,EAAI,GAAM,KAC1CqI,EAAQ,MAAM,IAAOH,EAAUjI,EAAI,GAAM,KAEzC6H,EAAU,YAAYO,CAAO,EAG7B,WAAW,IAAM,CACXA,EAAQ,eACVA,EAAQ,OAAM,CAEtB,EAAO,GAAI,CACX,CAKE,qBAAsB,CACpB,GAAI,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,cAAe,OAE9B,KAAK,OAAO,cACL,iBAAiB,iBAAiB,EACpD,QAAQnI,GAASA,EAAM,OAAM,CAAE,CAC1C,CAKE,oBAAoBC,EAAU,CAC5B,MAAMqI,EAAY,SAAS,eAAe,gBAAgB,EACrDA,IAGLA,EAAU,UAAU,OAAO,QAAS,MAAM,EAEtCrI,EAAS,gBACXqI,EAAU,UAAU,IAAI,MAAM,EACrBrI,EAAS,mBAClBqI,EAAU,UAAU,IAAI,OAAO,EAErC,CAKE,yBAAyBrI,EAAU,CACjC,MAAMsI,EAAW,SAAS,eAAe,sBAAsB,EACzD1I,EAAW,SAAS,eAAe,gBAAgB,EAEzD,GAAI,CAAC0I,GAAY,CAAC1I,EAAU,OAE5B,IAAI2I,EAAa,GACbC,EAAW,GAEXxI,EAAS,iBACXuI,EAAa,oBACbC,EAAW,IACFxI,EAAS,mBAClBuI,EAAa,cACbC,EAAW,KAEXD,EAAa,YACbC,EAAW,KAAK,UAAU,OAAS,IAAMxI,EAAS,MAAQ,IAAOA,EAAS,MAAQ,IAGpFJ,EAAS,YAAc2I,EAEnBC,GACFF,EAAS,UAAU,IAAI,SAAS,EAGhC,WAAW,IAAM,CACXA,GACFA,EAAS,UAAU,OAAO,SAAS,CAE7C,EAAS,GAAI,GAEPA,EAAS,UAAU,OAAO,SAAS,CAEzC,CAKE,wBAAyB,SAEvB,MAAMrC,GAA4B1T,EAAA,OAAO,sBAAP,YAAAA,EAA4B,0BACxD6R,GAAWjR,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAE7C,GAAI8S,IAA6B7B,GAAA,MAAAA,EAAU,gBAAgBA,GAAA,MAAAA,EAAU,cAAc,CAEjF,MAAMqE,EAAuB,KAAK,UAAU,OAG5C,WAAW,SAAY,OACrB,GAAI,CACF,MAAMrL,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBACrD,GAAI6K,EAAkB,CAKpB,MAAMpG,GAJS,MAAMoG,EAAiB,eACpCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,iBACpC,GACsC,UAAU9N,GAAOA,EAAI,KAAO8N,EAAS,aAAa,EAAE,EAE9E,MAAM6B,EAA0B,cAC9B7B,EAAS,aAAa,GACtBA,EAAS,aAAa,kBACtBpN,EACAyR,CACd,CACA,CACA,OAAiBzX,EAAO,CACd,QAAQ,KAAK,aAAcA,CAAK,CAC1C,CACA,EAAS,GAAG,CACZ,CACA,CAKE,6BAA6BmN,EAAU,OAErC,MAAM8H,GAA4B1T,EAAA,OAAO,sBAAP,YAAAA,EAA4B,0BAE1D0T,GAA6B9H,GAAYA,EAAS,OAEpD8H,EAA0B,yBAAyB9H,EAAS,KAAK,CAEvE,CAOE,mBAAmBuK,EAAUrW,EAAU,KAAM,CAC3C,KAAK,gBAAgB,SAAWqW,EAChC,KAAK,gBAAgB,sBAAwBrW,EAC7C,KAAK,gBAAgB,cAAgBqW,EAAW,KAAK,IAAG,EAAK,KAE7D,QAAQ,IAAI,WAAW,OAAAA,EAAW,KAAO,KAAI,WAAU,OAAArW,GAAW,OAAQ,CAC9E,CAOE,gCAAgCsW,EAAiB,SAC/C,MAAMvE,GAAW7R,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAC7C,GAAI,GAACY,EAAAiR,GAAA,YAAAA,EAAU,eAAV,MAAAjR,EAAwB,IAC3B,eAAQ,KAAK,kBAAkB,EACxB,GAGT,MAAMyV,EAAexE,EAAS,aAAa,KAAOuE,EAClD,OAAKC,GACH,QAAQ,KAAK,qBAAqB,OAAAD,EAAe,UAAS,OAAAvE,EAAS,aAAa,GAAI,EAG/EwE,CACX,CAKE,MAAM,sBAAuB,SAC3B,GAAI,CACF,MAAMxL,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBAC/C6R,GAAWjR,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAE7C,GAAI,CAACiK,GAAoB,EAACgH,GAAA,MAAAA,EAAU,eAAgB,EAACA,GAAA,MAAAA,EAAU,cAAc,CAC3E,QAAQ,KAAK,mBAAmB,EAChC,MACR,CAGM,GAAI,KAAK,gBAAgB,SAAU,CACjC,QAAQ,KAAK,sBAAsB,YAAK,gBAAgB,sBAAqB,IAAG,EAChF,MACR,CAGM,GAAI,CAACA,EAAS,cAAgB,CAACA,EAAS,aAAa,GAAI,CACvD,QAAQ,KAAK,iBAAiB,EAC9B,MACR,CAGM,MAAMxK,EAAiBwK,EAAS,aAAa,GAGvC9R,EAAiB,KAAK,kBAAiB,EAG7C,GAAI,CAAC,KAAK,gCAAgCsH,CAAc,EAAG,CACzD,QAAQ,KAAK,2BAA2B,OAAAA,EAAc,IAAG,EACzD,MACR,CASM,GANA,MAAMwD,EAAiB,qBACrBxD,EACAtH,EAAe,SACvB,EAGU,CAAC,KAAK,gCAAgCsH,CAAc,EAAG,CACzD,QAAQ,KAAK,wCAAwC,OAAAA,EAAc,IAAG,EACtE,MACR,CAEM,QAAQ,IAAI,UAAU,OAAAtH,EAAe,UAAU,OAAM,gBAAe,OAAAsH,EAAgB,EAGpF,GAAI,CAEF,MAAMiP,EAAkB,OAAO,iCAC3B,OAAOA,GAAoB,YAC7B,MAAMA,EAAgBjP,CAAc,EACpC,QAAQ,IAAI,eAAe,GAE3B,QAAQ,KAAK,gDAAgD,CAEvE,OAAekP,EAAc,CACrB,QAAQ,KAAK,aAAcA,CAAY,CAC/C,CAEA,OAAa9X,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,CACpC,CACA,CAQE,oBAAoB+X,EAAe5K,EAAU6K,EAAmB,KAAM,SACpE,GAAI,CAEF,MAAMC,GAAsB1W,EAAA,OAAO,sBAAP,YAAAA,EAA4B,oBAExD,GAAI,CAAC0W,EAAqB,CACxB,QAAQ,KAAK,sBAAsB,EACnC,MACR,CAGM,GAAI,CAACA,EAAoB,wBAAyB,CAChD,QAAQ,IAAI,mBAAmB,EAC/B,MACR,CAGM,MAAM7E,GAAWjR,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAC7C,GAAI,EAACiR,GAAA,MAAAA,EAAU,eAAgB,EAACA,GAAA,MAAAA,EAAU,cAAc,CACtD,QAAQ,KAAK,uBAAuB,EACpC,MACR,CAGM,MAAM8E,EAAe,CACnB,GAAI/K,GAAA,YAAAA,EAAU,GACd,MAAOA,GAAA,YAAAA,EAAU,MACjB,eAAgBA,GAAA,YAAAA,EAAU,eAC1B,aAAcA,GAAA,YAAAA,EAAU,aACxB,EAAGA,GAAA,YAAAA,EAAU,EACb,EAAGA,GAAA,YAAAA,EAAU,CACrB,EAaM,GAXA,QAAQ,IAAI,cAAc,OAAA4K,GAAiB,CACzC,SAAUG,EACV,MAAO9E,EAAS,aAAa,GAC7B,MAAOA,EAAS,aAAa,GAC7B,UAAUjG,GAAA,YAAAA,EAAU,kBAAmB,QAC/C,CAAO,GAI0BA,GAAA,YAAAA,EAAU,kBAAmB,SAMtD,OAFA,QAAQ,IAAI,uCAAuC,OAAA4K,EAAe,EAE1DA,EAAa,CACnB,IAAK,eAEH,MAAMI,EAAiB,CACrB,KAAM,2BACN,WAAYhL,EACZ,QAAS,CACP,QAASiG,EAAS,aAAa,GAC/B,QAASA,EAAS,aAAa,GAC/B,UAAWA,EAAS,aAAa,kBACjC,SAAUA,CAC1B,EACc,UAAW,IAAI,KAAI,EAAG,YAAW,CAC/C,EACY6E,EAAoB,4BAA4BE,CAAc,EAC9D,MAEF,IAAK,gBAEH,MAAMC,EAAiB,CACrB,KAAM,2BACN,WAAYjL,EACZ,QAAS,CACP,QAASiG,EAAS,aAAa,GAC/B,QAASA,EAAS,aAAa,GAC/B,UAAWA,EAAS,aAAa,kBACjC,SAAUA,EACV,eAAgB,CACd,KAAM4E,EACN,GAAI,CAAE,EAAG7K,EAAS,EAAG,EAAGA,EAAS,CAAC,CACpD,CACA,EACc,UAAW,IAAI,KAAI,EAAG,YAAW,CAC/C,EACY8K,EAAoB,4BAA4BG,CAAc,EAC9D,MAEF,IAAK,kBAEH,MAAMC,EAAiB,CACrB,KAAM,2BACN,WAAYlL,EACZ,QAAS,CACP,QAASiG,EAAS,aAAa,GAC/B,QAASA,EAAS,aAAa,GAC/B,UAAWA,EAAS,aAAa,kBACjC,SAAUA,CAC1B,EACc,UAAW,IAAI,KAAI,EAAG,YAAW,CAC/C,EACY6E,EAAoB,4BAA4BI,CAAc,EAC9D,MAEF,QACE,QAAQ,KAAK,sBAAsB,OAAAN,EAAe,CAC9D,KAKQ,QAFA,QAAQ,IAAI,sCAAsC,OAAAA,EAAe,EAEzDA,EAAa,CACnB,IAAK,eACHE,EAAoB,uBAClB9K,EACAiG,EAAS,aACTA,EAAS,YACvB,EACY,MAEF,IAAK,gBACH6E,EAAoB,wBAClB9K,EACA6K,EACA5E,EAAS,aACTA,EAAS,YACvB,EACY,MAEF,IAAK,kBACH6E,EAAoB,0BAClB9K,EACAiG,EAAS,aACTA,EAAS,YACvB,EACY,MAEF,IAAK,iBACH6E,EAAoB,yBAClB9K,EACAiG,EAAS,aACTA,EAAS,YACvB,EACY,MAEF,QACE,QAAQ,KAAK,qBAAqB,OAAA2E,EAAe,CAC7D,CAGA,OAAa/X,EAAO,CACd,QAAQ,MAAM,eAAgBA,CAAK,CACzC,CACA,CAKE,yBAAyB6O,EAAGC,EAAGtB,EAAWL,EAAU,CAClD,GAAI,CAACK,EAAW,OAEhB,IAAI8K,EACAnB,EAAgB,GAGpB,GAAI,OAAO3J,GAAc,SAEvB8K,EAAe9K,EACf2J,EAAgB,GAAG,OAAAmB,EAAa,QAAQ,CAAC,EAAC,aACjC9K,IAAc,OAEvB8K,EAAe,IACfnB,EAAgB,sBACP3J,IAAc,QAEvB8K,EAAe,EACfnB,EAAgB,iBAEhB,QAGF,KAAK,qBAAqBtI,EAAGC,EAAGwJ,EAAcnB,EAAehK,CAAQ,CACzE,CAKE,qBAAqB0B,EAAGC,EAAGwJ,EAAcnB,EAAehK,EAAU,CAChE,MAAMoL,EAAeD,EAAe,KAAK,GAAK,IACxCE,EAAc,KAAK,QAAQ,qBAG3BC,EAAO5J,EAAI,KAAK,IAAI0J,CAAY,EAAIC,EACpCE,EAAO5J,EAAI,KAAK,IAAIyJ,CAAY,EAAIC,EAG1C,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAC3B,KAAK,IAAI,QAAU,QAEnB,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAO3J,EAAGC,CAAC,EACpB,KAAK,IAAI,OAAO2J,EAAMC,CAAI,EAC1B,KAAK,IAAI,OAAM,EAGf,KAAK,IAAI,YAAY,EAAE,EAGvB,MAAMC,EAAaJ,EAAe,KAAK,GAAK,GACtCK,EAAaL,EAAe,KAAK,GAAK,GACtCM,EAAa,GAEnB,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,QAAU,QAEnB,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAOJ,EAAMC,CAAI,EAC1B,KAAK,IAAI,OAAOD,EAAO,KAAK,IAAIE,CAAU,EAAIE,EAAYH,EAAO,KAAK,IAAIC,CAAU,EAAIE,CAAU,EAClG,KAAK,IAAI,OAAOJ,EAAMC,CAAI,EAC1B,KAAK,IAAI,OAAOD,EAAO,KAAK,IAAIG,CAAU,EAAIC,EAAYH,EAAO,KAAK,IAAIE,CAAU,EAAIC,CAAU,EAClG,KAAK,IAAI,OAAM,EAGf,MAAMC,EAAa,GACbC,EAAQN,EAAO,KAAK,IAAIF,CAAY,EAAIO,EACxCE,EAAQN,EAAO,KAAK,IAAIH,CAAY,EAAIO,EAG9C,KAAK,IAAI,KAAO,kBAEhB,MAAM1K,EADc,KAAK,IAAI,YAAY+I,CAAa,EACxB,MACxB8B,EAAa,GAGnB,KAAK,IAAI,UAAY,0BACrB,KAAK,IAAI,SAASF,EAAQ3K,EAAU,EAAI,EAAG4K,EAAQC,EAAW,EAAI,EAAG7K,EAAY,EAAG6K,EAAa,CAAC,EAGlG,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAAS9B,EAAe4B,EAAOC,CAAK,CACjD,CAKE,+BAAgC,CAC9B,GAAI,CAAC,KAAK,MAAM,kBAAoB,CAAC,KAAK,MAAM,wBAAyB,OAEzE,MAAMvI,EAAiB,KAAK,cAC1B,KAAK,MAAM,iBAAiB,EAC5B,KAAK,MAAM,iBAAiB,CAClC,EAEUyI,EAAS,KAAK,MAAM,wBAAwB,EAC5CC,EAAS,KAAK,MAAM,wBAAwB,EAQlD,GALiB,KAAK,KACpB,KAAK,IAAID,EAASzI,EAAe,EAAG,CAAC,EACrC,KAAK,IAAI0I,EAAS1I,EAAe,EAAG,CAAC,CAC3C,EAEmB,GAAI,OAGnB,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAC3B,KAAK,IAAI,QAAU,QAEnB,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAOA,EAAe,EAAGA,EAAe,CAAC,EAClD,KAAK,IAAI,OAAOyI,EAAQC,CAAM,EAC9B,KAAK,IAAI,OAAM,EAGf,MAAM9J,EAAS6J,EAASzI,EAAe,EACjCF,EAAS4I,EAAS1I,EAAe,EACjCW,EAAQ,KAAK,MAAMb,EAAQlB,CAAM,EACjCgC,GAAmBD,EAAQ,IAAM,KAAK,GAAK,KAAO,IAElDuH,EAAavH,EAAQ,KAAK,GAAK,GAC/BwH,EAAaxH,EAAQ,KAAK,GAAK,GAC/ByH,EAAa,GAEnB,KAAK,IAAI,YAAY,EAAE,EACvB,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAOK,EAAQC,CAAM,EAC9B,KAAK,IAAI,OAAOD,EAAS,KAAK,IAAIP,CAAU,EAAIE,EAAYM,EAAS,KAAK,IAAIR,CAAU,EAAIE,CAAU,EACtG,KAAK,IAAI,OAAOK,EAAQC,CAAM,EAC9B,KAAK,IAAI,OAAOD,EAAS,KAAK,IAAIN,CAAU,EAAIC,EAAYM,EAAS,KAAK,IAAIP,CAAU,EAAIC,CAAU,EACtG,KAAK,IAAI,OAAM,EAGf,MAAMC,EAAa,GACbC,EAAQG,EAAS,KAAK,IAAI9H,CAAK,EAAI0H,EACnCE,EAAQG,EAAS,KAAK,IAAI/H,CAAK,EAAI0H,EACnCM,EAAY,GAAG,OAAA/H,EAAgB,QAAQ,CAAC,EAAC,KAG/C,KAAK,IAAI,KAAO,kBAEhB,MAAMjD,EADc,KAAK,IAAI,YAAYgL,CAAS,EACpB,MACxBH,EAAa,GAGnB,KAAK,IAAI,UAAY,0BACrB,KAAK,IAAI,SAASF,EAAQ3K,EAAU,EAAI,EAAG4K,EAAQC,EAAW,EAAI,EAAG7K,EAAY,EAAG6K,EAAa,CAAC,EAGlG,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAASG,EAAWL,EAAOC,CAAK,EAGzC,KAAK,IAAI,YAAY,EAAE,CAC3B,CAKE,yBAA0B,CACxB,IAAIK,EAAW,EAEf,YAAK,UAAU,QAAQlM,GAAY,CAC7BA,EAAS,YAAc,QAAUA,EAAS,gBAAkB,SAC9DA,EAAS,UAAY,IACrBA,EAAS,cAAgB,QACzBkM,KACSlM,EAAS,YAAc,SAAWA,EAAS,gBAAkB,UACtEA,EAAS,UAAY,EACrBA,EAAS,cAAgB,QACzBkM,IAER,CAAK,EAEGA,EAAW,IACb,QAAQ,IAAI,YAAY,OAAAA,EAAQ,gDAA+C,EAC/E,KAAK,UAAS,EACd,KAAK,OAAM,EACX,KAAK,qBAAoB,GAGpBA,CACX,CAKE,8BAA8BC,EAAS,CACrC,KAAK,MAAM,2BAA6BA,EACxC,QAAQ,IAAI,cAAc,OAAAA,EAAU,KAAO,KAAM,CACrD,CAKE,gBAAiB,CAEf,GAAI,OAAO,OAAO,qBAAwB,WAAY,CACpD,MAAMC,EAAe,OAAO,oBAAmB,EAC/C,GAAIA,EAAa,SACf,eAAQ,IAAI,kBAAkB,OAAAA,EAAa,UAAS,IAAG,EAChDA,EAAa,SAE5B,CAGI,eAAQ,IAAI,kBAAkB,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,IAAG,EACrD,KAAK,MAAM,KACtB,CAKE,uBAAwB,CACtB,GAAI,CAAC,KAAK,WAAa,KAAK,UAAU,SAAW,EAC/C,eAAQ,IAAI,cAAc,EACnB,GAIT,MAAMC,EAAkB,KAAK,UAAU,OAAO,CAACC,EAASC,IAAY,CAClE,MAAM7F,EAAe6F,EAAQ,OAAS,EAChCC,EAAeF,EAAQ,OAAS,EACtC,OAAO5F,EAAe8F,EAAeD,EAAUD,CACrD,CAAK,EAED,QAAQ,IAAI,eAAe,OAAAD,EAAgB,MAAO,EAGlD,MAAMvH,EAAe,KAAK,MAAM,MAC1BjF,EAAU,KAAK,OAAO,MAAQ,EAC9BC,EAAU,KAAK,OAAO,OAAS,EAGrC,YAAK,MAAM,WAAaD,EAAWwM,EAAgB,EAAIvH,EACvD,KAAK,MAAM,WAAahF,EAAWuM,EAAgB,EAAIvH,EAGvD,KAAK,cAAa,EAElB,KAAK,eAAc,EACnB,KAAK,OAAM,EAEX,QAAQ,IAAI,cAAc,OAAAuH,EAAgB,MAAK,WAAU,OAAAvH,EAAa,QAAQ,CAAC,EAAC,IAAG,EAC5E,EACX,CAME,MAAM,uBAAuB2H,EAAgB,GAAO,CAClD,GAAK,KAAK,MAAM,2BAIhB,GAAI,CACEA,EAEF,MAAM,KAAK,0BAAyB,EAGpC,MAAM,KAAK,2BAA0B,CAE7C,OAAa5Z,EAAO,CACd,QAAQ,MAAM,oBAAqBA,CAAK,CAC9C,CACA,CAKE,MAAM,2BAA4B,CAEhC,MAAM6Z,EAAsB,KAAK,WAAa,GAE9C,QAAQ,IAAI,oBAAoB,OAAAA,EAAoB,OAAM,QAAO,EAE7DA,EAAoB,SAAW,GAEjC,QAAQ,IAAI,yBAAyB,EACrC,MAAM,KAAK,gBAAe,GAGMA,EAAoB,KAAKrO,GACvDA,EAAG,YAAc,MAAQA,EAAG,YAAc,SACzC,OAAOA,EAAG,WAAc,UAAYA,EAAG,gBAAkB,QAClE,EAQQ,QAAQ,IAAI,wBAAwB,GAJpC,QAAQ,IAAI,0BAA0B,EACtC,KAAK,wBAAuB,EAMpC,CAKE,MAAM,iBAAkB,OACtB,GAAI,CAEF,MAAMyJ,GAA4B1T,EAAA,OAAO,sBAAP,YAAAA,EAA4B,0BAC9D,GAAI,CAAC0T,EAA2B,CAC9B,QAAQ,IAAI,0BAA0B,EACtC,MACR,CAGM,MAAM6E,EAAY,MAAM7E,EAA0B,oBAAoB,CAAC,EAEvE,GAAI6E,EAAW,CACb,QAAQ,IAAI,oBAAoB,OAAAA,EAAU,EAAE,QAAQ,CAAC,EAAC,MAAK,OAAAA,EAAU,EAAE,QAAQ,CAAC,EAAC,IAAG,EAGpF,MAAMP,EAAe,OAAO,OAAO,qBAAwB,WAAa,OAAO,oBAAmB,EAAK,CAAE,SAAU,EAAK,EAEpHA,EAAa,UAEf,KAAK,MAAM,MAAQA,EAAa,UAChC,QAAQ,IAAI,kBAAkB,OAAAA,EAAa,UAAS,IAAG,GAGvD,QAAQ,IAAI,kBAAkB,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,IAAG,EAG9D,MAAMvM,EAAU,KAAK,OAAO,MAAQ,EAC9BC,EAAU,KAAK,OAAO,OAAS,EAGrC,KAAK,MAAM,WAAaD,EAAW8M,EAAU,EAAI,KAAK,MAAM,MAC5D,KAAK,MAAM,WAAa7M,EAAW6M,EAAU,EAAI,KAAK,MAAM,MAG5D,KAAK,cAAa,EAElB,KAAK,eAAc,EACnB,KAAK,OAAM,EAEX,QAAQ,IAAI,yBAAyB,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,IAAG,CAC3E,MACQ,QAAQ,IAAI,qBAAqB,CAEzC,OAAa9Z,EAAO,CACd,QAAQ,MAAM,oBAAqBA,CAAK,CAC9C,CACA,CAKE,yBAA0B,CACxB,MAAM4C,EAAc,KAAK,WAAa,GACtC,GAAIA,EAAY,SAAW,EACzB,OAIF,IAAImX,EAAO,EAAGC,EAAO,EACrB,UAAW9V,KAActB,EACvBmX,GAAQ7V,EAAW,EACnB8V,GAAQ9V,EAAW,EAGrB,MAAM+V,EAAcF,EAAOnX,EAAY,OACjCsX,EAAcF,EAAOpX,EAAY,OAEvC,QAAQ,IAAI,uBAAuB,OAAAqX,EAAY,QAAQ,CAAC,EAAC,MAAK,OAAAC,EAAY,QAAQ,CAAC,EAAC,QAAO,OAAAtX,EAAY,OAAM,OAAM,EAGnH,MAAM2W,EAAe,OAAO,OAAO,qBAAwB,WAAa,OAAO,oBAAmB,EAAK,CAAE,SAAU,EAAK,EAEpHA,EAAa,UAEf,KAAK,MAAM,MAAQA,EAAa,UAChC,QAAQ,IAAI,kBAAkB,OAAAA,EAAa,UAAS,IAAG,GAGvD,QAAQ,IAAI,kBAAkB,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,IAAG,EAG9D,MAAMvM,EAAU,KAAK,OAAO,MAAQ,EAC9BC,EAAU,KAAK,OAAO,OAAS,EAGrC,KAAK,MAAM,WAAaD,EAAWiN,EAAc,KAAK,MAAM,MAC5D,KAAK,MAAM,WAAahN,EAAWiN,EAAc,KAAK,MAAM,MAG5D,KAAK,cAAa,EAElB,KAAK,eAAc,EACnB,KAAK,OAAM,EAEX,QAAQ,IAAI,4BAA4B,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,IAAG,CAC1E,CAKE,MAAM,4BAA6B,OACjC,GAAI,CAEF,MAAMjF,GAA4B1T,EAAA,OAAO,sBAAP,YAAAA,EAA4B,0BAC9D,GAAI,CAAC0T,EAA2B,CAC9B,QAAQ,IAAI,iBAAiB,EAC7B,MACR,CAGM,MAAMf,EAAY,KAAK,uBAAsB,EAGvCiG,EAAmB,MAAMlF,EAA0B,oBAAoBf,CAAS,EAEtF,GAAIiG,EAAkB,CACpB,QAAQ,IAAI,qBAAqB,OAAAjG,EAAS,SAAQ,OAAAiG,EAAiB,EAAE,QAAQ,CAAC,EAAC,MAAK,OAAAA,EAAiB,EAAE,QAAQ,CAAC,EAAC,IAAG,EAGpH,MAAMZ,EAAe,OAAO,OAAO,qBAAwB,WAAa,OAAO,oBAAmB,EAAK,CAAE,SAAU,EAAK,EAEpHA,EAAa,UAEf,KAAK,MAAM,MAAQA,EAAa,UAChC,QAAQ,IAAI,kBAAkB,OAAAA,EAAa,UAAS,IAAG,GAGvD,QAAQ,IAAI,kBAAkB,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,IAAG,EAG9D,MAAMvM,EAAU,KAAK,OAAO,MAAQ,EAC9BC,EAAU,KAAK,OAAO,OAAS,EAGrC,KAAK,MAAM,WAAaD,EAAWmN,EAAiB,EAAI,KAAK,MAAM,MACnE,KAAK,MAAM,WAAalN,EAAWkN,EAAiB,EAAI,KAAK,MAAM,MAGnE,KAAK,cAAa,EAElB,KAAK,eAAc,EACnB,KAAK,OAAM,EAEX,QAAQ,IAAI,yBAAyB,YAAK,MAAM,MAAM,QAAQ,CAAC,EAAC,IAAG,CAC3E,MACQ,QAAQ,IAAI,eAAe,OAAAjG,EAAS,QAAO,CAEnD,OAAalU,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,CACjD,CACA,CAKE,0BAA2B,CAEzB,GAAI,OAAO,OAAO,qBAAwB,WAExC,cAAO,oBAAoB,EAAI,EAAE,KAAKoa,GAAW,CAC3CA,EAEF,WAAW,IAAM,CACf,KAAK,yBAAwB,CACzC,EAAa,GAAG,GAGN,QAAQ,IAAI,cAAc,EAC1B,KAAK,sBAAqB,EAC1B,KAAK,yBAAwB,EAEzB,OAAO,aACT,OAAO,YAAY,OAAQ,eAAe,EAGtD,CAAO,EACM,GAIT,GAAI,OAAO,OAAO,eAAkB,WAAY,CAC9C,MAAMC,EAAkB,CACtB,IAAK,aACL,eAAgB,IAAM,GACtB,gBAAiB,IAAM,EAC/B,EAEM,cAAO,cAAcA,CAAe,EAGpC,WAAW,IAAM,CACf,KAAK,yBAAwB,CACrC,EAAS,GAAG,EACC,EACb,CAEI,MAAO,EACX,CAKE,0BAA2B,CACzB,QAAQ,IAAI,oBAAoB,EAGhC,KAAK,MAAM,oBAAsB,GACjC,KAAK,MAAM,uBAAyB,GACpC,KAAK,MAAM,mBAAqB,EAGhB,KAAK,uBAAsB,IAGzC,QAAQ,IAAI,uBAAuB,EACnC,KAAK,sBAAqB,EAC1B,KAAK,yBAAwB,EAEzB,OAAO,UACT,OAAO,SAAS,QAAS,cAAc,EAG/C,CAKE,0BAA2B,CACzB,MAAMnH,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,IACF,QAAQ,IAAI,kBAAkB,EAG1BA,EAAiB,gBACnBA,EAAiB,oBAAoB,QAASA,EAAiB,aAAa,EAC5EA,EAAiB,cAAgB,MAInCA,EAAiB,YAAc,iBAC/BA,EAAiB,UAAU,OAAO,QAAQ,EAGtC,OAAO,8BACTA,EAAiB,iBAAiB,QAAS,OAAO,4BAA4B,EAGtF,CAKE,wBAAyB,CACvB,GAAI,CAAC,KAAK,MAAM,oBAAqB,OAErC,MAAMoH,EAAY,KAAK,MAAM,uBAAuB,OAAS,KAAK,MAAM,mBAClEpQ,EAAY,KAAK,MAAM,mBAE7B,KAAK,sBAAqB,EAG1B,KAAK,yBAAwB,EAE7B,QAAQ,IAAI,iBAAiB,OAAAA,EAAS,UAAS,OAAAoQ,EAAS,KAAI,EAGxD,OAAO,UACT,OAAO,SAAS,OAAQ,OAAO,OAAApQ,EAAS,gBAAe,OAAAoQ,EAAS,uBAAsB,CAE5F,CAKE,0BAA0BpW,EAAYkM,EAAU,CACzC,KAAK,2BAEV,KAAK,0BAA0B,WAAa,GAC5C,KAAK,0BAA0B,kBAAoBlM,EACnD,KAAK,0BAA0B,cAAgBkM,EAG/C,KAAK,yBAAyB,UAAUlM,EAAYkM,CAAQ,EAE5D,KAAK,OAAO,MAAM,OAAS,WAC3B,QAAQ,IAAI,kCAAmClM,EAAW,EAAE,EAChE,CAKE,2BAA2BkM,EAAU,CACnC,GAAI,CAAC,KAAK,0BAA4B,CAAC,KAAK,0BAA0B,WAAY,OAGlE,KAAK,yBAAyB,WAAWA,CAAQ,GAG/D,KAAK,OAAM,CAEjB,CAKE,4BAA6B,SAC3B,GAAI,CAAC,KAAK,0BAA4B,CAAC,KAAK,0BAA0B,WAAY,OAGlF,MAAM1P,EAAS,KAAK,yBAAyB,WAAU,EAEnDA,GAAUA,EAAO,QAEnB,KAAK,wBAAwB,cAAa,EAG1C,KAAK,wBAAwB,aAAa,qBAAsBA,EAAO,UAAU,EAGjF,KAAK,wBAAwB,kCAAkCA,EAAO,WAAY,CAChF,SAASyB,GAAAZ,EAAA,KAAK,YAAW,IAAhB,YAAAA,EAAoB,eAApB,YAAAY,EAAkC,GAC3C,eAAgB,CACd,KAAMzB,EAAO,cACb,GAAI,CACF,EAAGA,EAAO,WAAW,EACrB,EAAGA,EAAO,WAAW,CACjC,CACA,EACQ,UAAW,IAAI,KAAI,EAAG,YAAW,CACzC,CAAO,EAGD,KAAK,uBAAsB,EAE3B,QAAQ,IAAI,uCAAwCA,EAAO,WAAW,EAAE,GAI1E,KAAK,0BAA0B,WAAa,GAC5C,KAAK,0BAA0B,kBAAoB,KACnD,KAAK,0BAA0B,cAAgB,KAE/C,KAAK,OAAO,MAAM,OAAS,YAC3B,KAAK,OAAM,CACf,CAKE,4BAA6B,CACvB,CAAC,KAAK,0BAA4B,CAAC,KAAK,0BAA0B,aAGtE,KAAK,yBAAyB,WAAU,EAGxC,KAAK,0BAA0B,WAAa,GAC5C,KAAK,0BAA0B,kBAAoB,KACnD,KAAK,0BAA0B,cAAgB,KAE/C,KAAK,OAAO,MAAM,OAAS,YAC3B,KAAK,OAAM,EAEX,QAAQ,IAAI,kCAAkC,EAClD,CAKE,aAAc,OACZ,OAAOa,EAAA,OAAO,sBAAP,YAAAA,EAA4B,QACvC,CAKE,MAAM,kCAAmC,OACvC,GAAI,CAEF,KAAM,CAAE,wBAAAgZ,CAAuB,EAAK,MAAKC,GAAA,wCAAAD,GAAA,KAAC,QAAO,uCAA8B,iCAAAA,CAAA,OAC/E,KAAK,wBAA0B,IAAIA,EAAwB,IAAI,EAG/D,MAAMtC,GAAsB1W,EAAA,OAAO,sBAAP,YAAAA,EAA4B,oBACpD0W,GACF,KAAK,wBAAwB,uBAAuBA,CAAmB,EACvE,QAAQ,IAAI,oDAAoD,GAEhE,QAAQ,KAAK,6DAA6D,EAI5E,KAAK,wBAAwB,iBAAiB,eAAiBvV,GAAS,CACtE,QAAQ,IAAI,gBAAiBA,EAAK,KAAM,QAASA,EAAK,MAAM,EAC5D,KAAK,uBAAsB,CACnC,CAAO,EAED,QAAQ,IAAI,qCAAqC,EAGjD,KAAM,CAAE,yBAAA+X,CAAwB,EAAK,MAAKD,GAAA,yCAAAC,GAAA,KAAC,QAAO,wCAA+B,kCAAAA,CAAA,OACjF,KAAK,yBAA2B,IAAIA,EAAyB,KAAM,KAAK,uBAAuB,EAC/F,QAAQ,IAAI,sCAAsC,EAGlD,KAAK,4BAA8B,GAG/B,OAAO,+BAAiC,OAAO,OAAO,+BAAkC,YAC1F,WAAW,IAAM,CACf,OAAO,8BAA6B,CAC9C,EAAW,GAAG,CAGd,OAAaza,EAAO,CACd,QAAQ,KAAK,iDAAkDA,CAAK,CAC1E,CACA,CAOE,yBAA0B,CAGxB,QAAQ,MAAM,oEAAoE,CACtF,CAKE,sBAAsBoQ,EAAU,CAE9B,MAAMiF,EAAY,KAAK,QAAQ,mBAAqB,EAEpD,OAAO,KAAK,UAAU,KAAKlI,GAAY,CAErC,GAAIA,EAAS,iBAAmB,SAAU,MAAO,GAEjD,MAAMsD,EAAiB,KAAK,cAActD,EAAS,EAAGA,EAAS,CAAC,EAEhE,GAAIA,EAAS,OAASA,EAAS,OAAQ,CAErC,MAAMuN,EAAc,KAAK,cAAcvN,EAAS,EAAIA,EAAS,MAAOA,EAAS,EAAIA,EAAS,MAAM,EAChG,OAAOiD,EAAS,GAAKK,EAAe,GAAKL,EAAS,GAAKsK,EAAY,GAC5DtK,EAAS,GAAKK,EAAe,GAAKL,EAAS,GAAKsK,EAAY,CAC3E,KAMQ,QAJiB,KAAK,KACpB,KAAK,IAAItK,EAAS,EAAIK,EAAe,EAAG,CAAC,EACzC,KAAK,IAAIL,EAAS,EAAIK,EAAe,EAAG,CAAC,CACnD,GAC2B4E,CAE3B,CAAK,GAAK,IACV,CAKE,4BAA4BsF,EAAkBvK,EAAU,CAEtD,QAAQ,IAAI,6BAA8BuK,EAAiB,GAAI,QAASA,EAAiB,cAAc,EAIvG,MAAM9M,EAAa,KAAK,cAAc8M,EAAiB,YAAY,EAC/D9M,GACF,QAAQ,IAAI,eAAgBA,EAAW,KAAM,SAAUA,EAAW,KAAK,CAE7E,CAKE,2BAA2BuC,EAAU,SACnC,GAAI,CAAC,KAAK,wBAAyB,CACjC,QAAQ,KAAK,yCAAyC,EACtD,MACN,CAGI,KAAK,2BAA2B,wBAAwB,EAExD,GAAI,CACF,MAAMgD,GAAW7R,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAG7C,GAAI,GAFmBY,EAAAiR,GAAA,YAAAA,EAAU,eAAV,YAAAjR,EAAwB,IAE1B,CACnB,QAAQ,KAAK,qDAAqD,EAClE,MACR,CAEM,MAAM0L,EAAa,KAAK,wBAAwB,qBAAoB,EACpE,GAAI,CAACA,EAAY,CACf,QAAQ,KAAK,yBAAyB,EACtC,MACR,CAEM,GAAIA,EAAW,OAAS,SAEtB,KAAK,sBAAsBuC,CAAQ,UAC1BvC,EAAW,OAAS,QAAS,CAEtC,MAAMmC,EAAW,KAAK,cAAcI,EAAS,EAAGA,EAAS,CAAC,EAGpDjD,EAAW,KAAK,yBAAyB6C,EAAS,EAAGA,EAAS,EAAGnC,EAAW,EAAE,EAEhFV,EACF,QAAQ,IAAI,2CAA4CA,CAAQ,EAGhE,QAAQ,KAAK,0CAA0C,CAEjE,CACA,OAAanN,EAAO,CACd,QAAQ,KAAK,2CAA4CA,CAAK,CACpE,CACA,CAKE,sBAAsBoQ,EAAU,CAC9B,GAAI,CAAC,KAAK,sBAAsBA,EAAS,EAAGA,EAAS,CAAC,EAAG,CACvD,QAAQ,KAAK,wEAAwE,EACrF,MACN,CAEI,KAAK,MAAM,uBAAyB,GACpC,KAAK,MAAM,uBAAyBA,EACpC,KAAK,MAAM,yBAA2BA,EACtC,KAAK,OAAO,MAAM,OAAS,YAE3B,QAAQ,IAAI,iCAAkCA,CAAQ,CAC1D,CAKE,uBAAuBA,EAAU,CAC1B,KAAK,MAAM,yBAEhB,KAAK,MAAM,yBAA2BA,EACtC,KAAK,OAAM,EACf,CAKE,wBAAyB,SACvB,GAAI,CAAC,KAAK,MAAM,wBAA0B,CAAC,KAAK,MAAM,wBAA0B,CAAC,KAAK,MAAM,yBAA0B,CACpH,KAAK,sBAAqB,EAC1B,MACN,CAEI,MAAMS,EAAW,KAAK,cAAc,KAAK,MAAM,uBAAuB,EAAG,KAAK,MAAM,uBAAuB,CAAC,EACtG8E,EAAS,KAAK,cAAc,KAAK,MAAM,yBAAyB,EAAG,KAAK,MAAM,yBAAyB,CAAC,EAGxGjH,EAAQ,KAAK,IAAIiH,EAAO,EAAI9E,EAAS,CAAC,EACtClC,EAAS,KAAK,IAAIgH,EAAO,EAAI9E,EAAS,CAAC,EACvC+E,EAAU,GAEhB,GAAIlH,EAAQkH,GAAWjH,EAASiH,EAAS,CACvC,QAAQ,IAAI,4BAA4B,EACxC,KAAK,sBAAqB,EAC1B,MACN,CAGI,MAAMxC,GAAW7R,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAG7C,GAAI,GAFYY,EAAAiR,GAAA,YAAAA,EAAU,eAAV,YAAAjR,EAAwB,IAE1B,CACZ,QAAQ,KAAK,4DAA4D,EACzE,KAAK,sBAAqB,EAC1B,MACN,CAGI,GAAI,CACF,MAAMyY,EAAoB,KAAK,wBAAwB,qBAAoB,EAC3E,GAAI,CAACA,EAAmB,CACtB,QAAQ,KAAK,+CAA+C,EAC5D,KAAK,sBAAqB,EAC1B,MACR,CAGM,MAAM/L,EAAI,KAAK,IAAIgC,EAAS,EAAG8E,EAAO,CAAC,EACjC7G,EAAI,KAAK,IAAI+B,EAAS,EAAG8E,EAAO,CAAC,EAGjCxI,EAAW,KAAK,0BAA0B0B,EAAGC,EAAGJ,EAAOC,EAAQiM,EAAkB,EAAE,EAErFzN,EACF,QAAQ,IAAI,4CAA6CA,CAAQ,EAGjE,QAAQ,KAAK,2CAA2C,CAEhE,OAAanN,EAAO,CACd,QAAQ,MAAM,2CAA4CA,CAAK,CACrE,CAEI,KAAK,sBAAqB,CAC9B,CAKE,uBAAwB,CACtB,KAAK,MAAM,uBAAyB,GACpC,KAAK,MAAM,uBAAyB,KACpC,KAAK,MAAM,yBAA2B,KACtC,KAAK,OAAO,MAAM,OAAS,YAC3B,KAAK,OAAM,CACf,CAME,uBAAuB2a,EAAkB,CAEvC,KAAK,eAAeA,CAAgB,CACxC,CAKE,4BAA6B,CAC3B,OAAO,KAAK,uBAChB,CAKE,6BAA8B,CAC5B,OAAO,KAAK,wBAChB,CAOE,wBAAwBvK,EAAU,CAEhC,GAAI,CAAC,KAAK,MAAM,iBAAkB,CAChC,QAAQ,IAAI,qBAAqB,EACjC,MACN,CAEQ,KAAK,MAAM,qBAEb,KAAK,uBAAsB,EAG3B,KAAK,wBAAuB,CAElC,CAKE,yBAA0B,CACxB,QAAQ,IAAI,kBAAkB,EAE9B,KAAK,MAAM,qBAAuB,GAClC,KAAK,MAAM,sBAAwB,KAAK,MAAM,iBAAiB,eAAiB,EAGhF,KAAK,yBAAyB,oBAAoB,EAGlD,KAAK,OAAO,MAAM,OAAS,MAC/B,CAKE,wBAAyB,CACvB,QAAQ,IAAI,2BAA4B,KAAK,MAAM,qBAAqB,EAGpE,KAAK,MAAM,mBAEb,KAAK,4BAA4B,KAAK,MAAM,gBAAgB,EAE5D,KAAK,MAAM,iBAAiB,cAAgB,KAAK,MAAM,sBAGnD,KAAK,MAAM,iBAAiB,WAAW,OAAS,KAAK,MAAM,wBAC7D,KAAK,MAAM,iBAAiB,WAAa,KAAK,MAAM,iBAAiB,WAAW,MAAM,EAAG,KAAK,MAAM,qBAAqB,EACzH,QAAQ,IAAI,wBAAyB,KAAK,MAAM,sBAAuB,GAAG,IAI9E,KAAK,MAAM,qBAAuB,GAClC,KAAK,yBAAwB,EAG7B,KAAK,OAAO,MAAM,OAAS,YAG3B,KAAK,2BAA0B,CACnC,CAKE,kBAAkB1F,EAAO,CACvB,GAAI,CAAC,KAAK,MAAM,qBACd,OAIF,MAAM8C,EADQ,CAAC9C,EAAM,OACK,EAAI,EAAI,GAG5BmQ,EAAW,KAAK,IAAI,EAAG,KAAK,IAAI,EAAG,KAAK,MAAM,sBAAwBrN,CAAS,CAAC,EAElFqN,IAAa,KAAK,MAAM,wBAC1B,KAAK,MAAM,sBAAwBA,EACnC,KAAK,4BAA2B,EAChC,QAAQ,IAAI,iBAAkBA,CAAQ,EAE5C,CAKE,yBAAyB9R,EAAS,CAEhC,IAAI+R,EAAS,SAAS,eAAe,wBAAwB,EACxDA,IACHA,EAAS,SAAS,cAAc,KAAK,EACrCA,EAAO,GAAK,yBACZA,EAAO,MAAM,QAAU,4WAcvB,SAAS,KAAK,YAAYA,CAAM,GAGlCA,EAAO,UAAY,4CACkB,OAAA/R,EAAO,uGAEhC,YAAK,MAAM,sBAAqB,uBAGhD,CAKE,0BAA2B,CACzB,MAAM+R,EAAS,SAAS,eAAe,wBAAwB,EAC3DA,GACFA,EAAO,OAAM,CAEnB,CAKE,6BAA8B,CAC5B,MAAMA,EAAS,SAAS,eAAe,wBAAwB,EAC3DA,IACFA,EAAO,UAAY,uKAGP,YAAK,MAAM,sBAAqB,4BAIlD,CAKE,4BAA6B,CACtB,KAAK,MAAM,mBAKhB,KAAK,MAAM,cAAgB,KAAK,MAAM,iBAAiB,WAAW,OAClE,KAAK,MAAM,yBAA2B,GAGtC,KAAK,2BAA0B,EAE/B,QAAQ,IAAI,cAAc,YAAK,MAAM,iBAAiB,cAAa,aAAY,YAAK,MAAM,cAAa,MAAK,EAChH,CAKE,4BAA6B,CAC3B,MAAM3N,EAAW,KAAK,MAAM,iBAC5B,GAAI,CAACA,EAAU,OAGf,MAAM4N,EAAmB5N,EAAS,WAAW,OACvC0F,EAAW,GAAG,OAAAkI,EAAgB,KAAI,OAAA5N,EAAS,eAEjD,IAAIpE,EACAgS,GAAoB5N,EAAS,cAC/BpE,EAAU,aAAa,OAAA8J,GAEvB9J,EAAU,QAAQ,OAAA8J,EAAQ,aAAY,OAAAkI,EAAmB,EAAC,QAI5D,IAAIC,EAAiB,SAAS,eAAe,0BAA0B,EAClEA,IACHA,EAAiB,SAAS,cAAc,KAAK,EAC7CA,EAAe,GAAK,2BACpBA,EAAe,MAAM,QAAU,yUAa/B,SAAS,KAAK,YAAYA,CAAc,GAG1CA,EAAe,YAAcjS,EAGzBgS,GAAoB5N,EAAS,eAC/B,WAAW,IAAM,CACf,KAAK,2BAA0B,CACvC,EAAS,GAAI,CAEb,CAKE,4BAA6B,CAC3B,MAAM6N,EAAiB,SAAS,eAAe,0BAA0B,EACrEA,GACFA,EAAe,OAAM,CAE3B,CAKE,uBAAuB7N,EAAUK,EAAW,CAI1C,OAFA,KAAK,4BAA4BL,CAAQ,EAErCA,EAAS,WAAW,QAAUA,EAAS,eACzC,QAAQ,KAAK,mBAAoBA,EAAS,aAAa,EAChD,KAGTA,EAAS,WAAW,KAAKK,CAAS,EAClC,QAAQ,IAAI,gBAAiBA,EAAW,cAAgBL,EAAS,KAAK,EAC/D,GACX,CAKE,4BAA4BA,EAAUC,EAAO,CAI3C,GAFA,KAAK,4BAA4BD,CAAQ,EAErCC,EAAQ,GAAKA,GAASD,EAAS,WAAW,OAC5C,eAAQ,KAAK,iBAAkBC,CAAK,EAC7B,GAGT,MAAM6N,EAAmB9N,EAAS,WAAWC,CAAK,EAClD,OAAAD,EAAS,WAAW,OAAOC,EAAO,CAAC,EACnC,QAAQ,IAAI,gBAAiB6N,EAAkB,cAAgB9N,EAAS,KAAK,EACtE,EACX,CAKE,6BAA8B,CAO5B,GANA,QAAQ,IAAI,eAAe,EAG3B,KAAK,2BAA0B,EAG3B,KAAK,MAAM,iBAAkB,CAE/B,KAAK,MAAM,cAAgB,KAAK,MAAM,iBAAiB,WAAW,OAGlE,MAAM+N,EAAa,KAAK,MAAM,iBAAiB,WAAW,QAAU,KAAK,MAAM,iBAAiB,cAChG,QAAQ,IAAI,eAAe,YAAK,MAAM,iBAAiB,WAAW,OAAM,KAAI,YAAK,MAAM,iBAAiB,cAAa,MAAK,OAAAA,EAAa,KAAO,MAAK,IAAG,CAC5J,CAGI,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,cAAgB,EAC3B,KAAK,MAAM,iBAAmB,KAG9B,KAAK,OAAO,MAAM,OAAS,YAG3B,KAAK,UAAS,EACd,KAAK,qBAAoB,EAGzB,KAAK,uBAAsB,EAG3B,KAAK,2BAA0B,EAE/B,QAAQ,IAAI,eAAe,CAC/B,CAKE,4BAA4B1S,EAAQ,CAC9B,KAAK,MAAM,uBACb,QAAQ,IAAI,mBAAoBA,CAAM,EAEtC,KAAK,MAAM,qBAAuB,GAClC,KAAK,MAAM,sBAAwB,EACnC,KAAK,MAAM,iBAAmB,KAE9B,KAAK,yBAAwB,EAC7B,KAAK,2BAA0B,EAG/B,KAAK,OAAO,MAAM,OAAS,YAEjC,CAKE,+BAA+BA,EAAQ,CACjC,KAAK,MAAM,0BAA4B,KAAK,MAAM,kBAAoB,KAAK,MAAM,iBAAiB,cAAgB,IACpH,QAAQ,IAAI,kBAAmBA,CAAM,EAGrC,KAAK,2BAA0B,EAG/B,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,cAAgB,EAC3B,KAAK,MAAM,iBAAmB,KAG9B,KAAK,OAAO,MAAM,OAAS,YAG3B,KAAK,OAAM,EAEjB,CAKE,2BAA2BA,EAAQ,CAWjC,GAVA,QAAQ,IAAI,kBAAmBA,CAAM,EAGrC,KAAK,4BAA4BA,CAAM,EAGvC,KAAK,+BAA+BA,CAAM,EAItC,KAAK,MAAM,oBACb,GAAI,KAAK,oBAAsB,mBAAqBA,IAAW,eAAgB,CAG7E,QAAQ,IAAI,uEAAuE,EACnF,KAAK,MAAM,iBAAmB,KAC9B,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,wBAA0B,KAErC,MACR,SAAiB,KAAK,oBAAsB,mBAAqBA,IAAW,yBAA0B,CAE9F,QAAQ,IAAI,sEAAsE,EAClF,KAAK,MAAM,iBAAmB,KAC9B,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,wBAA0B,KAErC,MACR,MAGQ,KAAK,sBAAqB,EAK1B,KAAK,MAAM,0BACb,KAAK,yBAAyB,EAAI,CAExC,CAKE,0BAA0B2E,EAAU,CAClC,OAAOA,GAAYA,EAAS,iBAAmB,SACnD,CAKE,4BAA4BA,EAAU,CAC/BA,IAGAA,EAAS,aACZA,EAAS,WAAa,GAGlBA,EAAS,YAAc,MAAQA,EAAS,YAAc,SACpD,OAAOA,EAAS,WAAc,SAChCA,EAAS,WAAW,KAAK,CAAE,MAAOA,EAAS,UAAW,KAAM,QAAS,EAC5DA,EAAS,YAAc,OAChCA,EAAS,WAAW,KAAK,CAAE,MAAO,IAAK,KAAM,QAAS,EAC7CA,EAAS,YAAc,SAChCA,EAAS,WAAW,KAAK,CAAE,MAAO,EAAG,KAAM,QAAS,EAEtD,QAAQ,IAAI,qBAAsBA,EAAS,UAAW,IAAKA,EAAS,UAAU,IAK7EA,EAAS,gBACZA,EAAS,cAAgB,KAAK,IAAI,EAAGA,EAAS,WAAW,MAAM,EAC/D,QAAQ,IAAI,0BAA2BA,EAAS,cAAe,iBAAmBA,EAAS,KAAK,GAI7FA,EAAS,iBACZA,EAAS,eAAiB,WAEhC,CAKE,yBAAyBA,EAAU,CAKjC,GAHA,KAAK,4BAA4BA,CAAQ,EAGrCA,EAAS,WAAW,SAAW,EACjC,OAGF,MAAME,EAAY,KAAK,cAAcF,EAAS,EAAGA,EAAS,CAAC,EAE3DA,EAAS,WAAW,QAAQ,CAACK,EAAWJ,IAAU,CAChD,MAAMkL,EAAe9K,EAAU,MACzB2J,EAAgB,GAAI,OAAA/J,EAAQ,EAAC,KAAK,OAAAD,EAAS,WAAW,QAG5D,KAAK,qBAAqBE,EAAU,EAAGA,EAAU,EAAGiL,EAAcnB,EAAehK,CAAQ,CAC/F,CAAK,CACL,CAKE,qBAAqB0B,EAAGC,EAAGwJ,EAAcnB,EAAehK,EAAU,CAChE,MAAMoL,EAAeD,EAAe,KAAK,GAAK,IACxCE,EAAc,KAAK,QAAQ,qBAG3BC,EAAO5J,EAAI,KAAK,IAAI0J,CAAY,EAAIC,EACpCE,EAAO5J,EAAI,KAAK,IAAIyJ,CAAY,EAAIC,EAG1C,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAC3B,KAAK,IAAI,QAAU,QAEnB,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAO3J,EAAGC,CAAC,EACpB,KAAK,IAAI,OAAO2J,EAAMC,CAAI,EAC1B,KAAK,IAAI,OAAM,EAGf,KAAK,IAAI,YAAY,EAAE,EAGvB,MAAMC,EAAaJ,EAAe,KAAK,GAAK,GACtCK,EAAaL,EAAe,KAAK,GAAK,GACtCM,EAAa,GAEnB,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,QAAU,QAEnB,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAOJ,EAAMC,CAAI,EAC1B,KAAK,IAAI,OAAOD,EAAO,KAAK,IAAIE,CAAU,EAAIE,EAAYH,EAAO,KAAK,IAAIC,CAAU,EAAIE,CAAU,EAClG,KAAK,IAAI,OAAOJ,EAAMC,CAAI,EAC1B,KAAK,IAAI,OAAOD,EAAO,KAAK,IAAIG,CAAU,EAAIC,EAAYH,EAAO,KAAK,IAAIE,CAAU,EAAIC,CAAU,EAClG,KAAK,IAAI,OAAM,EAGf,MAAMC,EAAa,GACbC,EAAQN,EAAO,KAAK,IAAIF,CAAY,EAAIO,EACxCE,EAAQN,EAAO,KAAK,IAAIH,CAAY,EAAIO,EAG9C,KAAK,IAAI,KAAO,kBAEhB,MAAM1K,EADc,KAAK,IAAI,YAAY+I,CAAa,EACxB,MACxB8B,EAAa,GAGnB,KAAK,IAAI,UAAY,0BACrB,KAAK,IAAI,SAASF,EAAQ3K,EAAU,EAAI,EAAG4K,EAAQC,EAAW,EAAI,EAAG7K,EAAY,EAAG6K,EAAa,CAAC,EAGlG,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAAS9B,EAAe4B,EAAOC,CAAK,CACjD,CAKE,qBAAqB7L,EAAUmE,EAAW,CACxC,MAAO,CACL,GAAGnE,EACH,eAAgB,CACd,EAAGmE,EAAU,OACb,EAAGA,EAAU,OACb,QAASA,EAAU,QACnB,QAASA,EAAU,QACnB,UAAWA,EAAU,SAC7B,CACA,CACA,CAKE,0BAA0BnE,EAAUgO,EAAgB,CAClD,MAAMC,EAAqBjO,EAAS,WAAW,IAAI,CAACK,EAAWJ,IAAU,CACvE,MAAMkE,EAAY6J,EAAe/N,CAAK,EACtC,MAAO,CACL,GAAGI,EACH,cAAe8D,EAAY,CACzB,EAAGA,EAAU,OACb,EAAGA,EAAU,OACb,QAASA,EAAU,QACnB,QAASA,EAAU,QACnB,UAAWA,EAAU,SAC/B,EAAY,IACZ,CACA,CAAK,EAED,MAAO,CACL,GAAGnE,EACH,WAAYiO,CAClB,CACA,CAKE,8BAA8B1Q,EAAO,CACnC,GAAI,CAAC,KAAK,MAAM,kBAAoB,CAAC,KAAK,MAAM,yBAC9C,OAGF,MAAM2Q,EAAe,KAAK,oBAAoB3Q,CAAK,EAC7C4Q,EAAc,KAAK,cAAcD,EAAa,EAAGA,EAAa,CAAC,EAGrE,GAAI,CAAC,KAAK,uBAAuB,KAAK,MAAM,iBAAkB,CAC5D,OAAQC,EAAY,EACpB,OAAQA,EAAY,EACpB,QAASD,EAAa,EACtB,QAASA,EAAa,CAC5B,CAAK,EACC,OAIF,MAAMjK,EAAQ,KAAK,wBAAwB,KAAK,MAAM,iBAAkBkK,CAAW,EAG7EhK,EAAY,CAChB,EAAGgK,EAAY,EACf,EAAGA,EAAY,EACf,QAASD,EAAa,EACtB,QAASA,EAAa,EACtB,UAAW,KAAK,IAAG,CACzB,EAGI,KAAK,MAAM,iBAAiB,UAAYjK,EACxC,KAAK,MAAM,iBAAiB,cAAgB,QAC5C,KAAK,MAAM,iBAAiB,eAAiBE,EAG7C,KAAK,OAAM,EAGX,KAAK,MAAM,yBAA2B,GACtC,KAAK,MAAM,iBAAmB,IAClC,CAKE,uBAAuBnE,EAAUmE,EAAW,CAO1C,MALI,GAAC,KAAK,yBAAyBA,CAAS,GAKxC,CAAC,KAAK,0BAA0BA,CAAS,EAKjD,CAKE,wBAAwBnE,EAAUoO,EAAe,CAC/C,MAAMlM,EAASkM,EAAc,EAAIpO,EAAS,EACpCoD,EAASgL,EAAc,EAAIpO,EAAS,EAE1C,OADc,KAAK,MAAMoD,EAAQlB,CAAM,EAAI,IAAM,KAAK,GACtC,KAAO,GAC3B,CAKE,0BAA0BiC,EAAW,CACnC,OAAOA,EAAU,SAAW,GAAKA,EAAU,SAAW,KAAK,OAAO,OAC3DA,EAAU,SAAW,GAAKA,EAAU,SAAW,KAAK,OAAO,MACtE,CAKE,yBAAyBA,EAAW,CAClC,OAAK,KAAK,aAEHA,EAAU,GAAK,GAAKA,EAAU,GAAK,KAAK,aAAa,OACrDA,EAAU,GAAK,GAAKA,EAAU,GAAK,KAAK,aAAa,OAH7B,EAInC,CAKE,cAAc5B,EAASC,EAAS,CAC9B,MAAMH,GAAUE,EAAU,KAAK,MAAM,YAAc,KAAK,MAAM,MACxDD,GAAUE,EAAU,KAAK,MAAM,YAAc,KAAK,MAAM,MAC9D,MAAO,CAAE,EAAGH,EAAQ,EAAGC,CAAM,CACjC,CAKE,0BAA0B/E,EAAO,CAC/B,GAAI,CAAC,KAAK,MAAM,kBAAoB,CAAC,KAAK,MAAM,iBAAiB,cAC/D,MAAO,GAGT,MAAMyC,EAAW,KAAK,MAAM,iBAC5B,GAAIA,EAAS,WAAW,QAAUA,EAAS,cACzC,MAAO,GAGT,MAAMkO,EAAe,KAAK,oBAAoB3Q,CAAK,EAC7C4Q,EAAc,KAAK,cAAcD,EAAa,EAAGA,EAAa,CAAC,EAG/DjK,EAAQ,KAAK,wBAAwBjE,EAAUmO,CAAW,EAEhE,OAAAnO,EAAS,WAAW,KAAK,CACvB,MAAOiE,EACP,KAAM,QACN,cAAe,CACb,EAAGkK,EAAY,EACf,EAAGA,EAAY,EACf,QAASD,EAAa,EACtB,QAASA,EAAa,EACtB,UAAW,KAAK,IAAG,CAC3B,CACA,CAAK,EAEM,EACX,CAKE,mBAAoB,CAClB,MAAO,CACL,UAAW,KAAK,UAAU,IAAI7P,IAAO,CACnC,GAAGA,EACH,eAAgBA,EAAG,gBAAkB,IAC7C,EAAQ,CACR,CACA,CAKE,wBAAwBgQ,EAAW,CACjC,OAAO,KAAK,UAAUA,EAAU,IAAIhQ,IAAO,CACzC,GAAGA,EACH,eAAgBA,EAAG,gBAAkB,IAC3C,EAAM,CAAC,CACP,CAKE,0BAA0B9I,EAAM,CAE9B,OADkB,KAAK,MAAMA,CAAI,EAChB,IAAI8I,IAAO,CAC1B,GAAGA,EACH,eAAgBA,EAAG,gBAAkB,IAC3C,EAAM,CACN,CAKE,oBAAoBd,EAAO,CACzB,MAAMmB,EAAO,KAAK,OAAO,sBAAqB,EAC9C,MAAO,CACL,EAAGnB,EAAM,QAAUmB,EAAK,KACxB,EAAGnB,EAAM,QAAUmB,EAAK,GAC9B,CACA,CAKE,MAAM,qBAAsB,CAC1B,QAAQ,IAAI,mBAAmB,EAE/B,GAAI,CAEF,MAAM4P,EAAa,MAAM,KAAK,8BAA6B,EAC3D,GAAI,CAACA,EAAW,QAAS,CACvB,QAAQ,MAAM,mBAAoBA,EAAW,MAAM,EACnD,KAAK,cAAc,gBAAiBA,EAAW,OAAO,KAAK,IAAI,CAAC,EAChE,MACR,CAGM,MAAMC,EAAqB,CAAC,GAAG,KAAK,SAAS,EACvCC,EAAsB,MAAM,KAAK,4BAA2B,EAElE,GAAI,CAACA,GAAuBA,EAAoB,SAAW,EAAG,CAC5D,KAAK,cAAc,cAAe,aAAa,EAC/C,MACR,CAGM,MAAMC,EAAmB,KAAK,oBAAmB,EAC3CC,EAAoB,MAAM,KAAK,qBAAoB,EAGnD,CAAE,YAAAC,CAAW,EAAK,MAAKtB,GAAA,4BAAAsB,GAAA,KAAC,QAAO,2BAAkB,qBAAAA,CAAA,OACjDC,EAAc,IAAID,EAElBE,EAAwB,MAAMD,EAAY,qBAC9CJ,EACAD,EACAG,EACAD,CACR,EAGYK,EAAUF,EAAY,yBAAyBC,CAAqB,EAE1E,QAAQ,IAAI,eAAgB,CAC1B,KAAMN,EAAmB,OACzB,KAAMM,EAAsB,OAC5B,MAAO,GAAI,QAAAC,EAAQ,kBAAoB,KAAK,QAAQ,CAAC,EAAC,KACtD,KAAM,GAAG,OAAAA,EAAQ,cAAc,QAAQ,CAAC,EAAC,MACzC,KAAMA,EAAQ,iBACtB,CAAO,EAGD,KAAK,uBAAuBP,EAAoBM,EAAuBC,CAAO,CAEpF,OAAajc,EAAO,CACd,QAAQ,MAAM,iBAAkBA,CAAK,EACrC,KAAK,cAAc,WAAYA,EAAM,OAAO,CAClD,CACA,CAKE,MAAM,+BAAgC,CACpC,MAAMkc,EAAS,GAGf,OAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,eAC9BA,EAAO,KAAK,SAAS,GAInB,CAAC,KAAK,WAAa,KAAK,UAAU,SAAW,IAC/CA,EAAO,KAAK,WAAW,EAInB,MAAM,KAAK,iBAAgB,GAC/BA,EAAO,KAAK,cAAc,EAGrB,CACL,gBAAiB,CAAC,CAAC,KAAK,aACxB,iBAAkB,MAAM,KAAK,iBAAgB,EAC7C,sBAAuB,KAAK,WAAa,KAAK,UAAU,OAAS,EACjE,uBAAwB,MAAM,KAAK,4BAA2B,EAC9D,QAASA,EAAO,SAAW,EAC3B,OAAAA,CACN,CACA,CAKE,MAAM,kBAAmB,OACvB,GAAI,GAAC3a,EAAA,OAAO,sBAAP,MAAAA,EAA4B,kBAC/B,MAAO,GAGT,MAAM4a,EAAe,OAAO,oBAAoB,SAAS,aACzD,MAAI,CAACA,GAAgB,CAACA,EAAa,kBAC1B,GAGF,MAAM,KAAK,mBAAkB,IAAO,IAC/C,CAKE,MAAM,6BAA8B,CAClC,MAAMR,EAAsB,MAAM,KAAK,4BAA2B,EAClE,OAAOA,GAAuBA,EAAoB,OAAS,CAC/D,CAKE,MAAM,oBAAqB,OACzB,GAAI,GAACpa,EAAA,OAAO,sBAAP,MAAAA,EAA4B,kBAC/B,OAAO,KAGT,MAAM4a,EAAe,OAAO,oBAAoB,SAAS,aACzD,GAAI,CAACA,GAAgB,CAACA,EAAa,mBAAqB,CAACA,EAAa,cACpE,OAAO,KAIT,MAAMpb,EAAS,MAAM,OAAO,oBAAoB,iBAAiB,eAC/Dob,EAAa,GACbA,EAAa,iBACnB,EAEI,GAAI,CAACpb,GAAUA,EAAO,SAAW,EAC/B,OAAO,KAIT,MAAM0I,EAAe1I,EAAO,UAAUuE,GAAOA,EAAI,KAAO6W,EAAa,cAAc,EAAE,EAErF,OAAI1S,GAAgB,EACX,KAGF1I,EAAO0I,EAAe,CAAC,EAAE,EACpC,CAKE,MAAM,6BAA8B,OAClC,MAAM2S,EAAkB,MAAM,KAAK,mBAAkB,EACrD,GAAI,CAACA,EACH,OAAO,KAIT,MAAMhQ,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBACrD,GAAI,CAAC6K,EACH,OAAO,KAGT,GAAI,CAEF,OADoBA,EAAiB,oBAAoBgQ,CAAe,GAClD,EAC5B,OAAapc,EAAO,CACd,eAAQ,KAAK,oBAAqBA,CAAK,EAChC,IACb,CACA,CAKE,qBAAsB,CACpB,GAAI,CAAC,KAAK,aACR,MAAM,IAAI,MAAM,SAAS,EAI3B,GAAI,KAAK,aAAa,UAAY,CAAC,KAAK,aAAa,YACnD,cAAQ,KAAK,6BAA6B,EACpC,IAAI,MAAM,2BAA2B,EAI7C,MAAMqc,EAAa,SAAS,cAAc,QAAQ,EAClDA,EAAW,MAAQ,KAAK,aAAa,MACrCA,EAAW,OAAS,KAAK,aAAa,OACtC,MAAMC,EAAUD,EAAW,WAAW,IAAI,EAE1C,GAAI,CACF,OAAAC,EAAQ,UAAU,KAAK,aAAc,EAAG,CAAC,EAClCA,EAAQ,aAAa,EAAG,EAAGD,EAAW,MAAOA,EAAW,MAAM,CAC3E,OAAarc,EAAO,CACd,cAAQ,MAAM,mBAAoBA,CAAK,EACjC,IAAI,MAAM,2BAA2B,CACjD,CACA,CAKE,MAAM,sBAAuB,OAC3B,MAAMoc,EAAkB,MAAM,KAAK,mBAAkB,EACrD,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,aAAa,EAI/B,MAAMhQ,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBACrD,GAAI,CAAC6K,EACH,MAAM,IAAI,MAAM,YAAY,EAG9B,MAAM+P,EAAe,OAAO,oBAAoB,SAAS,aAEnDI,GADS,MAAMnQ,EAAiB,eAAe+P,EAAa,GAAIA,EAAa,iBAAiB,GACvE,KAAK7W,GAAOA,EAAI,KAAO8W,CAAe,EAEnE,GAAI,CAACG,EACH,MAAM,IAAI,MAAM,UAAU,EAI5B,MAAMlQ,EAAW,MAAMD,EAAiB,kBAAkB,eAAemQ,CAAa,EAGhFjX,EAAM,IAAI,MAChB,OAAAA,EAAI,YAAc,YAEX,IAAI,QAAQ,CAAC/E,EAAS+L,IAAW,CACtChH,EAAI,OAAS,IAAM,CACjB,MAAM+W,EAAa,SAAS,cAAc,QAAQ,EAClDA,EAAW,MAAQ/W,EAAI,MACvB+W,EAAW,OAAS/W,EAAI,OACxB,MAAMgX,EAAUD,EAAW,WAAW,IAAI,EAE1C,GAAI,CACFC,EAAQ,UAAUhX,EAAK,EAAG,CAAC,EAC3B,MAAMpE,EAAYob,EAAQ,aAAa,EAAG,EAAGD,EAAW,MAAOA,EAAW,MAAM,EAChF9b,EAAQW,CAAS,CAC3B,OAAiBlB,EAAO,CACd,QAAQ,MAAM,sBAAuBA,CAAK,EAC1CsM,EAAO,IAAI,MAAM,qBAAqB,CAAC,CACjD,CACA,EAEMhH,EAAI,QAAU,IAAM,CAClB,QAAQ,MAAM,oBAAqB+G,CAAQ,EAC3CC,EAAO,IAAI,MAAM,WAAW,CAAC,CACrC,EAEMhH,EAAI,IAAM+G,CAChB,CAAK,CACL,CAKE,uBAAuBmQ,EAAqBR,EAAuBC,EAAS,CAE1E,KAAK,wBAA0B,CAC7B,oBAAqB,CAAC,GAAGO,CAAmB,EAC5C,sBAAuB,CAAC,GAAGR,CAAqB,EAChD,QAAAC,EACA,SAAU,GACV,aAAc,GACd,eAAgB,GAChB,WAAY,EAClB,EAGI,KAAK,4BAA4BA,CAAO,EAGxC,KAAK,8BAA6B,EAGlC,KAAK,OAAM,EAEX,QAAQ,IAAI,gBAAgB,CAChC,CAKE,4BAA4BA,EAAS,CAEnC,MAAMQ,EAAe,SAAS,cAAc,KAAK,EA0CjD,GAzCAA,EAAa,UAAY,oBACzBA,EAAa,UAAY,sVAOmB,QAAAR,EAAQ,aAAe,KAAK,QAAQ,CAAC,EAAC,6DACjC,QAAAA,EAAQ,kBAAoB,KAAK,QAAQ,CAAC,EAAC,yDAChD,OAAAA,EAAQ,cAAc,QAAQ,CAAC,EAAC,8DAC5B,OAAAA,EAAQ,kBAAiB,KAAI,OAAAA,EAAQ,iBAAgB,udAerGQ,EAAa,MAAM,QAAU,8UAezB,CAAC,SAAS,eAAe,yBAAyB,EAAG,CACvD,MAAM1J,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK,0BACXA,EAAM,YAAc,isEAkFpB,SAAS,KAAK,YAAYA,CAAK,CACrC,CAGI,MAAM2J,EAAYD,EAAa,cAAc,aAAa,EACpDE,EAAYF,EAAa,cAAc,aAAa,EAE1DC,EAAU,iBAAiB,QAAS,IAAM,CACxC,KAAK,wBAAuB,CAClC,CAAK,EAEDC,EAAU,iBAAiB,QAAS,IAAM,CACxC,KAAK,kBAAiB,CAC5B,CAAK,EAGD,SAAS,KAAK,YAAYF,CAAY,EAGtC,KAAK,wBAA0BA,EAG/B,KAAK,oBAAsB,WAAW,IAAM,CAC1C,KAAK,kBAAiB,CAC5B,EAAO,GAAK,CACZ,CAKE,+BAAgC,CAC9B,KAAK,2BAA8B/R,GAAU,OAC3C,IAAKnJ,EAAA,KAAK,0BAAL,MAAAA,EAA8B,SAEnC,OAAQmJ,EAAM,IAAI,YAAW,EAAE,CAC7B,IAAK,IACHA,EAAM,eAAc,EACpB,KAAK,wBAAuB,EAC5B,MACF,IAAK,IACHA,EAAM,eAAc,EACpB,KAAK,kBAAiB,EACtB,MACF,IAAK,IACHA,EAAM,eAAc,EACpB,KAAK,yBAAwB,EAC7B,MACF,IAAK,SACHA,EAAM,eAAc,EACpB,KAAK,kBAAiB,EACtB,KACV,CACA,EAEI,SAAS,iBAAiB,UAAW,KAAK,0BAA0B,CACxE,CAKE,0BAA2B,CACpB,KAAK,0BAEV,KAAK,wBAAwB,aAAe,CAAC,KAAK,wBAAwB,aAC1E,KAAK,wBAAwB,eAAiB,CAAC,KAAK,wBAAwB,eAC5E,KAAK,wBAAwB,WAAa,CAAC,KAAK,wBAAwB,WAExE,KAAK,OAAM,EACf,CAKE,MAAM,yBAA0B,OAC9B,GAAK,KAAK,wBAEV,GAAI,CACF,QAAQ,IAAI,eAAe,EAG3B,KAAK,UAAS,EAGd,KAAK,UAAY,CAAC,GAAG,KAAK,wBAAwB,qBAAqB,EAGvE,KAAK,0BAAyB,EAG9B,KAAK,OAAM,GAGPnJ,EAAA,OAAO,sBAAP,MAAAA,EAA4B,UAC9B,MAAM,OAAO,oBAAoB,SAAQ,EAI3C,KAAK,gBAAgB,aAAc,OAAO,YAAK,UAAU,OAAM,QAAO,CAE5E,OAAavB,EAAO,CACd,QAAQ,MAAM,mBAAoBA,CAAK,EACvC,KAAK,cAAc,WAAYA,EAAM,OAAO,CAClD,CACA,CAKE,mBAAoB,CAClB,QAAQ,IAAI,aAAa,EAGzB,KAAK,0BAAyB,EAG9B,KAAK,OAAM,EAEX,KAAK,aAAa,YAAa,WAAW,CAC9C,CAKE,2BAA4B,CAEtB,KAAK,0BACP,KAAK,wBAAwB,OAAM,EACnC,KAAK,wBAA0B,MAI7B,KAAK,sBACP,aAAa,KAAK,mBAAmB,EACrC,KAAK,oBAAsB,MAIzB,KAAK,6BACP,SAAS,oBAAoB,UAAW,KAAK,0BAA0B,EACvE,KAAK,2BAA6B,MAIpC,KAAK,wBAA0B,IACnC,CAKE,cAAc4c,EAAO7T,EAAS,OAC5B,QAAQ,MAAM,UAAU,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,GACvCxH,EAAA,OAAO,sBAAP,MAAAA,EAA4B,UAC9B,OAAO,oBAAoB,UAAUqb,EAAO7T,CAAO,EAEnD,MAAM,GAAG,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,CAElC,CAKE,gBAAgB6T,EAAO7T,EAAS,OAC9B,QAAQ,IAAI,UAAU,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,GACrCxH,EAAA,OAAO,sBAAP,MAAAA,EAA4B,YAC9B,OAAO,oBAAoB,YAAYqb,EAAO7T,CAAO,EAErD,MAAM,GAAG,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,CAElC,CAKE,aAAa6T,EAAO7T,EAAS,OAC3B,QAAQ,IAAI,UAAU,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,GACrCxH,EAAA,OAAO,sBAAP,MAAAA,EAA4B,SAC9B,OAAO,oBAAoB,SAASqb,EAAO7T,CAAO,EAElD,MAAM,GAAG,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,CAElC,CAKE,6BAA6BrG,EAAMma,EAAM,CACvC,MAAMC,EAAiB,GAEvB,OAAID,IAAS,WACXna,EAAK,QAAQ,CAACwB,EAAYkJ,IAAU,OAClC0P,EAAe,KAAK,CAClB,KAAM,WACN,EAAG5Y,EAAW,EACd,EAAGA,EAAW,EACd,MAAO,UACP,KAAM,EACN,QAAO3C,EAAA2C,EAAW,QAAX,YAAA3C,EAAkB,cAAe6L,EAAQ,GAAG,SAAQ,CACrE,CAAS,CACT,CAAO,EACQyP,IAAS,WAClBna,EAAK,QAAQ,CAACwB,EAAYkJ,IAAU,OAClC0P,EAAe,KAAK,CAClB,KAAM,WACN,EAAG5Y,EAAW,EACd,EAAGA,EAAW,EACd,MAAO,UACP,KAAM,EACN,QAAO3C,EAAA2C,EAAW,QAAX,YAAA3C,EAAkB,cAAe6L,EAAQ,GAAG,SAAQ,CACrE,CAAS,CACT,CAAO,EACQyP,IAAS,UAClBna,EAAK,QAAQ,CAACwB,EAAYkJ,IAAU,CAC9BlJ,EAAW,iBACb4Y,EAAe,KAAK,CAClB,KAAM,QACN,KAAM,CAAE,EAAG5Y,EAAW,gBAAgB,UAAW,EAAGA,EAAW,gBAAgB,SAAS,EACxF,GAAI,CAAE,EAAGA,EAAW,EAAG,EAAGA,EAAW,CAAC,EACtC,MAAO,UACP,MAAO,EACP,MAAO,GAAG,OAAAA,EAAW,gBAAgB,OAAO,QAAQ,CAAC,EAAC,KAClE,CAAW,CAEX,CAAO,EAGI4Y,CACX,CAKE,0BAA2B,CACzB,GAAI,CAAC,KAAK,wBAAyB,OAEnC,KAAM,CAAE,oBAAAN,EAAqB,sBAAAR,EAAuB,aAAAe,EAAc,eAAAC,EAAgB,WAAAC,CAAU,EAAK,KAAK,wBAGlGF,GACFP,EAAoB,QAAQ,CAACtY,EAAYkJ,IAAU,CACjD,MAAMC,EAAY,KAAK,cAAcnJ,EAAW,EAAGA,EAAW,CAAC,EAC/D,KAAK,uBAAuBmJ,EAAU,EAAGA,EAAU,EAAG,UAAWnJ,EAAW,OAAUkJ,EAAQ,EAAI,UAAU,CACpH,CAAO,EAIC4P,GACFhB,EAAsB,QAAQ,CAAC9X,EAAYkJ,IAAU,CACnD,MAAMC,EAAY,KAAK,cAAcnJ,EAAW,EAAGA,EAAW,CAAC,EAC/D,KAAK,uBAAuBmJ,EAAU,EAAGA,EAAU,EAAG,UAAWnJ,EAAW,OAAUkJ,EAAQ,EAAI,YAAY,CACtH,CAAO,EAIC6P,GACFjB,EAAsB,QAAQ,CAAC9X,EAAYkJ,IAAU,CACnD,GAAIlJ,EAAW,gBAAiB,CAC9B,MAAMgZ,EAAc,KAAK,cAAchZ,EAAW,gBAAgB,UAAWA,EAAW,gBAAgB,SAAS,EAC3GiZ,EAAgB,KAAK,cAAcjZ,EAAW,EAAGA,EAAW,CAAC,EAEnE,KAAK,uBACHgZ,EAAY,EAAGA,EAAY,EAC3BC,EAAc,EAAGA,EAAc,EAC/BjZ,EAAW,gBAAgB,MACvC,CACA,CACA,CAAO,CAEP,CAKE,uBAAuB2K,EAAGC,EAAGsO,EAAO3J,EAAOoJ,EAAM,CAI/C,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,IAAIhO,EAAGC,EAAG,EAAQ,EAAG,EAAI,KAAK,EAAE,EACzC,KAAK,IAAI,UAAYsO,EACrB,KAAK,IAAI,KAAI,EAGb,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,OAAM,EAGf,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,KAAO,kBAChB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAAS3J,EAAM,SAAQ,EAAI5E,EAAGC,CAAC,EAGxC,KAAK,IAAI,UAAYsO,EACrB,KAAK,IAAI,KAAO,aAChB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,MACxB,KAAK,IAAI,SAASP,EAAMhO,EAAGC,EAAI,EAAS,CAAC,CAC7C,CAKE,uBAAuBuO,EAAIC,EAAIC,EAAIC,EAAIC,EAAQ,CAC7C,MAAMC,EAAKH,EAAKF,EACVM,EAAKH,EAAKF,EAGhB,GAFiB,KAAK,KAAKI,EAAKA,EAAKC,EAAKA,CAAE,EAE7B,EAAG,OAGlB,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAON,EAAIC,CAAE,EACtB,KAAK,IAAI,OAAOC,EAAIC,CAAE,EACtB,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,YAAY,CAAC,EAAG,CAAC,CAAC,EAC3B,KAAK,IAAI,OAAM,EACf,KAAK,IAAI,YAAY,EAAE,EAGvB,MAAMpM,EAAQ,KAAK,MAAMuM,EAAID,CAAE,EACzB7E,EAAa,GACb+E,EAAY,KAAK,GAAK,EAE5B,KAAK,IAAI,UAAS,EAClB,KAAK,IAAI,OAAOL,EAAIC,CAAE,EACtB,KAAK,IAAI,OACPD,EAAK1E,EAAa,KAAK,IAAIzH,EAAQwM,CAAS,EAC5CJ,EAAK3E,EAAa,KAAK,IAAIzH,EAAQwM,CAAS,CAClD,EACI,KAAK,IAAI,OAAOL,EAAIC,CAAE,EACtB,KAAK,IAAI,OACPD,EAAK1E,EAAa,KAAK,IAAIzH,EAAQwM,CAAS,EAC5CJ,EAAK3E,EAAa,KAAK,IAAIzH,EAAQwM,CAAS,CAClD,EACI,KAAK,IAAI,YAAc,UACvB,KAAK,IAAI,UAAY,EACrB,KAAK,IAAI,OAAM,EAGf,MAAMtO,GAAQ+N,EAAKE,GAAM,EACnBhO,GAAQ+N,EAAKE,GAAM,EAEzB,KAAK,IAAI,UAAY,UACrB,KAAK,IAAI,KAAO,kBAChB,KAAK,IAAI,UAAY,SACrB,KAAK,IAAI,aAAe,SACxB,KAAK,IAAI,SAAS,GAAG,OAAAC,EAAO,QAAQ,CAAC,EAAC,MAAMnO,EAAMC,EAAO,CAAC,CAC9D,CACA,CCjgNO,MAAMsO,EAA0B,CACrC,aAAc,CACZ,KAAK,cAAgB,KACrB,KAAK,cAAgB,KACrB,KAAK,WAAa,KAClB,KAAK,aAAe,KACpB,KAAK,eAAiB,KACtB,KAAK,UAAY,KACjB,KAAK,WAAa,KAClB,KAAK,UAAY,KACjB,KAAK,iBAAmB,KAGxB,KAAK,UAAY,GACjB,KAAK,WAAa,GAClB,KAAK,WAAa,EAClB,KAAK,WAAa,EAClB,KAAK,aAAe,EACpB,KAAK,aAAe,EACpB,KAAK,UAAY,EAGjB,KAAK,uBAAyB,GAC9B,KAAK,oBAAsB,KAG3B,KAAK,eAAiB,KACtB,KAAK,iBAAmB,KACxB,KAAK,kBAAoB,GACzB,KAAK,qBAAuB,EAG5B,KAAK,kBAAoB,KACzB,KAAK,oBAAsB,GAC3B,KAAK,mBAAqB,KAE1B,KAAK,mBAAkB,CAC3B,CAKE,oBAAqB,CASnB,GARA,KAAK,cAAgB,SAAS,eAAe,sBAAsB,EACnE,KAAK,cAAgB,SAAS,eAAe,gBAAgB,EAC7D,KAAK,aAAe,SAAS,eAAe,eAAe,EAC3D,KAAK,eAAiB,SAAS,eAAe,iBAAiB,EAC/D,KAAK,UAAY,SAAS,eAAe,YAAY,EACrD,KAAK,WAAa,SAAS,eAAe,aAAa,EACvD,KAAK,UAAY,SAAS,eAAe,YAAY,EAEjD,KAAK,cAAe,CACtB,KAAK,WAAa,KAAK,cAAc,WAAW,IAAI,EAEpD,KAAK,iBAAgB,EAGrB,MAAMC,EAAiB,IAAI,eAAe,IAAM,CAC9C,KAAK,iBAAgB,EACjB,KAAK,WAAa,KAAK,mBAAqB,KAAK,qBAEnD,KAAK,cAAc,KAAK,kBAAmB,KAAK,mBAAmB,CAE7E,CAAO,EAEG,KAAK,eACPA,EAAe,QAAQ,KAAK,aAAa,CAEjD,CAGI,KAAK,iBAAgB,EAGrB,KAAK,eAAc,EAEnB,QAAQ,IAAI,iCAAiC,CACjD,CAKE,kBAAmB,CACjB,GAAI,CAAC,KAAK,eAAiB,CAAC,KAAK,cAAe,OAEhD,MAAMnH,EAAY,KAAK,cAAc,cACrC,GAAI,CAACA,EAAW,OAEhB,MAAME,EAAgBF,EAAU,sBAAqB,EAC/CjI,EAAQ,KAAK,IAAI,IAAKmI,EAAc,MAAQ,CAAC,EAC7ClI,EAAS,KAAK,IAAI,GAAIkI,EAAc,OAAS,CAAC,GAGhD,KAAK,cAAc,QAAUnI,GAAS,KAAK,cAAc,SAAWC,KACtE,KAAK,cAAc,MAAQD,EAC3B,KAAK,cAAc,OAASC,EAC5B,KAAK,cAAc,MAAM,MAAQD,EAAQ,KACzC,KAAK,cAAc,MAAM,OAASC,EAAS,KAE3C,QAAQ,IAAI,cAAeD,EAAO,IAAKC,CAAM,EAGzC,KAAK,WAAa,KAAK,oBAAsB,KAAK,oBACpD,KAAK,oBAAmB,EACf,KAAK,WAAa,KAAK,mBAAqB,KAAK,qBAE1D,WAAW,IAAM,CACf,KAAK,cAAc,KAAK,kBAAmB,KAAK,mBAAmB,CAC7E,EAAW,EAAE,EAGb,CAKE,qBAAsB,CACpB,GAAI,CAAC,KAAK,oBAAsB,CAAC,KAAK,qBAAuB,CAAC,KAAK,eAAiB,CAAC,KAAK,WACxF,OAIF,MAAMuF,EAAY,KAAK,uBAAsB,EAGvC6J,EAAmB,KAAK,oBAAoB,KAAK7Z,GAAcA,EAAW,QAAUgQ,CAAS,EAGnG,GAAI,CAAC6J,EAAkB,CACrB,KAAK,cAAc,WAAW,OAAA7J,EAAS,OAAM,EAC7C,MACN,CAEI,MAAM5O,EAAM,KAAK,mBAEjB,GAAI,CAGF,MAAM0Y,EAAW,KAAK,MAAM,IAAe,KAAK,SAAS,EACnDhR,EAAU+Q,EAAiB,EAC3B9Q,EAAU8Q,EAAiB,EAG3BE,EAAQ,KAAK,IAAI,EAAG,KAAK,IAAI3Y,EAAI,MAAQ0Y,EAAUhR,EAAUgR,EAAW,CAAC,CAAC,EAC1EE,EAAQ,KAAK,IAAI,EAAG,KAAK,IAAI5Y,EAAI,OAAS0Y,EAAU/Q,EAAU+Q,EAAW,CAAC,CAAC,EAC3EG,EAAkB,KAAK,IAAIH,EAAU1Y,EAAI,MAAQ2Y,CAAK,EACtDG,EAAmB,KAAK,IAAIJ,EAAU1Y,EAAI,OAAS4Y,CAAK,EAGxD3R,EAAc,KAAK,cAAc,MACjCC,EAAe,KAAK,cAAc,OAGxC,KAAK,WAAW,UAAU,EAAG,EAAGD,EAAaC,CAAY,EAGzD,KAAK,WAAW,UACdlH,EACA2Y,EAAOC,EAAOC,EAAiBC,EAC/B,EAAG,EAAG7R,EAAaC,CAC3B,EAGM,MAAMG,EAASJ,EAAc4R,EACvBvR,EAASJ,EAAe4R,EACxBC,GAAUrR,EAAUiR,GAAStR,EAC7B2R,GAAUrR,EAAUiR,GAAStR,EAGnC,KAAK,0BAA0ByR,EAAQC,EAAQpK,EAAW6J,EAAiB,SAAS,EAGpF,KAAK,oBAAoB,QAAS7Z,GAAe,CAC/C,GAAIA,EAAW,QAAUgQ,GAGrBhQ,EAAW,GAAK+Z,GAAS/Z,EAAW,GAAK+Z,EAAQE,GACjDja,EAAW,GAAKga,GAASha,EAAW,GAAKga,EAAQE,EAAkB,CAErE,MAAMG,GAAUra,EAAW,EAAI+Z,GAAStR,EAClC6R,GAAUta,EAAW,EAAIga,GAAStR,EACxC,KAAK,0BAA0B2R,EAAQC,EAAQta,EAAW,OAAS,EAAGA,EAAW,UAAW,EAAK,CAC3G,CACA,CAAO,EAGD,KAAK,eAAeyI,EAAQC,CAAM,EAElC,QAAQ,IAAI,gBAAgB,CAElC,OAAa5M,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAE1B,KAAK,mBAAqB,KAAK,qBACjC,KAAK,cAAc,KAAK,kBAAmB,KAAK,mBAAmB,CAE3E,CACA,CAKE,gBAAiB,CACf,MAAMye,EAAS,SAAS,cAAc,iBAAiB,EACnD,CAACA,GAAU,CAAC,KAAK,gBAErBA,EAAO,iBAAiB,YAAc,GAAM,CAC1C,EAAE,eAAc,EAChB,KAAK,UAAU,CAAC,CACtB,CAAK,EAED,SAAS,iBAAiB,YAAc,GAAM,CACxC,KAAK,YACP,KAAK,KAAK,CAAC,CAEnB,CAAK,EAED,SAAS,iBAAiB,UAAW,IAAM,CACzC,KAAK,QAAO,CAClB,CAAK,EACL,CAKE,UAAUvS,EAAG,CACX,KAAK,WAAa,GAClB,KAAK,WAAaA,EAAE,QACpB,KAAK,WAAaA,EAAE,QAEpB,MAAML,EAAO,KAAK,cAAc,sBAAqB,EACrD,KAAK,aAAeA,EAAK,KACzB,KAAK,aAAeA,EAAK,IAEzB,KAAK,cAAc,MAAM,OAAS,WAClC,SAAS,KAAK,MAAM,WAAa,MACrC,CAKE,KAAKK,EAAG,CACN,GAAI,CAAC,KAAK,WAAY,OAEtB,MAAMmD,EAASnD,EAAE,QAAU,KAAK,WAC1BqE,EAASrE,EAAE,QAAU,KAAK,WAE1BwS,EAAO,KAAK,aAAerP,EAC3BsP,EAAO,KAAK,aAAepO,EAG3BqO,EAAO,OAAO,WAAa,KAAK,cAAc,YAC9CC,EAAO,OAAO,YAAc,KAAK,cAAc,aAE/CC,EAAe,KAAK,IAAI,EAAG,KAAK,IAAIF,EAAMF,CAAI,CAAC,EAC/CK,EAAe,KAAK,IAAI,EAAG,KAAK,IAAIF,EAAMF,CAAI,CAAC,EAErD,KAAK,cAAc,MAAM,KAAOG,EAAe,KAC/C,KAAK,cAAc,MAAM,IAAMC,EAAe,IAClD,CAKE,SAAU,CACH,KAAK,aAEV,KAAK,WAAa,GAClB,KAAK,cAAc,MAAM,OAAS,GAClC,SAAS,KAAK,MAAM,WAAa,GACrC,CAKE,oBAAoB3S,EAAkB,CACpC,KAAK,iBAAmBA,CAC5B,CAKE,iBAAiB4S,EAAO,KAAM,CACvB,KAAK,gBAEV,KAAK,UAAYA,IAAS,KAAOA,EAAO,CAAC,KAAK,UAE1C,KAAK,WACP,KAAK,cAAc,UAAU,OAAO,QAAQ,EAC5C,KAAK,cAAa,GAElB,KAAK,cAAc,UAAU,IAAI,QAAQ,EAG3C,QAAQ,IAAI,YAAY,YAAK,UAAY,KAAO,KAAM,EAC1D,CAKE,MAAM,cAAcre,EAASK,EAAWgF,EAAYyR,EAAuB,EAAG,CAC5E,KAAK,eAAiB9W,EACtB,KAAK,iBAAmBK,EACxB,KAAK,kBAAoBgF,EACzB,KAAK,qBAAuByR,EAExB,KAAK,WACP,MAAM,KAAK,cAAa,CAE9B,CAKE,MAAM,eAAgB,CACpB,GAAI,GAAC,KAAK,WAAa,CAAC,KAAK,kBAAoB,CAAC,KAAK,gBAIvD,GAAI,CACF,KAAK,YAAY,EAAI,EAGrB,MAAMoE,EAAoB,MAAM,KAAK,iBAAgB,EAErD,GAAI,CAACA,EAAmB,CACtB,KAAK,cAAc,yBAAyB,EAC5C,MACR,CAGM,MAAMF,EAAsB,MAAM,KAAK,iBAAiB,oBAAoBE,EAAkB,EAAE,EAEhG,GAAI,CAACF,GAAuBA,EAAoB,SAAW,EAAG,CAC5D,KAAK,cAAc,+BAA+B,EAClD,MACR,CAGM,KAAK,mBAAmBE,EAAmBF,EAAoB,MAAM,EAGrE,MAAM,KAAK,cAAcE,EAAmBF,CAAmB,EAE/D,KAAK,YAAY,EAAK,CAE5B,OAAa3b,EAAO,CACd,QAAQ,MAAM,sCAAuCA,CAAK,EAC1D,KAAK,cAAc,wBAAwB,CACjD,CACA,CAKE,MAAM,kBAAmB,CACvB,GAAI,CAAC,KAAK,kBAAoB,KAAK,mBAAqB,EACtD,OAAO,KAGT,GAAI,CACF,MAAMe,EAAS,MAAM,KAAK,iBAAiB,eACzC,KAAK,eACL,KAAK,gBACb,EAEYke,EAAgB,KAAK,kBAAoB,EAC/C,OAAOle,EAAOke,CAAa,GAAK,IAEtC,OAAajf,EAAO,CACd,eAAQ,MAAM,6BAA8BA,CAAK,EAC1C,IACb,CACA,CAKE,mBAAmBkB,EAAWge,EAAiB,CAC7C,GAAI,KAAK,aAAc,CACrB,MAAMC,EAAaje,EAAU,YAAc,eAGrCgT,EAAY,KAAK,uBAAsB,EAE7C,KAAK,aAAa,YAAc,cAAc,OAAAA,EAAS,mBACvD,KAAK,aAAa,MAAQ,GAAG,OAAAiL,EAAU,oDAAmD,OAAAjL,EAAS,kBACzG,CACA,CAKE,wBAAyB,OAEvB,MAAMkL,GAAiB7d,EAAA,OAAO,sBAAP,YAAAA,EAA4B,eACnD,GAAI,CAAC6d,EACH,eAAQ,KAAK,2DAA2D,EACjE,KAAK,qBAAuB,EAIrC,MAAMC,EAA0BD,EAAe,2BAA0B,EAGzE,GAFuBC,GAAA,YAAAA,EAAyB,iBAE5B,CAElB,MAAMzE,EAAoByE,EAAwB,qBAAoB,EACtE,GAAIzE,GAAqB,OAAOwE,EAAe,+BAAkC,WAAY,CAC3F,MAAMlL,EAAYkL,EAAe,8BAA8BxE,EAAkB,EAAE,EACnF,eAAQ,IAAI,mDAAmD,OAAAA,EAAkB,GAAE,MAAK,OAAA1G,EAAS,8BAA6B,YAAK,qBAAsB,EAClJA,CACf,CACA,SAEU,OAAOkL,EAAe,wBAA2B,WAAY,CAC/D,MAAMlL,EAAYkL,EAAe,uBAAsB,EACvD,eAAQ,IAAI,4CAA4C,OAAAlL,EAAS,8BAA6B,YAAK,qBAAsB,EAClHA,CACf,CAII,MAAMoL,EAAgB,KAAK,qBAAuB,EAClD,eAAQ,IAAI,qDAAqD,OAAAA,EAAa,8BAA6B,YAAK,qBAAsB,EAC/HA,CACX,CAKE,MAAM,cAAcpe,EAAW0B,EAAa,SAC1C,GAAI,CAAC,KAAK,eAAiB,CAAC,KAAK,WAAY,OAG7C,MAAMsR,EAAY,KAAK,uBAAsB,EAGvCkL,GAAiB7d,EAAA,OAAO,sBAAP,YAAAA,EAA4B,eAC7C8d,EAA0BD,GAAA,YAAAA,EAAgB,6BAC1CG,EAAiBF,GAAA,YAAAA,EAAyB,iBAEhD,IAAItB,EACAyB,EAEJ,GAAID,EAAgB,CAElB,MAAM3E,EAAoByE,EAAwB,qBAAoB,EAClEzE,GACFmD,EAAmBnb,EAAY,KAAKsB,GAClCA,EAAW,QAAUgQ,GACrBhQ,EAAW,iBAAmB,UAC9BA,EAAW,eAAiB0W,EAAkB,EACxD,EACQ4E,EAAiB,qBAAqB,OAAAtL,EAAS,OAAM,OAAA0G,EAAkB,KAAI,gBAE3E4E,EAAiB,qBAAqB,OAAAtL,EAAS,uBAEvD,MAEM6J,EAAmBnb,EAAY,KAAKsB,GAClCA,EAAW,QAAUgQ,IAElBhQ,EAAW,iBAAmB,UAAYA,EAAW,eAAiB,4BACtE,CAACA,EAAW,gBAAkB,CAACA,EAAW,aAErD,EACMsb,EAAiB,qBAAqB,OAAAtL,EAAS,mBAIjD,GAAI,CAAC6J,EAAkB,CACrB,KAAK,cAAcyB,CAAc,EACjC,MACN,CAEI,KAAK,YAAW,EAChB,KAAK,cAAa,EAElB,GAAI,CACF,QAAQ,IAAI,+BAAgCte,CAAS,EAGrD,IAAImL,EAGJ,GAAInL,EAAU,MAAQA,EAAU,gBAAgB,KAC9CmL,EAAW,IAAI,gBAAgBnL,EAAU,IAAI,EAC3C,QAAQ,IAAI,gCAAiCmL,CAAQ,UAGhDnL,EAAU,IACjBmL,EAAWnL,EAAU,IACrB,QAAQ,IAAI,oBAAqBmL,CAAQ,WAGlClK,EAAA,KAAK,mBAAL,MAAAA,EAAuB,kBAC9B,GAAI,CACFkK,EAAW,MAAM,KAAK,iBAAiB,kBAAkB,eAAenL,CAAS,EACjF,QAAQ,IAAI,sCAAuCmL,CAAQ,CACrE,OAAiBrM,EAAO,CAId,GAHA,QAAQ,KAAK,6CAA8CA,CAAK,EAG5DkB,EAAU,OACZ,GAAI,CACF,MAAMue,EAAO,MAAMve,EAAU,OAAO,QAAO,EAC3CmL,EAAW,IAAI,gBAAgBoT,CAAI,EACnC,QAAQ,IAAI,mCAAoCpT,CAAQ,CACtE,OAAqBqT,EAAa,CACpB,cAAQ,MAAM,sCAAuCA,CAAW,EAC1D,IAAI,MAAM,kBAAkB,CAChD,KAEY,OAAM1f,CAElB,KAGQ,OAAM,IAAI,MAAM,4BAA4B,EAI9C,MAAMsF,EAAM,IAAI,MAChBA,EAAI,YAAc,YAClB,MAAM,IAAI,QAAQ,CAAC/E,EAAS+L,IAAW,CACrChH,EAAI,OAAS,IAAM,CACjB,QAAQ,IAAI,6BAA8BA,EAAI,MAAO,IAAKA,EAAI,MAAM,EACpE/E,EAAO,CACjB,EACQ+E,EAAI,QAAWtF,GAAU,CACvB,QAAQ,MAAM,wBAAyBA,CAAK,EAC5CsM,EAAO,IAAI,MAAM,sBAAsB,CAAC,CAClD,EACQhH,EAAI,IAAM+G,CAClB,CAAO,EAID,MAAM2R,EAAW,KAAK,MADD,IACsB,KAAK,SAAS,EACnDhR,EAAU+Q,EAAiB,EAC3B9Q,EAAU8Q,EAAiB,EAG3BE,EAAQ,KAAK,IAAI,EAAG,KAAK,IAAI3Y,EAAI,MAAQ0Y,EAAUhR,EAAUgR,EAAW,CAAC,CAAC,EAC1EE,EAAQ,KAAK,IAAI,EAAG,KAAK,IAAI5Y,EAAI,OAAS0Y,EAAU/Q,EAAU+Q,EAAW,CAAC,CAAC,EAC3EG,EAAkB,KAAK,IAAIH,EAAU1Y,EAAI,MAAQ2Y,CAAK,EACtDG,EAAmB,KAAK,IAAIJ,EAAU1Y,EAAI,OAAS4Y,CAAK,EAGxD3R,EAAc,KAAK,cAAc,MACjCC,EAAe,KAAK,cAAc,OAGxC,KAAK,WAAW,UAAU,EAAG,EAAGD,EAAaC,CAAY,EAGzD,KAAK,WAAW,UACdlH,EACA2Y,EAAOC,EAAOC,EAAiBC,EAC/B,EAAG,EAAG7R,EAAaC,CAC3B,EAGM,MAAMG,EAASJ,EAAc4R,EACvBvR,EAASJ,EAAe4R,EACxBC,GAAUrR,EAAUiR,GAAStR,EAC7B2R,GAAUrR,EAAUiR,GAAStR,EAGnC,KAAK,0BAA0ByR,EAAQC,EAAQpK,EAAW6J,EAAiB,SAAS,EAGpFnb,EAAY,QAASsB,GAAe,CAClC,GAAIA,EAAW,QAAUgQ,GAGrBhQ,EAAW,GAAK+Z,GAAS/Z,EAAW,GAAK+Z,EAAQE,GACjDja,EAAW,GAAKga,GAASha,EAAW,GAAKga,EAAQE,EAAkB,CAErE,MAAMG,GAAUra,EAAW,EAAI+Z,GAAStR,EAClC6R,GAAUta,EAAW,EAAIga,GAAStR,EACxC,KAAK,0BAA0B2R,EAAQC,EAAQta,EAAW,OAAS,EAAGA,EAAW,UAAW,EAAK,CAC3G,CACA,CAAO,EAGD,KAAK,eAAeyI,EAAQC,CAAM,EAGlC,KAAK,kBAAoB1L,EACzB,KAAK,oBAAsB0B,EAC3B,KAAK,mBAAqB0C,EAGtB+G,GAAYA,EAAS,WAAW,OAAO,GAAK,CAACnL,EAAU,KACzD,WAAW,IAAM,IAAI,gBAAgBmL,CAAQ,EAAG,GAAI,EAGtD,QAAQ,IAAI,6BAA6B,CAE/C,OAAarM,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChD,KAAK,cAAc,2BAA2B,OAAAA,EAAM,QAAS,CACnE,CACA,CAKE,0BAA0B6O,EAAGC,EAAGC,EAAOvB,EAAWmS,EAAW,GAAM,CAEjE,IAAIlS,EAAW+E,EAAQoN,EAEnBD,GACFlS,EAAY,UACZ+E,EAAS,EACToN,EAAc,EAGd,KAAK,WAAW,UAAS,EACzB,KAAK,WAAW,IAAI/Q,EAAGC,EAAG0D,EAAS,EAAG,EAAG,EAAI,KAAK,EAAE,EACpD,KAAK,WAAW,YAAc,UAC9B,KAAK,WAAW,UAAY,EAC5B,KAAK,WAAW,YAAY,CAAC,EAAG,CAAC,CAAC,EAClC,KAAK,WAAW,OAAM,EACtB,KAAK,WAAW,YAAY,EAAE,IAG1B,OAAOhF,GAAc,SACvBC,EAAY,UAEZA,EAAYD,IAAc,OAAS,UAAY,UAEjDgF,EAAS,EACToN,EAAc,GAIhB,KAAK,WAAW,UAAS,EACzB,KAAK,WAAW,IAAI/Q,EAAGC,EAAG0D,EAAQ,EAAG,EAAI,KAAK,EAAE,EAChD,KAAK,WAAW,UAAY/E,EAC5B,KAAK,WAAW,KAAI,EAGpB,KAAK,WAAW,YAAc,UAC9B,KAAK,WAAW,UAAYmS,EAC5B,KAAK,WAAW,OAAM,EAGtB,KAAK,qBAAqB/Q,EAAGC,EAAGtB,EAAWmS,CAAQ,EAGnD,KAAK,WAAW,UAAYA,EAAW,UAAY,UACnD,KAAK,WAAW,KAAO,QAAQ,OAAAA,EAAW,EAAI,EAAC,YAC/C,KAAK,WAAW,UAAY,SAC5B,KAAK,WAAW,aAAe,SAC/B,KAAK,WAAW,SAAS5Q,EAAM,SAAQ,EAAIF,EAAGC,CAAC,EAG3C6Q,IACF,KAAK,WAAW,UAAY,UAC5B,KAAK,WAAW,KAAO,iBACvB,KAAK,WAAW,SAAS,IAAK9Q,EAAGC,EAAI0D,EAAS,CAAC,EAE/C,KAAK,WAAW,UAAY,UAC5B,KAAK,WAAW,KAAO,iBACvB,KAAK,WAAW,UAAY,SAC5B,KAAK,WAAW,SAAS,SAAU3D,EAAGC,EAAI0D,EAAS,CAAC,EAE1D,CAKE,qBAAqB3D,EAAGC,EAAGtB,EAAWmS,EAAW,GAAO,CACtD,GAAI,CAACnS,EAAW,OAEhB,IAAI8K,EAGJ,GAAI,OAAO9K,GAAc,SACvB8K,EAAe9K,UACNA,IAAc,OACvB8K,EAAe,YACN9K,IAAc,QACvB8K,EAAe,MAEf,QAGF,MAAMC,EAAeD,EAAe,KAAK,GAAK,IAGxCE,EAAcmH,EAAW,GAAK,GAC9B9G,EAAa8G,EAAW,EAAI,EAC5BE,EAAYF,EAAW,EAAI,EAG3BlH,EAAO5J,EAAI,KAAK,IAAI0J,CAAY,EAAIC,EACpCE,EAAO5J,EAAI,KAAK,IAAIyJ,CAAY,EAAIC,EAE1C,KAAK,WAAW,KAAI,EAGpB,KAAK,WAAW,YAAc,UAC9B,KAAK,WAAW,UAAYqH,EAC5B,KAAK,WAAW,YAAY,CAAC,EAAG,CAAC,CAAC,EAClC,KAAK,WAAW,QAAU,QAE1B,KAAK,WAAW,UAAS,EACzB,KAAK,WAAW,OAAOhR,EAAGC,CAAC,EAC3B,KAAK,WAAW,OAAO2J,EAAMC,CAAI,EACjC,KAAK,WAAW,OAAM,EAGtB,KAAK,WAAW,YAAY,EAAE,EAC9B,KAAK,WAAW,YAAc,UAC9B,KAAK,WAAW,UAAYmH,EAC5B,KAAK,WAAW,QAAU,QAE1B,MAAMlH,EAAaJ,EAAe,KAAK,GAAK,GACtCK,EAAaL,EAAe,KAAK,GAAK,GAE5C,KAAK,WAAW,UAAS,EACzB,KAAK,WAAW,OAAOE,EAAMC,CAAI,EACjC,KAAK,WAAW,OAAOD,EAAO,KAAK,IAAIE,CAAU,EAAIE,EAAYH,EAAO,KAAK,IAAIC,CAAU,EAAIE,CAAU,EACzG,KAAK,WAAW,OAAOJ,EAAMC,CAAI,EACjC,KAAK,WAAW,OAAOD,EAAO,KAAK,IAAIG,CAAU,EAAIC,EAAYH,EAAO,KAAK,IAAIE,CAAU,EAAIC,CAAU,EACzG,KAAK,WAAW,OAAM,EAEtB,KAAK,WAAW,QAAO,CAC3B,CAKE,eAAelM,EAAQC,EAAQ,CAC7B,MAAMkT,EAAc,KAAK,UACnBC,EAAW,GAAG,OAAAD,EAAW,UAE/B,KAAK,WAAW,UAAY,qBAC5B,KAAK,WAAW,SAAS,EAAG,EAAG,GAAI,EAAE,EAErC,KAAK,WAAW,UAAY,UAC5B,KAAK,WAAW,KAAO,YACvB,KAAK,WAAW,UAAY,OAC5B,KAAK,WAAW,aAAe,SAC/B,KAAK,WAAW,SAASC,EAAU,EAAG,EAAE,CAC5C,CAKE,YAAYf,EAAM,CACZ,KAAK,iBACP,KAAK,eAAe,MAAM,QAAUA,EAAO,QAAU,QAEnD,KAAK,YACP,KAAK,UAAU,MAAM,QAAU,OAErC,CAKE,cAAcjW,EAAS,CACrB,KAAK,YAAY,EAAK,EAClB,KAAK,YACP,KAAK,UAAU,YAAcA,EAC7B,KAAK,UAAU,MAAM,QAAU,SAI7B,KAAK,eAAiB,KAAK,YAC7B,KAAK,WAAW,UAAU,EAAG,EAAG,KAAK,cAAc,MAAO,KAAK,cAAc,MAAM,CAEzF,CAKE,6BAA6B2S,EAAoB,CAC3C,CAAC,KAAK,WAAa,CAACA,GAIxB,KAAK,cAAa,CACtB,CAKE,MAAM,oBAAoBsE,EAAa,CACrC,GAAI,CAEF,GAAI,CAAC,KAAK,mBAAqB,CAAC,KAAK,oBAAqB,CACxD,QAAQ,IAAI,0EAA0E,EAGtF,MAAMnE,EAAoB,MAAM,KAAK,iBAAgB,EACrD,GAAI,CAACA,EACH,eAAQ,IAAI,4CAA4C,EACjD,KAIT,MAAMF,EAAsB,MAAM,KAAK,iBAAiB,oBAAoBE,EAAkB,EAAE,EAChG,GAAI,CAACF,GAAuBA,EAAoB,SAAW,EACzD,eAAQ,IAAI,uDAAuD,EAC5D,KAIT,KAAK,kBAAoBE,EACzB,KAAK,oBAAsBF,CACnC,CAGM,MAAMoC,EAAmB,KAAK,oBAAoB,KAAK7Z,GAAcA,EAAW,QAAU8b,CAAW,EAErG,OAAKjC,GAKL,QAAQ,IAAI,0DAA0D,OAAAiC,EAAW,OAAM,OAAAjC,EAAiB,EAAE,QAAQ,CAAC,EAAC,MAAK,OAAAA,EAAiB,EAAE,QAAQ,CAAC,EAAC,IAAG,EAElJ,CACL,EAAGA,EAAiB,EACpB,EAAGA,EAAiB,EACpB,MAAOA,EAAiB,MACxB,YAAa,KAAK,kBAAkB,YAAc,gBAC1D,IAXQ,QAAQ,IAAI,qDAAqD,OAAAiC,EAAW,qBAAoB,EACzF,KAYf,OAAahgB,EAAO,CACd,eAAQ,MAAM,oDAAqDA,CAAK,EACjE,IACb,CACA,CAKE,OAAQ,CACN,KAAK,eAAiB,KACtB,KAAK,iBAAmB,KACxB,KAAK,kBAAoB,GACzB,KAAK,kBAAoB,KACzB,KAAK,oBAAsB,GAEvB,KAAK,WACP,KAAK,cAAc,wBAAwB,CAEjD,CAKE,WAAY,CACV,MAAO,CACL,UAAW,KAAK,UAChB,eAAgB,KAAK,eACrB,iBAAkB,KAAK,iBACvB,kBAAmB,KAAK,kBACxB,gBAAiB,KAAK,oBAAsB,IAClD,CACA,CAKE,aAAc,CACZ,KAAK,YAAY,EAAK,CAC1B,CAKE,eAAgB,CACV,KAAK,YACP,KAAK,UAAU,MAAM,QAAU,OAErC,CAKE,kBAAmB,CACb,CAAC,KAAK,YAAc,CAAC,KAAK,YAE9B,KAAK,WAAW,iBAAiB,QAAUkM,GAAM,CAC/C,KAAK,UAAY,WAAWA,EAAE,OAAO,KAAK,EAC1C,KAAK,UAAU,YAAc,KAAK,UAAY,IAG1C,KAAK,WAAa,KAAK,oBAAsB,KAAK,oBACpD,KAAK,oBAAmB,EACf,KAAK,WAAa,KAAK,mBAAqB,KAAK,qBAE1D,KAAK,cAAc,KAAK,kBAAmB,KAAK,mBAAmB,CAE3E,CAAK,EAGD,KAAK,WAAW,MAAQ,KAAK,UAC7B,KAAK,UAAU,YAAc,KAAK,UAAY,IAClD,CAKE,MAAM,yBAAyB8T,EAAa,CAC1C,GAAI,GAAC,KAAK,WAAa,CAAC,KAAK,kBAAoB,CAAC,KAAK,gBAKvD,MAAK,uBAAyB,GAC9B,KAAK,oBAAsBA,EAE3B,GAAI,CAEF,MAAMnE,EAAoB,MAAM,KAAK,iBAAgB,EAErD,GAAI,CAACA,EAAmB,CACtB,KAAK,cAAc,yBAAyB,EAC5C,MACR,CAGM,MAAMF,EAAsB,MAAM,KAAK,iBAAiB,oBAAoBE,EAAkB,EAAE,EAEhG,GAAI,CAACF,GAAuBA,EAAoB,SAAW,EAAG,CAC5D,KAAK,cAAc,+BAA+B,EAClD,MACR,CAKM,GAAI,CAFqBA,EAAoB,KAAKzX,GAAcA,EAAW,QAAU8b,CAAW,EAEzE,CACrB,KAAK,cAAc,qBAAqB,OAAAA,EAAW,kBAAiB,EACpE,MACR,CAGM,KAAK,2BAA2BnE,EAAmBmE,CAAW,EAG9D,MAAM,KAAK,2BAA2BnE,EAAmBF,EAAqBqE,CAAW,CAE/F,OAAahgB,EAAO,CACd,QAAQ,MAAM,sCAAuCA,CAAK,EAC1D,KAAK,cAAc,wBAAwB,CACjD,EACA,CAKE,MAAM,sBAAuB,CAE3B,KAAK,uBAAyB,GAC9B,KAAK,oBAAsB,KAG3B,MAAM,KAAK,cAAa,CAC5B,CAKE,2BAA2BkB,EAAW8e,EAAa,CACjD,GAAI,KAAK,aAAc,CACrB,MAAMb,EAAaje,EAAU,YAAc,eAC3C,KAAK,aAAa,YAAc,aAAa,OAAA8e,EAAW,mBACxD,KAAK,aAAa,MAAQ,GAAG,OAAAb,EAAU,gBAAe,OAAAa,EAAW,0DACvE,CACA,CAKE,MAAM,2BAA2B9e,EAAW0B,EAAaod,EAAa,OACpE,GAAI,CAAC,KAAK,eAAiB,CAAC,KAAK,WAAY,OAG7C,MAAMjC,EAAmBnb,EAAY,KAAKsB,GAAcA,EAAW,QAAU8b,CAAW,EAExF,GAAI,CAACjC,EAAkB,CACrB,KAAK,cAAc,qBAAqB,OAAAiC,EAAW,kBAAiB,EACpE,MACN,CAEI,KAAK,YAAW,EAChB,KAAK,cAAa,EAElB,GAAI,CACF,QAAQ,IAAI,iCAAkCA,CAAW,EAGzD,IAAI3T,EAGJ,GAAInL,EAAU,MAAQA,EAAU,gBAAgB,KAC9CmL,EAAW,IAAI,gBAAgBnL,EAAU,IAAI,UAGtCA,EAAU,IACjBmL,EAAWnL,EAAU,aAGdK,EAAA,KAAK,mBAAL,MAAAA,EAAuB,kBAC9B,GAAI,CACF8K,EAAW,MAAM,KAAK,iBAAiB,kBAAkB,eAAenL,CAAS,CAC3F,OAAiBlB,EAAO,CAId,GAHA,QAAQ,KAAK,6CAA8CA,CAAK,EAG5DkB,EAAU,OACZ,GAAI,CACF,MAAMue,EAAO,MAAMve,EAAU,OAAO,QAAO,EAC3CmL,EAAW,IAAI,gBAAgBoT,CAAI,CACjD,OAAqBC,EAAa,CACpB,cAAQ,MAAM,sCAAuCA,CAAW,EAC1D,IAAI,MAAM,8CAA8C,CAC5E,KAEY,OAAM1f,CAElB,KAGQ,OAAM,IAAI,MAAM,sFAAsF,EAIxG,MAAMsF,EAAM,IAAI,MAChBA,EAAI,YAAc,YAClB,MAAM,IAAI,QAAQ,CAAC/E,EAAS+L,IAAW,CACrChH,EAAI,OAAS,IAAM/E,EAAO,EAC1B+E,EAAI,QAAU,IAAMgH,EAAO,IAAI,MAAM,sBAAsB,CAAC,EAC5DhH,EAAI,IAAM+G,CAClB,CAAO,EAID,MAAM2R,EAAW,KAAK,MADD,IACsB,KAAK,SAAS,EACnDhR,EAAU+Q,EAAiB,EAC3B9Q,EAAU8Q,EAAiB,EAE3BE,EAAQ,KAAK,IAAI,EAAG,KAAK,IAAI3Y,EAAI,MAAQ0Y,EAAUhR,EAAUgR,EAAW,CAAC,CAAC,EAC1EE,EAAQ,KAAK,IAAI,EAAG,KAAK,IAAI5Y,EAAI,OAAS0Y,EAAU/Q,EAAU+Q,EAAW,CAAC,CAAC,EAC3EG,EAAkB,KAAK,IAAIH,EAAU1Y,EAAI,MAAQ2Y,CAAK,EACtDG,EAAmB,KAAK,IAAIJ,EAAU1Y,EAAI,OAAS4Y,CAAK,EAExD3R,EAAc,KAAK,cAAc,MACjCC,EAAe,KAAK,cAAc,OAGxC,KAAK,WAAW,UAAU,EAAG,EAAGD,EAAaC,CAAY,EAGzD,KAAK,WAAW,UACdlH,EACA2Y,EAAOC,EAAOC,EAAiBC,EAC/B,EAAG,EAAG7R,EAAaC,CAC3B,EAGM,MAAMG,EAASJ,EAAc4R,EACvBvR,EAASJ,EAAe4R,EACxBC,GAAUrR,EAAUiR,GAAStR,EAC7B2R,GAAUrR,EAAUiR,GAAStR,EAGnC,KAAK,wBAAwByR,EAAQC,EAAQ0B,EAAajC,EAAiB,SAAS,EAGpFnb,EAAY,QAASsB,GAAe,CAClC,GAAIA,EAAW,QAAU8b,GAErB9b,EAAW,GAAK+Z,GAAS/Z,EAAW,GAAK+Z,EAAQE,GACjDja,EAAW,GAAKga,GAASha,EAAW,GAAKga,EAAQE,EAAkB,CAErE,MAAMG,GAAUra,EAAW,EAAI+Z,GAAStR,EAClC6R,GAAUta,EAAW,EAAIga,GAAStR,EACxC,KAAK,0BAA0B2R,EAAQC,EAAQta,EAAW,OAAS,EAAGA,EAAW,UAAW,EAAK,CAC3G,CACA,CAAO,EAGD,KAAK,eAAeyI,EAAQC,CAAM,EAG9BP,GAAYA,EAAS,WAAW,OAAO,GAAK,CAACnL,EAAU,KACzD,WAAW,IAAM,IAAI,gBAAgBmL,CAAQ,EAAG,GAAI,EAGtD,QAAQ,IAAI,4CAA4C,CAE9D,OAAarM,EAAO,CACd,QAAQ,MAAM,2CAA4CA,CAAK,EAC/D,KAAK,cAAc,2BAA2B,OAAAA,EAAM,QAAS,CACnE,CACA,CAKE,wBAAwB6O,EAAGC,EAAGC,EAAOvB,EAAW,CAE9C,MAAMC,EAAY,UAKlB,KAAK,WAAW,UAAS,EACzB,KAAK,WAAW,IAAIoB,EAAGC,EAAG,GAAY,EAAG,EAAI,KAAK,EAAE,EACpD,KAAK,WAAW,YAAc,UAC9B,KAAK,WAAW,UAAY,EAC5B,KAAK,WAAW,YAAY,CAAC,EAAG,CAAC,CAAC,EAClC,KAAK,WAAW,OAAM,EACtB,KAAK,WAAW,YAAY,EAAE,EAG9B,KAAK,WAAW,UAAS,EACzB,KAAK,WAAW,IAAID,EAAGC,EAAG,EAAQ,EAAG,EAAI,KAAK,EAAE,EAChD,KAAK,WAAW,UAAYrB,EAC5B,KAAK,WAAW,KAAI,EAGpB,KAAK,WAAW,YAAc,UAC9B,KAAK,WAAW,UAAY,EAC5B,KAAK,WAAW,OAAM,EAGtB,KAAK,qBAAqBoB,EAAGC,EAAGtB,EAAW,EAAI,EAG/C,KAAK,WAAW,UAAY,UAC5B,KAAK,WAAW,KAAO,iBACvB,KAAK,WAAW,UAAY,SAC5B,KAAK,WAAW,aAAe,SAC/B,KAAK,WAAW,SAASuB,EAAM,SAAQ,EAAIF,EAAGC,CAAC,EAG/C,KAAK,WAAW,UAAY,UAC5B,KAAK,WAAW,KAAO,iBACvB,KAAK,WAAW,SAAS,WAAYD,EAAGC,EAAI,EAAS,EAAE,CAC3D,CACA,CChoCO,MAAMmR,EAAY,CACvB,YAAYC,EAAuB,CACjC,KAAK,YAAcA,EACnB,KAAK,MAAQ,IAAI,IACjB,KAAK,gBAAkB,IAAI,IAC3B,KAAK,cAAgB,GACrB,KAAK,gBAAkB,EAAI,GAAK,IAChC,KAAK,aAAe,IAAI,IACxB,KAAK,WAAa,IAAI,IAGtB,KAAK,aAAe,KACpB,KAAK,kBAAoB,EACzB,KAAK,mBAAqB,CACxB,aAAc,EACd,iBAAkB,EAClB,UAAW,EACX,YAAa,CACnB,CACA,CAKE,IAAI,SAAU,CACZ,OAAO,KAAK,YAAY,OAC5B,CAKE,MAAM,YAAa,CACjB,GAAI,CACF,aAAM,KAAK,YAAY,iBAAgB,EACvC,KAAK,cAAgB,GACrB,QAAQ,IAAI,mBAAmB,EACxB,EACb,OAAalgB,EAAO,CACd,cAAQ,MAAM,qBAAsBA,CAAK,EACnCA,CACZ,CACA,CAKE,MAAM,kBAAmB,CAClB,KAAK,eACR,MAAM,KAAK,WAAU,EAEvB,MAAM,KAAK,YAAY,iBAAgB,CAC3C,CAKE,MAAM,aAAaW,EAASwf,EAAU,CACpC,GAAI,CAACxf,EACH,MAAM,IAAI,MAAM,UAAU,EAE5B,GAAI,CAACwf,EAAS,OAAS,CAACA,EAAS,QAC/B,MAAM,IAAI,MAAM,aAAa,EAG/B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAMpgB,EAAW,MAAM,MAAM,GAAG,YAAK,YAAY,QAAO,iBAAgB,0BAAmBY,CAAO,GAAK,CACrG,OAAQ,OACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAUwf,CAAQ,CACrC,CAAO,EAED,GAAI,CAACpgB,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QAET,YAAK,WAAU,EACf,QAAQ,IAAI,aAAa,OAAAA,EAAO,KAAK,OAAM,aAAY,EAChDA,EAAO,KAAK,OAGrB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,EAAO,QAAQ,OAAAC,EAAO,MAAK,CAC3B,CAKE,MAAM,aAAaA,EAASU,EAAS8e,EAAU,CAC7C,GAAI,CAACxf,EACH,MAAM,IAAI,MAAM,UAAU,EAE5B,GAAI,CAACU,EACH,MAAM,IAAI,MAAM,UAAU,EAE5B,GAAI,CAAC8e,EAAS,OAAS,CAACA,EAAS,QAC/B,MAAM,IAAI,MAAM,aAAa,EAG/B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAMpgB,EAAW,MAAM,MAAM,GAAG,YAAK,YAAY,QAAO,iBAAgB,0BAAmBY,CAAO,EAAC,KAAI,0BAAmBU,CAAO,GAAK,CACpI,OAAQ,OACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAU8e,CAAQ,CACrC,CAAO,EAED,GAAI,CAACpgB,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QAET,YAAK,WAAU,EACf,QAAQ,IAAI,aAAa,OAAAA,EAAO,KAAK,OAAM,aAAY,EAChDA,EAAO,KAAK,OAGrB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,EAAO,QAAQ,OAAAW,EAAO,MAAK,CAC3B,CAKE,MAAM,cAAcV,EAAS,CAC3B,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,MAAM,KAAK,iBAAgB,EAE3B,MAAMyf,EAAW,SAAS,OAAAzf,GAG1B,GAAI,KAAK,cAAgB,CAAC,KAAK,kBAAiB,EAAI,CAClD,MAAM0f,EAAa,KAAK,aAAa,WAAW1f,CAAO,GAAK,GAC5D,YAAK,MAAM,IAAIyf,EAAUC,CAAU,EACnC,KAAK,mBAAmB,YACjBA,CACb,CAGI,OAAI,KAAK,MAAM,IAAID,CAAQ,GAAK,CAAC,KAAK,eAAeA,CAAQ,GAC3D,KAAK,mBAAmB,YACjB,KAAK,MAAM,IAAIA,CAAQ,GAGzB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAM7Y,EAAY,YAAY,IAAG,EAC3B9F,EAAM,GAAG,YAAK,YAAY,QAAO,iBAAgB,0BAAmBd,CAAO,GACjF,QAAQ,IAAI,6BAA6B,OAAAc,EAAK,EAE9C,GAAI,CACF,MAAM1B,EAAW,MAAM,MAAM0B,CAAG,EAGhC,GAFA,KAAK,mBAAmB,eAEpB,CAAC1B,EAAS,GAIZ,GAHA,QAAQ,MAAM,uBAAuB,OAAAA,EAAS,OAAM,KAAI,OAAAA,EAAS,WAAY,EAGzEA,EAAS,SAAW,IAAK,CAE3B,MAAMugB,EAAc,GACpB,YAAK,SAASF,EAAUE,CAAW,EAC5BA,CACnB,KAAiB,OAAIvgB,EAAS,SAAW,IACvB,IAAI,MAAM,0BAA0B,EACjCA,EAAS,SAAW,IACvB,IAAI,MAAM,sBAAsB,EAEhC,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAIrE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAGlC,GAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKwH,EAEvD7G,EAAO,QAET,YAAK,SAAS0f,EAAU1f,EAAO,IAAI,EACnC,QAAQ,IAAI,wBAAwB,OAAAC,EAAO,OAAM,OAAAD,EAAO,KAAK,OAAM,OAAM,EAClEA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAClD,OAAe6f,EAAY,CAGnB,MAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKhZ,EAEvDgZ,EAAW,OAAS,aAAeA,EAAW,QAAQ,SAAS,OAAO,EAClE,IAAI,MAAM,sBAAsB,OAAA9e,EAAG,IAAG,EAExC8e,CACd,CACA,EAAO,QAAQ,OAAA5f,EAAO,MAAK,CAC3B,CAKE,MAAM,cAAcA,EAASU,EAAS,CACpC,GAAI,CAACV,EACH,MAAM,IAAI,MAAM,UAAU,EAE5B,GAAI,CAACU,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,MAAM,KAAK,iBAAgB,EAE3B,MAAM+e,EAAW,SAAS,OAAAzf,EAAO,KAAI,OAAAU,GAGrC,GAAI,KAAK,cAAgB,CAAC,KAAK,kBAAiB,EAAI,CAClD,MAAMmf,EAAa,KAAK,aAAa,WAAWnf,CAAO,GAAK,GAC5D,YAAK,MAAM,IAAI+e,EAAUI,CAAU,EACnC,KAAK,mBAAmB,YACjBA,CACb,CAGI,OAAI,KAAK,MAAM,IAAIJ,CAAQ,GAAK,CAAC,KAAK,eAAeA,CAAQ,GAC3D,KAAK,mBAAmB,YACjB,KAAK,MAAM,IAAIA,CAAQ,GAGzB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAM7Y,EAAY,YAAY,IAAG,EAC3B9F,EAAM,GAAG,YAAK,YAAY,QAAO,iBAAgB,0BAAmBd,CAAO,EAAC,KAAI,0BAAmBU,CAAO,GAChH,QAAQ,IAAI,6BAA6B,OAAAI,EAAK,EAE9C,GAAI,CACF,MAAM1B,EAAW,MAAM,MAAM0B,CAAG,EAGhC,GAFA,KAAK,mBAAmB,eAEpB,CAAC1B,EAAS,GAIZ,GAHA,QAAQ,MAAM,uBAAuB,OAAAA,EAAS,OAAM,KAAI,OAAAA,EAAS,WAAY,EAGzEA,EAAS,SAAW,IAAK,CAE3B,MAAMugB,EAAc,GACpB,YAAK,SAASF,EAAUE,CAAW,EAC5BA,CACnB,KAAiB,OAAIvgB,EAAS,SAAW,IACvB,IAAI,MAAM,0BAA0B,EACjCA,EAAS,SAAW,IACvB,IAAI,MAAM,sBAAsB,EAEhC,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAIrE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAGlC,GAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKwH,EAEvD7G,EAAO,QAET,YAAK,SAAS0f,EAAU1f,EAAO,IAAI,EACnC,QAAQ,IAAI,wBAAwB,OAAAW,EAAO,OAAM,OAAAX,EAAO,KAAK,OAAM,OAAM,EAClEA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAClD,OAAe6f,EAAY,CAGnB,MAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKhZ,EAEvDgZ,EAAW,OAAS,aAAeA,EAAW,QAAQ,SAAS,OAAO,EAClE,IAAI,MAAM,sBAAsB,OAAA9e,EAAG,IAAG,EAExC8e,CACd,CACA,EAAO,QAAQ,OAAAlf,EAAO,MAAK,CAC3B,CAKE,MAAM,WAAWof,EAAQC,EAAS,CAChC,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAM1gB,EAAW,MAAM,MAAM,GAAG,YAAK,YAAY,QAAO,WAAU,0BAAmB0gB,CAAM,GAAK,CAC9F,OAAQ,MACR,QAAS,CACP,eAAgB,kBAC1B,EACQ,KAAM,KAAK,UAAUC,CAAO,CACpC,CAAO,EAED,GAAI,CAAC3gB,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QAET,YAAK,WAAU,EACf,QAAQ,IAAI,WAAW,OAAA+f,EAAQ,EACxB/f,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,QAAQ,CAC9C,EAAO,QAAQ,OAAA+f,EAAQ,CACvB,CAKE,MAAM,WAAWA,EAAQ,CACvB,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAM1gB,EAAW,MAAM,MAAM,GAAG,YAAK,YAAY,QAAO,WAAU,0BAAmB0gB,CAAM,GAAK,CAC9F,OAAQ,QAChB,CAAO,EAED,GAAI,CAAC1gB,EAAS,GAAI,CAEhB,GAAIA,EAAS,SAAW,IACtB,eAAQ,KAAK,MAAM,OAAA0gB,EAAM,YAAW,EAEpC,KAAK,WAAU,EACR,GAET,MAAM,IAAI,MAAM,QAAQ,OAAA1gB,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,CACzE,CAEM,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QAET,YAAK,WAAU,EACf,QAAQ,IAAI,WAAW,OAAA+f,EAAQ,EACxB,GAGT,MAAM,IAAI,MAAM/f,EAAO,OAAS,QAAQ,CAC9C,EAAO,QAAQ,OAAA+f,EAAQ,CACvB,CAKE,MAAM,QAAQA,EAAQ,CACpB,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,aAAM,KAAK,iBAAgB,EAEpB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAM1gB,EAAW,MAAM,MAAM,GAAG,YAAK,YAAY,QAAO,WAAU,0BAAmB0gB,CAAM,EAAG,EAE9F,GAAI,CAAC1gB,EAAS,GAAI,CAChB,GAAIA,EAAS,SAAW,IACtB,OAAO,KAET,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,CACzE,CAEM,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QACT,OAAOA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,QAAQ,CAC9C,EAAO,QAAQ,OAAA+f,EAAQ,CACvB,CAKE,MAAM,YAAYjW,EAAOmW,EAAU,GAAI,CACrC,aAAM,KAAK,iBAAgB,EAEpB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAMC,EAAe,IAAI,gBAErBpW,GACFoW,EAAa,OAAO,QAASpW,CAAK,EAGhCmW,EAAQ,SACVC,EAAa,OAAO,UAAWD,EAAQ,OAAO,EAG5CA,EAAQ,UACVC,EAAa,OAAO,WAAYD,EAAQ,QAAQ,EAG9CA,EAAQ,QACVC,EAAa,OAAO,SAAUD,EAAQ,MAAM,EAG9C,MAAME,EAAY,GAAG,YAAK,YAAY,QAAO,kBAAiB,OAAAD,GAC9D,QAAQ,IAAI,0CAA2CC,CAAS,EAEhE,MAAM9gB,EAAW,MAAM,MAAM8gB,CAAS,EAEtC,GAAI,CAAC9gB,EAAS,GAAI,CAChB,MAAMC,EAAQ,IAAI,MAAM,QAAQ,OAAAD,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EACzE,MAAAC,EAAM,IAAM6gB,EACZ7gB,EAAM,OAASD,EAAS,OACxB,QAAQ,MAAM,uCAAwCC,CAAK,EACrDA,CACd,CAEM,MAAMU,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QACT,OAAOA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,QAAQ,CAC9C,EAAO,MAAM,CACb,CAKE,MAAM,UAAW,CACf,aAAM,KAAK,iBAAgB,EAEpB,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAMX,EAAW,MAAM,MAAM,GAAG,YAAK,YAAY,QAAO,eAAc,EAEtE,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAElC,GAAIW,EAAO,QACT,OAAOA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,EAAO,QAAQ,CACf,CAKE,YAAa,CACX,KAAK,MAAM,MAAK,EAChB,KAAK,gBAAgB,MAAK,EAC1B,KAAK,WAAW,MAAK,EAGrB,KAAK,aAAe,KACpB,KAAK,kBAAoB,EAEzB,QAAQ,IAAI,sBAAsB,CACtC,CAKE,gBAAgBC,EAASU,EAAU,KAAM,CACvC,MAAMyf,EAAW,SAAS,OAAAngB,GAG1B,GAFA,KAAK,MAAM,OAAOmgB,CAAQ,EAEtBzf,EAAS,CACX,MAAM0f,EAAW,SAAS,OAAApgB,EAAO,KAAI,OAAAU,GACrC,KAAK,MAAM,OAAO0f,CAAQ,CAChC,CACA,CAKE,eAAgB,CACd,MAAO,CACL,UAAW,KAAK,MAAM,KACtB,cAAe,KAAK,cACpB,UAAW,MAAM,KAAK,KAAK,MAAM,KAAI,CAAE,CAC7C,CACA,CAKE,iBAAiBZ,EAAU,CACzB,MAAMjE,EAAS,GAEf,OAAI,CAACiE,EAAS,OAASA,EAAS,MAAM,KAAI,IAAO,KAC/CjE,EAAO,KAAK,QAAQ,GAGlB,CAACiE,EAAS,SAAWA,EAAS,QAAQ,KAAI,IAAO,KACnDjE,EAAO,KAAK,QAAQ,EAGlBiE,EAAS,OAASA,EAAS,MAAM,OAAS,KAC5CjE,EAAO,KAAK,eAAe,EAGzBiE,EAAS,SAAWA,EAAS,QAAQ,OAAS,KAChDjE,EAAO,KAAK,gBAAgB,EAG1BiE,EAAS,UAAY,CAAC,CAAC,UAAW,cAAe,YAAY,EAAE,SAASA,EAAS,QAAQ,GAC3FjE,EAAO,KAAK,0CAA0C,EAGpDiE,EAAS,MAAQ,CAAC,MAAM,QAAQA,EAAS,IAAI,GAC/CjE,EAAO,KAAK,SAAS,EAGhB,CACL,QAASA,EAAO,SAAW,EAC3B,OAAAA,CACN,CACA,CAKE,qBAAqB8E,EAAM,CACzB,MAAO,CACL,GAAGA,EACH,mBAAoB,IAAI,KAAKA,EAAK,SAAS,EAAE,eAAe,OAAO,EACnE,sBAAuB,IAAI,KAAKA,EAAK,YAAY,EAAE,eAAe,OAAO,EACzE,aAAcA,EAAK,QAAQ,OAAS,IAClCA,EAAK,QAAQ,UAAU,EAAG,GAAG,EAAI,MACjCA,EAAK,QACP,SAAUA,EAAK,KAAK,KAAK,IAAI,CACnC,CACA,CAKE,SAAU,CACR,KAAK,WAAU,EACf,KAAK,cAAgB,GAGjB,KAAK,cACP,cAAc,KAAK,YAAY,EAGjC,QAAQ,IAAI,kBAAkB,CAClC,CAKE,kBAAmB,CAEjB,KAAK,aAAe,YAAY,IAAM,CACpC,KAAK,oBAAmB,CAC9B,EAAO,GAAK,GAAK,GAAI,CACrB,CAKE,eAAeC,EAAK,CAClB,MAAMC,EAAY,KAAK,gBAAgB,IAAID,CAAG,EAC9C,OAAKC,EACE,KAAK,IAAG,EAAKA,EAAY,KAAK,gBADd,EAE3B,CAKE,SAASD,EAAKve,EAAM,CAClB,KAAK,MAAM,IAAIue,EAAKve,CAAI,EACxB,KAAK,gBAAgB,IAAIue,EAAK,KAAK,IAAG,CAAE,CAC5C,CAKE,MAAM,yBAAyBA,EAAKE,EAAW,CAE7C,GAAI,KAAK,aAAa,IAAIF,CAAG,EAC3B,OAAO,KAAK,aAAa,IAAIA,CAAG,EAIlC,MAAMG,EAAiBD,EAAS,EAChC,KAAK,aAAa,IAAIF,EAAKG,CAAc,EAEzC,GAAI,CACF,MAAM1gB,EAAS,MAAM0gB,EACrB,YAAK,aAAa,OAAOH,CAAG,EACrBvgB,CACb,OAAaV,EAAO,CACd,WAAK,aAAa,OAAOihB,CAAG,EACtBjhB,CACZ,CACA,CAKE,MAAM,aAAaW,EAASU,EAAU,KAAM,CAC1C,MAAMggB,EAAWhgB,EAAU,SAAS,OAAAV,EAAO,KAAI,OAAAU,GAAY,SAAS,OAAAV,GAGpE,GAAI,KAAK,WAAW,IAAI0gB,CAAQ,EAC9B,OAAO,KAAK,WAAW,IAAIA,CAAQ,EAIrC,MAAMjB,EAAW/e,EAAU,SAAS,OAAAV,EAAO,KAAI,OAAAU,GAAY,SAAS,OAAAV,GACpE,GAAI,KAAK,MAAM,IAAIyf,CAAQ,GAAK,CAAC,KAAK,eAAeA,CAAQ,EAAG,CAE9D,MAAMla,EADQ,KAAK,MAAM,IAAIka,CAAQ,EACjB,OACpB,YAAK,WAAW,IAAIiB,EAAUnb,CAAK,EAC5BA,CACb,CAGI,YAAK,eAAevF,EAASU,CAAO,EAC7B,CACX,CAKE,MAAM,eAAeV,EAASU,EAAU,KAAM,CAC5C,GAAI,CACEA,EACF,MAAM,KAAK,cAAcV,EAASU,CAAO,EAEzC,MAAM,KAAK,cAAcV,CAAO,CAExC,OAAaX,EAAO,CACd,QAAQ,KAAK,YAAaA,CAAK,CACrC,CACA,CAKE,MAAM,aAAaW,EAAS8D,EAAW,GAAI,CACzC,MAAM6c,EAAW,GAGjBA,EAAS,KAAK,KAAK,eAAe3gB,CAAO,CAAC,EAG1C8D,EAAS,QAAQpD,GAAW,CAC1BigB,EAAS,KAAK,KAAK,eAAe3gB,EAASU,CAAO,CAAC,CACzD,CAAK,EAED,GAAI,CACF,MAAM,QAAQ,WAAWigB,CAAQ,EACjC,QAAQ,IAAI,aAAa,OAAA3gB,EAAO,OAAM,OAAA8D,EAAS,OAAM,UAAS,CACpE,OAAazE,EAAO,CACd,QAAQ,KAAK,WAAYA,CAAK,CACpC,CACA,CAKE,MAAM,mBAAoB,CAMxB,OALA,QAAQ,IAAI,+BAA+B,EAE3C,MAAM,KAAK,iBAAgB,EAGvB,KAAK,cAAgB,CAAC,KAAK,kBAAiB,GAC9C,QAAQ,IAAI,2BAA2B,EACvC,KAAK,mBAAmB,YACjB,KAAK,cAGP,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAMuH,EAAY,YAAY,IAAG,EAC3B9F,EAAM,GAAG,YAAK,YAAY,QAAO,eACvC,QAAQ,IAAI,+BAA+B,OAAAA,EAAK,EAEhD,GAAI,CACF,MAAM1B,EAAW,MAAM,MAAM0B,EAAK,CAChC,QAAS,CACP,gBAAiB,UAC7B,CACA,CAAS,EAGD,GAFA,KAAK,mBAAmB,mBAEpB,CAAC1B,EAAS,GAAI,CAChB,GAAIA,EAAS,SAAW,IACtB,eAAQ,KAAK,oCAAoC,EAC1C,KAET,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,CAC3E,CAEQ,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAGlC,GAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKwH,EAEvD7G,EAAO,QAAS,CAElB,KAAK,aAAe,CAClB,WAAYA,EAAO,KAAK,YAAc,GACtC,WAAYA,EAAO,KAAK,YAAc,GACtC,WAAYA,EAAO,KAAK,YAAc,EAClD,EACU,KAAK,kBAAoB,KAAK,IAAG,EAGjC,KAAK,8BAA6B,EAElC,MAAM6gB,EAAa,OAAO,KAAK,KAAK,aAAa,UAAU,EAAE,OACvDC,EAAa,OAAO,KAAK,KAAK,aAAa,UAAU,EAAE,OAC7D,eAAQ,IAAI,6BAA6B,OAAAD,EAAU,UAAS,OAAAC,EAAU,OAAM,EAErE,KAAK,YACtB,CAEQ,MAAM,IAAI,MAAM9gB,EAAO,OAAS,YAAY,CACpD,OAAe6f,EAAY,CAGnB,MAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKhZ,EAEvDgZ,EAAW,OAAS,aAAeA,EAAW,QAAQ,SAAS,OAAO,EAClE,IAAI,MAAM,sBAAsB,OAAA9e,EAAG,IAAG,EAExC8e,CACd,CACA,EAAO,UAAU,CACjB,CAKE,mBAAoB,CAClB,OAAK,KAAK,kBACH,KAAK,IAAG,EAAK,KAAK,kBAAoB,KAAK,gBADd,EAExC,CAKE,+BAAgC,CAC9B,GAAK,KAAK,aAGV,UAAW,CAAC5f,EAAS8gB,CAAK,IAAK,OAAO,QAAQ,KAAK,aAAa,UAAU,EAAG,CAC3E,MAAMrB,EAAW,SAAS,OAAAzf,GAC1B,KAAK,SAASyf,EAAUqB,CAAK,CACnC,CAGI,SAAW,CAACpgB,EAASogB,CAAK,IAAK,OAAO,QAAQ,KAAK,aAAa,UAAU,EAAG,CAE3E,MAAM9gB,EAAUU,EAAQ,MAAM,GAAG,EAAE,CAAC,EAC9B+e,EAAW,SAAS,OAAAzf,EAAO,KAAI,OAAAU,GACrC,KAAK,SAAS+e,EAAUqB,CAAK,CACnC,EACA,CAKE,MAAM,mBAAoB,CACxB,QAAQ,IAAI,2BAA2B,EAEvC,GAAI,CACF,MAAMna,EAAW,MAAM,KAAK,kBAAiB,EAE7C,GAAI,CAACA,EACH,eAAQ,KAAK,gCAAgC,EACtC,KAGT,MAAMlD,EAAQ,GAGd,SAAW,CAACzD,EAAS0f,CAAU,IAAK,OAAO,QAAQ/Y,EAAS,UAAU,EAAG,CACvE,MAAMoa,EAAkBrB,EAAW,OACnC,IAAIsB,EAAkB,EAGtB,SAAW,CAACtgB,EAASmf,CAAU,IAAK,OAAO,QAAQlZ,EAAS,UAAU,EAChEjG,EAAQ,WAAWV,EAAU,GAAG,IAClCghB,GAAmBnB,EAAW,QAIlCpc,EAAMzD,CAAO,EAAI,CACf,WAAY+gB,EACZ,WAAYC,EACZ,MAAOD,EAAkBC,CACnC,CACA,CAEM,eAAQ,IAAI,yBAAyB,cAAO,KAAKvd,CAAK,EAAE,OAAM,OAAM,EAC7DA,CACb,OAAapE,EAAO,CACd,eAAQ,MAAM,4BAA6BA,CAAK,EACzC,IACb,CACA,CAKE,uBAAwB,CACtB,MAAO,CACL,GAAG,KAAK,mBACR,UAAW,KAAK,MAAM,KACtB,YAAa,CAAC,CAAC,KAAK,aACpB,YAAa,KAAK,kBAAoB,KAAK,MAAQ,KAAK,kBAAoB,KAC5E,mBAAoB,KAAK,mBAAmB,aAAe,EACvD,KAAK,mBAAmB,YAAc,KAAK,mBAAmB,aAC9D,CACV,CACA,CAKE,yBAA0B,CACxB,KAAK,mBAAqB,CACxB,aAAc,EACd,iBAAkB,EAClB,UAAW,EACX,YAAa,CACnB,CACA,CAKE,MAAM,iBAAkB,CACtB,eAAQ,IAAI,2BAA2B,EACvC,KAAK,aAAe,KACpB,KAAK,kBAAoB,EAClB,MAAM,KAAK,kBAAiB,CACvC,CAKE,qBAAsB,CACpB,MAAMQ,EAAM,KAAK,IAAG,EACdohB,EAAc,GAEpB,SAAW,CAACX,EAAKC,CAAS,IAAK,KAAK,gBAC9B1gB,EAAM0gB,EAAY,KAAK,iBACzBU,EAAY,KAAKX,CAAG,EAIxBW,EAAY,QAAQX,GAAO,CACzB,KAAK,MAAM,OAAOA,CAAG,EACrB,KAAK,gBAAgB,OAAOA,CAAG,CACrC,CAAK,EAGG,KAAK,sBACP,KAAK,aAAe,KACpB,KAAK,kBAAoB,GAGvBW,EAAY,OAAS,GACvB,QAAQ,IAAI,OAAO,OAAAA,EAAY,OAAM,SAAQ,CAEnD,CACA,CCv3BO,MAAMC,EAAO,CAClB,YAAYC,EAAa,CACvB,KAAK,YAAcA,EACnB,KAAK,eAAiB,KACtB,KAAK,eAAiB,KACtB,KAAK,YAAc,KACnB,KAAK,WAAa,GAElB,KAAK,aAAY,CACrB,CAKE,cAAe,CAEb,WAAW,IAAM,CACf,KAAK,gBAAe,EACpB,KAAK,oBAAmB,EACxB,KAAK,oBAAmB,EACxB,KAAK,kBAAiB,EACtB,KAAK,iBAAgB,EACrB,QAAQ,IAAI,kEAAkE,EAG9E,WAAW,IAAM,CACf,KAAK,yBAAwB,CACrC,EAAS,GAAG,EAGN,WAAW,IAAM,CACf,QAAQ,IAAI,qDAAqD,EACjE,KAAK,yBAAwB,CACrC,EAAS,GAAI,CACb,EAAO,GAAG,CACV,CAKE,iBAAkB,CAChB,QAAQ,IAAI,8BAA8B,EAC1C,MAAMC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,GAAK,aACXA,EAAM,UAAY,QAClBA,EAAM,MAAM,QAAU,OACtBA,EAAM,UAAY,8yFA+DlB,SAAS,KAAK,YAAYA,CAAK,EAC/B,QAAQ,IAAI,+CAA+C,CAC/D,CAKE,qBAAsB,CACpB,QAAQ,IAAI,mCAAmC,EAC/C,MAAMA,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,GAAK,kBACXA,EAAM,UAAY,QAClBA,EAAM,MAAM,QAAU,OACtBA,EAAM,UAAY,uwCA+BlB,SAAS,KAAK,YAAYA,CAAK,EAC/B,QAAQ,IAAI,oDAAoD,CACpE,CAKE,mBAAoB,CAClB,KAAK,sBAAqB,EAC1B,KAAK,sBAAqB,CAE9B,CAKE,uBAAwB,CAEtB,MAAMC,EAAiB,SAAS,cAAc,kBAAkB,EAChE,GAAI,CAACA,EAAgB,CACnB,QAAQ,KAAK,iEAAiE,EAC9E,KAAK,iCAAgC,EACrC,MACN,CAGI,MAAMC,EAAc,SAAS,eAAe,gBAAgB,EACxDA,GACFA,EAAY,OAAM,EAIpB,IAAIC,EAAgBF,EAAe,cAAc,sBAAsB,EAClEE,IACHA,EAAgB,SAAS,cAAc,KAAK,EAC5CA,EAAc,UAAY,sBAC1BA,EAAc,MAAM,QAAU,sHAK9BF,EAAe,YAAYE,CAAa,GAI1C,MAAMC,EAAU,SAAS,cAAc,QAAQ,EAC/CA,EAAQ,GAAK,iBACbA,EAAQ,UAAY,8BACpBA,EAAQ,UAAY,gFACpBA,EAAQ,MAAQ,0BAChBA,EAAQ,MAAM,QAAU,yGAMxBD,EAAc,YAAYC,CAAO,EAEjC,QAAQ,IAAI,mEAAmE,CACnF,CAKE,kCAAmC,CACjC,MAAMxL,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,uBACtBA,EAAU,MAAM,QAAU,mQAW1B,SAAS,KAAK,YAAYA,CAAS,EAEnC,MAAMwL,EAAU,SAAS,cAAc,QAAQ,EAC/CA,EAAQ,GAAK,iBACbA,EAAQ,UAAY,+BACpBA,EAAQ,UAAY,iBACpBA,EAAQ,MAAQ,0BAChBA,EAAQ,MAAM,QAAU,OACxBxL,EAAU,YAAYwL,CAAO,CACjC,CAKE,uBAAwB,CACtB,QAAQ,IAAI,sCAAsC,EAGlD,MAAMC,EAAqB,SAAS,cAAc,sBAAsB,EACxE,GAAI,CAACA,EAAoB,CACvB,QAAQ,KAAK,qEAAqE,EAClF,KAAK,iCAAgC,EACrC,MACN,CAGI,MAAMH,EAAc,SAAS,eAAe,gBAAgB,EACxDA,GACFA,EAAY,OAAM,EAIpB,MAAME,EAAU,SAAS,cAAc,QAAQ,EAC/CA,EAAQ,GAAK,iBACbA,EAAQ,UAAY,eACpBA,EAAQ,UAAY,mEACpBA,EAAQ,MAAQ,0BAChBA,EAAQ,MAAM,QAAU,0TAgBxBC,EAAmB,YAAYD,CAAO,EAEtC,QAAQ,IAAI,+EAA+E,CAC/F,CAKE,kCAAmC,CACjC,MAAMxL,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,uBACtBA,EAAU,MAAM,QAAU,oQAW1B,SAAS,KAAK,YAAYA,CAAS,EAEnC,MAAMwL,EAAU,SAAS,cAAc,QAAQ,EAC/CA,EAAQ,GAAK,iBACbA,EAAQ,UAAY,+BACpBA,EAAQ,UAAY,KACpBA,EAAQ,MAAQ,0BAChBA,EAAQ,MAAM,QAAU,oFAKxBxL,EAAU,YAAYwL,CAAO,CACjC,CAKE,qBAAsB,CAEpB,WAAW,IAAM,CACf,KAAK,yBAAwB,EAC7B,KAAK,0BAAyB,EAC9B,KAAK,yBAAwB,CAEnC,EAAO,GAAG,CACV,CAKE,0BAA2B,CAEzB,MAAME,EAAiB,SAAS,eAAe,kBAAkB,EAC7DA,GACFA,EAAe,iBAAiB,QAAS,IAAM,CAC7C,KAAK,eAAc,CAC3B,CAAO,EAGH,MAAMC,EAAgB,SAAS,eAAe,iBAAiB,EAC3DA,GACFA,EAAc,iBAAiB,QAAS,IAAM,CAC5C,KAAK,eAAc,CAC3B,CAAO,EAGH,MAAMC,EAAc,SAAS,eAAe,eAAe,EACvDA,GACFA,EAAY,iBAAiB,QAAS,IAAM,CAC1C,KAAK,SAAQ,CACrB,CAAO,EAIH,MAAMC,EAAqB,SAAS,eAAe,uBAAuB,EACtEA,GACFA,EAAmB,iBAAiB,QAAS,IAAM,CACjD,KAAK,mBAAkB,CAC/B,CAAO,EAGH,MAAMC,EAAa,SAAS,eAAe,cAAc,EACrDA,GACFA,EAAW,iBAAiB,QAAS,IAAM,CACzC,KAAK,mBAAkB,EACvB,KAAK,cAAa,CAC1B,CAAO,EAGH,MAAMC,EAAgB,SAAS,eAAe,iBAAiB,EAC3DA,GACFA,EAAc,iBAAiB,QAAS,IAAM,CAC5C,KAAK,YAAW,CACxB,CAAO,EAGH,MAAMC,EAAa,SAAS,eAAe,aAAa,EACpDA,GACFA,EAAW,iBAAiB,WAAazW,GAAM,CACzCA,EAAE,MAAQ,SACZ,KAAK,YAAW,CAE1B,CAAO,EAIH,SAAS,iBAAiB,QAAUA,GAAM,CACpCA,EAAE,OAAO,KAAO,cAClB,KAAK,eAAc,EAEjBA,EAAE,OAAO,KAAO,mBAClB,KAAK,mBAAkB,CAE/B,CAAK,CACL,CAKE,2BAA4B,CAE1B,MAAM0W,EAAe,SAAS,eAAe,gBAAgB,EACzDA,GACF,QAAQ,IAAI,mDAAmD,EAC/DA,EAAa,iBAAiB,QAAUlY,GAAU,CAChD,QAAQ,IAAI,qCAAqC,EACjDA,EAAM,eAAc,EACpB,KAAK,eAAc,CAC3B,CAAO,GAED,QAAQ,KAAK,uCAAuC,EAItD,MAAMmY,EAAe,SAAS,eAAe,gBAAgB,EACzDA,GACF,QAAQ,IAAI,mDAAmD,EAC/DA,EAAa,iBAAiB,QAAUnY,GAAU,CAChD,QAAQ,IAAI,qCAAqC,EACjDA,EAAM,eAAc,EACpB,KAAK,eAAc,CAC3B,CAAO,GAED,QAAQ,KAAK,uCAAuC,CAE1D,CAKE,0BAA2B,CAEzB,MAAMoY,EAAY,SAAS,eAAe,YAAY,EAClDA,GACFA,EAAU,iBAAiB,QAAS,IAAM,CACxC,KAAK,kBAAkB,aAAc,mBAAoB,GAAG,CACpE,CAAO,EAGH,MAAMC,EAAc,SAAS,eAAe,cAAc,EACtDA,GACFA,EAAY,iBAAiB,QAAS,IAAM,CAC1C,KAAK,kBAAkB,eAAgB,qBAAsB,GAAI,CACzE,CAAO,CAEP,CAKE,MAAM,gBAAiB,CAErB,GADA,QAAQ,IAAI,gCAAgC,EACxC,CAAC,KAAK,eAAgB,CACxB,QAAQ,KAAK,qDAAqD,EAClE,KAAK,cAAc,wBAAyB,0CAA0C,EACtF,MACN,CAGI,KAAK,eAAiB,KACtB,QAAQ,IAAI,gEAAgE,EAE5E,SAAS,eAAe,uBAAuB,EAAE,YAAc,iBAAiB,YAAK,gBAErF,MAAMhB,EAAQ,SAAS,eAAe,iBAAiB,EACnDA,IACF,QAAQ,IAAI,oCAAoC,EAChDA,EAAM,MAAM,QAAU,QAGxB,GAAI,CACF,MAAM,KAAK,aAAY,CAC7B,OAAa/hB,EAAO,CACd,QAAQ,MAAM,uCAAwCA,CAAK,EAC3D,KAAK,cAAc,uBAAwBA,EAAM,OAAO,CAC9D,CACA,CAKE,MAAM,gBAAiB,WACrB,QAAQ,IAAI,gCAAgC,EAC5C,QAAQ,IAAI,qCAAqC,YAAK,eAAc,eAAc,YAAK,eAAgB,EAGvG,MAAMgjB,GAAiBzhB,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SAC7C0hB,GAAkB9gB,EAAA6gB,GAAA,YAAAA,EAAgB,eAAhB,YAAA7gB,EAA8B,GAChD+gB,GAAkBpgB,EAAAkgB,GAAA,YAAAA,EAAgB,eAAhB,YAAAlgB,EAA8B,GAEtD,QAAQ,IAAI,sCAAsC,OAAAmgB,EAAe,eAAc,OAAAC,EAAiB,EAEhG,MAAMC,EAAmB,KAAK,gBAAkBF,EAC1CG,EAAmB,KAAK,gBAAkBF,EAEhD,GAAI,CAACC,GAAoB,CAACC,EAAkB,CAC1C,QAAQ,KAAK,8DAA8D,EAC3E,KAAK,cAAc,gCAAiC,6DAA6D,EACjH,MACN,CAGQ,CAAC,KAAK,gBAAkBH,IAC1B,KAAK,eAAiBA,GAEpB,CAAC,KAAK,gBAAkBC,IAC1B,KAAK,eAAiBA,GAGxB,SAAS,eAAe,uBAAuB,EAAE,YAAc,iBAAiB,OAAAE,GAEhF,MAAMrB,EAAQ,SAAS,eAAe,iBAAiB,EACnDA,IACF,QAAQ,IAAI,oCAAoC,EAChDA,EAAM,MAAM,QAAU,QAGxB,GAAI,CACF,MAAM,KAAK,aAAY,CAC7B,OAAa/hB,EAAO,CACd,QAAQ,MAAM,uCAAwCA,CAAK,EAC3D,KAAK,cAAc,uBAAwBA,EAAM,OAAO,CAC9D,CACA,CAKE,MAAM,cAAe,CACnB,MAAMqjB,EAAgB,SAAS,eAAe,mBAAmB,EACjEA,EAAc,UAAY,gDAE1B,GAAI,CACF,IAAI5B,EACA,KAAK,gBAEPA,EAAQ,MAAM,KAAK,YAAY,cAAc,KAAK,eAAgB,KAAK,cAAc,EACrF,QAAQ,IAAI,mBAAmB,OAAAA,EAAM,OAAM,qBAAoB,YAAK,eAAgB,IAIpF,QAAQ,IAAI,+CAA+C,YAAK,eAAgB,EAChFA,EAAQ,MAAM,KAAK,YAAY,cAAc,KAAK,cAAc,EAChE,QAAQ,IAAI,6BAA6B,OAAAA,EAAM,OAAM,0BAAyB,YAAK,eAAgB,GAGrG,KAAK,eAAeA,CAAK,EACzB,QAAQ,IAAI,iCAAiC,OAAAA,EAAM,OAAM,SAAQ,CACvE,OAAazhB,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChDqjB,EAAc,UAAY,8CAA8C,OAAArjB,EAAM,QAAO,SAC3F,CACA,CAKE,eAAeyhB,EAAO,CACpB,MAAM4B,EAAgB,SAAS,eAAe,mBAAmB,EAEjE,GAAI,CAAC5B,GAASA,EAAM,SAAW,EAAG,CAChC4B,EAAc,UAAY,sDAC1B,MACN,CAGI,MAAMhD,EAAaoB,EAAM,OAAOT,GAAQ,CAACA,EAAK,OAAO,EAC/CR,EAAaiB,EAAM,OAAOT,GAAQA,EAAK,OAAO,EAEpD,QAAQ,IAAI,sBAAsB,OAAAX,EAAW,OAAM,qBAAoB,OAAAG,EAAW,OAAM,eAAc,EAEtG,IAAI8C,EAAO,GAGPjD,EAAW,OAAS,IACtBiD,GAAQ,yMAKe,OAAAjD,EAAW,OAAM,4FAIhC,YAAK,gBAAgBA,EAAY,OAAO,EAAC,+CAO/CG,EAAW,OAAS,IACtB8C,GAAQ,0MAKe,OAAA9C,EAAW,OAAM,4FAIhC,YAAK,gBAAgBA,EAAY,OAAO,EAAC,+CAMnD6C,EAAc,UAAYC,EAG1B,KAAK,qBAAqBD,CAAa,CAC3C,CAKE,gBAAgB5B,EAAO8B,EAAW,CAChC,OAAO9B,EAAM,IAAIT,GAAQ,CACvB,MAAMwC,EAAgB,KAAK,YAAY,qBAAqBxC,CAAI,EAGhE,IAAIyC,EAAiB,GACjBC,EAAY,GAEhB,GAAIH,IAAc,QAChBE,EAAiB,+DACRF,IAAc,QAAS,CAChCE,EAAiB,wDAEjB,MAAMxiB,EAAY+f,EAAK,QAAUA,EAAK,QAAQ,MAAM,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,EAAI,UACxE0C,EAAY,qCAAqC,YAAK,WAAWziB,CAAS,EAAC,SACnF,CAEM,MAAO,mCACmB,OAAAsiB,EAAS,yBAAwB,OAAAvC,EAAK,OAAM,qFAEvC,YAAK,WAAWwC,EAAc,KAAK,EAAC,sIAEY,OAAAxC,EAAK,OAAM,uGACZ,OAAAA,EAAK,OAAM,iHAIjF,OAAAyC,EAAc,mDACmB,OAAAzC,EAAK,SAAQ,MAAK,YAAK,gBAAgBA,EAAK,QAAQ,EAAC,sDACzD,OAAAwC,EAAc,mBAAkB,2DAC3B,YAAK,WAAWxC,EAAK,MAAM,EAAC,yCAEhE,OAAA0C,EAAS,wDAEP,YAAK,WAAWF,EAAc,YAAY,EAAC,kCAE7C,OAAAxC,EAAK,KAAK,OAAS,EAAI,wDAEnB,OAAAA,EAAK,KAAK,IAAI2C,GAAO,qBAAqB,YAAK,WAAWA,CAAG,EAAC,UAAS,EAAE,KAAK,EAAE,EAAC,oCAEnF,GAAE,2BAGhB,CAAK,EAAE,KAAK,EAAE,CACd,CAKE,qBAAqBhN,EAAW,CAC9BA,EAAU,iBAAiB,gBAAgB,EAAE,QAAQiN,GAAO,CAC1DA,EAAI,iBAAiB,QAAU1X,GAAM,CACnC,MAAMuU,EAASvU,EAAE,OAAO,QAAQ,OAChC,KAAK,SAASuU,CAAM,CAC5B,CAAO,CACP,CAAK,EAED9J,EAAU,iBAAiB,kBAAkB,EAAE,QAAQiN,GAAO,CAC5DA,EAAI,iBAAiB,QAAU1X,GAAM,CACnC,MAAMuU,EAASvU,EAAE,OAAO,QAAQ,OAChC,KAAK,WAAWuU,CAAM,CAC9B,CAAO,CACP,CAAK,CACL,CAKE,kBAAmB,CACjB,MAAMoD,EAAU,yBAChB,GAAI,SAAS,eAAeA,CAAO,EAAG,OAEtC,MAAM9Q,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK8Q,EACX9Q,EAAM,YAAc,gjFAsHpB,SAAS,KAAK,YAAYA,CAAK,EAC/B,QAAQ,IAAI,2DAA2D,CAC3E,CAKE,cAAciO,EAAO,KAAM,CACzB,QAAQ,IAAI,uCAAwCA,CAAI,EACxD,KAAK,YAAcA,EACnB,KAAK,WAAa,CAAC,CAACA,EAEpB,MAAMe,EAAQ,SAAS,eAAe,YAAY,EAC5CnF,EAAQ,SAAS,eAAe,kBAAkB,EAClDkH,EAA2B,SAAS,eAAe,4BAA4B,EAErF,GAAI,CAAC/B,GAAS,CAACnF,EAAO,CACpB,QAAQ,MAAM,wCAAwC,EACtD,MACN,CAEIA,EAAM,YAAc,KAAK,WAAa,YAAc,WAGpD,MAAMmH,EAAiB,CAAC,KAAK,YAAc,KAAK,eAChD,GAAID,EAA0B,CAC5BA,EAAyB,MAAM,QAAUC,EAAiB,QAAU,OAEpE,MAAMC,EAAW,SAAS,eAAe,2BAA2B,EAChEA,IACFA,EAAS,QAAU,GAE3B,CAEQhD,GACF,SAAS,eAAe,YAAY,EAAE,MAAQA,EAAK,MACnD,SAAS,eAAe,WAAW,EAAE,MAAQA,EAAK,SAClD,SAAS,eAAe,cAAc,EAAE,MAAQA,EAAK,QACrD,SAAS,eAAe,WAAW,EAAE,MAAQA,EAAK,KAAK,KAAK,IAAI,EAChE,SAAS,eAAe,aAAa,EAAE,MAAQA,EAAK,SAEpD,SAAS,eAAe,YAAY,EAAE,MAAQ,GAC9C,SAAS,eAAe,WAAW,EAAE,MAAQ,UAC7C,SAAS,eAAe,cAAc,EAAE,MAAQ,GAChD,SAAS,eAAe,WAAW,EAAE,MAAQ,GAC7C,SAAS,eAAe,aAAa,EAAE,MAAQ,QAGjD,KAAK,kBAAkB,aAAc,mBAAoB,GAAG,EAC5D,KAAK,kBAAkB,eAAgB,qBAAsB,GAAI,EAEjE,QAAQ,IAAI,kCAAkC,EAC9Ce,EAAM,MAAM,QAAU,OAEtB,MAAMkC,EAAa,SAAS,eAAe,YAAY,EACnDA,GACFA,EAAW,MAAK,CAEtB,CAKE,gBAAiB,CACf,SAAS,eAAe,YAAY,EAAE,MAAM,QAAU,OACtD,KAAK,YAAc,KACnB,KAAK,WAAa,EACtB,CAKE,oBAAqB,CACnB,SAAS,eAAe,iBAAiB,EAAE,MAAM,QAAU,MAC/D,CAKE,MAAM,oBAAoBtjB,EAASiI,EAAgB,SACjD,GAAI,CACF,QAAQ,IAAI,2CAA2C,OAAAjI,EAAO,eAAc,OAAAiI,EAAgB,EAG5F,MAAMwD,GAAmB7K,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBACrD,GAAI,CAAC6K,EACH,MAAM,IAAI,MAAM,gCAAgC,EAIlD,MAAM+P,GAAeha,EAAAiK,EAAiB,SAAjB,YAAAjK,EAAyB,IAAIxB,GAClD,GAAI,CAACwb,GAAgB,CAACA,EAAa,kBACjC,MAAM,IAAI,MAAM,uCAAuC,EAIzD,MAAMpb,EAAS,MAAMqL,EAAiB,eAAezL,EAASwb,EAAa,iBAAiB,EAC5F,GAAI,CAACpb,GAAUA,EAAO,SAAW,EAC/B,MAAO,GAIT,MAAM2E,EAAoB3E,EAAO,UAAUuE,GAAOA,EAAI,KAAOsD,CAAc,EAC3E,GAAIlD,IAAsB,GACxB,MAAM,IAAI,MAAM,yCAAyC,EAI3D,MAAMwe,EAAcnjB,EAAO,MAAM2E,EAAoB,CAAC,EAEtD,eAAQ,IAAI,kBAAkB,OAAAwe,EAAY,OAAM,+CAA8C,EACvFA,CAEb,OAAalkB,EAAO,CACd,eAAQ,MAAM,6CAA8CA,CAAK,EAC1D,EACb,CACA,CAKE,MAAM,0BAA0BW,EAASwf,EAAUgE,EAAc,CAC/D,MAAMC,EAAU,CACd,QAAS,GACT,OAAQ,EACd,EAEI,QAAQ,IAAI,6BAA6B,OAAAD,EAAa,OAAM,mCAAkC,EAE9F,UAAWpc,KAASoc,EAClB,GAAI,CACF,MAAM,KAAK,YAAY,aAAaxjB,EAASoH,EAAM,GAAIoY,CAAQ,EAC/DiE,EAAQ,QAAQ,KAAKrc,EAAM,EAAE,EAC7B,QAAQ,IAAI,yCAAyC,OAAAA,EAAM,GAAI,CACvE,OAAe/H,EAAO,CACd,QAAQ,MAAM,oCAAoC,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EACpEokB,EAAQ,OAAO,KAAK,CAAE,QAASrc,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACvE,CAGI,eAAQ,IAAI,4CAA4C,OAAAokB,EAAQ,QAAQ,OAAM,cAAa,OAAAA,EAAQ,OAAO,OAAM,UAAS,EAClHA,CACX,CAKE,MAAM,UAAW,CACf,MAAMxH,EAAQ,SAAS,eAAe,YAAY,EAAE,MAAM,KAAI,EACxDpZ,EAAU,SAAS,eAAe,cAAc,EAAE,MAAM,KAAI,EAC5D6gB,EAAW,SAAS,eAAe,WAAW,EAAE,MAChDC,EAAO,SAAS,eAAe,WAAW,EAAE,MAAM,MAAM,GAAG,EAAE,IAAIX,GAAOA,EAAI,KAAI,CAAE,EAAE,OAAOA,GAAOA,CAAG,EACrGY,EAAS,SAAS,eAAe,aAAa,EAAE,MAAM,KAAI,EAG1DC,EAA8B,SAAS,eAAe,2BAA2B,EACjFC,EAA4BD,GAA+BA,EAA4B,QAEvFrE,EAAW,CACf,MAAAvD,EACA,QAAApZ,EACA,SAAA6gB,EACA,KAAAC,EACA,OAAAC,CACN,EAEU9I,EAAa,KAAK,YAAY,iBAAiB0E,CAAQ,EAC7D,GAAI,CAAC1E,EAAW,QAAS,CACvB,MAAM,kBAAoBA,EAAW,OAAO,KAAK,KAAK,CAAC,EACvD,MACN,CAEI,GAAI,CACF,GAAI,KAAK,YAAc,KAAK,YAC1B,QAAQ,IAAI,2BAA2B,YAAK,YAAY,OAAQ,EAChE,MAAM,KAAK,YAAY,WAAW,KAAK,YAAY,OAAQ0E,CAAQ,EACnE,QAAQ,IAAI,oCAAoC,MAC3C,CAEL,GADA,QAAQ,IAAI,+BAA+B,EACvC,KAAK,gBAOP,GANA,QAAQ,IAAI,oCAAoC,YAAK,eAAc,KAAI,YAAK,eAAgB,EAG5F,MAAM,KAAK,YAAY,aAAa,KAAK,eAAgB,KAAK,eAAgBA,CAAQ,EAGlFsE,EAA2B,CAC7B,QAAQ,IAAI,sEAAsE,EAElF,MAAMP,EAAc,MAAM,KAAK,oBAAoB,KAAK,eAAgB,KAAK,cAAc,EAC3F,GAAIA,EAAY,OAAS,EAAG,CAC1B,QAAQ,IAAI,6BAA6B,OAAAA,EAAY,OAAM,sBAAqB,EAChF,MAAMQ,EAAqB,MAAM,KAAK,0BAA0B,KAAK,eAAgBvE,EAAU+D,CAAW,EAGtGQ,EAAmB,QAAQ,OAAS,GACtC,QAAQ,IAAI,6CAA6C,OAAAA,EAAmB,QAAQ,OAAM,kBAAiB,EAEzGA,EAAmB,OAAO,OAAS,GACrC,QAAQ,KAAK,kDAAkD,OAAAA,EAAmB,OAAO,OAAM,iBAAgB,CAE/H,MACc,QAAQ,IAAI,+DAA+D,CAEzF,OAGU,QAAQ,IAAI,oCAAoC,YAAK,eAAgB,EACrE,MAAM,KAAK,YAAY,aAAa,KAAK,eAAgBvE,CAAQ,EAEnE,QAAQ,IAAI,oCAAoC,CACxD,CAeM,GAbA,KAAK,eAAc,EAGnB,MAAM,IAAI,QAAQ5f,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,QAAQ,IAAI,qEAAqE,EAC7E,KAAK,YAAY,aACnB,KAAK,YAAY,WAAU,EAC3B,QAAQ,IAAI,gDAAgD,GAI1D,KAAK,YAAY,gBACnB,GAAI,CACF,MAAM,KAAK,YAAY,gBAAe,EACtC,QAAQ,IAAI,4DAA4D,CAClF,OAAiBuX,EAAc,CACrB,QAAQ,KAAK,2DAA4DA,CAAY,CAC/F,CAIM,MAAM6M,EAAY,SAAS,eAAe,iBAAiB,EAQ3D,GAPIA,GAAaA,EAAU,MAAM,UAAY,SAC3C,QAAQ,IAAI,wDAAwD,EACpE,MAAM,KAAK,aAAY,EACvB,QAAQ,IAAI,8CAA8C,GAIxD,KAAK,eAAgB,CAcvB,GAbA,QAAQ,IAAI,8BAA8B,EAG1C,QAAQ,IAAI,6DAA6D,EAGzE,MAAM,IAAI,QAAQpkB,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,MAAM,KAAK,qBAAqB,KAAK,cAAc,EACnD,MAAM,KAAK,sBAAsB,KAAK,cAAc,EAGhD,KAAK,iBAEP,MAAM,KAAK,2BAA2B,KAAK,eAAgB,KAAK,cAAc,EAE9E,MAAM,KAAK,sBAAsB,KAAK,eAAgB,KAAK,cAAc,EACzE,QAAQ,IAAI,mCAAmC,EAG3CkkB,GAA2B,CAC7B,QAAQ,IAAI,+EAA+E,EAC3F,MAAMP,EAAc,MAAM,KAAK,oBAAoB,KAAK,eAAgB,KAAK,cAAc,EAC3F,UAAWnc,KAASmc,EAClB,MAAM,KAAK,2BAA2B,KAAK,eAAgBnc,EAAM,EAAE,EAErE,QAAQ,IAAI,+BAA+B,OAAAmc,EAAY,OAAM,qBAAoB,CAC7F,CAGQ,QAAQ,IAAI,sBAAsB,CAC1C,CAEA,OAAalkB,EAAO,CACd,QAAQ,MAAM,oBAAqBA,CAAK,EACxC,MAAM,gBAAkBA,EAAM,OAAO,CAC3C,CACA,CAKE,MAAM,SAASygB,EAAQ,CACrB,GAAI,CACF,MAAMO,EAAO,MAAM,KAAK,YAAY,QAAQP,CAAM,EAC9CO,IACF,KAAK,mBAAkB,EACvB,KAAK,cAAcA,CAAI,EAE/B,OAAahhB,EAAO,CACd,QAAQ,MAAM,sBAAuBA,CAAK,EAC1C,MAAM,uBAAyBA,EAAM,OAAO,CAClD,CACA,CAKE,MAAM,WAAWygB,EAAQ,CACvB,GAAK,QAAQ,4CAA4C,EAIzD,GAAI,CAkBF,GAjBA,QAAQ,IAAI,uCAAuC,OAAAA,EAAQ,EAC3D,MAAM,KAAK,YAAY,WAAWA,CAAM,EACxC,QAAQ,IAAI,mCAAmC,EAG/C,MAAM,IAAI,QAAQlgB,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,QAAQ,IAAI,oEAAoE,EAG5E,KAAK,YAAY,aACnB,KAAK,YAAY,WAAU,EAC3B,QAAQ,IAAI,oDAAoD,GAI9D,KAAK,YAAY,gBACnB,GAAI,CACF,MAAM,KAAK,YAAY,gBAAe,EACtC,QAAQ,IAAI,wDAAwD,CAC9E,OAAiBuX,EAAc,CACrB,QAAQ,KAAK,0EAA2EA,CAAY,CAC9G,CAIM,MAAM,KAAK,aAAY,EACvB,QAAQ,IAAI,6CAA6C,EAGrD,KAAK,iBACP,QAAQ,IAAI,0EAA0E,EAGtF,MAAM,KAAK,qBAAqB,KAAK,cAAc,EACnD,MAAM,KAAK,sBAAsB,KAAK,cAAc,EAGhD,KAAK,iBAEP,MAAM,KAAK,2BAA2B,KAAK,eAAgB,KAAK,cAAc,EAE9E,MAAM,KAAK,sBAAsB,KAAK,eAAgB,KAAK,cAAc,EACzE,QAAQ,IAAI,8EAA8E,GAG5F,QAAQ,IAAI,8CAA8C,EAElE,OAAa9X,EAAO,CACd,QAAQ,MAAM,sBAAuBA,CAAK,EAG1C,IAAI4kB,EAAe,kBACf5kB,EAAM,QAAQ,SAAS,KAAK,GAAKA,EAAM,QAAQ,SAAS,KAAK,GAC/D4kB,GAAgB,8CAEhB,QAAQ,IAAI,0EAA0E,EAClF,KAAK,YAAY,YACnB,KAAK,YAAY,WAAU,EAE7B,MAAM,KAAK,aAAY,EACnB,KAAK,iBACP,MAAM,KAAK,qBAAqB,KAAK,cAAc,EAE/C,KAAK,iBACP,MAAM,KAAK,2BAA2B,KAAK,eAAgB,KAAK,cAAc,EAE9E,MAAM,KAAK,sBAAsB,KAAK,eAAgB,KAAK,cAAc,KAI7EA,GAAgB5kB,EAAM,QAGxB,MAAM4kB,CAAY,CACxB,CACA,CAKE,MAAM,aAAc,CAClB,MAAMpa,EAAQ,SAAS,eAAe,aAAa,EAAE,MAAM,KAAI,EACzDqa,EAAa,SAAS,eAAe,kBAAkB,EAAE,MAE/D,GAAI,CACF,IAAIpD,EAEA,KAAK,gBAEP,QAAQ,IAAI,sCAAsC,YAAK,eAAc,gBAAgBjX,CAAK,EAI1FiX,GAHsB,MAAM,KAAK,YAAY,cAAc,KAAK,eAAgB,KAAK,cAAc,GAG7E,OAAOT,GAAQ,CACnC,MAAM8D,EAAe,CAACta,GACpBwW,EAAK,MAAM,YAAW,EAAG,SAASxW,EAAM,aAAa,GACrDwW,EAAK,QAAQ,YAAW,EAAG,SAASxW,EAAM,aAAa,GACvDwW,EAAK,KAAK,KAAK2C,GAAOA,EAAI,YAAW,EAAG,SAASnZ,EAAM,YAAW,CAAE,CAAC,EAEjEua,EAAc,CAACF,GAAc7D,EAAK,WAAa6D,EAErD,OAAOC,GAAgBC,CACjC,CAAS,EAED,QAAQ,IAAI,+CAA+C,OAAAtD,EAAM,OAAM,SAAQ,IAI/E,QAAQ,IAAI,iDAAiD,YAAK,eAAc,gBAAgBjX,CAAK,EAIrGiX,GAHsB,MAAM,KAAK,YAAY,cAAc,KAAK,cAAc,GAGxD,OAAOT,GAAQ,CACnC,MAAM8D,EAAe,CAACta,GACpBwW,EAAK,MAAM,YAAW,EAAG,SAASxW,EAAM,aAAa,GACrDwW,EAAK,QAAQ,YAAW,EAAG,SAASxW,EAAM,aAAa,GACvDwW,EAAK,KAAK,KAAK2C,GAAOA,EAAI,YAAW,EAAG,SAASnZ,EAAM,YAAW,CAAE,CAAC,EAEjEua,EAAc,CAACF,GAAc7D,EAAK,WAAa6D,EAErD,OAAOC,GAAgBC,CACjC,CAAS,EAED,QAAQ,IAAI,+CAA+C,OAAAtD,EAAM,OAAM,4DAA2D,GAGpI,KAAK,eAAeA,CAAK,CAE/B,OAAazhB,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,EAE3C,IAAI4kB,EAAe,kBACf5kB,EAAM,QAAQ,SAAS,KAAK,EAC9B4kB,GAAgB,iDACP5kB,EAAM,QAAQ,SAAS,KAAK,EACrC4kB,GAAgB,yDAEhBA,GAAgB5kB,EAAM,QAGxB,SAAS,eAAe,mBAAmB,EAAE,UAAY,8BAA8B,OAAA4kB,EAAY,SACzG,CACA,CAKE,kBAAkBI,EAASC,EAAWC,EAAW,CAC/C,MAAMC,EAAQ,SAAS,eAAeH,CAAO,EACvCI,EAAU,SAAS,eAAeH,CAAS,EAC3CI,EAAgBF,EAAM,MAAM,OAElCC,EAAQ,YAAcC,EAElBA,EAAgBH,EAAY,GAC9BE,EAAQ,MAAM,MAAQ,UACbC,EAAgBH,EAAY,GACrCE,EAAQ,MAAM,MAAQ,UAEtBA,EAAQ,MAAM,MAAQ,MAE5B,CAKE,gBAAgBzkB,EAAS,CACvB,KAAK,eAAiBA,EAGtB,MAAMiiB,EAAe,SAAS,eAAe,gBAAgB,EACvD0C,EAAqB,SAAS,cAAc,6CAA6C,EAE3F1C,IACFA,EAAa,MAAM,QAAUjiB,EAAU,QAAU,QAG/C2kB,IACFA,EAAmB,MAAM,QAAU3kB,EAAU,QAAU,QAIrDA,GACF,KAAK,sBAAsBA,CAAO,EAClC,KAAK,qBAAqBA,CAAO,GAEjC,KAAK,sBAAsB,IAAI,CAErC,CAKE,gBAAgBU,EAAS,WACvB,QAAQ,IAAI,sCAAsC,OAAAA,EAAO,wBAAuB,YAAK,eAAgB,EACrG,KAAK,eAAiBA,EAGlBA,GAAW,KAAK,gBAEd,CAAC,KAAK,kBAAkByB,GAAAX,GAAAZ,EAAA,OAAO,sBAAP,YAAAA,EAA4B,WAA5B,YAAAY,EAAsC,eAAtC,MAAAW,EAAoD,MAC9E,KAAK,eAAiB,OAAO,oBAAoB,SAAS,aAAa,GACvE,QAAQ,IAAI,qDAAqD,YAAK,eAAgB,GAIxF,KAAK,sBAAsB,KAAK,eAAgBzB,CAAO,EACvD,KAAK,0BAA0B,KAAK,eAAgBA,CAAO,IAG3D,KAAK,sBAAsB,KAAM,IAAI,EACrC,QAAQ,IAAI,wDAAwD,GAItE,MAAMwhB,EAAe,SAAS,eAAe,gBAAgB,EACvD0C,EAAqB,SAAS,cAAc,6CAA6C,EAI/F,GAFA,QAAQ,IAAI,sCAAsC,QAAC,CAAC1C,EAAY,wBAAuB,QAAC,CAAC0C,EAAoB,EAEzG1C,EAAc,CAChB,MAAM2C,EAAa,KAAK,gBAAkBnkB,EAC1C,QAAQ,IAAI,2CAA2C,OAAAmkB,EAAY,EACnE3C,EAAa,MAAM,QAAU2C,EAAa,QAAU,MAC1D,CAEI,GAAID,GAAsBA,EAAmB,UAAU,SAAS,sBAAsB,EAAG,CACvF,MAAMC,EAAa,KAAK,gBAAkBnkB,EAC1C,QAAQ,IAAI,8CAA8C,OAAAmkB,EAAY,EACtED,EAAmB,MAAM,QAAUC,EAAa,QAAU,MAChE,CACA,CAKE,MAAM,sBAAsB7kB,EAAS,CACnC,MAAM8kB,EAAwB,SAAS,eAAe,kBAAkB,EACxE,GAAKA,EAEL,IAAI,CAAC9kB,EAAS,CACZ8kB,EAAsB,YAAc,GACpC,MACN,CAEI,GAAI,CAEF,IAAI3Q,EAAa,EAGjB,MAAM4Q,EAAY,MAAM,KAAK,YAAY,kBAAiB,EAC1D,GAAIA,GAAaA,EAAU/kB,CAAO,GAMhC,GAJAmU,EAAa4Q,EAAU/kB,CAAO,EAAE,WAChC,QAAQ,IAAI,+CAA+C,OAAAmU,EAAU,oBAAmB,EAGpF,KAAK,OAAM,EAAK,GAClB,GAAI,CACF,MAAMuL,EAAa,MAAM,KAAK,YAAY,cAAc1f,CAAO,EACzDglB,EAActF,EAAaA,EAAW,OAAS,EACjDsF,IAAgB7Q,IAClB,QAAQ,KAAK,wDAAwD,OAAAA,EAAU,cAAa,OAAA6Q,EAAW,oBAAmB,EAC1H7Q,EAAa6Q,EAE3B,OAAmBC,EAAiB,CACxB,QAAQ,MAAM,sEAAuEA,CAAe,CAChH,MAEa,CAEL,QAAQ,IAAI,wDAAwD,OAAAjlB,EAAS,EAC7E,GAAI,CACF,MAAM0f,EAAa,MAAM,KAAK,YAAY,cAAc1f,CAAO,EAC/DmU,EAAauL,EAAaA,EAAW,OAAS,EAC9C,QAAQ,IAAI,+CAA+C,OAAAvL,EAAU,oBAAmB,CAClG,OAAiB+Q,EAAY,CACnB,QAAQ,KAAK,kDAAmDA,CAAU,EAC1E/Q,EAAa,CACvB,CACA,CAEUA,EAAa,GACf2Q,EAAsB,YAAc,IAAI,OAAA3Q,EAAU,KAClD2Q,EAAsB,MAAM,QAAU,oGAMtCA,EAAsB,YAAc,GAGtC,QAAQ,IAAI,uCAAuC,OAAA3Q,EAAU,+BAA8B,CACjG,OAAa9U,EAAO,CACd,QAAQ,MAAM,sCAAuCA,CAAK,EAC1DylB,EAAsB,YAAc,EAC1C,EACA,CAKE,MAAM,sBAAsB9kB,EAASU,EAAS,CAC5C,MAAMykB,EAAwB,SAAS,eAAe,kBAAkB,EACxE,GAAKA,EAEL,IAAI,CAACnlB,GAAW,CAACU,EAAS,CACxBykB,EAAsB,YAAc,GACpCA,EAAsB,MAAM,QAAU,OACtC,MACN,CAEI,GAAI,CACF,MAAMrE,EAAQ,MAAM,KAAK,YAAY,cAAc9gB,EAASU,CAAO,EAC7D6E,EAAQub,EAAQA,EAAM,OAAS,EAEjCvb,EAAQ,GACV4f,EAAsB,YAAc5f,EACpC4f,EAAsB,MAAM,QAAU,6XAgBtCA,EAAsB,YAAc,GACpCA,EAAsB,MAAM,QAAU,QAGxC,QAAQ,IAAI,uCAAuC,OAAA5f,EAAK,SAAQ,CACtE,OAAalG,EAAO,CACd,QAAQ,MAAM,sCAAuCA,CAAK,EAC1D8lB,EAAsB,YAAc,GACpCA,EAAsB,MAAM,QAAU,MAC5C,EACA,CAKE,MAAM,0BAA0BnlB,EAASU,EAAS,CAChD,GAAI,CAEF,MAAM+e,EAAW,SAAS,OAAAzf,EAAO,KAAI,OAAAU,GACjC,KAAK,YAAY,OAAS,KAAK,YAAY,MAAM,IAAI+e,CAAQ,IAC/D,KAAK,YAAY,MAAM,OAAOA,CAAQ,EACtC,QAAQ,IAAI,oCAAoC,OAAAA,EAAU,GAIxD,KAAK,YAAY,eACnB,KAAK,YAAY,aAAe,KAChC,KAAK,YAAY,kBAAoB,EACrC,QAAQ,IAAI,yDAAyD,GAInE,OAAO,oBAAuB,YAChC,MAAM,mBAAmBzf,EAASU,CAAO,EACzC,QAAQ,IAAI,+CAA+C,OAAAA,EAAS,GAEpE,QAAQ,KAAK,oDAAoD,CAEzE,OAAarB,EAAO,CACd,QAAQ,MAAM,0CAA2CA,CAAK,CACpE,CACA,CACE,MAAM,qBAAqBW,EAAS,SAClC,GAAKA,EAEL,SAAQ,IAAI,mDAAmD,OAAAA,EAAS,EAExE,GAAI,CAEF,MAAM+kB,EAAY,MAAM,KAAK,YAAY,kBAAiB,EAE1D,GAAIA,GAAaA,EAAU/kB,CAAO,EAAG,CACnC,MAAMyD,EAAQshB,EAAU/kB,CAAO,EACzBolB,EAAa3hB,EAAM,MAKzB,GAHA,QAAQ,IAAI,kBAAkB,OAAAzD,EAAO,iBAAgB,OAAAyD,EAAM,WAAU,aAAY,OAAAA,EAAM,WAAU,aAAY,OAAA2hB,EAAU,SAAQ,EAG3H,KAAK,OAAM,EAAK,IAClB,GAAI,CACF,MAAMC,EAAoB,MAAM,KAAK,YAAY,YAAY,GAAI,CAAE,QAASrlB,EAAS,EAC/EslB,EAAcD,EAAoBA,EAAkB,OAAS,EACnE,GAAIC,IAAgBF,EAClB,QAAQ,KAAK,yCAAyC,OAAAA,EAAU,cAAa,OAAAE,EAAW,2BAA0B,EAE9G,KAAK,YAAY,iBACnB,MAAM,KAAK,YAAY,gBAAe,MAGnC,CAEL,KAAK,qBAAqBtlB,EAASyD,CAAK,EACxC,MACd,CACA,OAAmBwhB,EAAiB,CACxB,QAAQ,MAAM,qDAAsDA,CAAe,EAEnF,KAAK,qBAAqBjlB,EAASyD,CAAK,EACxC,MACZ,KACe,CAEL,KAAK,qBAAqBzD,EAASyD,CAAK,EACxC,MACV,CACA,CAEM,QAAQ,IAAI,yCAAyC,OAAAzD,EAAO,wCAAuC,EAGnG,MAAM0f,EAAa,MAAM,KAAK,YAAY,cAAc1f,CAAO,EAC/D,QAAQ,IAAI,kBAAkB,OAAAA,EAAO,SAAQ,QAAA0f,GAAA,YAAAA,EAAY,SAAU,EAAC,eAAc,EAElF,IAAI6F,EAAkB,EAGlBxf,EAAc,KAClB,IAAInF,EAAA,OAAO,sBAAP,MAAAA,EAA4B,iBAC9B,GAAI,CACFmF,EAAc,MAAM,OAAO,oBAAoB,iBAAiB,eAAe/F,CAAO,CAChG,OAAiBX,EAAO,CACd,QAAQ,MAAM,mCAAmC,OAAAW,EAAO,KAAKX,EAAM,OAAO,EAE1E,MAAMmH,GAAQhF,EAAA,OAAO,oBAAoB,iBAAiB,SAA5C,YAAAA,EAAoD,KAAKgkB,GAAKA,EAAE,KAAOxlB,GACrF,GAAIwG,GAAA,MAAAA,EAAO,WAAY,CACrB,MAAMvG,EAAe,GACrB,UAAWI,KAAamG,EAAM,WAC5B,GAAI,CACF,MAAMpG,EAAS,MAAM,OAAO,oBAAoB,iBAAiB,eAAeJ,EAASK,CAAS,EAC9FD,GAAUA,EAAO,OAAS,IAC5BH,EAAaI,CAAS,EAAID,EAE5C,OAAuBqlB,EAAW,CAClB,QAAQ,MAAM,6BAA6B,OAAAzlB,EAAO,KAAI,OAAAK,EAAS,KAAKolB,EAAU,OAAO,CACrG,CAEY1f,EAAc9F,CAC1B,CACA,CAIM,GAAI8F,EAAa,CACf,MAAM2f,EAAgB,GAEtB,GAAI,MAAM,QAAQ3f,CAAW,EAE3B,UAAWqB,KAASrB,EAClB2f,EAAc,KAAK,KAAK,YAAY,cAAc1lB,EAASoH,EAAM,EAAE,CAAC,MAItE,WAAW/G,KAAa0F,EACtB,UAAWqB,KAASrB,EAAY1F,CAAS,EACvCqlB,EAAc,KAAK,KAAK,YAAY,cAAc1lB,EAASoH,EAAM,EAAE,CAAC,EAO1Eme,GAD0B,MAAM,QAAQ,WAAWG,CAAa,GAC5B,OAAO,CAACvlB,EAAOJ,IAC7CA,EAAO,SAAW,aAAeA,EAAO,OAASA,EAAO,MAAM,OAAS,EAClEI,EAAQJ,EAAO,MAAM,OAEvBI,EACN,CAAC,CACZ,CAEM,MAAMilB,IAAc1F,GAAA,YAAAA,EAAY,SAAU,GAAK6F,EAC/C,QAAQ,IAAI,kBAAkB,OAAAvlB,EAAO,kBAAiB,OAAAolB,EAAU,MAAK,QAAA1F,GAAA,YAAAA,EAAY,SAAU,EAAC,aAAY,OAAA6F,EAAe,UAAS,EAEhI,MAAMI,EAAQ,SAAS,eAAe,cAAc,OAAA3lB,EAAS,EAG7D,GAFA,QAAQ,IAAI,oCAAoC,OAAAA,EAAO,KAAK,CAAC,CAAC2lB,CAAK,EAE/DA,EACF,GAAIP,EAAa,EAAG,CAElB,MAAMrE,GAAkBrB,GAAA,YAAAA,EAAY,SAAU,EAC9C,IAAIkG,EAAY,GACZ3J,EAAQ,GAER8E,EAAkB,GAAKwE,EAAkB,GAE3CK,EAAY,MAAM,OAAA7E,EAAe,WAAU,OAAAwE,GAC3CtJ,EAAQ,GAAG,OAAA8E,EAAe,kBAAiB,OAAAwE,EAAe,iBACjDxE,EAAkB,GAE3B6E,EAAY,MAAM,OAAA7E,GAClB9E,EAAQ,GAAG,OAAA8E,EAAe,iBACjBwE,EAAkB,IAE3BK,EAAY,OAAO,OAAAL,GACnBtJ,EAAQ,GAAG,OAAAsJ,EAAe,iBAG5BI,EAAM,UAAY,4BAA4B,OAAAC,EAAS,WACvDD,EAAM,MAAM,QAAU,cACtBA,EAAM,MAAM,WAAa,UACzBA,EAAM,MAAM,QAAU,IACtBA,EAAM,MAAQ1J,EACd,QAAQ,IAAI,8BAA8B,OAAAjc,EAAO,MAAK,OAAA4lB,EAAS,gBAAe,CACxF,MACUD,EAAM,MAAM,QAAU,OACtBA,EAAM,MAAM,WAAa,SACzBA,EAAM,MAAM,QAAU,IACtB,QAAQ,IAAI,6BAA6B,OAAA3lB,EAAO,mBAAkB,OAGpE,QAAQ,MAAM,8CAA8C,OAAAA,EAAS,CAE7E,OAAaX,EAAO,CACd,QAAQ,MAAM,yCAAyC,OAAAW,EAAO,KAAKX,CAAK,CAC9E,EACA,CAKE,qBAAqBW,EAASyD,EAAO,CACnC,MAAMkiB,EAAQ,SAAS,eAAe,cAAc,OAAA3lB,EAAS,EAG7D,GAFA,QAAQ,IAAI,oCAAoC,OAAAA,EAAO,KAAK,CAAC,CAAC2lB,CAAK,EAE/DA,EAEF,GADmBliB,EAAM,MACR,EAAG,CAElB,IAAImiB,EAAY,GACZ3J,EAAQ,GAERxY,EAAM,WAAa,GAAKA,EAAM,WAAa,GAE7CmiB,EAAY,MAAM,OAAAniB,EAAM,WAAU,WAAU,OAAAA,EAAM,YAClDwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,kBAAiB,OAAAA,EAAM,WAAU,iBACnDA,EAAM,WAAa,GAE5BmiB,EAAY,MAAM,OAAAniB,EAAM,YACxBwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,iBAClBA,EAAM,WAAa,IAE5BmiB,EAAY,OAAO,OAAAniB,EAAM,YACzBwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,iBAG7BkiB,EAAM,UAAY,4BAA4B,OAAAC,EAAS,WACvDD,EAAM,MAAM,QAAU,cACtBA,EAAM,MAAM,WAAa,UACzBA,EAAM,MAAM,QAAU,IACtBA,EAAM,MAAQ1J,EACd,QAAQ,IAAI,8BAA8B,OAAAjc,EAAO,MAAK,OAAA4lB,EAAS,eAAc,CACrF,MACQD,EAAM,MAAM,QAAU,OACtBA,EAAM,MAAM,WAAa,SACzBA,EAAM,MAAM,QAAU,IACtB,QAAQ,IAAI,6BAA6B,OAAA3lB,EAAO,+BAA8B,OAGhF,QAAQ,MAAM,8CAA8C,OAAAA,EAAS,CAE3E,CAKE,MAAM,iCAAiC2G,EAAU,CAC/C,QAAQ,IAAI,mEAAmE,EAC/E,MAAMkf,EAAa,SAAS,iBAAiB,aAAa,EAG1D,GAFA,QAAQ,IAAI,kBAAkB,OAAAA,EAAW,OAAM,yBAAwB,EAEnE,CAAClf,GAAY,CAACA,EAAS,YAAc,CAACA,EAAS,WAAY,CAC7D,QAAQ,MAAM,qCAAqC,EACnD,MACN,CAEI,MAAMC,EAAY,YAAY,IAAG,EAG3Bkf,EAAa,GAGnB,SAAW,CAAC9lB,EAAS8gB,CAAK,IAAK,OAAO,QAAQna,EAAS,UAAU,EAC1Dmf,EAAW9lB,CAAO,IACrB8lB,EAAW9lB,CAAO,EAAI,CAAE,WAAY,EAAG,WAAY,EAAG,MAAO,CAAC,GAEhE8lB,EAAW9lB,CAAO,EAAE,WAAa8gB,EAAM,OACvCgF,EAAW9lB,CAAO,EAAE,OAAS8gB,EAAM,OAIrC,SAAW,CAACpgB,EAASogB,CAAK,IAAK,OAAO,QAAQna,EAAS,UAAU,EAAG,CAElE,MAAM3G,EAAUU,EAAQ,MAAM,GAAG,EAAE,CAAC,EAChCV,IACG8lB,EAAW9lB,CAAO,IACrB8lB,EAAW9lB,CAAO,EAAI,CAAE,WAAY,EAAG,WAAY,EAAG,MAAO,CAAC,GAEhE8lB,EAAW9lB,CAAO,EAAE,YAAc8gB,EAAM,OACxCgF,EAAW9lB,CAAO,EAAE,OAAS8gB,EAAM,OAE3C,CAEI,QAAQ,IAAI,sCAAsC,cAAO,KAAKgF,CAAU,EAAE,OAAM,UAAS,EAGzF,UAAW/hB,KAAQ8hB,EAAY,CAC7B,MAAM7lB,EAAU+D,EAAK,QAAQ,QAC7B,GAAI/D,GAAW8lB,EAAW9lB,CAAO,EAAG,CAClC,MAAMyD,EAAQqiB,EAAW9lB,CAAO,EAC1BolB,EAAa3hB,EAAM,MAEnBkiB,EAAQ,SAAS,eAAe,cAAc,OAAA3lB,EAAS,EAC7D,GAAI2lB,EACF,GAAIP,EAAa,EAAG,CAElB,IAAIQ,EAAY,GACZ3J,EAAQ,GAERxY,EAAM,WAAa,GAAKA,EAAM,WAAa,GAE7CmiB,EAAY,MAAM,OAAAniB,EAAM,WAAU,WAAU,OAAAA,EAAM,YAClDwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,kBAAiB,OAAAA,EAAM,WAAU,iBACnDA,EAAM,WAAa,GAE5BmiB,EAAY,MAAM,OAAAniB,EAAM,YACxBwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,iBAClBA,EAAM,WAAa,IAE5BmiB,EAAY,OAAO,OAAAniB,EAAM,YACzBwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,iBAG7BkiB,EAAM,UAAY,4BAA4B,OAAAC,EAAS,WACvDD,EAAM,MAAM,QAAU,cACtBA,EAAM,MAAM,WAAa,UACzBA,EAAM,MAAM,QAAU,IACtBA,EAAM,MAAQ1J,CAC1B,MACY0J,EAAM,MAAM,QAAU,OACtBA,EAAM,MAAM,WAAa,SACzBA,EAAM,MAAM,QAAU,GAGlC,CACA,CAEI,MAAMpe,EAAU,YAAY,IAAG,EAC/B,QAAQ,IAAI,kCAAkC,OAAAse,EAAW,OAAM,uBAAuB,QAAAte,EAAUX,GAAW,QAAQ,CAAC,EAAC,qBAAoB,EACzI,QAAQ,IAAI,oEAAoE,CACpF,CAKE,MAAM,0BAA2B,CAC/B,QAAQ,IAAI,4CAA4C,EACxD,MAAMif,EAAa,SAAS,iBAAiB,aAAa,EAC1D,QAAQ,IAAI,kBAAkB,OAAAA,EAAW,OAAM,yBAAwB,EAEvE,MAAMjf,EAAY,YAAY,IAAG,EAEjC,GAAI,CAEF,MAAMme,EAAY,MAAM,KAAK,YAAY,kBAAiB,EAE1D,GAAIA,EAAW,CACb,QAAQ,IAAI,wDAAwD,EAGpE,UAAWhhB,KAAQ8hB,EAAY,CAC7B,MAAM7lB,EAAU+D,EAAK,QAAQ,QAC7B,GAAI/D,GAAW+kB,EAAU/kB,CAAO,EAAG,CACjC,MAAMyD,EAAQshB,EAAU/kB,CAAO,EACzBolB,EAAa3hB,EAAM,MAEnBkiB,EAAQ,SAAS,eAAe,cAAc,OAAA3lB,EAAS,EAC7D,GAAI2lB,EACF,GAAIP,EAAa,EAAG,CAElB,IAAIQ,EAAY,GACZ3J,EAAQ,GAERxY,EAAM,WAAa,GAAKA,EAAM,WAAa,GAE7CmiB,EAAY,MAAM,OAAAniB,EAAM,WAAU,WAAU,OAAAA,EAAM,YAClDwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,kBAAiB,OAAAA,EAAM,WAAU,iBACnDA,EAAM,WAAa,GAE5BmiB,EAAY,MAAM,OAAAniB,EAAM,YACxBwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,iBAClBA,EAAM,WAAa,IAE5BmiB,EAAY,OAAO,OAAAniB,EAAM,YACzBwY,EAAQ,GAAG,OAAAxY,EAAM,WAAU,iBAG7BkiB,EAAM,UAAY,4BAA4B,OAAAC,EAAS,WACvDD,EAAM,MAAM,QAAU,cACtBA,EAAM,MAAM,WAAa,UACzBA,EAAM,MAAM,QAAU,IACtBA,EAAM,MAAQ1J,CAC9B,MACgB0J,EAAM,MAAM,QAAU,OACtBA,EAAM,MAAM,WAAa,SACzBA,EAAM,MAAM,QAAU,GAGtC,CACA,CAEQ,MAAMpe,EAAU,YAAY,IAAG,EACzBwe,EAAU,KAAK,YAAY,sBAAqB,EACtD,QAAQ,IAAI,kCAAkC,OAAAF,EAAW,OAAM,uBAAuB,QAAAte,EAAUX,GAAW,QAAQ,CAAC,EAAC,KAAI,EACzH,QAAQ,IAAI,yBAAyB,OAAAmf,EAAQ,iBAAgB,oBAAmB,OAAAA,EAAQ,UAAS,cAAa,EAE9G,MACR,CAEM,QAAQ,IAAI,sEAAsE,CACxF,OAAa1mB,EAAO,CACd,QAAQ,MAAM,0EAA2EA,CAAK,CACpG,CAGI,QAAQ,IAAI,kDAAkD,EAC9D,UAAW0E,KAAQ8hB,EAAY,CAC7B,MAAM7lB,EAAU+D,EAAK,QAAQ,QACzB/D,GACF,QAAQ,IAAI,sCAAsC,OAAAA,EAAS,EAC3D,MAAM,KAAK,qBAAqBA,CAAO,GAEvC,QAAQ,KAAK,mDAAmD,CAExE,CAEI,MAAMuH,EAAU,YAAY,IAAG,EACzBwe,EAAU,KAAK,YAAY,sBAAqB,EACtD,QAAQ,IAAI,wCAAwC,OAAAF,EAAW,OAAM,uBAAuB,QAAAte,EAAUX,GAAW,QAAQ,CAAC,EAAC,KAAI,EAC/H,QAAQ,IAAI,yBAAyB,OAAAmf,EAAQ,aAAY,0BAAyB,OAAAA,EAAQ,UAAS,cAAa,CACpH,CAKE,gBAAgBrC,EAAU,CAMxB,MALgB,CACd,QAAW,eACX,YAAe,qBACf,WAAc,wBACpB,EACmBA,CAAQ,GAAKA,CAChC,CAKE,WAAWsC,EAAM,CACf,MAAMC,EAAM,SAAS,cAAc,KAAK,EACxC,OAAAA,EAAI,YAAcD,EACXC,EAAI,SACf,CAKE,cAAchK,EAAO7T,EAAS,CAExB,OAAO,qBAAuB,OAAO,oBAAoB,UAC3D,OAAO,oBAAoB,UAAU6T,EAAO7T,CAAO,EAGnD,MAAM,GAAG,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,CAElC,CAKE,MAAM,2BAA2BpI,EAASU,EAAS,OACjD,GAAI,CACF,QAAQ,IAAI,iDAAiD,OAAAA,EAAS,EAGtE,MAAM,IAAI,QAAQd,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,MAAMR,EAAW,MAAM,MAAM,GAAG,YAAK,YAAY,QAAO,iBAAgB,OAAAY,EAAO,KAAI,OAAAU,EAAS,EAC5F,GAAI,CAACtB,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAC5B8mB,EAAYnmB,EAAO,WAAWa,EAAAb,EAAO,OAAP,YAAAa,EAAa,SAAU,EAGrD+kB,EAAQ,SAAS,eAAe,oBAAoB,OAAAjlB,EAAS,EAC/DilB,EACEO,EAAY,GACdP,EAAM,UAAY,qCAAqC,OAAAO,EAAS,WAChEP,EAAM,MAAM,QAAU,eACtBA,EAAM,UAAY,mBAClB,QAAQ,IAAI,6BAA6B,OAAAO,EAAS,eAAc,OAAAxlB,EAAO,gBAAe,IAEtFilB,EAAM,UAAY,GAClBA,EAAM,MAAM,QAAU,OACtB,QAAQ,IAAI,gCAAgC,OAAAjlB,EAAO,2BAA0B,GAG/E,QAAQ,MAAM,wCAAwC,OAAAA,EAAS,CAEvE,OAAarB,EAAO,CACd,QAAQ,MAAM,uDAAuD,OAAAqB,EAAO,KAAKrB,CAAK,EAGtF,GAAI,CACF,QAAQ,IAAI,qEAAqE,OAAAqB,EAAS,EACtF,OAAO,oBAAuB,YAChC,MAAM,mBAAmBV,EAASU,CAAO,EACzC,QAAQ,IAAI,mDAAmD,OAAAA,EAAS,GAExE,QAAQ,KAAK,kEAAkE,CAEzF,OAAeylB,EAAe,CACtB,QAAQ,MAAM,oDAAoD,OAAAzlB,EAAO,KAAKylB,CAAa,CACnG,CACA,CACA,CAKE,SAAU,CAEiB,CACvB,aACA,kBACA,iBACA,gBAEN,EAEqB,QAAQC,GAAM,CAC7B,MAAMC,EAAU,SAAS,eAAeD,CAAE,EACtCC,GACFA,EAAQ,OAAM,CAEtB,CAAK,EAGkB,SAAS,iBAAiB,8CAA8C,EAChF,QAAQrQ,GAAaA,EAAU,OAAM,CAAE,EAElD,QAAQ,IAAI,0BAA0B,CAC1C,CACA,CC58DO,MAAMsQ,EAAkB,CAC7B,YAAY/G,EAAuB,CACjC,KAAK,YAAcA,EACnB,KAAK,YAAc,IAAI,IACvB,KAAK,gBAAkB,IAAI,IAC3B,KAAK,cAAgB,GACrB,KAAK,gBAAkB,GAAK,GAAK,IAGjC,KAAK,mBAAqB,KAC1B,KAAK,kBAAoB,EAGzB,KAAK,mBAAqB,CACxB,aAAc,EACd,iBAAkB,EAClB,UAAW,EACX,YAAa,EACb,iBAAkB,CACxB,CACA,CAKE,MAAM,YAAa,CACjB,GAAI,CACF,aAAM,KAAK,YAAY,iBAAgB,EACvC,KAAK,cAAgB,GACrB,QAAQ,IAAI,2BAA2B,EAChC,EACb,OAAalgB,EAAO,CACd,cAAQ,MAAM,6BAA8BA,CAAK,EAC3CA,CACZ,CACA,CAKE,MAAM,kBAAmB,CAClB,KAAK,eACR,MAAM,KAAK,WAAU,EAEvB,MAAM,KAAK,YAAY,iBAAgB,CAC3C,CAKE,MAAM,yBAA0B,CAM9B,OALA,QAAQ,IAAI,qCAAqC,EAEjD,MAAM,KAAK,iBAAgB,EAGvB,KAAK,oBAAsB,CAAC,KAAK,kBAAiB,GACpD,QAAQ,IAAI,iCAAiC,EAC7C,KAAK,mBAAmB,YACjB,KAAK,oBAGP,KAAK,YAAY,UAAU,SAAY,CAC5C,MAAMuH,EAAY,YAAY,IAAG,EAE3B2f,EAAU,KAAK,YAAY,QAAQ,QAAQ,SAAU,EAAE,EACvDzlB,EAAM,GAAG,OAAAylB,EAAO,yBACtB,QAAQ,IAAI,qCAAqC,OAAAzlB,EAAK,EAEtD,GAAI,CACF,MAAM1B,EAAW,MAAM,MAAM0B,EAAK,CAChC,QAAS,CACP,gBAAiB,UAC7B,CACA,CAAS,EAGD,GAFA,KAAK,mBAAmB,mBAEpB,CAAC1B,EAAS,GAAI,CAChB,GAAIA,EAAS,SAAW,IACtB,eAAQ,KAAK,wCAAwC,EAC9C,KAET,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,CAC3E,CAEQ,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAGlC,GAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKwH,EAEvD7G,EAAO,QAAS,CAElB,KAAK,mBAAqB,CACxB,iBAAkBA,EAAO,KAAK,kBAAoB,GAClD,iBAAkBA,EAAO,KAAK,kBAAoB,GAClD,WAAYA,EAAO,KAAK,YAAc,EAClD,EACU,KAAK,kBAAoB,KAAK,IAAG,EAGjC,KAAK,8BAA6B,EAGlC,MAAM6gB,EAAa,OAAO,KAAK,KAAK,mBAAmB,gBAAgB,EAAE,OACnEC,EAAa,OAAO,KAAK,KAAK,mBAAmB,gBAAgB,EAAE,OACzE,YAAK,mBAAmB,iBAAmB,KAAK,0BAAyB,EAEzE,QAAQ,IAAI,mCAAmC,OAAAD,EAAU,UAAS,OAAAC,EAAU,UAAS,YAAK,mBAAmB,iBAAgB,QAAO,EAE7H,KAAK,kBACtB,CAEQ,MAAM,IAAI,MAAM9gB,EAAO,OAAS,YAAY,CACpD,OAAe6f,EAAY,CAGnB,MAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKhZ,EAEvDgZ,EAAW,OAAS,aAAeA,EAAW,QAAQ,SAAS,OAAO,EAClE,IAAI,MAAM,sBAAsB,OAAA9e,EAAG,IAAG,EAExC8e,CACd,CACA,EAAO,UAAU,CACjB,CAKE,MAAM,oBAAoB5f,EAAS,CACjC,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,MAAM,KAAK,iBAAgB,EAE3B,MAAMyf,EAAW,SAAS,OAAAzf,GAG1B,GAAI,KAAK,oBAAsB,CAAC,KAAK,kBAAiB,EAAI,CACxD,MAAM6E,EAAmB,KAAK,mBAAmB,iBAAiB7E,CAAO,GAAK,GAC9E,YAAK,YAAY,IAAIyf,EAAU5a,CAAgB,EAC/C,KAAK,mBAAmB,YACjBA,CACb,CAGI,OAAI,KAAK,YAAY,IAAI4a,CAAQ,GAAK,CAAC,KAAK,eAAeA,CAAQ,GACjE,KAAK,mBAAmB,YACjB,KAAK,YAAY,IAAIA,CAAQ,GAI/B,KAAK,0BAA0Bzf,CAAO,CACjD,CAKE,MAAM,oBAAoBU,EAAS,CACjC,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,UAAU,EAG5B,MAAM,KAAK,iBAAgB,EAE3B,MAAM+e,EAAW,SAAS,OAAA/e,GAG1B,GAAI,KAAK,oBAAsB,CAAC,KAAK,kBAAiB,EAAI,CACxD,MAAM2G,EAAmB,KAAK,mBAAmB,iBAAiB3G,CAAO,GAAK,GAC9E,YAAK,YAAY,IAAI+e,EAAUpY,CAAgB,EAC/C,KAAK,mBAAmB,YACjBA,CACb,CAGI,OAAI,KAAK,YAAY,IAAIoY,CAAQ,GAAK,CAAC,KAAK,eAAeA,CAAQ,GACjE,KAAK,mBAAmB,YACjB,KAAK,YAAY,IAAIA,CAAQ,GAI/B,KAAK,0BAA0B/e,CAAO,CACjD,CAKE,MAAM,yBAA0B,CAC9B,QAAQ,IAAI,iCAAiC,EAE7C,GAAI,CACF,MAAMiG,EAAW,MAAM,KAAK,wBAAuB,EAEnD,GAAI,CAACA,EACH,eAAQ,KAAK,sCAAsC,EAC5C,KAGT,MAAMlD,EAAQ,GAGd,SAAW,CAACzD,EAAS6E,CAAgB,IAAK,OAAO,QAAQ8B,EAAS,gBAAgB,EAAG,CACnF,IAAI6f,EAAuB,EAG3B,SAAW,CAAC9lB,EAAS2G,CAAgB,IAAK,OAAO,QAAQV,EAAS,gBAAgB,EAC5EjG,EAAQ,WAAWV,EAAU,GAAG,IAClCwmB,GAAwBnf,EAAiB,QAI7C5D,EAAMzD,CAAO,EAAI,CACf,iBAAkB6E,EAAiB,OACnC,iBAAkB2hB,EAClB,MAAO3hB,EAAiB,OAAS2hB,CAC3C,CACA,CAEM,eAAQ,IAAI,+BAA+B,cAAO,KAAK/iB,CAAK,EAAE,OAAM,OAAM,EACnEA,CACb,OAAapE,EAAO,CACd,eAAQ,MAAM,kCAAmCA,CAAK,EAC/C,IACb,CACA,CAKE,MAAM,0BAA0BW,EAAS,CACvC,MAAM4G,EAAY,YAAY,IAAG,EAEjC,GAAI,CAEF,MAAM2f,EAAU,KAAK,YAAY,QAAQ,QAAQ,SAAU,EAAE,EACvDzlB,EAAM,GAAG,OAAAylB,EAAO,2BAA0B,0BAAmBvmB,CAAO,GAEpEZ,EAAW,MAAM,MAAM0B,CAAG,EAGhC,GAFA,KAAK,mBAAmB,eAEpB,CAAC1B,EAAS,GAAI,CAChB,GAAIA,EAAS,SAAW,IAAK,CAC3B,MAAMugB,EAAc,GACpB,YAAK,SAAS,SAAS,OAAA3f,GAAW2f,CAAW,EACtCA,CACjB,CACQ,MAAM,IAAI,MAAM,QAAQ,OAAAvgB,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,CACzE,CAEM,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAGlC,GAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKwH,EAEvD7G,EAAO,QACT,YAAK,SAAS,SAAS,OAAAC,GAAWD,EAAO,IAAI,EACtCA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,OAAa6f,EAAY,CACnB,WAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKhZ,EACrDgZ,CACZ,CACA,CAKE,MAAM,0BAA0Blf,EAAS,CACvC,MAAMkG,EAAY,YAAY,IAAG,EAEjC,GAAI,CAEF,MAAM2f,EAAU,KAAK,YAAY,QAAQ,QAAQ,SAAU,EAAE,EACvDzlB,EAAM,GAAG,OAAAylB,EAAO,2BAA0B,0BAAmB7lB,CAAO,GAEpEtB,EAAW,MAAM,MAAM0B,CAAG,EAGhC,GAFA,KAAK,mBAAmB,eAEpB,CAAC1B,EAAS,GAAI,CAChB,GAAIA,EAAS,SAAW,IAAK,CAC3B,MAAMugB,EAAc,GACpB,YAAK,SAAS,SAAS,OAAAjf,GAAWif,CAAW,EACtCA,CACjB,CACQ,MAAM,IAAI,MAAM,QAAQ,OAAAvgB,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,CACzE,CAEM,MAAMW,EAAS,MAAMX,EAAS,KAAI,EAGlC,GAFA,KAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKwH,EAEvD7G,EAAO,QACT,YAAK,SAAS,SAAS,OAAAW,GAAWX,EAAO,IAAI,EACtCA,EAAO,KAGhB,MAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAChD,OAAa6f,EAAY,CACnB,WAAK,mBAAmB,aAAe,YAAY,IAAG,EAAKhZ,EACrDgZ,CACZ,CACA,CAKE,mBAAoB,CAClB,OAAK,KAAK,kBACH,KAAK,IAAG,EAAK,KAAK,kBAAoB,KAAK,gBADd,EAExC,CAKE,+BAAgC,CAC9B,GAAK,KAAK,mBAGV,UAAW,CAAC5f,EAASiC,CAAW,IAAK,OAAO,QAAQ,KAAK,mBAAmB,gBAAgB,EAAG,CAC7F,MAAMwd,EAAW,SAAS,OAAAzf,GAC1B,KAAK,SAASyf,EAAUxd,CAAW,CACzC,CAGI,SAAW,CAACvB,EAASuB,CAAW,IAAK,OAAO,QAAQ,KAAK,mBAAmB,gBAAgB,EAAG,CAC7F,MAAMwd,EAAW,SAAS,OAAA/e,GAC1B,KAAK,SAAS+e,EAAUxd,CAAW,CACzC,EACA,CAKE,2BAA4B,CAC1B,GAAI,CAAC,KAAK,mBAAoB,MAAO,GAErC,IAAI9B,EAAQ,EAGZ,UAAW8B,KAAe,OAAO,OAAO,KAAK,mBAAmB,gBAAgB,EAC9E9B,GAAS8B,EAAY,OAIvB,UAAWA,KAAe,OAAO,OAAO,KAAK,mBAAmB,gBAAgB,EAC9E9B,GAAS8B,EAAY,OAGvB,OAAO9B,CACX,CAKE,YAAa,CACX,KAAK,YAAY,MAAK,EACtB,KAAK,gBAAgB,MAAK,EAC1B,KAAK,mBAAqB,KAC1B,KAAK,kBAAoB,EACzB,QAAQ,IAAI,+BAA+B,CAC/C,CAKE,SAASmgB,EAAKve,EAAM,CAClB,KAAK,YAAY,IAAIue,EAAKve,CAAI,EAC9B,KAAK,gBAAgB,IAAIue,EAAK,KAAK,IAAG,CAAE,CAC5C,CAKE,eAAeA,EAAK,CAClB,MAAMC,EAAY,KAAK,gBAAgB,IAAID,CAAG,EAC9C,OAAKC,EACE,KAAK,IAAG,EAAKA,EAAY,KAAK,gBADd,EAE3B,CAKE,uBAAwB,CACtB,MAAO,CACL,GAAG,KAAK,mBACR,UAAW,KAAK,YAAY,KAC5B,YAAa,CAAC,CAAC,KAAK,mBACpB,YAAa,KAAK,kBAAoB,KAAK,MAAQ,KAAK,kBAAoB,KAC5E,mBAAoB,KAAK,mBAAmB,aAAe,EACvD,KAAK,mBAAmB,YAAc,KAAK,mBAAmB,aAC9D,CACV,CACA,CAKE,MAAM,iBAAkB,CACtB,eAAQ,IAAI,mCAAmC,EAC/C,KAAK,mBAAqB,KAC1B,KAAK,kBAAoB,EAClB,MAAM,KAAK,wBAAuB,CAC7C,CAKE,SAAU,CACR,KAAK,WAAU,EACf,KAAK,cAAgB,GACrB,QAAQ,IAAI,0BAA0B,CAC1C,CACA,CCzZO,MAAMkG,EAA8B,CACzC,aAAc,CACZ,KAAK,QAAU,CAEb,iBAAkB,KAClB,eAAgB,KAChB,iBAAkB,EAGlB,aAAc,EACd,kBAAmB,EACnB,YAAa,EAGb,gBAAiB,EACjB,aAAc,EACd,mBAAoB,EACpB,qBAAsB,EAGtB,UAAW,EACX,YAAa,EACb,UAAW,EAGX,OAAQ,GACR,cAAe,EAGf,uBAAwB,EACxB,kBAAmB,CACzB,EAEI,KAAK,aAAe,GACpB,KAAK,UAAY,KACjB,KAAK,YAAc,EACvB,CAKE,iBAAkB,CAChB,KAAK,aAAe,GACpB,KAAK,UAAY,YAAY,IAAG,EAChC,KAAK,QAAQ,iBAAmB,KAAK,IAAG,EACxC,KAAK,YAAc,GAEnB,QAAQ,IAAI,mBAAmB,CACnC,CAKE,cAAcliB,EAAMmiB,EAAU,GAAI,CAChC,GAAI,CAAC,KAAK,aAAc,OAExB,MAAMC,EAAa,CACjB,KAAApiB,EACA,UAAW,YAAY,IAAG,EAC1B,aAAc,YAAY,IAAG,EAAK,KAAK,UACvC,QAAAmiB,CACN,EAEI,KAAK,YAAY,KAAKC,CAAU,EAChC,QAAQ,IAAI,UAAU,OAAApiB,EAAI,MAAK,OAAAoiB,EAAW,aAAa,QAAQ,CAAC,EAAC,MAAMD,CAAO,CAClF,CAKE,iBAAiBxK,EAAM3W,EAAOqhB,EAAW,EAAG,CAC1C,OAAQ1K,EAAI,CACV,IAAK,SACH,KAAK,QAAQ,aAAe3W,EAC5B,MACF,IAAK,cACH,KAAK,QAAQ,kBAAoBA,EACjC,MACF,IAAK,QACH,KAAK,QAAQ,YAAcA,EAC3B,KACR,CAEI,KAAK,QAAQ,sBAAwBqhB,EACrC,KAAK,cAAc,GAAG,OAAA1K,EAAI,WAAW,CAAE,MAAA3W,EAAO,SAAU,GAAI,QAAAqhB,EAAW,MAAM,QAAQ,CAAC,EAAC,MAAM,CACjG,CAKE,qBAAqB1K,EAAM2K,EAAS,GAAO,CACzC,KAAK,QAAQ,kBAETA,EACF,KAAK,QAAQ,eAEb,KAAK,QAAQ,qBAGf,KAAK,cAAc,SAAS,OAAA3K,GAAQ,CAAE,OAAA2K,EAAQ,MAAO,KAAK,QAAQ,eAAe,CAAE,CACvF,CAKE,eAAe3K,EAAM4K,EAAY,EAAG,CAClC,KAAK,QAAQ,YACb,KAAK,QAAQ,UAAYA,EAEzB,QAAQ,IAAI,UAAU,OAAA5K,EAAI,YAAW,YAAK,QAAQ,UAAW,CACjE,CAKE,gBAAgBA,EAAM,CACpB,KAAK,QAAQ,cAEb,QAAQ,IAAI,WAAW,OAAAA,EAAI,aAAY,YAAK,QAAQ,YAAa,CACrE,CAKE,YAAY7c,EAAO0nB,EAAU,GAAI,CAC/B,KAAK,QAAQ,OAAO,KAAK,CACvB,MAAO1nB,EAAM,QACb,QAAA0nB,EACA,UAAW,KAAK,IAAG,CACzB,CAAK,EAED,QAAQ,MAAM,gBAAgB,OAAAA,GAAW1nB,CAAK,CAClD,CAKE,eAAewI,EAAQ,CACrB,KAAK,QAAQ,gBAEb,KAAK,cAAc,SAAU,CAAE,OAAAA,EAAQ,eAAgB,KAAK,QAAQ,cAAe,CACvF,CAKE,eAAgB,CACd,GAAI,CAAC,KAAK,aAAc,OAAO,KAE/B,KAAK,aAAe,GACpB,KAAK,QAAQ,eAAiB,KAAK,IAAG,EACtC,KAAK,QAAQ,iBAAmB,YAAY,IAAG,EAAK,KAAK,UAEzD,MAAMmf,EAAS,KAAK,0BAAyB,EAC7C,eAAQ,IAAI,sBAAuBA,CAAM,EAElCA,CACX,CAKE,2BAA4B,CAC1B,MAAMC,EAAe,KAAK,QAAQ,UAAY,KAAK,QAAQ,YAAc,GACpE,KAAK,QAAQ,WAAa,KAAK,QAAQ,UAAY,KAAK,QAAQ,aAAe,KAAK,QAAQ,CAAC,EAC9F,EAEEC,EAAmB,KAAK,QAAQ,gBAAkB,GACnD,KAAK,QAAQ,aAAe,KAAK,QAAQ,gBAAkB,KAAK,QAAQ,CAAC,EAC1E,EAmDJ,MAjDe,CAEb,QAAS,CACP,iBAAkB,GAAG,YAAK,QAAQ,iBAAiB,QAAQ,CAAC,EAAC,MAC7D,WAAY,CACV,OAAQ,KAAK,QAAQ,aACrB,YAAa,KAAK,QAAQ,kBAC1B,MAAO,KAAK,QAAQ,WAC9B,EACQ,gBAAiB,KAAK,QAAQ,gBAC9B,gBAAiB,GAAI,aAAK,QAAQ,qBAAuB,MAAM,QAAQ,CAAC,EAAC,KACjF,EAGM,mBAAoB,CAClB,cAAe,KAAK,QAAQ,gBAC5B,aAAc,KAAK,QAAQ,aAC3B,mBAAoB,KAAK,QAAQ,mBACjC,iBAAkB,GAAG,OAAAA,EAAgB,KACrC,mBAAoB,KAAK,QAAQ,gBAAkB,EAC/C,GAAI,aAAK,QAAQ,qBAAuB,KAAK,QAAQ,gBAAkB,MAAM,QAAQ,CAAC,EAAC,MACvF,KACZ,EAGM,iBAAkB,CAChB,KAAM,KAAK,QAAQ,UACnB,OAAQ,KAAK,QAAQ,YACrB,QAAS,GAAG,OAAAD,EAAY,KACxB,UAAW,GAAI,aAAK,QAAQ,UAAY,MAAM,QAAQ,CAAC,EAAC,KAChE,EAGM,YAAa,CACX,OAAQ,KAAK,QAAQ,OAAO,OAC5B,cAAe,KAAK,QAAQ,cAC5B,aAAc,KAAK,QAAQ,MACnC,EAGM,SAAU,KAAK,YAGf,iBAAkB,KAAK,0BAAyB,EAGhD,wBAAyB,KAAK,gCAA+B,CACnE,CAGA,CAKE,2BAA4B,CAC1B,IAAIE,EAAQ,IAGR,KAAK,QAAQ,iBAAmB,IAClCA,GAAS,GACA,KAAK,QAAQ,iBAAmB,IACzCA,GAAS,GACA,KAAK,QAAQ,iBAAmB,MACzCA,GAAS,GAIX,MAAMC,EAAoB,KAAK,QAAQ,cAAgB,KAAK,QAAQ,iBAAmB,GACnFA,EAAoB,GACtBD,GAAS,GACAC,EAAoB,KAC7BD,GAAS,IAIX,MAAMF,EAAe,KAAK,QAAQ,WAAc,KAAK,QAAQ,UAAY,KAAK,QAAQ,aAAgB,GActG,OAbIA,EAAe,GACjBE,GAAS,GACAF,EAAe,KACxBE,GAAS,GAIXA,GAAS,KAAK,QAAQ,OAAO,OAAS,EACtCA,GAAS,KAAK,QAAQ,cAAgB,EAGtCA,EAAQ,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKA,CAAK,CAAC,EAEpCA,GAAS,GAAW,KACpBA,GAAS,GAAW,IACpBA,GAAS,GAAW,IACpBA,GAAS,GAAW,IACpBA,GAAS,GAAW,IACjB,GACX,CAKE,iCAAkC,CAChC,MAAME,EAAc,GAGpB,OAAI,KAAK,QAAQ,iBAAmB,KAClCA,EAAY,KAAK,CACf,SAAU,OACV,WAAY,gBACZ,SAAU,OACV,OAAQ,cAChB,CAAO,EAIe,KAAK,QAAQ,cAAgB,KAAK,QAAQ,iBAAmB,GAC/D,IACdA,EAAY,KAAK,CACf,SAAU,OACV,WAAY,oBACZ,SAAU,OACV,OAAQ,YAChB,CAAO,EAIkB,KAAK,QAAQ,WAAc,KAAK,QAAQ,UAAY,KAAK,QAAQ,aAAgB,GACnF,IACjBA,EAAY,KAAK,CACf,SAAU,OACV,WAAY,wBACZ,SAAU,SACV,OAAQ,YAChB,CAAO,EAIC,KAAK,QAAQ,OAAO,OAAS,GAC/BA,EAAY,KAAK,CACf,SAAU,OACV,WAAY,cACZ,SAAU,SACV,OAAQ,SAChB,CAAO,EAIC,KAAK,QAAQ,cAAgB,GAC/BA,EAAY,KAAK,CACf,SAAU,MACV,WAAY,wBACZ,SAAU,MACV,OAAQ,SAChB,CAAO,EAGIA,CACX,CAKE,eAAgB,CACd,MAAO,CACL,QAAS,KAAK,QACd,OAAQ,KAAK,0BAAyB,EACtC,WAAY,IAAI,KAAI,EAAG,YAAW,CACxC,CACA,CAKE,OAAQ,CACN,KAAK,QAAU,CACb,iBAAkB,KAClB,eAAgB,KAChB,iBAAkB,EAClB,aAAc,EACd,kBAAmB,EACnB,YAAa,EACb,gBAAiB,EACjB,aAAc,EACd,mBAAoB,EACpB,qBAAsB,EACtB,UAAW,EACX,YAAa,EACb,UAAW,EACX,OAAQ,GACR,cAAe,EACf,uBAAwB,EACxB,kBAAmB,CACzB,EAEI,KAAK,aAAe,GACpB,KAAK,UAAY,KACjB,KAAK,YAAc,GAEnB,QAAQ,IAAI,cAAc,CAC9B,CACA,CCnXA,MAAMC,EAAoB,CACxB,YAAY7b,EAAkB8b,EAA0B,CACtD,KAAK,iBAAmB9b,EACxB,KAAK,yBAA2B8b,EAGhC,KAAK,UAAY,GACjB,KAAK,UAAY,GACjB,KAAK,UAAY,GAGjB,KAAK,gBAAkB,CACrB,aAAc,eACd,cAAe,gBACf,gBAAiB,kBACjB,eAAgB,iBAChB,yBAA0B,2BAC1B,yBAA0B,2BAC1B,yBAA0B,2BAC1B,mBAAoB,oBAC1B,EAGI,KAAK,eAAiB,IAAI,IAE1B,QAAQ,IAAI,oCAAoC,CACpD,CAME,WAAW5O,EAAS,CAClB,KAAK,UAAY,EAAQA,EACzB,QAAQ,IAAI,qBAAqB,YAAK,UAAY,UAAY,WAAY,EAG1E,KAAK,KAAK,cAAe,CAAE,QAAS,KAAK,UAAW,CACxD,CAME,uBAAwB,CACtB,OAAO,KAAK,SAChB,CAME,kBAAmB,CACjB,OAAO,KAAK,SAChB,CAOE,GAAG5O,EAAOyd,EAAU,CACb,KAAK,eAAe,IAAIzd,CAAK,GAChC,KAAK,eAAe,IAAIA,EAAO,EAAE,EAEnC,KAAK,eAAe,IAAIA,CAAK,EAAE,KAAKyd,CAAQ,CAChD,CAOE,IAAIzd,EAAOyd,EAAU,CACnB,GAAI,KAAK,eAAe,IAAIzd,CAAK,EAAG,CAClC,MAAM0d,EAAY,KAAK,eAAe,IAAI1d,CAAK,EACzC0C,EAAQgb,EAAU,QAAQD,CAAQ,EACpC/a,EAAQ,IACVgb,EAAU,OAAOhb,EAAO,CAAC,CAEjC,CACA,CAOE,KAAK1C,EAAOhI,EAAM,CACZ,KAAK,eAAe,IAAIgI,CAAK,GAC/B,KAAK,eAAe,IAAIA,CAAK,EAAE,QAAQyd,GAAY,CACjD,GAAI,CACFA,EAASzlB,CAAI,CACvB,OAAiB1C,EAAO,CACd,QAAQ,MAAM,oCAAoC,OAAA0K,EAAK,KAAK1K,CAAK,CAC3E,CACA,CAAO,CAEP,CAQE,MAAM,gBAAgBqoB,EAAclM,EAAc,CAChD,GAAI,CAACkM,GAAgB,CAAClM,EACpB,eAAQ,KAAK,6DAA6D,EACnE,GAGT,GAAI,CAEF,MAAM7I,EAAY,MAAM,KAAK,iBAAiB,eAC5C6I,EAAa,GACbA,EAAa,iBACrB,EAEM,GAAI,CAAC7I,GAAaA,EAAU,SAAW,EACrC,MAAO,GAIT,MAAMgV,EAAc,IAAI,KAAKD,EAAa,QAAQ,EAC5C3iB,EAAoB4N,EAAU,UAAUhO,GAAOA,EAAI,KAAO+iB,EAAa,EAAE,EAMzEE,EAAe,GAGrB,QAAS1iB,EAAIH,EAAoB,EAAGG,EAAIyN,EAAU,OAAQzN,IAAK,CAC7D,MAAMkC,EAAQuL,EAAUzN,CAAC,EACT,IAAI,KAAKkC,EAAM,QAAQ,EAGzBugB,GACZC,EAAa,KAAKxgB,CAAK,CAEjC,CAGM,OAAAwgB,EAAa,KAAK,CAAC,EAAGljB,IAAM,IAAI,KAAK,EAAE,QAAQ,EAAI,IAAI,KAAKA,EAAE,QAAQ,CAAC,EAEvE,QAAQ,IAAI,YAAY,OAAAkjB,EAAa,OAAM,wCAAuC,OAAA7iB,EAAoB,EAAC,IAAG,EACnG6iB,CAEb,OAAavoB,EAAO,CACd,eAAQ,MAAM,kCAAmCA,CAAK,EAC/C,EACb,CACA,CASE,MAAM,qBAAqBmN,EAAUkb,EAAclM,EAAc,CAC/D,GAAI,CAAC,KAAK,UACR,MAAO,CAAE,QAAS,GAAM,QAAS,gBAAiB,OAAQ,CAAC,EAG7D,QAAQ,IAAI,mDAAmD,OAAAhP,EAAS,GAAI,EAC5E,QAAQ,IAAI,qBAAqB,OAAAkb,EAAa,GAAE,aAAY,OAAAlM,EAAa,GAAE,YAAW,OAAAA,EAAa,kBAAmB,EAEtH,GAAI,CACF,MAAMoM,EAAe,MAAM,KAAK,gBAAgBF,EAAclM,CAAY,EAE1E,GAAIoM,EAAa,SAAW,EAC1B,eAAQ,IAAI,oCAAoC,EACzC,CAAE,QAAS,GAAM,QAAS,2BAA4B,OAAQ,CAAC,EAGxE,QAAQ,IAAI,YAAY,OAAAA,EAAa,OAAM,mBAAmBA,EAAa,IAAIjjB,GAAOA,EAAI,EAAE,CAAC,EAE7F,IAAIkjB,EAAc,EAClB,MAAMtM,EAAS,GAGf,UAAWnU,KAASwgB,EAClB,GAAI,CACF,QAAQ,IAAI,uBAAuB,OAAApb,EAAS,GAAE,cAAa,OAAApF,EAAM,GAAE,MAAK,EACxE,MAAM,KAAK,mBAAmBoF,EAAUpF,CAAK,EAC7CygB,IACA,QAAQ,IAAI,mCAAmC,OAAAzgB,EAAM,GAAI,CACnE,OAAiB/H,EAAO,CACd,QAAQ,MAAM,6BAA6B,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EAC7Dkc,EAAO,KAAK,CAAE,QAASnU,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACjE,CAGM,MAAMU,EAAS,CACb,QAASwb,EAAO,SAAW,EAC3B,QAAS,aAAa,OAAAsM,EAAW,kBACjC,OAAQA,EACR,OAAQtM,EAAO,OAAS,EAAIA,EAAS,MAC7C,EAEM,eAAQ,IAAI,uCAAwCxb,CAAM,EACnDA,CAEb,OAAaV,EAAO,CACd,eAAQ,MAAM,sCAAuCA,CAAK,EACnD,CAAE,QAAS,GAAO,QAASA,EAAM,QAAS,OAAQ,CAAC,CAChE,CACA,CAUE,MAAM,qBAAqBmN,EAAU6K,EAAkBqQ,EAAclM,EAAc,CACjF,GAAI,CAAC,KAAK,UACR,MAAO,CAAE,QAAS,GAAM,QAAS,gBAAiB,OAAQ,CAAC,EAG7D,QAAQ,IAAI,mDAAmD,OAAAhP,EAAS,GAAI,EAE5E,GAAI,CACF,MAAMob,EAAe,MAAM,KAAK,gBAAgBF,EAAclM,CAAY,EAE1E,GAAIoM,EAAa,SAAW,EAC1B,MAAO,CAAE,QAAS,GAAM,QAAS,2BAA4B,OAAQ,CAAC,EAGxE,IAAIC,EAAc,EAClB,MAAMtM,EAAS,GAGf,UAAWnU,KAASwgB,EAClB,GAAI,CACF,MAAM,KAAK,oBAAoBpb,EAAUpF,CAAK,EAC9CygB,GACV,OAAiBxoB,EAAO,CACd,QAAQ,MAAM,sCAAsC,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EACtEkc,EAAO,KAAK,CAAE,QAASnU,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACjE,CAGM,MAAMU,EAAS,CACb,QAASwb,EAAO,SAAW,EAC3B,QAAS,sBAAsB,OAAAsM,EAAW,kBAC1C,OAAQA,EACR,OAAQtM,EAAO,OAAS,EAAIA,EAAS,MAC7C,EAEM,eAAQ,IAAI,uCAAwCxb,CAAM,EACnDA,CAEb,OAAaV,EAAO,CACd,eAAQ,MAAM,sCAAuCA,CAAK,EACnD,CAAE,QAAS,GAAO,QAASA,EAAM,QAAS,OAAQ,CAAC,CAChE,CACA,CAOE,MAAM,qBAAqByoB,EAAS,CAClC,GAAI,CAAC,KAAK,UACR,MAAO,CAAE,QAAS,GAAM,QAAS,gBAAiB,OAAQ,CAAC,EAG7D,KAAM,CAAE,SAAAtb,EAAU,aAAAkb,EAAc,aAAAlM,CAAY,EAAKsM,EAEjD,QAAQ,IAAI,mDAAmD,OAAAtb,EAAS,GAAI,EAC5E,QAAQ,IAAI,qBAAqB,OAAAkb,EAAa,GAAE,aAAY,OAAAlM,EAAa,GAAE,YAAW,OAAAA,EAAa,kBAAmB,EAEtH,GAAI,CACF,MAAMoM,EAAe,MAAM,KAAK,gBAAgBF,EAAclM,CAAY,EAE1E,GAAIoM,EAAa,SAAW,EAC1B,eAAQ,IAAI,6CAA6C,EAClD,CAAE,QAAS,GAAM,QAAS,2BAA4B,OAAQ,CAAC,EAGxE,QAAQ,IAAI,YAAY,OAAAA,EAAa,OAAM,mBAAmBA,EAAa,IAAIjjB,GAAOA,EAAI,EAAE,CAAC,EAE7F,IAAIkjB,EAAc,EAClB,MAAMtM,EAAS,GAGf,UAAWnU,KAASwgB,EAClB,GAAI,CACF,QAAQ,IAAI,yCAAyC,OAAAxgB,EAAM,GAAE,MAAK,EAClE,MAAM,KAAK,wBAAwBoF,EAAUpF,CAAK,EAClDygB,IACA,QAAQ,IAAI,4CAA4C,OAAAzgB,EAAM,GAAI,CAC5E,OAAiB/H,EAAO,CACd,QAAQ,MAAM,sCAAsC,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EACtEkc,EAAO,KAAK,CAAE,QAASnU,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACjE,CAGM,MAAMU,EAAS,CACb,QAASwb,EAAO,SAAW,EAC3B,QAAS,sBAAsB,OAAAsM,EAAW,kBAC1C,OAAQA,EACR,OAAQtM,EAAO,OAAS,EAAIA,EAAS,MAC7C,EAEM,eAAQ,IAAI,uCAAwCxb,CAAM,EACnDA,CAEb,OAAaV,EAAO,CACd,eAAQ,MAAM,sCAAuCA,CAAK,EACnD,CAAE,QAAS,GAAO,QAASA,EAAM,QAAS,OAAQ,CAAC,CAChE,CACA,CAQE,MAAM,mBAAmBmN,EAAUiH,EAAa,CAE9C,MAAM9Q,EAAe,MAAM,KAAK,yBAAyB,mBAAmB8Q,EAAY,EAAE,EACpFnL,EAAsB3F,EAAeA,EAAa,YAAc,GAIhEolB,EAAmBzf,EAAoB,KAAKuK,GAAO,CACvD,MAAMmV,EAAanV,EAAI,QAAUrG,EAAS,MACpCyb,EAAYpV,EAAI,iBAAmBrG,EAAS,eAG5C0b,EAAkB1b,EAAS,iBAAmB,SAChDqG,EAAI,eAAiBrG,EAAS,aAC9B,GAEJ,OAAOwb,GAAcC,GAAaC,CACxC,CAAK,EAED,GAAIH,EAAkB,CAEpBA,EAAiB,EAAIvb,EAAS,EAC9Bub,EAAiB,EAAIvb,EAAS,EAC9Bub,EAAiB,UAAYvb,EAAS,UACtCub,EAAiB,cAAgBvb,EAAS,cAC1Cub,EAAiB,WAAavb,EAAS,WACvCub,EAAiB,cAAgBvb,EAAS,cAC1Cub,EAAiB,UAAY,IAAI,KAAI,EAAG,YAAW,EAGnD,MAAMlT,EAAWrI,EAAS,iBAAmB,SAC3C,UAAU,OAAAA,EAAS,aAAY,KAAM,UACvC,QAAQ,IAAI,uBAAuB,OAAAqI,EAAQ,oBAAmB,OAAArI,EAAS,MAAK,cAAa,OAAAiH,EAAY,GAAI,CAC/G,KAAW,CAEL,MAAM0U,EAAc,CAClB,GAAG3b,EACH,UAAW,IAAI,KAAI,EAAG,YAAW,CACzC,EACMlE,EAAoB,KAAK6f,CAAW,EAGpC,MAAMtT,EAAWrI,EAAS,iBAAmB,SAC3C,UAAU,OAAAA,EAAS,aAAY,KAAM,UACvC,QAAQ,IAAI,gBAAgB,OAAAqI,EAAQ,oBAAmB,OAAArI,EAAS,MAAK,cAAa,OAAAiH,EAAY,GAAI,CACxG,CAGI,MAAM9S,EAAiB,CACrB,QAAS8S,EAAY,GACrB,YAAanL,EACb,aAAc,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,MAAM,KAAK,yBAAyB,oBAAoBmL,EAAY,GAAI9S,CAAc,CAC1F,CAQE,MAAM,oBAAoB6L,EAAUiH,EAAa,CAE/C,MAAM9Q,EAAe,MAAM,KAAK,yBAAyB,mBAAmB8Q,EAAY,EAAE,EACpFnL,EAAsB3F,EAAeA,EAAa,YAAc,GAIhEolB,EAAmBzf,EAAoB,KAAKuK,GAAO,CACvD,MAAMmV,EAAanV,EAAI,QAAUrG,EAAS,MACpCyb,EAAYpV,EAAI,iBAAmBrG,EAAS,eAG5C0b,EAAkB1b,EAAS,iBAAmB,SAChDqG,EAAI,eAAiBrG,EAAS,aAC9B,GAEJ,OAAOwb,GAAcC,GAAaC,CACxC,CAAK,EAED,GAAIH,EAAkB,CAEpBA,EAAiB,EAAIvb,EAAS,EAC9Bub,EAAiB,EAAIvb,EAAS,EAC9Bub,EAAiB,UAAYvb,EAAS,UACtCub,EAAiB,cAAgBvb,EAAS,cAC1Cub,EAAiB,WAAavb,EAAS,WACvCub,EAAiB,cAAgBvb,EAAS,cAC1Cub,EAAiB,UAAY,IAAI,KAAI,EAAG,YAAW,EAGnD,MAAMlT,EAAWrI,EAAS,iBAAmB,SAC3C,UAAU,OAAAA,EAAS,aAAY,KAAM,UACvC,QAAQ,IAAI,YAAY,OAAAqI,EAAQ,oBAAmB,OAAArI,EAAS,MAAK,cAAa,OAAAiH,EAAY,GAAI,CACpG,KAAW,CAEL,MAAM0U,EAAc,CAClB,GAAG3b,EACH,UAAW,IAAI,KAAI,EAAG,YAAW,CACzC,EACMlE,EAAoB,KAAK6f,CAAW,EAGpC,MAAMtT,EAAWrI,EAAS,iBAAmB,SAC3C,UAAU,OAAAA,EAAS,aAAY,KAAM,UACvC,QAAQ,IAAI,gBAAgB,OAAAqI,EAAQ,oBAAmB,OAAArI,EAAS,MAAK,cAAa,OAAAiH,EAAY,GAAE,oBAAmB,CACzH,CAGI,MAAM9S,EAAiB,CACrB,QAAS8S,EAAY,GACrB,YAAanL,EACb,aAAc,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,MAAM,KAAK,yBAAyB,oBAAoBmL,EAAY,GAAI9S,CAAc,CAC1F,CAQE,MAAM,wBAAwB6L,EAAUiH,EAAa,CAEnD,MAAM9Q,EAAe,MAAM,KAAK,yBAAyB,mBAAmB8Q,EAAY,EAAE,EACpFnL,EAAsB3F,EAAeA,EAAa,YAAc,GAEtE,GAAI2F,EAAoB,SAAW,EAAG,CACpC,QAAQ,IAAI,oCAAoC,OAAAmL,EAAY,GAAE,uBAAsB,EACpF,MACN,CAMI,MAAM2U,EAAgB9f,EAAoB,UAAUuK,GAAO,CACzD,MAAMmV,EAAanV,EAAI,QAAUrG,EAAS,MACpCyb,EAAYpV,EAAI,iBAAmBrG,EAAS,eAG5C0b,EAAkB1b,EAAS,iBAAmB,SAChDqG,EAAI,eAAiBrG,EAAS,aAC9B,GAEJ,OAAOwb,GAAcC,GAAaC,CACxC,CAAK,EAED,GAAIE,IAAkB,GAAI,CACxB,MAAMC,EAAkB/f,EAAoB8f,CAAa,EACzD9f,EAAoB,OAAO8f,EAAe,CAAC,EAE3C,QAAQ,IAAI,kCAAkC,OAAA3U,EAAY,GAAE,IAAG,EAC/D,QAAQ,IAAI,cAAc,OAAA4U,EAAgB,MAAO,EACjD,QAAQ,IAAI,aAAa,OAAAA,EAAgB,eAAgB,EACzD,QAAQ,IAAI,uBAAuB,OAAAA,EAAgB,cAAgB,MAAO,EAC1E,QAAQ,IAAI,WAAW,OAAAA,EAAgB,GAAI,CACjD,KAAW,CACL,QAAQ,IAAI,0CAA0C,OAAA5U,EAAY,GAAE,iBAAgB,EACpF,QAAQ,IAAI,0BAA0B,OAAAjH,EAAS,MAAO,EACtD,QAAQ,IAAI,yBAAyB,OAAAA,EAAS,eAAgB,EAC9D,QAAQ,IAAI,mCAAmC,OAAAA,EAAS,cAAgB,MAAO,EAC/E,QAAQ,IAAI,6BAA8BlE,EAAoB,IAAIuK,IAAQ,CACxE,MAAOA,EAAI,MACX,KAAMA,EAAI,eACV,aAAcA,EAAI,aAClB,GAAIA,EAAI,EAChB,EAAQ,CAAC,EACH,MACN,CAGI,MAAMlS,EAAiB,CACrB,QAAS8S,EAAY,GACrB,YAAanL,EACb,aAAc,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,MAAM,KAAK,yBAAyB,oBAAoBmL,EAAY,GAAI9S,CAAc,CAC1F,CAOE,MAAM,mBAAmBrB,EAAW,CAC7B,KAAK,YAIV,KAAK,UAAU,KAAKA,CAAS,EAGxB,KAAK,WACR,MAAM,KAAK,iBAAgB,EAEjC,CAME,MAAM,kBAAmB,CACvB,GAAI,OAAK,WAAa,KAAK,UAAU,SAAW,GAIhD,MAAK,UAAY,GACjB,KAAK,KAAK,cAAe,CAAE,YAAa,KAAK,UAAU,OAAQ,EAE/D,GAAI,CACF,KAAO,KAAK,UAAU,OAAS,GAAG,CAChC,MAAMA,EAAY,KAAK,UAAU,MAAK,EAEtC,GAAI,CACF,MAAM,KAAK,iBAAiBA,CAAS,CAC/C,OAAiBD,EAAO,CACd,QAAQ,MAAM,qCAAsCA,CAAK,EACzD,KAAK,KAAK,YAAa,CAAE,UAAAC,EAAW,MAAAD,CAAK,CAAE,CACrD,CACA,CACA,QAAK,CACC,KAAK,UAAY,GACjB,KAAK,KAAK,gBAAiB,EAAE,CACnC,EACA,CAOE,MAAM,iBAAiBC,EAAW,CAChC,KAAM,CAAE,KAAA4c,EAAM,SAAA1P,EAAU,aAAAkb,EAAc,aAAAlM,EAAc,iBAAAnE,EAAkB,SAAAiR,CAAQ,EAAKhpB,EAEnF,OAAQ4c,EAAI,CACV,KAAK,KAAK,gBAAgB,aACxB,OAAO,MAAM,KAAK,qBAAqB1P,EAAUkb,EAAclM,CAAY,EAE7E,KAAK,KAAK,gBAAgB,cACxB,OAAO,MAAM,KAAK,qBAAqBhP,EAAU6K,EAAkBqQ,EAAclM,CAAY,EAE/F,KAAK,KAAK,gBAAgB,gBAExB,OAAO,MAAM,KAAK,qBAAqBlc,CAAS,EAElD,KAAK,KAAK,gBAAgB,eAExB,OAAO,MAAM,KAAK,kBAAkBA,CAAS,EAE/C,KAAK,KAAK,gBAAgB,yBACxB,OAAO,MAAM,KAAK,2BAA2BgpB,CAAQ,EAEvD,KAAK,KAAK,gBAAgB,yBACxB,OAAO,MAAM,KAAK,2BAA2BA,CAAQ,EAEvD,KAAK,KAAK,gBAAgB,yBACxB,OAAO,MAAM,KAAK,2BAA2BA,CAAQ,EAEvD,KAAK,KAAK,gBAAgB,mBACxB,OAAO,MAAM,KAAK,qBAAqBA,CAAQ,EAEjD,QACE,QAAQ,KAAK,mCAAmC,OAAApM,EAAM,CAC9D,CACA,CAOE,MAAM,kBAAkB5c,EAAW,CACjC,GAAI,CAAC,KAAK,UACR,MAAO,CAAE,QAAS,GAAM,QAAS,gBAAiB,OAAQ,CAAC,EAG7D,KAAM,CAAE,SAAAkN,EAAU,aAAAkb,EAAc,aAAAlM,CAAY,EAAKlc,EAEjD,QAAQ,IAAI,sDAAsD,OAAAkN,EAAS,MAAO,EAClF,QAAQ,IAAI,qBAAqB,OAAAkb,EAAa,GAAE,aAAY,OAAAlM,EAAa,GAAE,YAAW,OAAAA,EAAa,kBAAmB,EAEtH,GAAI,CACF,MAAMoM,EAAe,MAAM,KAAK,gBAAgBF,EAAclM,CAAY,EAE1E,GAAIoM,EAAa,SAAW,EAC1B,eAAQ,IAAI,mDAAmD,EACxD,CAAE,QAAS,GAAM,QAAS,2BAA4B,OAAQ,CAAC,EAGxE,QAAQ,IAAI,YAAY,OAAAA,EAAa,OAAM,mBAAmBA,EAAa,IAAIjjB,GAAOA,EAAI,EAAE,CAAC,EAE7F,IAAIkjB,EAAc,EAClB,MAAMtM,EAAS,GAGf,UAAWnU,KAASwgB,EAClB,GAAI,CACF,QAAQ,IAAI,sCAAsC,OAAAxgB,EAAM,GAAE,MAAK,EAC/D,MAAM,KAAK,qBAAqBoF,EAAUpF,CAAK,EAC/CygB,IACA,QAAQ,IAAI,kDAAkD,OAAAzgB,EAAM,GAAI,CAClF,OAAiB/H,EAAO,CACd,QAAQ,MAAM,4CAA4C,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EAC5Ekc,EAAO,KAAK,CAAE,QAASnU,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACjE,CAGM,MAAMU,EAAS,CACb,QAASwb,EAAO,SAAW,EAC3B,QAAS,4BAA4B,OAAAsM,EAAW,kBAChD,OAAQA,EACR,OAAQtM,EAAO,OAAS,EAAIA,EAAS,MAC7C,EAEM,eAAQ,IAAI,oCAAqCxb,CAAM,EAChDA,CAEb,OAAaV,EAAO,CACd,eAAQ,MAAM,mCAAoCA,CAAK,EAChD,CAAE,QAAS,GAAO,QAASA,EAAM,QAAS,OAAQ,CAAC,CAChE,CACA,CAQE,MAAM,qBAAqBmN,EAAUiH,EAAa,CAEhD,MAAM9Q,EAAe,MAAM,KAAK,yBAAyB,mBAAmB8Q,EAAY,EAAE,EACpFnL,EAAsB3F,EAAeA,EAAa,YAAc,GAGhEolB,EAAmBzf,EAAoB,KAAKuK,GAAO,CACvD,MAAMmV,EAAanV,EAAI,QAAUrG,EAAS,MACpCyb,EAAYpV,EAAI,iBAAmBrG,EAAS,eAG5C0b,EAAkB1b,EAAS,iBAAmB,SAChDqG,EAAI,eAAiBrG,EAAS,aAC9B,GAEJ,OAAOwb,GAAcC,GAAaC,CACxC,CAAK,EAED,GAAIH,EAAkB,CAEpBA,EAAiB,UAAYvb,EAAS,UACtCub,EAAiB,cAAgBvb,EAAS,cAC1Cub,EAAiB,WAAavb,EAAS,WACvCub,EAAiB,cAAgBvb,EAAS,cAC1Cub,EAAiB,UAAY,IAAI,KAAI,EAAG,YAAW,EAGnD,MAAMlT,EAAWrI,EAAS,iBAAmB,SAC3C,UAAU,OAAAA,EAAS,aAAY,KAAM,UACvC,QAAQ,IAAI,4BAA4B,OAAAqI,EAAQ,oBAAmB,OAAArI,EAAS,MAAK,cAAa,OAAAiH,EAAY,GAAI,CACpH,KAAW,CAEL,MAAM0U,EAAc,CAClB,GAAG3b,EACH,UAAW,IAAI,KAAI,EAAG,YAAW,CACzC,EACMlE,EAAoB,KAAK6f,CAAW,EAGpC,MAAMtT,EAAWrI,EAAS,iBAAmB,SAC3C,UAAU,OAAAA,EAAS,aAAY,KAAM,UACvC,QAAQ,IAAI,gBAAgB,OAAAqI,EAAQ,oBAAmB,OAAArI,EAAS,MAAK,cAAa,OAAAiH,EAAY,GAAE,8BAA6B,CACnI,CAGI,MAAM9S,EAAiB,CACrB,QAAS8S,EAAY,GACrB,YAAanL,EACb,aAAc,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,MAAM,KAAK,yBAAyB,oBAAoBmL,EAAY,GAAI9S,CAAc,CAC1F,CAME,MAAM,2BAA2B2nB,EAAU,CACzC,QAAQ,IAAI,+CAAgDA,CAAQ,EAEpE,GAAI,CAEF,KAAM,CAAE,WAAA/kB,EAAY,QAAAwjB,CAAO,EAAKuB,EAC1B,CAAE,SAAA7V,CAAQ,EAAKsU,EAErB,GAAI,EAACtU,GAAA,MAAAA,EAAU,eAAgB,EAACA,GAAA,MAAAA,EAAU,cACxC,eAAQ,KAAK,iDAAiD,EACvD,CAAE,QAAS,GAAO,QAAS,oBAAqB,OAAQ,CAAC,EAGlE,MAAMmV,EAAe,MAAM,KAAK,gBAAgBnV,EAAS,aAAcA,EAAS,YAAY,EAE5F,GAAImV,EAAa,SAAW,EAC1B,eAAQ,IAAI,sDAAsD,EAC3D,CAAE,QAAS,GAAM,QAAS,2BAA4B,OAAQ,CAAC,EAGxE,IAAIC,EAAc,EAClB,MAAMtM,EAAS,GAGf,UAAWnU,KAASwgB,EAClB,GAAI,CACF,QAAQ,IAAI,yCAAyC,OAAAxgB,EAAM,GAAE,MAAK,EAClE,MAAM,KAAK,2BAA2B7D,EAAY6D,CAAK,EACvDygB,IACA,QAAQ,IAAI,qDAAqD,OAAAzgB,EAAM,GAAI,CACrF,OAAiB/H,EAAO,CACd,QAAQ,MAAM,+CAA+C,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EAC/Ekc,EAAO,KAAK,CAAE,QAASnU,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACjE,CAGM,MAAMU,EAAS,CACb,QAASwb,EAAO,SAAW,EAC3B,QAAS,+BAA+B,OAAAsM,EAAW,kBACnD,OAAQA,EACR,OAAQtM,EAAO,OAAS,EAAIA,EAAS,MAC7C,EAEM,eAAQ,IAAI,gDAAiDxb,CAAM,EAC5DA,CAEb,OAAaV,EAAO,CACd,eAAQ,MAAM,+CAAgDA,CAAK,EAC5D,CAAE,QAAS,GAAO,QAASA,EAAM,QAAS,OAAQ,CAAC,CAChE,CACA,CAOE,MAAM,2BAA2BipB,EAAU,CACzC,QAAQ,IAAI,6CAA8CA,CAAQ,EAElE,GAAI,CAEF,KAAM,CAAE,WAAA/kB,EAAY,QAAAwjB,CAAO,EAAKuB,EAC1B,CAAE,SAAA7V,CAAQ,EAAKsU,EAErB,GAAI,EAACtU,GAAA,MAAAA,EAAU,eAAgB,EAACA,GAAA,MAAAA,EAAU,cACxC,eAAQ,KAAK,wDAAwD,EAC9D,CAAE,QAAS,GAAO,QAAS,oBAAqB,OAAQ,CAAC,EAGlE,MAAMmV,EAAe,MAAM,KAAK,gBAAgBnV,EAAS,aAAcA,EAAS,YAAY,EAE5F,GAAImV,EAAa,SAAW,EAC1B,MAAO,CAAE,QAAS,GAAM,QAAS,2BAA4B,OAAQ,CAAC,EAGxE,IAAIC,EAAc,EAClB,MAAMtM,EAAS,GAGf,UAAWnU,KAASwgB,EAClB,GAAI,CACF,MAAM,KAAK,8BAA8BrkB,EAAY6D,CAAK,EAC1DygB,GACV,OAAiBxoB,EAAO,CACd,QAAQ,MAAM,gDAAgD,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EAChFkc,EAAO,KAAK,CAAE,QAASnU,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACjE,CAGM,MAAMU,EAAS,CACb,QAASwb,EAAO,SAAW,EAC3B,QAAS,gCAAgC,OAAAsM,EAAW,kBACpD,OAAQA,EACR,OAAQtM,EAAO,OAAS,EAAIA,EAAS,MAC7C,EAEM,eAAQ,IAAI,8CAA+Cxb,CAAM,EAC1DA,CAEb,OAAaV,EAAO,CACd,eAAQ,MAAM,6CAA8CA,CAAK,EAC1D,CAAE,QAAS,GAAO,QAASA,EAAM,QAAS,OAAQ,CAAC,CAChE,CACA,CAOE,MAAM,2BAA2BipB,EAAU,CACzC,QAAQ,IAAI,+CAAgDA,CAAQ,EAEpE,GAAI,CAEF,KAAM,CAAE,WAAA/kB,EAAY,QAAAwjB,CAAO,EAAKuB,EAC1B,CAAE,SAAA7V,CAAQ,EAAKsU,EAErB,GAAI,EAACtU,GAAA,MAAAA,EAAU,eAAgB,EAACA,GAAA,MAAAA,EAAU,cACxC,eAAQ,KAAK,0DAA0D,EAChE,CAAE,QAAS,GAAO,QAAS,oBAAqB,OAAQ,CAAC,EAGlE,MAAMmV,EAAe,MAAM,KAAK,gBAAgBnV,EAAS,aAAcA,EAAS,YAAY,EAE5F,GAAImV,EAAa,SAAW,EAC1B,MAAO,CAAE,QAAS,GAAM,QAAS,2BAA4B,OAAQ,CAAC,EAGxE,IAAIC,EAAc,EAClB,MAAMtM,EAAS,GAGf,UAAWnU,KAASwgB,EAClB,GAAI,CACF,MAAM,KAAK,gCAAgCrkB,EAAY6D,CAAK,EAC5DygB,GACV,OAAiBxoB,EAAO,CACd,QAAQ,MAAM,kDAAkD,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EAClFkc,EAAO,KAAK,CAAE,QAASnU,EAAM,GAAI,MAAO/H,EAAM,QAAS,CACjE,CAGM,MAAMU,EAAS,CACb,QAASwb,EAAO,SAAW,EAC3B,QAAS,kCAAkC,OAAAsM,EAAW,kBACtD,OAAQA,EACR,OAAQtM,EAAO,OAAS,EAAIA,EAAS,MAC7C,EAEM,eAAQ,IAAI,gDAAiDxb,CAAM,EAC5DA,CAEb,OAAaV,EAAO,CACd,eAAQ,MAAM,+CAAgDA,CAAK,EAC5D,CAAE,QAAS,GAAO,QAASA,EAAM,QAAS,OAAQ,CAAC,CAChE,CACA,CAOE,MAAM,qBAAqBipB,EAAU,CACnC,eAAQ,IAAI,yCAA0CA,CAAQ,EAM9D,QAAQ,IAAI,qDAAqD,EAC1D,CAAE,QAAS,GAAM,QAAS,+CAAgD,OAAQ,CAAC,CAC9F,CAQE,MAAM,2BAA2B/kB,EAAYkQ,EAAa,CAExD,MAAM9Q,EAAe,MAAM,KAAK,yBAAyB,mBAAmB8Q,EAAY,EAAE,EACpFnL,EAAsB3F,EAAeA,EAAa,YAAc,GAIhE4lB,EAA2BjgB,EAAoB,KAAKuK,GACxDA,EAAI,iBAAmB,UACvBA,EAAI,eAAiBtP,EAAW,cAChCsP,EAAI,QAAUtP,EAAW,KAC/B,EAEI,GAAIglB,EAEF,OAAO,OAAOA,EAA0BhlB,CAAU,EAClDglB,EAAyB,UAAY,IAAI,KAAI,EAAG,YAAW,EAE3D,QAAQ,IAAI,+CAA+C,OAAAhlB,EAAW,MAAK,UAAS,OAAAA,EAAW,aAAY,cAAa,OAAAkQ,EAAY,GAAI,MACnI,CAML,MAAMhL,EAAgB,CACpB,GAAGlF,EACH,UAAW,IAAI,KAAI,EAAG,YAAW,CACzC,EACM+E,EAAoB,KAAKG,CAAa,EAEtC,QAAQ,IAAI,wCAAwC,OAAAlF,EAAW,MAAK,UAAS,OAAAA,EAAW,aAAY,cAAa,OAAAkQ,EAAY,GAAI,CACvI,CAGI,MAAM9S,EAAiB,CACrB,QAAS8S,EAAY,GACrB,YAAanL,EACb,aAAc,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,MAAM,KAAK,yBAAyB,oBAAoBmL,EAAY,GAAI9S,CAAc,CAC1F,CAQE,MAAM,8BAA8B4C,EAAYkQ,EAAa,CAE3D,MAAM9Q,EAAe,MAAM,KAAK,yBAAyB,mBAAmB8Q,EAAY,EAAE,EACpFnL,EAAsB3F,EAAeA,EAAa,YAAc,GAIhE4lB,EAA2BjgB,EAAoB,KAAKuK,GACxDA,EAAI,iBAAmB,UACvBA,EAAI,eAAiBtP,EAAW,cAChCsP,EAAI,QAAUtP,EAAW,KAC/B,EAEI,GAAIglB,EAEF,OAAO,OAAOA,EAA0BhlB,CAAU,EAClDglB,EAAyB,UAAY,IAAI,KAAI,EAAG,YAAW,EAE3D,QAAQ,IAAI,sCAAsC,OAAAhlB,EAAW,MAAK,UAAS,OAAAA,EAAW,aAAY,cAAa,OAAAkQ,EAAY,GAAI,MAC1H,CAEL,MAAMhL,EAAgB,CACpB,GAAGlF,EACH,UAAW,IAAI,KAAI,EAAG,YAAW,CACzC,EACM+E,EAAoB,KAAKG,CAAa,EAEtC,QAAQ,IAAI,wCAAwC,OAAAlF,EAAW,MAAK,UAAS,OAAAA,EAAW,aAAY,cAAa,OAAAkQ,EAAY,GAAE,sBAAqB,CAC1J,CAGI,MAAM9S,EAAiB,CACrB,QAAS8S,EAAY,GACrB,YAAanL,EACb,aAAc,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,MAAM,KAAK,yBAAyB,oBAAoBmL,EAAY,GAAI9S,CAAc,CAC1F,CAQE,MAAM,gCAAgC4C,EAAYkQ,EAAa,CAE7D,MAAM9Q,EAAe,MAAM,KAAK,yBAAyB,mBAAmB8Q,EAAY,EAAE,EACpFnL,EAAsB3F,EAAeA,EAAa,YAAc,GAEtE,GAAI2F,EAAoB,SAAW,EAAG,CACpC,QAAQ,IAAI,oCAAoC,OAAAmL,EAAY,GAAE,yCAAwC,EACtG,MACN,CAII,MAAM2U,EAAgB9f,EAAoB,UAAUuK,GAClDA,EAAI,iBAAmB,UACvBA,EAAI,eAAiBtP,EAAW,cAChCsP,EAAI,QAAUtP,EAAW,KAC/B,EAEI,GAAI6kB,IAAkB,GAAI,CACxB,MAAMI,EAAoBlgB,EAAoB8f,CAAa,EAC3D9f,EAAoB,OAAO8f,EAAe,CAAC,EAE3C,QAAQ,IAAI,sCAAsC,OAAAI,EAAkB,MAAK,UAAS,OAAAA,EAAkB,aAAY,gBAAe,OAAA/U,EAAY,GAAI,CACrJ,KAAW,CACL,QAAQ,IAAI,0CAA0C,OAAAlQ,EAAW,MAAK,UAAS,OAAAA,EAAW,aAAY,oBAAmB,OAAAkQ,EAAY,GAAE,gBAAe,EACtJ,MACN,CAGI,MAAM9S,EAAiB,CACrB,QAAS8S,EAAY,GACrB,YAAanL,EACb,aAAc,IAAI,KAAI,EAAG,YAAW,CAC1C,EAGI,MAAM,KAAK,yBAAyB,oBAAoBmL,EAAY,GAAI9S,CAAc,CAC1F,CASE,MAAM,uBAAuB6L,EAAUkb,EAAclM,EAAc,CACjE,GAAI,CAAC,KAAK,UACR,OAGF,MAAMlc,EAAY,CAChB,KAAM,KAAK,gBAAgB,aAC3B,SAAAkN,EACA,aAAAkb,EACA,aAAAlM,EACA,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,EAEI,MAAM,KAAK,mBAAmBlc,CAAS,CAC3C,CAUE,MAAM,wBAAwBkN,EAAU6K,EAAkBqQ,EAAclM,EAAc,CACpF,GAAI,CAAC,KAAK,UACR,OAGF,MAAMlc,EAAY,CAChB,KAAM,KAAK,gBAAgB,cAC3B,SAAAkN,EACA,iBAAA6K,EACA,aAAAqQ,EACA,aAAAlM,EACA,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,EAEI,MAAM,KAAK,mBAAmBlc,CAAS,CAC3C,CASE,MAAM,0BAA0BkN,EAAUkb,EAAclM,EAAc,CACpE,GAAI,CAAC,KAAK,UACR,OAGF,MAAMlc,EAAY,CAChB,KAAM,KAAK,gBAAgB,gBAC3B,SAAAkN,EACA,aAAAkb,EACA,aAAAlM,EACA,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,EAEI,MAAM,KAAK,mBAAmBlc,CAAS,CAC3C,CASE,MAAM,yBAAyBkN,EAAUkb,EAAclM,EAAc,CACnE,GAAI,CAAC,KAAK,UACR,OAGF,MAAMlc,EAAY,CAChB,KAAM,KAAK,gBAAgB,eAC3B,SAAAkN,EACA,aAAAkb,EACA,aAAAlM,EACA,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,EAEI,MAAM,KAAK,mBAAmBlc,CAAS,CAC3C,CAOE,MAAM,4BAA4BgpB,EAAU,CAC1C,GAAI,CAAC,KAAK,UAAW,CACnB,QAAQ,IAAI,8CAA8C,EAC1D,MACN,CAEI,QAAQ,IAAI,wCAAyCA,CAAQ,EAE7D,MAAMhpB,EAAY,CAChB,KAAMgpB,EAAS,KACf,SAAAA,EACA,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,EAEI,MAAM,KAAK,mBAAmBhpB,CAAS,CAC3C,CAME,cAAe,CACb,MAAO,CACL,UAAW,KAAK,UAChB,UAAW,KAAK,UAChB,YAAa,KAAK,UAAU,MAClC,CACA,CAKE,gBAAiB,CACf,KAAK,UAAY,GACjB,QAAQ,IAAI,uBAAuB,CACvC,CAKE,SAAU,CACR,KAAK,eAAc,EACnB,KAAK,eAAe,MAAK,EACzB,KAAK,UAAY,GACjB,KAAK,UAAY,GACjB,QAAQ,IAAI,kCAAkC,CAClD,CACA,CCtqCO,MAAMmpB,EAAkC,CAC7C,YAAY/J,EAAyBgK,EAAoB,CACvD,KAAK,wBAA0BhK,EAC/B,KAAK,mBAAqBgK,EAE1B,KAAK,mBAAkB,EACvB,KAAK,WAAU,EACf,KAAK,cAAa,EAElB,QAAQ,IAAI,+CAA+C,CAC/D,CAKE,oBAAqB,CAEnB,KAAK,oBAAsB,SAAS,eAAe,uBAAuB,EAC1E,KAAK,oBAAsB,SAAS,eAAe,uBAAuB,EAG1E,KAAK,wBAA0B,SAAS,eAAe,4BAA4B,EAEnF,KAAK,oBAAsB,KAC3B,KAAK,cAAgB,KACrB,KAAK,kBAAoB,SAAS,eAAe,qBAAqB,CAC1E,CAKE,YAAa,CAEX,KAAK,wBAAwB,iBAAiB,SAAU,IAAM,CAC5D,KAAK,qBAAoB,EACzB,MAAMC,EAAiB,KAAK,wBAAwB,MACpD,GAAIA,EACF,GAAI,CACF,KAAK,wBAAwB,wBAAwBA,CAAc,EACnE,KAAK,2BAA2B,SAAUA,CAAc,CAClE,OAAiBtpB,EAAO,CACd,MAAM,yBAAyB,OAAAA,EAAM,QAAS,CACxD,MAEQ,KAAK,wBAAwB,cAAa,EAC1C,KAAK,2BAA2B,QAAQ,CAEhD,CAAK,EAKD,KAAK,kBAAkB,iBAAiB,QAAS,IAAM,CACrD,KAAK,aAAY,CACvB,CAAK,EAGD,KAAK,wBAAwB,iBAAiB,eAAgB,IAAM,CAClE,KAAK,cAAa,CACxB,CAAK,EAGD,KAAK,wBAAwB,iBAAiB,eAAiB0C,GAAS,CACtE,QAAQ,IAAI,kDAAmDA,CAAI,EACnE,KAAK,0BAAyB,CACpC,CAAK,EAED,KAAK,wBAAwB,iBAAiB,eAAiBA,GAAS,CACtE,QAAQ,IAAI,kDAAmDA,CAAI,EACnE,KAAK,0BAAyB,CACpC,CAAK,EAED,KAAK,wBAAwB,iBAAiB,eAAiBA,GAAS,CACtE,QAAQ,IAAI,kDAAmDA,CAAI,EACnE,KAAK,0BAAyB,CACpC,CAAK,CACL,CAKE,2BAA4B,CAC1B,QAAQ,IAAI,oCAAoC,EAEhD,MAAMgT,EAAc,KAAK,wBAAwB,kBAAiB,EAClE,QAAQ,IAAI,0BAA2BA,CAAW,EAElD,MAAM6T,EAAmB,KAAK,wBAAwB,MAGtD,KAAK,wBAAwB,UAAY,kDAGzC7T,EAAY,QAAQmH,GAAQ,CAC1B,QAAQ,IAAI,2BAA4BA,CAAI,EAC5C,MAAM2M,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQ3M,EAAK,GACpB2M,EAAO,YAAc,GAAG,OAAA3M,EAAK,KAAI,MAAK,OAAAA,EAAK,KAAI,KAC/C2M,EAAO,MAAM,MAAQ3M,EAAK,MAC1B,KAAK,wBAAwB,YAAY2M,CAAM,CACrD,CAAK,EAGGD,GAAoB7T,EAAY,KAAKhE,GAAKA,EAAE,KAAO6X,CAAgB,IACrE,KAAK,wBAAwB,MAAQA,GAGvC,QAAQ,IAAI,+CAAgD,KAAK,wBAAwB,QAAQ,MAAM,EAEvG,KAAK,mBAAkB,CAC3B,CAKE,sBAAuB,CACrB,KAAK,mBAAkB,CAC3B,CAKE,oBAAqB,CACnB,MAAMD,EAAiB,KAAK,wBAAwB,MACpD,GAAI,CAACA,EAAgB,CACnB,MAAM,yCAAyC,EAC/C,MACN,CAEI,GAAI,CACF,KAAK,wBAAwB,wBAAwBA,CAAc,EACnE,KAAK,cAAa,EAClB,KAAK,2BAA2B,SAAUA,CAAc,CAC9D,OAAatpB,EAAO,CACd,MAAM,mCAAmC,OAAAA,EAAM,QAAS,CAC9D,CACA,CAKE,oBAAqB,CACnB,KAAK,wBAAwB,cAAa,EAC1C,KAAK,cAAa,EAClB,KAAK,2BAA2B,QAAQ,CAC5C,CAKE,cAAe,CACb,KAAK,mBAAmB,KAAI,CAChC,CAKE,eAAgB,CACd,KAAK,qBAAoB,EACzB,KAAK,mBAAkB,CAC3B,CAKE,sBAAuB,CACrB,MAAMypB,EAAc,KAAK,wBAAwB,YAC3CC,EAAe,KAAK,wBAAwB,qBAAoB,EActE,GAXID,IAAgB,UAClB,KAAK,oBAAoB,YAAc,OACvC,KAAK,oBAAoB,MAAM,MAAQ,UACvC,KAAK,oBAAoB,MAAM,WAAa,QAE5C,KAAK,oBAAoB,YAAc,MACvC,KAAK,oBAAoB,MAAM,MAAQ,sBACvC,KAAK,oBAAoB,MAAM,WAAa,OAI1CC,EAAc,CAChB,KAAK,oBAAoB,YAAcA,EAAa,KACpD,KAAK,oBAAoB,MAAM,MAAQA,EAAa,MACpD,KAAK,oBAAoB,MAAM,WAAa,MAG5C,MAAMC,EAAYD,EAAa,OAAS,QAAU,IAAM,IACxD,KAAK,oBAAoB,YAAc,GAAG,OAAAC,EAAS,KAAI,OAAAD,EAAa,KAC1E,MACM,KAAK,oBAAoB,YAAc,OACvC,KAAK,oBAAoB,MAAM,MAAQ,wBACvC,KAAK,oBAAoB,MAAM,WAAa,KAElD,CAKE,oBAAqB,CACC,KAAK,wBAAwB,YAC1B,KAAK,wBAAwB,MACpD,MAAME,EAAiB,KAAK,wBAAwB,kBAAiB,EAAG,OAAS,EAGjF,KAAK,wBAAwB,SAAW,GAGnCA,GAOH,KAAK,wBAAwB,MAAM,QAAU,QAC7C,KAAK,mBAAkB,IAPvB,KAAK,wBAAwB,MAAM,QAAU,OAI7C,KAAK,mBAAkB,EAK7B,CAKE,oBAAqB,CACnB,IAAI7gB,EAAU,SAAS,eAAe,yBAAyB,EAC1DA,IACHA,EAAU,SAAS,cAAc,KAAK,EACtCA,EAAQ,GAAK,0BACbA,EAAQ,MAAM,QAAU,yRAUxBA,EAAQ,UAAY,oLAKpB,KAAK,wBAAwB,WAAW,YAAYA,CAAO,GAE7DA,EAAQ,MAAM,QAAU,OAC5B,CAKE,oBAAqB,CACnB,MAAMA,EAAU,SAAS,eAAe,yBAAyB,EAC7DA,IACFA,EAAQ,MAAM,QAAU,OAE9B,CAKE,2BAA2BkK,EAAM4W,EAAS,KAAM,CAC9C,MAAMpN,EAAe,SAAS,cAAc,KAAK,EAgBjD,GAfAA,EAAa,MAAM,QAAU,6XAezBxJ,IAAS,SAAU,CACrB,MAAMpF,EAAa,KAAK,wBAAwB,cAAcgc,CAAM,EAC9DC,EAAWjc,EAAW,OAAS,QAAU,IAAM,IACrD4O,EAAa,UAAY,sWAMO,OAAA5O,EAAW,MAAK,yBAAwB,OAAAic,EAAQ,KAAI,OAAAjc,EAAW,KAAI,iIAG7F,OAAAA,EAAW,OAAS,QAAU,wBAA0B,uBAAsB,2BAG1F,MACM4O,EAAa,UAAY,4XAY3B,GAAI,CAAC,SAAS,eAAe,8BAA8B,EAAG,CAC5D,MAAM1J,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK,+BACXA,EAAM,YAAc,seAsBpB,SAAS,KAAK,YAAYA,CAAK,CACrC,CAEI,SAAS,KAAK,YAAY0J,CAAY,EAGtC,WAAW,IAAM,CACfA,EAAa,MAAM,UAAY,6BAC/B,WAAW,IAAM,CACXA,EAAa,eACfA,EAAa,OAAM,CAE7B,EAAS,GAAG,CACZ,EAAO,GAAI,CACX,CAKE,YAAa,CACX,QAAQ,IAAI,sDAAsD,EAClE,KAAK,0BAAyB,EAC9B,KAAK,cAAa,CACtB,CAKE,cAAe,CACb,QAAQ,IAAI,wCAAwC,EACpD,KAAK,0BAAyB,EAC9B,KAAK,cAAa,CACtB,CAKE,yBAA0B,CACxB,OAAO,KAAK,wBAAwB,KACxC,CAKE,sBAAsBoN,EAAQ,CAC5B,KAAK,wBAAwB,MAAQA,EACrC,KAAK,mBAAkB,CAC3B,CAKE,gBAAiB,CACf,OAAO,KAAK,wBAAwB,kBAAiB,EAAG,OAAS,CACrE,CAKE,kBAAmB,CACjB,MAAMJ,EAAc,KAAK,wBAAwB,YAC3CC,EAAe,KAAK,wBAAwB,qBAAoB,EAChEK,EAAa,KAAK,wBAAwB,kBAAiB,EAAG,OAEpE,MAAO,CACL,KAAMN,EACN,aAAcC,EAAe,CAC3B,GAAIA,EAAa,GACjB,KAAMA,EAAa,KACnB,KAAMA,EAAa,KACnB,MAAOA,EAAa,KAC5B,EAAU,KACJ,iBAAkBK,EAClB,eAAgBA,EAAa,CACnC,CACA,CACA,CCvZO,MAAMC,EAAmC,CAC9C,YAAY3K,EAAyB,CACnC,KAAK,wBAA0BA,EAC/B,KAAK,MAAQ,KACb,KAAK,qBAAuB,KAC5B,KAAK,WAAa,eAElB,KAAK,mBAAkB,EACvB,KAAK,WAAU,EAEf,QAAQ,IAAI,gDAAgD,CAChE,CAKE,oBAAqB,CACnB,KAAK,MAAQ,SAAS,eAAe,kCAAkC,EACvE,KAAK,SAAW,SAAS,eAAe,kCAAkC,EAG1E,KAAK,WAAa,SAAS,iBAAiB,aAAa,EACzD,KAAK,YAAc,SAAS,iBAAiB,cAAc,EAG3D,KAAK,gBAAkB,SAAS,eAAe,mBAAmB,EAClE,KAAK,qBAAuB,SAAS,eAAe,iBAAiB,EACrE,KAAK,WAAa,SAAS,eAAe,qBAAqB,EAC/D,KAAK,gBAAkB,SAAS,eAAe,mBAAmB,EAClE,KAAK,SAAW,SAAS,eAAe,kBAAkB,EAC1D,KAAK,UAAY,SAAS,eAAe,YAAY,EACrD,KAAK,eAAiB,SAAS,eAAe,kBAAkB,EAChE,KAAK,cAAgB,SAAS,eAAe,iBAAiB,EAG9D,KAAK,cAAgB,SAAS,eAAe,WAAW,EACxD,KAAK,YAAc,SAAS,eAAe,SAAS,EACpD,KAAK,eAAiB,SAAS,eAAe,WAAW,EACzD,KAAK,eAAiB,SAAS,eAAe,YAAY,EAC1D,KAAK,mBAAqB,SAAS,eAAe,iBAAiB,EACnE,KAAK,qBAAuB,SAAS,eAAe,kBAAkB,EACtE,KAAK,kBAAoB,SAAS,eAAe,eAAe,EAEhE,KAAK,sBAAwB,SAAS,eAAe,0BAA0B,EAC/E,KAAK,sBAAwB,SAAS,eAAe,oBAAoB,EACzE,KAAK,uBAAyB,SAAS,eAAe,qBAAqB,EAG3E,KAAK,iBAAmB,SAAS,eAAe,oBAAoB,EACpE,KAAK,iBAAmB,SAAS,eAAe,oBAAoB,EACpE,KAAK,kBAAoB,SAAS,eAAe,sBAAsB,EACvE,KAAK,uBAAyB,SAAS,eAAe,oBAAoB,EAC1E,KAAK,kBAAoB,SAAS,eAAe,sBAAsB,EAGvE,KAAK,iBAAmB,SAAS,eAAe,oBAAoB,EACpE,KAAK,uBAAyB,SAAS,eAAe,0BAA0B,EAChF,KAAK,oBAAsB,SAAS,eAAe,wBAAwB,EAC3E,KAAK,oBAAsB,SAAS,eAAe,wBAAwB,EAC3E,KAAK,gBAAkB,SAAS,eAAe,mBAAmB,EAClE,KAAK,eAAiB,SAAS,eAAe,kBAAkB,EAChE,KAAK,eAAiB,SAAS,eAAe,kBAAkB,EAChE,KAAK,iBAAmB,SAAS,eAAe,oBAAoB,EACpE,KAAK,cAAgB,SAAS,eAAe,gBAAgB,EAC7D,KAAK,qBAAuB,SAAS,eAAe,wBAAwB,CAChF,CAKE,YAAa,CAEX,KAAK,SAAS,iBAAiB,QAAS,IAAM,KAAK,MAAM,EACzD,KAAK,MAAM,iBAAiB,QAAUnT,GAAM,CACtCA,EAAE,SAAW,KAAK,OAAO,KAAK,KAAI,CAC5C,CAAK,EAGD,KAAK,WAAW,QAAQ+d,GAAU,CAChCA,EAAO,iBAAiB,QAAS,IAAM,CACrC,MAAMC,EAAUD,EAAO,QAAQ,IAC/B,KAAK,UAAUC,CAAO,CAC9B,CAAO,CACP,CAAK,EAGD,KAAK,WAAW,iBAAiB,QAAS,IAAM,KAAK,iBAAiB,EACtE,KAAK,cAAc,iBAAiB,QAAS,IAAM,KAAK,cAAc,EACtE,KAAK,SAAS,iBAAiB,SAAWhe,GAAM,KAAK,iBAAiBA,CAAC,CAAC,EAGxE,KAAK,eAAe,iBAAiB,QAAS,IAAM,CAClD,KAAK,mBAAmB,MAAQ,KAAK,eAAe,KAC1D,CAAK,EACD,KAAK,mBAAmB,iBAAiB,QAAS,IAAM,CAClD,oBAAoB,KAAK,KAAK,mBAAmB,KAAK,IACxD,KAAK,eAAe,MAAQ,KAAK,mBAAmB,MAE5D,CAAK,EAGD,KAAK,cAAc,iBAAiB,QAAS,IAAM,CACjD,GAAI,CAAC,KAAK,qBAAsB,CAC9B,MAAM6a,EAAK,KAAK,mBAAmB,KAAK,cAAc,KAAK,EAC3D,KAAK,YAAY,MAAQA,CACjC,CACA,CAAK,EAGD,KAAK,eAAe,iBAAiB,SAAU,IAAM,KAAK,uBAAuB,EAG7E,KAAK,oBACP,KAAK,kBAAkB,MAAM,QAAU,QAErC,KAAK,oBACP,KAAK,kBAAkB,MAAM,QAAU,QAEzC,KAAK,uBAAuB,iBAAiB,SAAU,IAAM,CAC3D,MAAM8C,EAAS,KAAK,uBAAuB,MACvCA,EACF,KAAK,wBAAwB,wBAAwBA,CAAM,EAE3D,KAAK,wBAAwB,cAAa,EAE5C,KAAK,kBAAiB,CAC5B,CAAK,EAGD,KAAK,oBAAoB,iBAAiB,QAAS,IAAM,KAAK,kBAAkB,EAChF,KAAK,oBAAoB,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,OAAO,EACrF,KAAK,gBAAgB,iBAAiB,SAAU,IAAM,KAAK,qBAAqB,EAChF,KAAK,iBAAiB,iBAAiB,QAAS,IAAM,KAAK,eAAe,EAG1E,KAAK,wBAAwB,iBAAiB,eAAiBnnB,GAAS,CACtE,KAAK,kBAAiB,CAC5B,CAAK,CACL,CAKE,MAAO,CACL,KAAK,eAAc,EACnB,KAAK,MAAM,MAAM,QAAU,MAC/B,CAKE,MAAO,CACL,KAAK,MAAM,MAAM,QAAU,OAC3B,KAAK,aAAY,CACrB,CAKE,UAAUwnB,EAAS,CACjB,KAAK,WAAaA,EAGlB,KAAK,WAAW,QAAQD,GAAU,CAC5BA,EAAO,QAAQ,MAAQC,EACzBD,EAAO,UAAU,IAAI,QAAQ,EAE7BA,EAAO,UAAU,OAAO,QAAQ,CAExC,CAAK,EAGD,KAAK,YAAY,QAAQzmB,GAAW,CAC9BA,EAAQ,KAAO,GAAG,OAAA0mB,EAAO,QAC3B1mB,EAAQ,UAAU,IAAI,QAAQ,EAE9BA,EAAQ,UAAU,OAAO,QAAQ,CAEzC,CAAK,EAGD,KAAK,eAAe0mB,CAAO,CAC/B,CAKE,eAAeA,EAAS,CACtB,OAAQA,EAAO,CACb,IAAK,eACH,KAAK,uBAAsB,EAC3B,MACF,IAAK,eACH,KAAK,kBAAiB,EACtB,KAAK,0BAAyB,EAC9B,MACF,IAAK,gBACH,KAAK,kBAAiB,EACtB,KACR,CACA,CAKE,gBAAiB,CACf,KAAK,uBAAsB,EAC3B,KAAK,kBAAiB,EACtB,KAAK,0BAAyB,EAC9B,KAAK,kBAAiB,CAC1B,CAKE,wBAAyB,CACvB,MAAMxU,EAAc,KAAK,wBAAwB,kBAAiB,EAElE,GAAIA,EAAY,SAAW,EACzB,KAAK,gBAAgB,UAAY,8YAO5B,CACL,MAAMyU,EAAYzU,EAAY,IAAImH,GAAQ,KAAK,mBAAmBA,CAAI,CAAC,EAAE,KAAK,EAAE,EAChF,KAAK,gBAAgB,UAAYsN,EAGjC,KAAK,sBAAqB,CAChC,CACA,CAKE,mBAAmBtN,EAAM,OACvB,MAAMuN,EAAYvN,EAAK,OAAS,QAAU,WAAcA,EAAK,OAAS,SAAW,YAAcA,EAAK,KACpG,MAAO,uDACyC,OAAAA,EAAK,GAAE,mHAEU,OAAAA,EAAK,MAAK,wFAE1C,OAAAA,EAAK,KAAI,uFAEN,OAAAA,EAAK,KAAI,MAAK,OAAAuN,EAAS,qCACrC,OAAAvN,EAAK,GAAE,2BACjB,QAAAtb,EAAAsb,EAAK,WAAL,MAAAtb,EAAe,SAAW,mBAAmB,OAAAsb,EAAK,SAAS,SAAQ,WAAY,GAAE,gLAKf,OAAAA,EAAK,GAAE,yGACH,OAAAA,EAAK,GAAE,wDAI7F,CAKE,uBAAwB,CACA,KAAK,gBAAgB,iBAAiB,kBAAkB,EAChE,QAAQoN,GAAU,CAC9BA,EAAO,iBAAiB,QAAS,IAAM,CACrC,MAAMI,EAASJ,EAAO,QAAQ,OACxBJ,EAASI,EAAO,QAAQ,OAE1BI,IAAW,OACb,KAAK,eAAeR,CAAM,EACjBQ,IAAW,UACpB,KAAK,iBAAiBR,CAAM,CAEtC,CAAO,CACP,CAAK,CACL,CAKE,iBAAkB,CAChB,KAAK,qBAAuB,KAC5B,KAAK,UAAU,YAAc,eAC7B,KAAK,eAAe,YAAc,cAClC,KAAK,SAAS,MAAK,EACnB,KAAK,eAAe,MAAQ,UAC5B,KAAK,mBAAmB,MAAQ,UAC5B,KAAK,wBACP,KAAK,sBAAsB,MAAQ,IAErC,KAAK,gBAAgB,MAAM,QAAU,QACrC,KAAK,sBAAqB,CAC9B,CAKE,eAAeA,EAAQ,WACrB,MAAMhN,EAAO,KAAK,wBAAwB,cAAcgN,CAAM,EAC9D,GAAKhN,EAcL,IAZA,KAAK,qBAAuBgN,EAC5B,KAAK,UAAU,YAAc,YAC7B,KAAK,eAAe,YAAc,cAGlC,KAAK,cAAc,MAAQhN,EAAK,KAChC,KAAK,YAAY,MAAQA,EAAK,GAC9B,KAAK,eAAe,MAAQA,EAAK,KACjC,KAAK,eAAe,MAAQA,EAAK,MACjC,KAAK,mBAAmB,MAAQA,EAAK,MACrC,KAAK,qBAAqB,MAAQA,EAAK,aAAe,GACtD,KAAK,kBAAkB,QAAQtb,EAAAsb,EAAK,WAAL,YAAAtb,EAAe,WAAY,GACtD,KAAK,sBAAuB,CAC9B,MAAM6P,GAAQjP,EAAA0a,EAAK,WAAL,YAAA1a,EAAe,aAC7B,KAAK,sBAAsB,OAASiP,GAAA,KAAAA,EAAS,IAAI,SAAQ,CAC/D,CACQ,KAAK,yBACP,KAAK,uBAAuB,QAAU,CAAC,GAACtO,EAAA+Z,EAAK,WAAL,MAAA/Z,EAAe,gBAIzD,KAAK,YAAY,SAAW,GAE5B,KAAK,gBAAgB,MAAM,QAAU,QACrC,KAAK,sBAAqB,EAC9B,CAKE,iBAAiB+mB,EAAQ,CACvB,MAAMhN,EAAO,KAAK,wBAAwB,cAAcgN,CAAM,EACzDhN,GAED,QAAQ,oDAAoD,OAAAA,EAAK,KAAI,yDAAwD,IAC/H,KAAK,wBAAwB,iBAAiBgN,CAAM,EACpD,KAAK,uBAAsB,EAC3B,KAAK,0BAAyB,EAEpC,CAKE,cAAe,CACb,KAAK,gBAAgB,MAAM,QAAU,OACrC,KAAK,qBAAuB,KAC5B,KAAK,YAAY,SAAW,EAChC,CAKE,iBAAiB3d,EAAG,OAClBA,EAAE,eAAc,EAEhB,MAAMoe,EAAW,IAAI,SAAS,KAAK,QAAQ,EACrCC,EAAW,CACf,GAAID,EAAS,IAAI,IAAI,EACrB,KAAMA,EAAS,IAAI,MAAM,EACzB,KAAMA,EAAS,IAAI,MAAM,EACzB,MAAOA,EAAS,IAAI,OAAO,EAC3B,YAAaA,EAAS,IAAI,aAAa,EACvC,SAAU,CACR,SAAUA,EAAS,IAAI,UAAU,CACzC,CACA,EAUI,GAPI,KAAK,wBAA0B,KAAK,uBAAuB,QAC7DC,EAAS,SAAS,cAAgB,GAElCA,EAAS,SAAS,cAAgB,GAIhCA,EAAS,OAAS,QAAS,CAC7B,MAAMC,KAAYjpB,EAAA,KAAK,wBAAL,YAAAA,EAA4B,QAAS,IAAI,KAAI,EAC/D,GAAIipB,IAAa,GAAI,CACnB,MAAM9mB,EAAS,WAAW8mB,CAAQ,EAC7B,OAAO,MAAM9mB,CAAM,IACtB6mB,EAAS,SAAS,aAAe7mB,EAE3C,CACA,CAEI,GAAI,CACE,KAAK,qBAEP,KAAK,wBAAwB,iBAAiB,KAAK,qBAAsB6mB,CAAQ,EAGjF,KAAK,wBAAwB,iBAAiBA,CAAQ,EAGxD,KAAK,aAAY,EACjB,KAAK,uBAAsB,EAC3B,KAAK,0BAAyB,CAEpC,OAAavqB,EAAO,CACd,MAAM,UAAU,OAAAA,EAAM,QAAS,CACrC,CACA,CAKE,mBAAmBkF,EAAM,CACvB,OAAOA,EACJ,YAAW,EACX,QAAQ,0BAA2B,GAAG,EACtC,QAAQ,MAAO,GAAG,EAClB,QAAQ,SAAU,EAAE,EACpB,UAAU,EAAG,EAAE,CACtB,CAKE,mBAAoB,CAClB,MAAMukB,EAAc,KAAK,wBAAwB,YAC3CC,EAAe,KAAK,wBAAwB,qBAAoB,EAEtE,KAAK,iBAAiB,YAAcD,IAAgB,SAAW,OAAS,MACxE,KAAK,iBAAiB,YAAcC,EAAeA,EAAa,KAAO,OAGnE,KAAK,oBACP,KAAK,kBAAkB,SAAWD,IAAgB,SAExD,CAKE,2BAA4B,CAC1B,MAAM/T,EAAc,KAAK,wBAAwB,kBAAiB,EAElE,KAAK,uBAAuB,UAAY,6CAExCA,EAAY,QAAQmH,GAAQ,OAE1B,MAAM2M,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQ3M,EAAK,GACpB,MAAMuN,EAAYvN,EAAK,OAAS,QAAU,WAAcA,EAAK,OAAS,SAAW,YAAcA,EAAK,KAC9F4N,GAASlpB,EAAAsb,EAAK,WAAL,MAAAtb,EAAe,QAAU,KAAO,GAC/CioB,EAAO,YAAc,GAAG,OAAAiB,GAAS,OAAA5N,EAAK,KAAI,MAAK,OAAAuN,EAAS,KACxD,KAAK,uBAAuB,YAAYZ,CAAM,CACpD,CAAK,EAGD,MAAM7gB,EAAU,MAAM,KAAK,KAAK,uBAAuB,OAAO,EACxD+hB,EAAa/hB,EAAQ,UAAUgiB,GAAOA,EAAI,QAAU,0BAA0B,EACpF,GAAID,EAAa,EAAG,CAClB,MAAMC,EAAMhiB,EAAQ+hB,CAAU,EAC9B,KAAK,uBAAuB,OAAOA,CAAU,EAC7C,KAAK,uBAAuB,IAAIC,EAAK,CAAC,CAC5C,CAEQ,KAAK,oBACP,KAAK,kBAAkB,SAAW,GAExC,CAKE,oBAAqB,CACnB,KAAK,wBAAwB,cAAa,EAC1C,KAAK,kBAAiB,CAC1B,CAKE,oBAAqB,CACnB,MAAMrB,EAAiB,KAAK,uBAAuB,MACnD,GAAKA,EAEL,GAAI,CACF,KAAK,wBAAwB,wBAAwBA,CAAc,EACnE,KAAK,kBAAiB,CAC5B,OAAatpB,EAAO,CACd,MAAM,UAAU,OAAAA,EAAM,QAAS,CACrC,CACA,CAKE,uBAAwB,CACtB,GAAI,CAAC,KAAK,sBAAuB,OACjC,MAAM4qB,EAAU,KAAK,eAAe,QAAU,QAC9C,KAAK,sBAAsB,MAAM,QAAUA,EAAU,OAAS,MAClE,CAKE,mBAAoB,SAClB,MAAMlV,EAAc,KAAK,wBAAwB,kBAAiB,EAC5DtR,EAAQ,KAAK,wBAAwB,SAAQ,EAEnD,KAAK,iBAAiB,YAAcsR,EAAY,OAChD,KAAK,uBAAuB,YAActR,EAAM,iBAGhD,MAAMgP,GAAW7R,EAAA,OAAO,sBAAP,YAAAA,EAA4B,SACvCqH,GAAiBzG,EAAAiR,GAAA,YAAAA,EAAU,eAAV,YAAAjR,EAAwB,GAE/C,GAAIyG,EAAgB,CAClB,MAAM2B,EAAa,KAAK,wBAAwB,mBAAmB3B,CAAc,EACjF,KAAK,wBAAwB2B,CAAU,CAC7C,CACA,CAME,wBAAwBA,EAAY,CAElC,IAAIsgB,EAAuB,SAAS,eAAe,qBAAqB,EACxE,GAAI,CAACA,EAAsB,CAEzBA,EAAuB,SAAS,cAAc,KAAK,EACnDA,EAAqB,GAAK,sBAC1BA,EAAqB,MAAM,QAAU,6JASrC,MAAMC,EAAgB,SAAS,cAAc,eAAe,EACxDA,GACFA,EAAc,YAAYD,CAAoB,CAEtD,CAGI,IAAIE,EAAY,uOAKyC,OAAAxgB,EAAW,MAAK,+BAIzE,GAAIA,EAAW,MAAQ,EAAG,CACxBwgB,GAAa,wEAEO,OAAAxgB,EAAW,WAAW,IAAG,QAAO,OAAAA,EAAW,WAAW,IAAG,4BAIzEA,EAAW,KAAK,OAAS,IAC3BwgB,GAAa,kGAEa,OAAAxgB,EAAW,KAAK,KAAK,IAAI,EAAC,iCAMtD,MAAMygB,EAAY,OAAO,QAAQzgB,EAAW,MAAM,EAAE,IAAI,CAAC,CAACsf,EAAQoB,CAAI,IAC7D,+JAEkD,OAAAA,EAAK,UAAS,qDAC3D,OAAAA,EAAK,SAAQ,MAAK,OAAAA,EAAK,MAAK,sCAGzC,EAAE,KAAK,EAAE,EAEND,IACFD,GAAa,2JAGP,OAAAC,EAAS,gCAIvB,CAEIH,EAAqB,UAAYE,CACrC,CAKE,kBAAmB,CACjB,MAAMtoB,EAAa,KAAK,wBAAwB,WAAU,EACpDsB,EAAO,IAAI,KAAK,CAAC,KAAK,UAAUtB,EAAY,KAAM,CAAC,CAAC,EAAG,CAC3D,KAAM,kBACZ,CAAK,EAEKhB,EAAM,IAAI,gBAAgBsC,CAAI,EAC9BC,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,KAAOvC,EACTuC,EAAE,SAAW,sBAAsB,WAAI,KAAI,EAAG,YAAW,EAAG,MAAM,GAAG,EAAE,CAAC,EAAC,SAEzE,SAAS,KAAK,YAAYA,CAAC,EAC3BA,EAAE,MAAK,EACP,SAAS,KAAK,YAAYA,CAAC,EAE3B,IAAI,gBAAgBvC,CAAG,EAEvB,QAAQ,IAAI,iCAAiC,CACjD,CAKE,qBAAsB,CACpB,MAAMge,EAAO,KAAK,gBAAgB,MAAM,CAAC,EACrCA,GACF,KAAK,eAAe,YAAcA,EAAK,KACvC,KAAK,eAAe,MAAM,QAAU,OACpC,KAAK,cAAc,MAAM,QAAU,QAEnC,KAAK,eAAe,MAAM,QAAU,MAE1C,CAKE,MAAM,eAAgB,SACpB,MAAMA,EAAO,KAAK,gBAAgB,MAAM,CAAC,EACzC,GAAKA,EAEL,GAAI,CACF,MAAMkH,EAAO,MAAMlH,EAAK,KAAI,EACtByL,EAAa,KAAK,MAAMvE,CAAI,EAE5BjmB,EAAS,KAAK,wBAAwB,WAAWwqB,CAAU,EAE7DxqB,EAAO,SACT,KAAK,qBAAqB,UAAY,yGAGvB,SAAAa,EAAA2pB,EAAW,cAAX,YAAA3pB,EAAwB,SAAU,EAAC,sBAAqB,SAAAY,EAAA+oB,EAAW,oBAAX,YAAA/oB,EAA8B,SAAU,EAAC,6CAKhH,KAAK,eAAc,GAEnB,KAAK,qBAAqB,UAAY,2EAEf,OAAAzB,EAAO,MAAK,gCAKrC,KAAK,cAAc,MAAM,QAAU,OAEzC,OAAaV,EAAO,CACd,KAAK,qBAAqB,UAAY,4EAEV,OAAAA,EAAM,QAAO,4BAGzC,KAAK,cAAc,MAAM,QAAU,OACzC,CACA,CACA,CCppBA,OAAO,iBAAiB,qBAAuB0K,GAAU,OAIvD,GAHA,QAAQ,MAAM,kCAAmCA,EAAM,MAAM,EAGzDA,EAAM,QAAU,OAAOA,EAAM,QAAW,UACxCA,EAAM,OAAO,SAAWA,EAAM,OAAO,QAAQ,SAAS,wBAAwB,EAAG,CACnF,QAAQ,KAAK,4EAA4E,EACzFA,EAAM,iBACN,OAIF,QAAQ,MAAM,uCAAwC,CACpD,OAAQA,EAAM,OACd,QAASA,EAAM,QACf,OAAOnJ,EAAAmJ,EAAM,SAAN,YAAAnJ,EAAc,MACtB,CACH,CAAC,EAGD,OAAO,iBAAiB,QAAUmJ,GAAU,CAI1C,GAHA,QAAQ,MAAM,qBAAsBA,EAAM,KAAK,EAG3CA,EAAM,OAASA,EAAM,MAAM,SAC3BA,EAAM,MAAM,QAAQ,SAAS,uBAAuB,EAAG,CACzD,QAAQ,KAAK,0EAA0E,EACvF,OAGF,QAAQ,MAAM,wBAAyB,CACrC,QAASA,EAAM,QACf,SAAUA,EAAM,SAChB,OAAQA,EAAM,OACd,MAAOA,EAAM,MACb,MAAOA,EAAM,MACd,CACH,CAAC,EAGD,IAAIygB,GAAM,KACNC,GAAgB,KAChBC,GAAU,KACVC,EAAa,KAGblf,EAAmB,KACnBgT,EAAiB,KACjBnK,EAA4B,KAC5B6M,EAAc,KACdyJ,GAAS,KACTC,GAAoB,KACpBvT,EAAsB,KACtBwT,EAAqB,KACrBC,GAAiB,KACjBC,EAAoC,KACpCC,EAAqC,KAGzC,MAAMxY,EAAW,CACf,cAAe,GACf,iBAAkB,GAClB,mBAAoB,KACpB,OAAQ,GACR,aAAc,KACd,aAAc,KACd,gBAAiB,IAEjB,WAAY,CACV,aAAc,GACd,mBAAoB,EACpB,cAAe,IAEnB,EAKA,SAASyY,IAAwC,CAE/C,GAAID,GAAsCD,EAAmC,CAC3E,QAAQ,IAAI,gEAAgE,EAC5E,OAGF,GAAI,CAACvM,GAAkB,CAACA,EAAe,wBAAyB,CAC9D,QAAQ,KAAK,gDAAgD,EAC7D,WAAW,IAAM,CACfyM,GAAA,CAAsC,EACrC,GAAG,EACN,OAGF,GAAI,CAEFD,EAAqC,IAAI5B,GAAmC5K,EAAe,uBAAuB,EAGlHuM,EAAoC,IAAIvC,GACtChK,EAAe,wBACfwM,CAAA,EAIFD,EAAkC,aAGlC,OAAO,oBAAoB,kCAAoCA,EAC/D,OAAO,oBAAoB,mCAAqCC,EAEhE,QAAQ,IAAI,eAAe,QACpB5rB,EAAO,CACd,QAAQ,MAAM,iBAAkBA,CAAK,EAEzC,CAGA,OAAO,8BAAgC6rB,GAKvC,eAAeC,IAAgB,CAC7B,QAAQ,IAAI,mBAAmB,EAE/B,GAAI,CAEFC,EAAwB,GAAI,2BAA4B,4BAA4B,EAGpFZ,GAAM,SAAS,eAAe,KAAK,EACnCC,GAAgB,SAAS,eAAe,gBAAgB,EACxDC,GAAU,SAAS,eAAe,UAAU,EAC5CC,EAAa,SAAS,eAAe,aAAa,EAElDS,EAAwB,GAAI,4BAA6B,iCAAiC,EAG1F3f,EAAmB,IAAIrF,GAIvBglB,EAAwB,GAAI,+BAAgC,oCAAoC,EAGhG,OAAO,oBAAsB,CAC3B,SAAA3Y,EACA,iBAAAhH,EACA,eAAgB,KAChB,UAAA4f,EACA,UAAAC,GACA,mBAAAC,CAAA,EAGFH,EAAwB,GAAI,kCAAmC,qCAAqC,EAGpG,GAAI,CACF,QAAQ,IAAI,yCAAyC,EACrD3M,EAAiB,IAAI3T,GAAe,mBAAmB,EACvD,OAAO,oBAAoB,eAAiB2T,CAAA,OACrCpf,EAAO,CACd,QAAQ,KAAK,uBAAwBA,EAAM,OAAO,EAIpD+rB,EAAwB,GAAI,gCAAiC,iDAAiD,EAG9G,GAAI,CACF9W,EAA4B,IAAI4I,GAChC5I,EAA0B,oBAAoB7I,CAAgB,EAC9D,OAAO,oBAAoB,0BAA4B6I,CAAA,OAChDjV,EAAO,CACd,QAAQ,KAAK,kCAAmCA,EAAM,OAAO,EAG/D+rB,EAAwB,GAAI,yCAA0C,4CAA4C,EAGlH,GAAI,CAEF,WAAW,IAAM,CACfF,GAAA,CAAsC,EACrC,GAAG,EAEN,QAAQ,IAAI,eAAe,QACpB7rB,EAAO,CACd,QAAQ,KAAK,gBAAiBA,EAAM,OAAO,EAG7C+rB,EAAwB,GAAI,4BAA6B,4CAA4C,EAGrG,GAAI,CACFjK,EAAc,IAAI7B,GAAY7T,EAAiB,iBAAiB,EAChEmf,GAAS,IAAI1J,GAAOC,CAAW,EAG/BA,EAAY,mBAEZ,OAAO,oBAAoB,YAAcA,EACzC,OAAO,oBAAoB,OAASyJ,GACpC,QAAQ,IAAI,WAAW,QAChBvrB,EAAO,CACd,QAAQ,KAAK,oBAAqBA,EAAM,OAAO,EAGjD+rB,EAAwB,GAAI,mCAAoC,6CAA6C,EAG7G,GAAI,CACFP,GAAoB,IAAIvE,GAAkB7a,EAAiB,iBAAiB,EAE5E,OAAO,oBAAoB,kBAAoBof,GAC/C,QAAQ,IAAI,YAAY,QACjBxrB,EAAO,CACd,QAAQ,KAAK,0BAA2BA,EAAM,OAAO,EAGvD+rB,EAAwB,GAAI,+BAAgC,gDAAgD,EAG5G,GAAI,CACF9T,EAAsB,IAAIgQ,GAAoB7b,EAAkBA,EAAiB,iBAAiB,EAElG,OAAO,oBAAoB,oBAAsB6L,EACjD,QAAQ,IAAI,iBAAiB,QACtBjY,EAAO,CACd,QAAQ,KAAK,+BAAgCA,EAAM,OAAO,EAG5D+rB,EAAwB,GAAI,uCAAwC,gDAAgD,EAGpH,GAAI,CACFN,EAAqB,IAAIrE,GAEzB,OAAO,oBAAoB,mBAAqBqE,EAChD,QAAQ,IAAI,YAAY,QACjBzrB,EAAO,CACd,QAAQ,KAAK,cAAeA,EAAM,OAAO,EAsB3C,GAnBA+rB,EAAwB,GAAI,4BAA6B,kDAAkD,EAG3G,MAAMI,GAAA,EAENJ,EAAwB,GAAI,0BAA2B,2CAA2C,EAGlGK,GAAA,EAEAL,EAAwB,GAAI,sBAAuB,mCAAmC,EAGtF,MAAMM,GAAA,EAGNC,GAAA,EAGKlN,EASH,QAAQ,IAAI,8BAA8B,MAR1C,IAAI,CACF,QAAQ,IAAI,uCAAuC,EACnDA,EAAiB,IAAI3T,GAAe,mBAAmB,EACvD,OAAO,oBAAoB,eAAiB2T,CAAA,OACrCpf,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,EAM/C+rB,EAAwB,GAAI,2BAA4B,2CAA2C,EAGnG,WAAW,SAAY,CACrB,GAAI,CACF,MAAMQ,GAAA,CAAmB,OAClBvsB,EAAO,CACd,QAAQ,MAAM,aAAcA,CAAK,EACjCwsB,EAAA,EACAR,EAAU,YAAahsB,EAAM,OAAO,EACtC,EACC,GAAG,EAENoT,EAAS,cAAgB,GACzB,QAAQ,IAAI,SAAS,QAEdpT,EAAO,CACd,QAAQ,MAAM,WAAYA,CAAK,EAC/BwsB,EAAA,EACAR,EAAU,UAAWhsB,EAAM,OAAO,EAEtC,CAKA,eAAemsB,IAA4B,CACzC,QAAQ,IAAI,aAAa,EAGzB,GAAI,CAEF,GADoB,MAAM/f,EAAiB,kBAAkB,kBAE3D,MAAMA,EAAiB,kBAAkB,aACzCgH,EAAS,iBAAmB,GAC5B,QAAQ,IAAI,YAAY,MAExB,OAAM,IAAI,MAAM,SAAS,CAC3B,OACOpT,EAAO,CACdoT,EAAS,iBAAmB,GAC5B,MAAMwR,EAAe5kB,EAAM,QAAQ,SAAS,OAAO,GAAKA,EAAM,QAAQ,SAAS,wBAAwB,EACrG,uCACAA,EAAM,QACR,QAAQ,KAAK,cAAe4kB,CAAY,EAW1C,MAAM6H,EAPe,CACnB,CAAE,KAAM,aAAc,MAAO,IAAM,CAAC,CAAC,SAAS,cAAc,QAAQ,EAAE,YACtE,CAAE,KAAM,YAAa,MAAO,IAAM,CAAC,CAAC,OAAO,WAC3C,CAAE,KAAM,cAAe,MAAO,IAAM,CAAC,CAAC,OAAO,QAC7C,CAAE,KAAM,wBAAyB,MAAO,IAAM,CAAC,CAAC,OAAO,qBAAqB,EAGzC,UAAc,CAACC,EAAI,OAAO,EAE/D,GAAID,EAAgB,OAAS,EAAG,CAC9B,MAAME,EAAcF,EAAgB,IAAIC,GAAOA,EAAI,IAAI,EAAE,KAAK,IAAI,EAClE,MAAM,IAAI,MAAM,kBAAkB,OAAAC,EAAa,EAGjD,QAAQ,IAAI,cAAc,CAC5B,CAKA,SAASP,IAAqB,CAC5B,QAAQ,IAAI,YAAY,EAGxB,MAAMQ,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,GACFA,EAAiB,iBAAiB,QAASC,EAAmB,EAIhE,MAAMC,EAAgB,SAAS,eAAe,iBAAiB,EAC3DA,GACFA,EAAc,iBAAiB,QAASb,EAAS,EAInD,MAAMc,EAAe,SAAS,eAAe,gBAAgB,EACzDA,GACFA,EAAa,iBAAiB,QAAS,IAAM,CACvC3N,GACFA,EAAe,WACjB,CACD,EAGH,MAAM4N,EAAe,SAAS,eAAe,gBAAgB,EACzDA,GACFA,EAAa,iBAAiB,QAAS,IAAM,CACvC5N,GACFA,EAAe,aACjB,CACD,EAIH,SAAS,iBAAiB,QAAU1U,GAAU,CAC5C,GAAIA,EAAM,OAAO,UAAU,SAAS,gBAAgB,EAAG,CACrD,MAAM1J,GAAY0J,EAAM,OAAO,QAAQ,UACvCuiB,GAAsBjsB,EAAS,EACjC,CACD,EAGD,MAAMksB,EAAU,SAAS,eAAe,UAAU,EAC9CA,GACFA,EAAQ,iBAAiB,QAAS,IAAM,CAClC9N,GACFA,EAAe,MACjB,CACD,EAGH,MAAM+N,EAAU,SAAS,eAAe,UAAU,EAC9CA,GACFA,EAAQ,iBAAiB,QAAS,IAAM,CAClC/N,GACFA,EAAe,MACjB,CACD,EAGH,MAAMgO,EAAc,SAAS,eAAe,eAAe,EACvDA,GACFA,EAAY,iBAAiB,QAASC,EAAyB,EAIjE,MAAMC,EAAe,SAAS,eAAe,gBAAgB,EACzDA,GACFA,EAAa,iBAAiB,QAASC,EAAe,EAIxD,MAAMC,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,GACFA,EAAiB,iBAAiB,QAAS,IAAM,CAC3CvY,GACFA,EAA0B,kBAC5B,CACD,EAMH,MAAM/B,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,GACFA,EAAiB,iBAAiB,QAASua,EAA4B,EAIzE,MAAMC,EAA4B,SAAS,eAAe,8BAA8B,EACpFA,GACFA,EAA0B,iBAAiB,SAAUC,EAA6B,EAIpF,MAAMC,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAgB,SAAS,eAAe,iBAAiB,EAC3DD,GAAoBC,IACtBD,EAAiB,iBAAiB,SAAUE,EAAoB,EAChED,EAAc,iBAAiB,SAAUE,EAAyB,GAIpE,MAAMC,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,GACFA,EAAiB,iBAAiB,SAAUC,EAAoB,EAIlE,MAAMC,EAAyB,SAAS,eAAe,2BAA2B,EAC9EA,GACFA,EAAuB,iBAAiB,SAAUC,EAA0B,EAI9E,MAAMC,EAAiB,SAAS,eAAe,kBAAkB,EAC3DC,EAAgB,SAAS,eAAe,iBAAiB,EACzDC,EAAiB,SAAS,eAAe,kBAAkB,EAE7DF,GACFA,EAAe,iBAAiB,QAASG,CAAkB,EAGzDF,GACFA,EAAc,iBAAiB,QAASE,CAAkB,EAGxDD,GACFA,EAAe,iBAAiB,QAASE,EAAgB,EAI3D,MAAMC,EAAY,SAAS,eAAe,kBAAkB,EACxDA,GACFA,EAAU,iBAAiB,QAAUviB,GAAM,CACrCA,EAAE,SAAWuiB,GACfF,EAAA,CACF,CACD,EAIH,MAAMG,EAAe,SAAS,eAAe,eAAe,EACxDA,GACFA,EAAa,iBAAiB,SAAUC,EAAwB,EAIlE,MAAMC,EAAc,SAAS,eAAe,cAAc,EACtDA,GACFA,EAAY,iBAAiB,QAASC,EAAsB,EAI9D,MAAMC,EAAoB,SAAS,eAAe,qBAAqB,EACnEA,GACFA,EAAkB,iBAAiB,QAASC,EAAoB,EAIlE,MAAMC,EAA0B,SAAS,eAAe,4BAA4B,EAChFA,GACFA,EAAwB,iBAAiB,QAASC,EAAuB,EAG3E,MAAMC,EAA2B,SAAS,eAAe,6BAA6B,EAClFA,GACFA,EAAyB,iBAAiB,QAAS,IAAM,CACvD,MAAMC,EAAe,SAAS,cAAc,iCAAiC,EAC7E,GAAIA,EAAc,CAChB,MAAM5pB,GAAqB4pB,EAAa,QAAU,eAClDC,GAAsB7pB,EAAkB,EAC1C,CACD,EAGH,MAAM8pB,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,GACFA,EAAiB,iBAAiB,QAASC,EAAmB,EAGhE,MAAMC,EAAgB,SAAS,eAAe,iBAAiB,EAC3DA,GACFA,EAAc,iBAAiB,QAASC,EAAgB,EAI1D,MAAMC,EAA4B,SAAS,eAAe,8BAA8B,EACpFA,GACFA,EAA0B,iBAAiB,QAASC,EAA4B,EAIlF,MAAMC,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAkB,SAAS,eAAe,mBAAmB,EAC7DC,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,GAA6B,SAAS,eAAe,8BAA8B,EAErFH,GACFA,EAAiB,iBAAiB,QAASI,EAA+B,EAGxEH,GACFA,EAAgB,iBAAiB,QAASG,EAA+B,EAGvEF,GACFA,EAAiB,iBAAiB,QAASG,EAA6B,EAGtEF,IACFA,GAA2B,iBAAiB,SAAUG,EAA8B,EAItF,MAAMC,GAAc,SAAS,eAAe,gCAAgC,EACxEA,IACFA,GAAY,iBAAiB,QAAUhkB,GAAM,CACvCA,EAAE,SAAWgkB,IACfH,GAAA,CACF,CACD,EAIH,SAAS,iBAAiB,UAAWI,EAAuB,EAG5D,MAAMnd,GAAkB,SAAS,eAAe,kBAAkB,EAC9DA,IACFA,GAAgB,iBAAiB,cAAgB9G,GAAMA,EAAE,gBAAgB,EAI3E,SAAS,iBAAiB,eAAgBkkB,EAAkB,EAG5D,MAAM9E,GAAa,SAAS,eAAe,aAAa,EACpDA,IACFA,GAAW,iBAAiB,QAAUpf,GAAM,CACtCA,EAAE,SAAWof,IACfW,GAAA,CACF,CACD,EAGH,MAAMoE,GAAsB,SAAS,eAAe,uBAAuB,EACvEA,IACFA,GAAoB,iBAAiB,QAAUnkB,GAAM,CAC/CA,EAAE,SAAWmkB,IACfpB,GAAA,CACF,CACD,EAIH,MAAMqB,GAAmB,SAAS,eAAe,oBAAoB,EAC/DC,GAAkB,SAAS,eAAe,mBAAmB,EAC7DC,GAAmB,SAAS,eAAe,oBAAoB,EAEjEF,IACFA,GAAiB,iBAAiB,QAASG,CAAoB,EAG7DF,IACFA,GAAgB,iBAAiB,QAASE,CAAoB,EAG5DD,IACFA,GAAiB,iBAAiB,QAASE,EAAkB,EAI/D,MAAMC,GAAuB,SAAS,eAAe,wBAAwB,EACvEC,GAAsB,SAAS,eAAe,uBAAuB,EACrEC,GAAuB,SAAS,eAAe,wBAAwB,EAEzEF,IACFA,GAAqB,iBAAiB,QAASG,EAAwB,EAGrEF,IACFA,GAAoB,iBAAiB,QAASE,EAAwB,EAGpED,IACFA,GAAqB,iBAAiB,QAASE,EAAsB,EAIvE,MAAMC,GAAc,SAAS,eAAe,oBAAoB,EAC5DA,IACFA,GAAY,iBAAiB,QAAU9kB,GAAM,CACvCA,EAAE,SAAW8kB,IACfP,EAAA,CACF,CACD,EAGH,MAAMQ,GAAkB,SAAS,eAAe,wBAAwB,EACpEA,IACFA,GAAgB,iBAAiB,QAAU/kB,GAAM,CAC3CA,EAAE,SAAW+kB,IACfH,GAAA,CACF,CACD,EAGH,QAAQ,IAAI,aAAa,CAC3B,CAKA,eAAejE,IAAsB,CAInC,GAHA,QAAQ,IAAI,YAAY,EAGpB,CAACzgB,EAAkB,CACrB,QAAQ,MAAM,sBAAsB,EACpC4f,EAAU,OAAQ,qBAAqB,EACvC,OAGF,GAAI,CAEF,MAAMkF,EAAY,SAAS,eAAe,oBAAoB,EACxDC,EAAeD,EAAU,YAC/BA,EAAU,YAAc,gBACxBA,EAAU,SAAW,GAGrBhF,EAAmB,0BAA0B,EAC7C,MAAMkF,EAAc,MAAMhlB,EAAiB,kBAAkB,iBAE7D,GAAI,CAACglB,EACH,MAAM,IAAI,MAAM,sBAAsB,EAGxC,QAAQ,IAAI,UAAWA,EAAY,WAAW,EAG9C,MAAMC,GAAA,EAGNnF,EAAmB,mBAAmB,EACtC,MAAMjlB,EAAS,MAAMmF,EAAiB,cAGtCgH,EAAS,mBAAqBge,EAAY,YAC1Che,EAAS,OAASnM,EAClBykB,GAAiB,CACf,KAAM0F,EAAY,YAClB,KAAM,yBACN,WAAYnqB,EAAO,QAIrBilB,EAAmB,UAAU,OAAAjlB,EAAO,OAAM,UAAS,EACnDiqB,EAAU,YAAc,oBAGxBI,GAAgBrqB,CAAM,EAGtBsqB,EAAA,EAEA,QAAQ,IAAI,YAAY,OAAAtqB,EAAO,OAAM,OAAM,QAEpCjH,EAAO,CACd,QAAQ,MAAM,WAAYA,CAAK,EAE/BgsB,EAAU,UAAWhsB,EAAM,OAAO,SACpC,CAEE,MAAMkxB,EAAY,SAAS,eAAe,oBAAoB,EAC9DA,EAAU,YAAc9d,EAAS,mBAAqB,UAAY,QAClE8d,EAAU,SAAW,GAEzB,CAKA,eAAeG,IAA2B,CACxC,QAAQ,IAAI,YAAY,EAExB,GAAI,CAEF,MAAMG,EAAmB,MAAMplB,EAAiB,kBAAkB,2BAElE,GAAI,CAAColB,GAAoBA,EAAiB,SAAW,EACnD,MAAM,IAAI,MAAM,yBAAyB,EAI3C,MAAMC,EAAaD,EAAiB,CAAC,EAC/B5wB,EAAe,MAAMwL,EAAiB,kBAAkB,gBAAgBqlB,EAAW,EAAE,EAE3F,GAAI,CAAC7wB,GAAgB,OAAO,KAAKA,CAAY,EAAE,SAAW,EACxD,MAAM,IAAI,MAAM,SAAS,OAAA6wB,EAAW,GAAE,eAAc,EAItD,GAAI,CAAC7wB,EAAa,QAAQ,GAAKA,EAAa,QAAQ,EAAE,SAAW,EAC/D,MAAM,IAAI,MAAM,SAAS,OAAA6wB,EAAW,GAAE,oBAAmB,EAG3D,QAAQ,IAAI,kBAAkB,OAAAD,EAAiB,OAAM,UAAS,QAEvDxxB,EAAO,CACd,cAAQ,MAAM,aAAcA,CAAK,EAC3BA,CAAA,CAEV,CAKA,SAASuxB,GAAsB,CAC7B,GAAI,CAACnlB,EAAkB,CACrBslB,GAAA,EACA,OAGF,MAAMC,EAAgBvlB,EAAiB,cAGjCwlB,EAAuB,SAAS,eAAe,gBAAgB,EAC/DC,EAAuB,SAAS,eAAe,wBAAwB,EACvEC,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAuB,SAAS,eAAe,uBAAuB,EACtEC,EAAuB,SAAS,eAAe,wBAAwB,EACvEC,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAkB,SAAS,eAAe,mBAAmB,EAEnE,GAAI,CAACN,EAAsB,OAO3B,GAJAA,EAAqB,MAAM,QAAU,QAIjCC,EAAsB,CACxB,MAAMvnB,EAAiBqnB,EAAc,gBAAmBA,EAAc,UAAYA,EAAc,QAChGE,EAAqB,YAAcvnB,CAAA,CAarC,GAVIwnB,IACFA,EAAiB,YAAcH,EAAc,OAI3CI,IACFA,EAAqB,YAAcJ,EAAc,eAAiB,KAIhEK,EAAsB,CACxB,MAAM1nB,EAAiBqnB,EAAc,gBAAmBA,EAAc,UAAYA,EAAc,QAC1FQ,EAAcR,EAAc,QAAU,EAAI,KAAK,OAAAA,EAAc,QAAO,aAAc,GACxFK,EAAqB,YAAc,GAAG1nB,SAAc,qBAAoB,OAAA6nB,EAAW,CAQrF,GALIF,IACFA,EAAiB,YAAc,SAAS,OAAAN,EAAc,MAAK,YAIzDO,EAAiB,CACnB,MAAME,EAAa,WAAWT,EAAc,cAAc,GAAK,EAC/DO,EAAgB,MAAM,MAAQE,EAAa,IAGvCA,GAAc,IAChBF,EAAgB,MAAM,WAAa,mDAC1BE,GAAc,GACvBF,EAAgB,MAAM,WAAa,mDAC1BE,GAAc,GACvBF,EAAgB,MAAM,WAAa,mDAC1BE,GAAc,GACvBF,EAAgB,MAAM,WAAa,mDAEnCA,EAAgB,MAAM,WAAa,kDACrC,CAIF,MAAM5nB,EAAiBqnB,EAAc,gBAAmBA,EAAc,UAAYA,EAAc,QAChG,QAAQ,IAAI,SAAS,OAAArnB,EAAc,KAAI,OAAAqnB,EAAc,MAAK,SAAQ,OAAAA,EAAc,eAAc,KAAI,CACpG,CAKA,SAASD,IAAoB,CAC3B,MAAME,EAAuB,SAAS,eAAe,gBAAgB,EACjEA,IACFA,EAAqB,MAAM,QAAU,OAEzC,CAKA,SAASN,GAAgBrqB,EAAQ,CAC/B,MAAM0P,EAAY,SAAS,eAAe,sBAAsB,EAChE,GAAI,CAACA,EAAW,OAKhB,GAFAA,EAAU,UAAY,GAElB1P,EAAO,SAAW,EAAG,CACvB0P,EAAU,UAAY,qCACtB,OAIF1P,EAAO,QAAQE,GAAS,CACtB,MAAMkrB,EAAYC,EAAoBnrB,CAAK,EAC3CwP,EAAU,YAAY0b,CAAS,EAChC,EAGDd,EAAA,EAuEA,WApE8B,SAAY,SACxC,QAAQ,IAAI,gEAAgE,EAG5E,IAAI3lB,EAAa,EACjB,MAAMzL,EAAa,GACboyB,EAAa,IAEnB,KAAO3mB,EAAazL,GAAY,CAC9B,IAAIoB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,eAAeY,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QACzE,GAAI,CACF,QAAQ,IAAI,kEAAkE,EAC9E,MAAMoF,EAAY,YAAY,MAG9B,IAAID,EAAW,OAAO,oBAAoB,YAAY,aAEtD,GAAI,CAACA,EAAU,CACb,QAAQ,IAAI,+EAA+E,EAC3F,GAAI,CACFA,EAAW,MAAM,OAAO,oBAAoB,YAAY,oBACxD,QAAQ,IAAI,+CAA+C,QACpDkrB,EAAW,CAClB,QAAQ,KAAK,uEAAwEA,EAAU,OAAO,EAEtG,MAAM,OAAO,oBAAoB,OAAO,2BACxC,MAAMtqB,EAAU,YAAY,MAC5B,QAAQ,IAAI,uDAAwD,QAAAA,EAAUX,GAAW,QAAQ,CAAC,EAAC,KAAI,EACvG,OACF,CAGF,GAAID,EAAU,CAEZ,MAAM,OAAO,oBAAoB,OAAO,iCAAiCA,CAAQ,EACjF,MAAMY,EAAU,YAAY,MAC5B,QAAQ,IAAI,yDAA0D,QAAAA,EAAUX,GAAW,QAAQ,CAAC,EAAC,KAAI,EACzG,QAAQ,IAAI,oEAAoE,MAC3E,CAEL,QAAQ,IAAI,wDAAwD,EACpE,MAAM,OAAO,oBAAoB,OAAO,2BACxC,MAAMW,EAAU,YAAY,MAC5B,QAAQ,IAAI,qDAAsD,QAAAA,EAAUX,GAAW,QAAQ,CAAC,EAAC,KAAI,EAGvG,aACOvH,EAAO,CAGd,GAFA,QAAQ,MAAM,sCAAuCA,CAAK,EAC1D4L,IACIA,GAAczL,EAAY,CAC5B,QAAQ,MAAM,qEAAqE,EACnF,OACF,MAGF,QAAQ,IAAI,+CAA+C,OAAAyL,EAAa,EAAC,KAAI,OAAAzL,EAAY,EACzFyL,IAIF,MAAM,IAAI,QAAQrL,GAAW,WAAWA,EAASgyB,CAAU,CAAC,EAG9D,QAAQ,KAAK,6EAA6E,GAI1D,GAAG,EAErC,QAAQ,IAAI,OAAO,OAAAtrB,EAAO,OAAM,UAAS,CAC3C,CAKA,SAASqrB,EAAoBnrB,EAAO,CAClC,MAAMzC,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,UAAY,aACjBA,EAAK,QAAQ,QAAUyC,EAAM,GAG7B,MAAMsrB,EAAaC,GAAcvrB,EAAM,MAAM,EAGvCwrB,EAAiBxrB,EAAM,WAAa,EACxC,GAAG,OAAAA,EAAM,WAAU,WAClBA,EAAM,UAAY,aAAe,WAG9ByrB,EAAiBzrB,EAAM,WAAW,OAAS,EAC/C,SAAS,OAAAA,EAAM,WAAW,KAAK,IAAI,GACnC,oBAGI0rB,EAAmB1rB,EAAM,kBAC7B,WAAW,OAAAA,EAAM,mBAAsB,GAGnC2rB,EAAY3rB,EAAM,SAAW,UACfA,EAAM,OAGtB2rB,EACFpuB,EAAK,UAAU,IAAI,SAAS,EAE5BA,EAAK,UAAU,OAAO,SAAS,EAIjC,MAAMquB,EAAiBD,GAAa3rB,EAAM,WACxC,yCAAyC,OAAAA,EAAM,WAAU,UAAW,GAGtE,IAAI6rB,EAAmB,GAGvB,OAAIF,EACFE,GAAoB,2EAA0E,OAAA7rB,EAAM,GAAE,+BAEtG6rB,GAAoB,6DAA4D,OAAA7rB,EAAM,GAAE,6BAG1FzC,EAAK,UAAY,+GAGiB,OAAA+tB,EAAU,0CACd,OAAAtrB,EAAM,GAAE,oGAEiB,OAAAA,EAAM,GAAE,0EAC1B,OAAA6rB,EAAgB,2GAIpB,OAAAL,EAAc,6CACd,OAAAM,GAAc9rB,EAAM,MAAM,EAAC,gGAG3B,OAAAyrB,EAAc,oBACvC,OAAAC,EAAmB,8BAA8B,OAAAA,EAAgB,UAAW,GAAE,0BAEhF,OAAAE,EAAc,oBAKpBruB,EAAK,iBAAiB,QAAS,IAAMwuB,GAAkB/rB,CAAK,CAAC,EAKtDzC,CACT,CAKA,eAAeyuB,GAAmBxyB,EAASU,EAAS,CAClD,GAAI,CAEF,GAAI,CAAC,OAAO,qBAAuB,CAAC,OAAO,oBAAoB,YAAa,CAC1E,QAAQ,KAAK,6CAA6C,OAAAA,EAAS,EACnE,OAGF,MAAMygB,EAAc,OAAO,oBAAoB,YAC/C,QAAQ,IAAI,sCAAsC,OAAAnhB,EAAO,KAAI,OAAAU,EAAS,EAGtE,MAAM+xB,EAAkB,UAAU,CAAC,EACnC,IAAI3R,EAEJ,GAAI2R,EAAiB,CAEnB,QAAQ,IAAI,sDAAsD,OAAA/xB,EAAS,EAC3E,GAAI,CACF,MAAMtB,EAAW,MAAM,MAAM,GAAG+hB,SAAY,QAAO,iBAAgB,OAAAnhB,EAAO,KAAI,OAAAU,EAAS,EACvF,GAAItB,EAAS,GAAI,CACf,MAAMW,EAAS,MAAMX,EAAS,OAC9B0hB,EAAQ/gB,EAAO,QAAWA,EAAO,MAAQ,GAAM,EAAC,MAEhD+gB,EAAQ,EACV,OACO4R,EAAa,CACpB,QAAQ,KAAK,4DAA4D,OAAAhyB,EAAO,KAAKgyB,CAAW,EAChG5R,EAAQ,MAAMK,EAAY,cAAcnhB,EAASU,CAAO,EAC1D,MAGAogB,EAAQ,MAAMK,EAAY,cAAcnhB,EAASU,CAAO,EAG1D,MAAMwlB,EAAYpF,EAAQA,EAAM,OAAS,EACzC,QAAQ,IAAI,qBAAqB,OAAAoF,EAAS,eAAc,OAAAxlB,EAAS,EAEjE,MAAMilB,EAAQ,SAAS,eAAe,oBAAoB,OAAAjlB,EAAS,EAC/DilB,GACF,QAAQ,IAAI,uCAAuC,OAAAjlB,EAAS,EACxDwlB,EAAY,GACdP,EAAM,UAAY,qCAAqC,OAAAO,EAAS,WAChEP,EAAM,MAAM,QAAU,eACtBA,EAAM,UAAY,mBAClB,QAAQ,IAAI,kCAAkC,OAAAO,EAAS,eAAc,OAAAxlB,EAAS,IAG9EilB,EAAM,UAAY,GAClBA,EAAM,MAAM,QAAU,OACtB,QAAQ,IAAI,iCAAiC,OAAAjlB,EAAO,cAAa,GAEnE,QAAQ,IAAI,iCAAiC,OAAAA,EAAO,MAAK,OAAAwlB,EAAS,SAAQ,GAE1E,QAAQ,MAAM,2CAA2C,OAAAxlB,EAAO,2BAA0B,OAAAA,EAAO,IAAG,CACtG,OACOrB,EAAO,CAEd,QAAQ,MAAM,6CAA6C,OAAAqB,EAAO,KAAKrB,EAAM,OAAO,EAGpF,MAAMsmB,EAAQ,SAAS,eAAe,oBAAoB,OAAAjlB,EAAS,EAC/DilB,IACFA,EAAM,UAAY,GAClBA,EAAM,MAAM,QAAU,OACtB,QAAQ,IAAI,0CAA0C,OAAAjlB,EAAS,EACjE,CAEJ,CAGA,OAAO,mBAAqB8xB,GAK5B,SAAST,GAActwB,EAAQ,CAC7B,OAAQA,EAAA,CACN,IAAK,YACH,MAAO,IACT,IAAK,cACH,MAAO,KACT,IAAK,UACH,MAAO,KACT,IAAK,UACL,QACE,MAAO,IAEb,CAKA,SAAS6wB,GAAc7wB,EAAQ,CAC7B,OAAQA,EAAA,CACN,IAAK,YACH,MAAO,WACT,IAAK,cACH,MAAO,cACT,IAAK,UACH,MAAO,UACT,IAAK,UACL,QACE,MAAO,cAEb,CAKA,SAASkxB,IAA2B,OAClC,QAAQ,IAAI,WAAW,EAGvBlgB,EAAS,aAAe,KACxBA,EAAS,aAAe,KAGxBmgB,GAAA,EAGIte,IACFA,EAA0B,QAC1B,QAAQ,IAAI,oEAAoE,GAIlF,MAAMue,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,IACFA,EAAiB,MAAM,QAAU,SAI/BjyB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,SAC9B,OAAO,oBAAoB,OAAO,sBAAsB,KAAM,IAAI,EAClE,QAAQ,IAAI,kDAAkD,GAIhE2qB,EAAmB,8CAA8C,EAGjEuH,GAAA,EAGAC,EAAA,CACF,CAKA,SAASH,IAAsB,OAC7B,QAAQ,IAAI,SAAS,EAGjBnU,GACFA,EAAe,aAIbnK,IACFA,EAA0B,QAC1B,QAAQ,IAAI,oEAAoE,GAIlF7B,EAAS,aAAe,KAGxBugB,GAAA,EAGA,MAAMC,EAAqB,SAAS,eAAe,qBAAqB,EACpEA,IACFA,EAAmB,UAAY,mDAIR,SAAS,iBAAiB,iBAAiB,EACnD,QAAQ3J,GAAU,CACjCA,EAAO,UAAU,OAAO,UAAU,EAClCA,EAAO,SAAW,GACnB,EAGD,MAAM4J,EAAe,SAAS,eAAe,qBAAqB,EAC9DA,GAAgB,CAACzgB,EAAS,eAC5BygB,EAAa,YAAc,yBAIzBtyB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,SAC9B,OAAO,oBAAoB,OAAO,sBAAsB,KAAM,IAAI,EAClE,QAAQ,IAAI,6CAA6C,EAE7D,CAKA,eAAe2xB,GAAkB/rB,EAAO,SAItC,GAHA,QAAQ,IAAI,QAASA,EAAM,EAAE,EAGzB,CAACiF,EAAkB,CACrB,QAAQ,MAAM,sBAAsB,EACpC4f,EAAU,OAAQ,qBAAqB,EACvC,OAGF,GAAI,CAEF,GAAI5Y,EAAS,cAAgBgM,EAC3B,GAAI,CACF,MAAM1D,EAAqB0D,EAAe,oBACtC1D,EAAmB,UAAU,OAAS,IACxC,QAAQ,IAAI,mBAAoBtI,EAAS,aAAa,EAAE,EACxD,MAAMhH,EAAiB,qBACrBgH,EAAS,aAAa,GACtBsI,EAAmB,WAErB,QAAQ,IAAI,aAAa,EAGzB,MAAM,iCAAiCtI,EAAS,aAAa,EAAE,EAC/D,QAAQ,IAAI,eAAe,EAC7B,OACOpT,EAAO,CACd,QAAQ,KAAK,iBAAkBA,CAAK,EAMxCuzB,GAAA,EAGAngB,EAAS,aAAejM,EAGxB2sB,GAAwB3sB,CAAK,EAC7B4sB,GAAyB5sB,EAAM,EAAE,EAGjC+kB,EAAmB,WAAW,OAAA/kB,EAAM,GAAE,iBAAgB,EACtD,MAAMvG,EAAe,MAAMwL,EAAiB,eAAejF,EAAM,EAAE,EAUnE,GARA,QAAQ,IAAI,MAAM,OAAAA,EAAM,GAAE,UAAUvG,CAAY,GAG5CW,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC9B,OAAO,oBAAoB,OAAO,gBAAgB4F,EAAM,EAAE,GAIxDhF,EAAA,OAAO,sBAAP,MAAAA,EAA4B,YAAa,CAE3C,MAAM6xB,EAAc,OAAO,OAAOpzB,CAAY,EAAE,OAAO,IAAI0E,GAAOA,EAAI,EAAE,EACxE,OAAO,oBAAoB,YAAY,aAAa6B,EAAM,GAAI6sB,EAAY,MAAM,EAAG,CAAC,CAAC,EAIvF,MAAMC,GAAuB9sB,EAAOvG,CAAY,EAEhDsrB,EAAmB,UAAU,OAAA/kB,EAAM,GAAE,aAAY,OAAAA,EAAM,WAAU,UAAS,EAG1EssB,GAAA,EAGAC,EAAA,CAA+B,OAExB1zB,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9BgsB,EAAU,WAAYhsB,EAAM,OAAO,EAEvC,CAKA,eAAei0B,GAAuB9sB,EAAOvG,EAAc,CACzD,MAAM4yB,EAAmB,SAAS,eAAe,oBAAoB,EAC/DI,EAAqB,SAAS,eAAe,qBAAqB,EAClEM,EAAgB,SAAS,eAAe,iBAAiB,EAE/D,GAAI,CAACV,GAAoB,CAACI,GAAsB,CAACM,EAAe,OAGhEV,EAAiB,MAAM,QAAU,QAGjCI,EAAmB,UAAY,kDAG/B,MAAMO,EAAiB,OAAO,KAAKvzB,CAAY,EAAE,OAAO0H,GAAQ1H,EAAa0H,CAAI,EAAE,OAAS,CAAC,EAyB7F,GAxBA4rB,EAAc,YAAc,mBAAmB,OAAAC,EAAe,QAGrC,SAAS,iBAAiB,iBAAiB,EACnD,QAAQlK,GAAU,CACjC,MAAMjpB,EAAYipB,EAAO,QAAQ,UAC3BmK,EAAYxzB,EAAaI,CAAS,GAAKJ,EAAaI,CAAS,EAAE,OAAS,EAE9EipB,EAAO,SAAW,CAACmK,EACnBnK,EAAO,UAAU,OAAO,UAAU,EAGlC,MAAMzI,EAAa4S,EAAYxzB,EAAaI,CAAS,EAAE,OAAS,EAC1DqzB,EAAapK,EAAO,YAAY,MAAM,GAAG,EAAE,CAAC,EAAE,OACpDA,EAAO,YAAc,GAAG,OAAAoK,EAAU,MAAK,OAAA7S,EAAU,KAE7C4S,EACFnK,EAAO,MAAQ,GAAG,OAAAjpB,EAAS,MAAK,OAAAwgB,EAAU,WAE1CyI,EAAO,MAAQ,GAAG,OAAAjpB,EAAS,aAC7B,CACD,EAGGmG,EAAM,kBAAmB,CAC3B,MAAMmtB,EAAiB,SAAS,cAAc,qBAAqB,OAAAntB,EAAM,kBAAiB,KAAI,EAC1FmtB,GAAkB,CAACA,EAAe,WACpCA,EAAe,UAAU,IAAI,UAAU,EAEvC,MAAMC,GAAsB3zB,EAAauG,EAAM,iBAAiB,GAAK,EAAE,EACzE,CAEJ,CAKA,eAAe8lB,GAAsBjsB,EAAW,CAG9C,GAFA,QAAQ,IAAI,QAASA,CAAS,EAE1B,CAACoS,EAAS,aAAc,CAC1B4Y,EAAU,OAAQ,QAAQ,EAC1B,OAGF,GAAI,CAEuB,SAAS,iBAAiB,iBAAiB,EACnD,QAAQ/B,GAAU,CACjCA,EAAO,UAAU,OAAO,UAAU,EAC9BA,EAAO,QAAQ,YAAcjpB,GAC/BipB,EAAO,UAAU,IAAI,UAAU,CACjC,CACD,EAGD7d,EAAiB,qBAAqBgH,EAAS,aAAa,GAAIpS,CAAS,EACzEoS,EAAS,aAAa,kBAAoBpS,EAG1CkrB,EAAmB,WAAW,OAAAlrB,EAAS,iBAAgB,EACvD,MAAMD,EAAS,MAAMqL,EAAiB,eAAegH,EAAS,aAAa,GAAIpS,CAAS,EAExF,QAAQ,IAAI,GAAG,OAAAA,EAAS,UAAS,OAAAD,EAAO,OAAM,OAAM,EAGpD,MAAMwzB,GAAsBxzB,CAAM,EAG9BA,EAAO,OAAS,GAClB,MAAMyzB,EAAkBzzB,EAAO,CAAC,EAAG,EAAK,EAG1CmrB,EAAmB,OAAO,OAAAlrB,EAAS,UAAS,OAAAD,EAAO,OAAM,OAAM,QAExDf,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9BgsB,EAAU,WAAYhsB,EAAM,OAAO,EAEvC,CAKA,SAAS8zB,GAAwB3sB,EAAO,CACtC,MAAM0sB,EAAe,SAAS,eAAe,qBAAqB,EAC9DA,IACFA,EAAa,YAAc,UAAU,OAAA1sB,EAAM,IAE/C,CAKA,SAAS4sB,GAAyBU,EAAiB,CAEjD,SAAS,iBAAiB,aAAa,EAAE,QAAQ/vB,GAAQ,CACvDA,EAAK,UAAU,OAAO,UAAU,EACjC,EAGD,MAAMgwB,EAAe,SAAS,cAAc,mBAAmB,OAAAD,EAAe,KAAI,EAC9EC,GACFA,EAAa,UAAU,IAAI,UAAU,CAEzC,CAKA,eAAeH,GAAsBxzB,EAAQ,CAC3C,MAAM4V,EAAY,SAAS,eAAe,qBAAqB,EAC/D,GAAKA,EAKL,IAFAA,EAAU,UAAY,GAElB5V,EAAO,SAAW,EAAG,CACvB4V,EAAU,UAAY,uCACtB,OAIF,QAAS9Q,EAAI,EAAGA,EAAI9E,EAAO,OAAQ8E,IAAK,CACtC,MAAMkC,EAAQhH,EAAO8E,CAAC,EAChB8uB,EAAY,MAAMC,GAAqB7sB,EAAOlC,IAAM,CAAC,EAC3D8Q,EAAU,YAAYge,CAAS,EAGjC,QAAQ,IAAI,OAAO,OAAA5zB,EAAO,OAAM,UAAS,EAC3C,CAKA,eAAe6zB,GAAqB7sB,EAAO8sB,EAAU,GAAO,CAC1D,MAAMF,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,kBACtBA,EAAU,QAAQ,QAAU5sB,EAAM,GAE9B8sB,GACFF,EAAU,UAAU,IAAI,UAAU,EAIpC,IAAIjtB,EAAiB,GACjBwX,EAAkB,EAEtB,GAAI,CACF,GAAI9S,EAAkB,CACpB,MAAMxJ,EAAc,MAAMwJ,EAAiB,oBAAoBrE,EAAM,EAAE,EACnEnF,GAAeA,EAAY,OAAS,IACtC8E,EAAiB,GACjBwX,EAAkBtc,EAAY,OAC9B+xB,EAAU,UAAU,IAAI,iBAAiB,EAC3C,CACF,OACO30B,EAAO,EAIhB20B,EAAU,UAAY,+DAEC,OAAA5sB,EAAM,KAAI,gBAAe,OAAAA,EAAM,GAAE,uEAElD,OAAAL,EAAiB,iCAAiC,OAAAwX,EAAe,UAAW,GAAE,+DAC3B,OAAAnX,EAAM,GAAE,iHAGnC,OAAAA,EAAM,WAAU,kBACxC,OAAAL,EAAiB,mDAAqD,GAAE,oBAShF,eAAeotB,EAAiCzzB,EAAS,CACvD,QAAQ,IAAI,mBAAmB,OAAAA,EAAS,EAExC,MAAMszB,EAAY,SAAS,cAAc,mBAAmB,OAAAtzB,EAAO,KAAI,EACvE,GAAI,CAACszB,EAAW,CACd,QAAQ,KAAK,iBAAiB,OAAAtzB,EAAO,UAAS,EAC9C,OAGF,GAAI,CACF,QAAQ,IAAI,kBAAkB,OAAAA,EAAO,YAAW,EAChD,MAAMuB,EAAc,MAAMwJ,EAAiB,oBAAoB/K,CAAO,EAChEqG,EAAiB9E,GAAeA,EAAY,OAAS,EACrDsc,EAAkBtc,EAAcA,EAAY,OAAS,EAE3D,QAAQ,IAAI,cAAc,OAAAvB,EAAO,WAAU6d,SAAe,QAAO,EAG7DxX,GACFitB,EAAU,UAAU,IAAI,iBAAiB,EACzC,QAAQ,IAAI,+BAA+B,IAE3CA,EAAU,UAAU,OAAO,iBAAiB,EAC5C,QAAQ,IAAI,+BAA+B,GAI7C,IAAII,EAAkBJ,EAAU,cAAc,mBAAmB,EAC7DjtB,GACGqtB,IACHA,EAAkB,SAAS,cAAc,KAAK,EAC9CA,EAAgB,UAAY,mBAC5BJ,EAAU,cAAc,kBAAkB,EAAE,YAAYI,CAAe,EACvE,QAAQ,IAAI,mBAAmB,GAEjCA,EAAgB,YAAc7V,EAC9B,QAAQ,IAAI,mBAAmBA,SAAiB,GACvC6V,IACTA,EAAgB,SAChB,QAAQ,IAAI,iBAAiB,GAI/B,IAAIC,EAAgBL,EAAU,cAAc,oBAAoB,EAC5DjtB,EACGstB,IACHA,EAAgB,SAAS,cAAc,KAAK,EAC5CA,EAAc,UAAY,oBAC1BA,EAAc,YAAc,cAC5BL,EAAU,cAAc,iBAAiB,EAAE,YAAYK,CAAa,EACpE,QAAQ,IAAI,8BAA8B,GAEnCA,IACTA,EAAc,SACd,QAAQ,IAAI,8BAA8B,GAG5C,QAAQ,IAAI,kBAAkB,OAAA3zB,EAAS,QAEhCrB,EAAO,CACd,QAAQ,MAAM,gBAAiBA,CAAK,EACtC,CAIF,cAAO,iCAAmC80B,EACxCH,EAAU,iBAAiB,QAAS,IAAMH,EAAkBzsB,EAAO,EAAI,CAAC,EAGxEktB,GAAmBN,EAAW5sB,CAAK,EAG/BqL,EAAS,cACX+f,GAAmB/f,EAAS,aAAa,GAAIrL,EAAM,EAAE,EAGhD4sB,CACT,CAKA,eAAeM,GAAmBC,EAAkBh0B,EAAW,CAC7D,GAAI,CACF,MAAMi0B,EAAaD,EAAiB,cAAc,KAAK,EACjDE,EAAiBF,EAAiB,cAAc,oBAAoB,EAG1E,GAAI,CAAC9oB,GAAoB,CAACA,EAAiB,kBAAmB,CAC5D,QAAQ,MAAM,wCAAwC,EACtDgpB,EAAe,YAAc,QAC7BA,EAAe,MAAM,MAAQ,UAC7B,OAIF,MAAM/oB,EAAW,MAAMD,EAAiB,kBAAkB,eAAelL,CAAS,EAGlFi0B,EAAW,OAAS,IAAM,CACxBC,EAAe,MAAM,QAAU,OAC/BD,EAAW,MAAM,QAAU,SAG7BA,EAAW,QAAU,IAAM,CACzBC,EAAe,YAAc,OAC7BA,EAAe,MAAM,MAAQ,WAG/BD,EAAW,IAAM9oB,CAAA,OAEVrM,EAAO,CACd,QAAQ,MAAM,WAAYA,CAAK,EAC/B,MAAMo1B,EAAiBF,EAAiB,cAAc,oBAAoB,EAC1EE,EAAe,YAAc,OAC7BA,EAAe,MAAM,MAAQ,UAEjC,CAKA,eAAeZ,EAAkBzsB,EAAO6R,EAAgB,GAAM,SAE5D,GAAIxG,EAAS,WAAW,aAAc,CACpC,QAAQ,IAAI,iDAAiD,OAAArL,EAAM,KAAI,wBAAuB,EAC9F,OAIF,MAAMvH,EAAM,KAAK,MACjB,GAAIA,EAAM4S,EAAS,WAAW,mBAAqBA,EAAS,WAAW,cAAe,CAGpF,GAFA,QAAQ,IAAI,wCAAwC,OAAArL,EAAM,KAAI,iBAAgB,OAAAvH,EAAM4S,EAAS,WAAW,mBAAkB,iBAAgB,EAEtI,OAAO,mBAAoB,CAC7B,MAAMkH,EAAYlH,EAAS,WAAW,eAAiB5S,EAAM4S,EAAS,WAAW,oBACjF,OAAO,mBAAmB,sCAAsC,OAAAkH,EAAS,KAAI,EAE7E,WAAW,IAAM,CACX,OAAO,oBACT,OAAO,mBAAmB,sBAAsB,CAClD,EACCA,EAAY,GAAG,EAEpB,OAIFlH,EAAS,WAAW,aAAe,GACnCA,EAAS,WAAW,mBAAqB5S,EAEzC,GAAI,CAIF,GAHA,QAAQ,IAAI,QAASuH,EAAM,IAAI,EAG3BqL,EAAS,cAAgBgM,EAC3B,GAAI,CAEF,MAAMiW,EAAcjiB,EAAS,aAAa,GACpCsI,EAAqB0D,EAAe,oBACtC1D,EAAmB,UAAU,OAAS,IACxC,QAAQ,IAAI,sBAAsB,OAAAA,EAAmB,UAAU,OAAM,qBAAoB,OAAA2Z,EAAa,EACtG,MAAMjpB,EAAiB,qBACrBipB,EACA3Z,EAAmB,WAErB,QAAQ,IAAI,kDAAkD,OAAA2Z,EAAa,EAG3E,MAAM,iCAAiCA,CAAW,EAClD,QAAQ,IAAI,8CAA8C,OAAAA,EAAa,EACzE,OACOr1B,EAAO,CACd,QAAQ,KAAK,8CAA8C,QAAAuB,EAAA6R,EAAS,eAAT,YAAA7R,EAAuB,GAAE,KAAKvB,CAAK,EAKlG,MAAMs1B,EAAuB,CAACliB,EAAS,cACVA,EAAS,cAAgBA,EAAS,cAClC,CAACA,EAAS,aAAa,GAAG,WAAWA,EAAS,aAAa,EAAE,EAmB1F,GAhBAA,EAAS,aAAerL,EAGxBwtB,GAA8BxtB,EAAM,EAAE,GAGlC5F,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC9B,OAAO,oBAAoB,OAAO,gBAAgB4F,EAAM,EAAE,EAIxDqL,EAAS,cACXhH,EAAiB,iBAAiBgH,EAAS,aAAa,GAAIrL,CAAK,EAI/DqX,EAAgB,CAElBA,EAAe,eAGf,MAAM7F,EAAeic,GAAA,EACfC,EAAmBC,GAAA,EAGnBC,EAAqB/b,GAAiB,CAAC0b,EAC7C,QAAQ,IAAI,uBAAuB,OAAA1b,EAAa,4BAA2B,OAAA0b,EAAoB,0BAAyB,OAAAK,EAAoB,EAE5I,MAAMvW,EAAe,UAAUrX,EAAO4tB,CAAkB,EAGpDL,GAEF,QAAQ,IAAI,gBAAgB,EAC5B,WAAW,IAAM,CACflW,EAAe,aAAY,EAC1B,GAAG,GACGxF,GAAiBL,EAAa,UAEvC6F,EAAe,QAAQ7F,EAAa,SAAS,EAC7C,QAAQ,IAAI,eAAe,OAAAA,EAAa,UAAS,IAAG,GAC3CK,EACT,QAAQ,IAAI,kBAAkB,GAE9B,QAAQ,IAAI,gBAAgB,EAC5BwF,EAAe,eAIjB,GAAI,CACF,QAAQ,IAAI,kBAAkB,OAAArX,EAAM,GAAI,EACxC,MAAMkB,EAAsB,MAAMmD,EAAiB,oBAAoBrE,EAAM,EAAE,EAC/E,GAAIkB,GAAuBA,EAAoB,OAAS,EAAG,CAKzD,GAJAmW,EAAe,mBAAmB,CAAE,UAAWnW,CAAA,CAAqB,EACpE,QAAQ,IAAI,YAAY,OAAAA,EAAoB,OAAM,UAAS,EAGvDmW,EAAe,wBAAyB,CAC1C,MAAMwW,EAAoB3sB,EAAoB,OAAOuK,GAAOA,EAAI,iBAAmB,QAAQ,EACvFoiB,EAAkB,OAAS,IAC7B,QAAQ,IAAI,cAAc,OAAAA,EAAkB,OAAM,qCAAoC,EACtFxW,EAAe,wBAAwB,6BAA6BrX,EAAM,GAAI6tB,CAAiB,EACjG,CAIExW,EAAe,MAAM,2BACvB,WAAW,IAAM,CACfA,EAAe,wBACf,QAAQ,IAAI,iCAAiC,GAC5C,GAAG,EAEN,QAAQ,IAAI,iCAAiC,CAC/C,MAGAA,EAAe,iBACf,QAAQ,IAAI,WAAW,OAAArX,EAAM,GAAE,SAAQ,CACzC,OACO/H,EAAO,CACd,QAAQ,KAAK,iBAAkBA,CAAK,EACpCof,EAAe,gBAAe,CAChC,MAEA,QAAQ,MAAM,oBAAoB,EAClC4M,EAAU,SAAU,oBAAoB,EAI1C,GAAI/W,GAA6B7B,EAAS,aACxC,GAAI,CAKF,MAAMpN,GAJS,MAAMoG,EAAiB,eACpCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,oBAEE,aAAiB9N,EAAI,KAAOyC,EAAM,EAAE,EACxD0P,EAAuB2H,EAAiBA,EAAe,UAAU,OAAS,EAEhF,MAAMnK,EAA0B,cAC9B7B,EAAS,aAAa,GACtBA,EAAS,aAAa,kBACtBpN,EACAyR,CAAA,CACF,OACOzX,EAAO,CACd,QAAQ,KAAK,aAAcA,CAAK,EAKpC,MAAM61B,EAAA,EAGFzW,GACF,WAAW,IAAM,CACfA,EAAe,uBAAuBxF,CAAa,GAClD,GAAG,EAGR,QAAQ,IAAI,QAAQ,QAEb5Z,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9BgsB,EAAU,SAAUhsB,EAAM,OAAO,SACnC,CAEEoT,EAAS,WAAW,aAAe,GACnC,QAAQ,IAAI,qDAAqD,OAAArL,EAAM,KAAM,EAEjF,CAKA,SAASwtB,GAA8BO,EAAiB,CAEtD,SAAS,iBAAiB,kBAAkB,EAAE,QAAQC,GAAS,CAC7DA,EAAM,UAAU,OAAO,UAAU,EAClC,EAGD,MAAMC,EAAgB,SAAS,cAAc,mBAAmB,OAAAF,EAAe,KAAI,EAC/EE,IACFA,EAAc,UAAU,IAAI,UAAU,EAGtCC,GAAkBD,CAAa,EAEnC,CAKA,SAASC,GAAkBf,EAAkB,CAC3C,MAAMve,EAAY,SAAS,eAAe,qBAAqB,EAC/D,GAAI,GAACA,GAAa,CAACue,GAEnB,GAAI,CAEF,MAAMre,EAAgBF,EAAU,wBAC1Buf,EAAgBhB,EAAiB,wBAGjCiB,EAAqBxf,EAAU,UAC/Byf,EAAqBlB,EAAiB,UACtCmB,EAAkBxf,EAAc,OAChCyf,EAAkBJ,EAAc,OAGhCK,EAAkBH,EAAsBC,EAAkB,EAAMC,EAAkB,EAGxF3f,EAAU,SAAS,CACjB,IAAK4f,EACL,SAAU,SACX,EAED,QAAQ,IAAI,WAAW,OAAArB,EAAiB,QAAQ,QAAS,QAElDl1B,EAAO,CACd,QAAQ,KAAK,YAAaA,CAAK,EAEnC,CAKA,eAAe61B,GAAgC,CAC7C,GAAI,CAACziB,EAAS,cAAgB,CAACA,EAAS,aAAc,CACpDugB,GAAA,EACA,OAGF,MAAM6C,EAAgB,SAAS,eAAe,2BAA2B,EACnE9wB,EAAoB,SAAS,eAAe,qBAAqB,EACjE+wB,EAAmB,SAAS,eAAe,mBAAmB,EAC9D9rB,EAAkB,SAAS,eAAe,mBAAmB,EAC7D+rB,EAAyB,SAAS,eAAe,0BAA0B,EAEjF,GAAKF,EAGL,CAAAA,EAAc,MAAM,QAAU,QAE9B,GAAI,CAEF,MAAMz1B,EAAS,MAAMqL,EAAiB,eACpCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,mBAGlB3J,EAAe1I,EAAO,UAAUuE,GAAOA,EAAI,KAAO8N,EAAS,aAAa,EAAE,EAGhF1N,EAAkB,YAAc+D,GAAgB,EAC9C,GAAG,OAAAA,EAAe,EAAC,OAAM,OAAA1I,EAAO,QAChC,QAGF,MAAM41B,EAAmB,MAAMvqB,EAAiB,oBAAoBgH,EAAS,aAAa,EAAE,EACrEujB,GAAoBA,EAAiB,OAAS,EAInEF,EAAiB,YAAc,WAE/BA,EAAiB,YAAc,gBAIjC,IAAI5yB,EAAiB,EACrB,UAAWkE,KAAShH,EAAQ,CAC1B,MAAMiH,EAAmB,MAAMoE,EAAiB,oBAAoBrE,EAAM,EAAE,EACxEC,GAAoBA,EAAiB,OAAS,GAChDnE,GACF,CAGF,MAAM+yB,EAAW71B,EAAO,OAAS,EAAI,KAAK,MAAO8C,EAAiB9C,EAAO,OAAU,GAAG,EAAI,EAC1F4J,EAAgB,YAAc,GAAG,OAAA9G,EAAc,KAAI,OAAA9C,EAAO,OAAM,MAAK,OAAA61B,EAAQ,MAG7EF,EAAuB,MAAM,QAAU,aAEhC12B,EAAO,CACd,QAAQ,MAAM,cAAeA,CAAK,EAClC2zB,GAAA,CAA4B,EAEhC,CAKA,SAASA,IAA8B,CACrC,MAAM6C,EAAgB,SAAS,eAAe,2BAA2B,EACnEE,EAAyB,SAAS,eAAe,0BAA0B,EAE7EF,IAAeA,EAAc,MAAM,QAAU,QAC7CE,IAAwBA,EAAuB,MAAM,QAAU,OACrE,CAKA,eAAe3H,IAAuB,CACpC,GAAI,CAAC3P,GAAkB,CAAChM,EAAS,aAAc,CAC7C4Y,EAAU,OAAQ,WAAW,EAC7B,OAKF,GAFuB5M,EAAe,oBAEnB,UAAU,SAAW,EAAG,CACzC4M,EAAU,OAAQ,SAAS,EAC3B,OAIF6K,GAAA,CACF,CAKA,SAASA,IAA0B,CACjC,MAAM9U,EAAQ,SAAS,eAAe,uBAAuB,EACzDA,IACFA,EAAM,MAAM,QAAU,OAE1B,CAKA,SAASkN,IAA0B,CACjC,MAAMlN,EAAQ,SAAS,eAAe,uBAAuB,EACzDA,IACFA,EAAM,MAAM,QAAU,OAE1B,CAKA,eAAeqN,GAAsB7pB,EAAoB,OACvD,GAAI,CAAC6Z,GAAkB,CAAChM,EAAS,aAAc,CAC7C4Y,EAAU,OAAQ,WAAW,EAC7B,OAGF,GAAI,CACF,MAAM1qB,EAAiB8d,EAAe,oBAEtC,GAAI9d,EAAe,UAAU,SAAW,EAAG,CACzC0qB,EAAU,OAAQ,SAAS,EAC3B,OAIF,MAAM8K,EAAoB,SAAS,cAAc,2CAA2C,EACtFC,EAAqBD,GAAqBA,EAAkB,QAAU,kBAGtEE,EAAa,MAAM5qB,EAAiB,qBACxCgH,EAAS,aAAa,GACtB9R,EAAe,UACfiE,EACA,CAAE,mBAAAwxB,CAAA,CAAmB,EAYvB,GATA7K,EAAmB8K,EAAW,SAAW,OAAO,OAAA11B,EAAe,UAAU,OAAM,QAAO,EAGtFu0B,EAAA,EAGAtE,EAAA,EAGItc,GAA6B7B,EAAS,cAAgBA,EAAS,aAAc,CAK/E,MAAMpN,GAJS,MAAMoG,EAAiB,eACpCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,oBAEE,UAAU9N,GAAOA,EAAI,KAAO8N,EAAS,aAAa,EAAE,EACxEsI,EAAqB,MAAMtP,EAAiB,oBAAoBgH,EAAS,aAAa,EAAE,EACxFqE,EAAuBiE,EAAqBA,EAAmB,OAAS,EAE9E,MAAMzG,EAA0B,cAC9B7B,EAAS,aAAa,GACtBA,EAAS,aAAa,kBACtBpN,EACAyR,CAAA,CACF,CAYF,GATA,QAAQ,IAAI,eAAe,EAGvBrE,EAAS,eACX,MAAM,iCAAiCA,EAAS,aAAa,EAAE,EAC/D,QAAQ,IAAI,YAAY,GAItB,CAAC7N,GAAsByxB,EAAW,gBAAkBA,EAAW,eAAe,OAAS,EAAG,CAC5F,QAAQ,IAAI,MAAM,OAAAA,EAAW,eAAe,OAAM,gBAAe,EACjE,UAAW31B,KAAW21B,EAAW,eAC/B,MAAM,iCAAiC31B,CAAO,CAChD,EAIEE,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAAU6R,EAAS,eACjD,MAAM,OAAO,oBAAoB,OAAO,qBAAqBA,EAAS,aAAa,EAAE,EACrF,QAAQ,IAAI,WAAW,GAIzB6b,GAAA,CAAwB,OAEjBjvB,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9BgsB,EAAU,OAAQ,cAAc,OAAAhsB,EAAM,QAAS,EAEnD,CAKA,SAASsvB,IAAsB,OAC7B,GAAI,CAAClc,EAAS,aAAc,CAC1B4Y,EAAU,OAAQ,QAAQ,EAC1B,OAGF,MAAM7kB,EAAQiM,EAAS,aAGvB,GAAIjM,EAAM,SAAW,YAEnB8vB,GAAyB9vB,EAAM,EAAE,MAC5B,CAEL,GAAIA,EAAM,SAAW,UAAW,CAC9B6kB,EAAU,OAAQ,mBAAmB,EACrC,OAGF,MAAMkL,EAAiB,YAAY,OAAA/vB,EAAM,GAAE,YAE3C,GAAI,CAAC,QAAQ+vB,CAAc,EACzB,OAGF,GAAI,CAEF9qB,EAAiB,kBAAkBjF,EAAM,GAAI,WAAW,EACxDA,EAAM,OAAS,YAGf,MAAMkrB,EAAY,SAAS,cAAc,mBAAmB,OAAAlrB,EAAM,GAAE,KAAI,EACxE,GAAIkrB,EAAW,CACb,MAAM8E,EAAU7E,EAAoBnrB,CAAK,EACzCkrB,EAAU,WAAW,aAAa8E,EAAS9E,CAAS,GAGhD9wB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC9B,WAAW,IAAM,CACf,OAAO,oBAAoB,OAAO,qBAAqB4F,EAAM,EAAE,GAC9D,GAAG,CACR,CAIFoqB,EAAA,EAGAmC,EAAA,EAEA0D,EAAY,OAAQ,MAAM,OAAAjwB,EAAM,GAAE,UAAS,EAG3C,MAAMkwB,EAAYjrB,EAAiB,oBAAoBjF,EAAM,EAAE,EAE3DkwB,EAEqB,QAAQ,MAAM,OAAAlwB,EAAM,GAAE,4BAA2B,OAAAkwB,EAAU,GAAE,IAAG,IAErFnE,GAAkBmE,CAAS,EAC3BnL,EAAmB,OAAO,OAAA/kB,EAAM,GAAE,SAAQ,OAAAkwB,EAAU,GAAI,GAG1DnL,EAAmB,eAAe,CACpC,OAEOlsB,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9BgsB,EAAU,OAAQhsB,EAAM,OAAO,EACjC,CAEJ,CAKA,eAAewvB,IAAmB,CAChC,GAAI,CAACpjB,EAAkB,CACrB4f,EAAU,OAAQ,SAAS,EAC3B,OAGF,GAAI,CAEF,MAAMsL,GAAA,CAAuB,OAEtBt3B,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9BgsB,EAAU,OAAQhsB,EAAM,OAAO,EAEnC,CAKA,eAAes3B,IAAyB,CAEtC,MAAMC,EAAY,48CA+BZC,EAAgB,SAAS,eAAe,cAAc,EACxDA,GACFA,EAAc,SAIhB,SAAS,KAAK,mBAAmB,YAAaD,CAAS,EAGvD,MAAME,GAAA,EAGN,MAAMC,GAAA,EAGN,SAAS,eAAe,mBAAmB,EAAE,iBAAiB,QAAS,IAAM,CAC3E,SAAS,eAAe,cAAc,EAAE,QAAO,CAChD,EAED,SAAS,eAAe,oBAAoB,EAAE,iBAAiB,QAAS,SAAY,CAClF,SAAS,eAAe,cAAc,EAAE,SACxC,MAAMC,GAAA,CAAc,CACrB,EAED,SAAS,eAAe,qBAAqB,EAAE,iBAAiB,QAAS,SAAY,CACnF,MAAMD,GAAA,CAAsB,CAC7B,CACH,CAKA,eAAeD,IAAoB,CACjC,MAAMG,EAAe,SAAS,eAAe,eAAe,EAC5D,GAAKA,EAEL,GAAI,CAEF,MAAMn1B,EAAa,MAAMo1B,GAAA,EACnBzzB,EAAQ0zB,GAAqBr1B,CAAU,EAEvC6gB,EAAO,6CACyB,OAAAlf,EAAM,gBAAe,4DACtB,OAAAA,EAAM,eAAc,8DAClB,OAAAA,EAAM,yBAAwB,uPAKrEwzB,EAAa,UAAYtU,CAAA,OAClBtjB,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,EACvD43B,EAAa,UAAY,qFAE7B,CAKA,eAAeD,IAAgB,CAC7B,GAAI,CAEF,MAAMl1B,EAAa,MAAMo1B,GAAA,EACnBzzB,EAAQ0zB,GAAqBr1B,CAAU,EAE7C,GAAI2B,EAAM,kBAAoB,EAAG,CAC/B4nB,EAAU,gBAAiB,yCAAyC,EACpE,OAIF,MAAM+L,EAAkB,CACtB,WAAY,IAAI,OAAO,cACvB,QAAS,MACT,OAAQ,mBACR,YAAa,kFACb,MAAO,CACL,gBAAiB3zB,EAAM,gBACvB,eAAgBA,EAAM,eACtB,yBAA0BA,EAAM,yBAChC,cAAeA,EAAM,eAEvB,YAAa3B,EAAW,YACxB,cAAeA,EAAW,eAItBsB,EAAO,IAAI,KAAK,CAAC,KAAK,UAAUg0B,EAAiB,KAAM,CAAC,CAAC,EAAG,CAChE,KAAM,mBACP,EAEKt2B,EAAM,IAAI,gBAAgBsC,CAAI,EAC9BC,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,KAAOvC,EACTuC,EAAE,SAAW,eAAe,WAAI,OAAO,cAAc,MAAM,GAAG,EAAE,CAAC,EAAC,SAElE,SAAS,KAAK,YAAYA,CAAC,EAC3BA,EAAE,QACF,SAAS,KAAK,YAAYA,CAAC,EAE3B,IAAI,gBAAgBvC,CAAG,EAEvB,MAAMsH,EAAU,gCAAgC,OAAA3E,EAAM,gBAAe,iBAAgB,OAAAA,EAAM,eAAc,cACzG8nB,EAAmBnjB,CAAO,EAC1B,QAAQ,IAAI,2BAA4BgvB,CAAe,QAEhD/3B,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CgsB,EAAU,gBAAiBhsB,EAAM,OAAO,EAE5C,CAKA,eAAe63B,IAAsB,CACnC,MAAMp1B,EAAa,CACjB,YAAa,GACb,cAAe,EAAC,EAGlB,GAAI,CAAC2J,GAAoB,CAACA,EAAiB,kBACzC,MAAM,IAAI,MAAM,WAAW,EAG7B,MAAM4rB,EAAoB5rB,EAAiB,kBAG3C,GAAI4rB,EAAkB,eAAiBA,EAAkB,kBAAmB,CAC1E,MAAMz1B,EAAoBy1B,EAAkB,kBAAkB,0BAC9D,GAAI,CAACz1B,EACH,MAAM,IAAI,MAAM,UAAU,EAI5B,eAAiB,CAAC2C,EAAMC,CAAM,IAAK5C,EAAkB,UACnD,GAAI4C,EAAO,OAAS,QAAUD,EAAK,SAAS,OAAO,EACjD,GAAI,CAEF,MAAM1B,EAAU,MADH,MAAM2B,EAAO,WACC,OACrBzC,EAAO,KAAK,MAAMc,CAAO,EAE/B,GAAI0B,EAAK,SAAS,iBAAiB,EAAG,CAEpC,MAAMvE,EAAUuE,EAAK,QAAQ,kBAAmB,EAAE,EAClDzC,EAAW,cAAc9B,CAAO,EAAI,CAClC,QAAS+B,EAAK,QACd,WAAYA,EAAK,WACjB,SAAUA,EAAK,SACf,OAAQA,EAAK,OACf,KACK,CAEL,MAAMrB,EAAU6D,EAAK,QAAQ,QAAS,EAAE,EACxC,GAAIxC,EAAK,aAAeA,EAAK,YAAY,OAAS,EAAG,CAEnD,MAAM/B,EAAU+B,EAAK,SAAWu1B,GAAwB52B,CAAO,EAE/DoB,EAAW,YAAYpB,CAAO,EAAI,CAChC,QAASqB,EAAK,SAAWrB,EACzB,QAAAV,EACA,YAAa+B,EAAK,YAClB,UAAWA,EAAK,UAChB,QAASA,EAAK,QAChB,CACF,CACF,OACO1C,EAAO,CACd,QAAQ,KAAK,WAAW,OAAAkF,EAAI,MAAMlF,CAAK,EAG7C,KACK,CAEL,SAAW,CAACW,EAASW,CAAc,IAAK02B,EAAkB,YACpD12B,EAAe,SAAW,YAC5BmB,EAAW,cAAc9B,CAAO,EAAI,CAClC,QAAAA,EACA,WAAYW,EAAe,WAC3B,SAAUA,EAAe,SACzB,OAAQA,EAAe,SAM7B,SAAW,CAACD,EAASC,CAAc,IAAK02B,EAAkB,iBACpD12B,EAAe,aAAeA,EAAe,YAAY,OAAS,IACpEmB,EAAW,YAAYpB,CAAO,EAAI,CAChC,QAAAA,EACA,QAASC,EAAe,QACxB,YAAaA,EAAe,YAC5B,UAAWA,EAAe,UAC1B,QAASA,EAAe,SAG9B,CAGF,OAAOmB,CACT,CAKA,SAASq1B,GAAqBr1B,EAAY,CACxC,MAAMqC,EAAkB,OAAO,KAAKrC,EAAW,WAAW,EAAE,OACtDy1B,EAAgB,OAAO,KAAKz1B,EAAW,aAAa,EAAE,OAE5D,IAAI4B,EAAiB,EACrB,UAAWnD,KAAa,OAAO,OAAOuB,EAAW,WAAW,EAC1D4B,GAAkBnD,EAAU,YAAY,OAG1C,MAAMi3B,EAA2BrzB,EAAkB,GAChDT,EAAiBS,GAAiB,QAAQ,CAAC,EAAI,IAElD,MAAO,CACL,gBAAAA,EACA,eAAAT,EACA,yBAAA8zB,EACA,cAAAD,CAAA,CAEJ,CAKA,SAAS9H,GAAmB1lB,EAAO,CACjC,KAAM,CAAE,MAAAvD,GAAUuD,EAAM,OAGlB2nB,EAAY,SAAS,cAAc,mBAAmB,OAAAlrB,EAAM,GAAE,KAAI,EACxE,GAAIkrB,EAAW,CAEb,MAAM2C,EAAgB3C,EAAU,cAAc,eAAe,EACzD2C,IACFA,EAAc,YAActC,GAAcvrB,EAAM,MAAM,GAIxD,MAAMixB,EAAoB/F,EAAU,cAAc,cAAc,EAC5D+F,IACFA,EAAkB,YAAcnF,GAAc9rB,EAAM,MAAM,GAI5D,MAAMkxB,EAAoBhG,EAAU,cAAc,cAAc,EAC5DgG,GAAqBlxB,EAAM,WAAa,IAC1CkxB,EAAkB,YAAc,GAAG,OAAAlxB,EAAM,WAAU,YAIrD,MAAMmxB,EAAoBjG,EAAU,cAAc,cAAc,EAChE,GAAIiG,EAAmB,CACrB,MAAM1F,EAAiBzrB,EAAM,WAAW,OAAS,EAC/C,SAAS,OAAAA,EAAM,WAAW,KAAK,IAAI,GACnC,qBACFmxB,EAAkB,YAAc1F,CAAA,CAIlC,MAAM2F,EAAgBlG,EAAU,cAAc,kBAAkB,EAChE,GAAIkG,EAAe,CACjB,IAAIC,EAAsBD,EAAc,cAAc,gBAAgB,EAClEpxB,EAAM,mBACHqxB,IACHA,EAAsB,SAAS,cAAc,KAAK,EAClDA,EAAoB,UAAY,gBAChCD,EAAc,YAAYC,CAAmB,GAE/CA,EAAoB,YAAc,YAAY,OAAArxB,EAAM,oBAC3CqxB,GACTA,EAAoB,QACtB,CACF,CAIFjH,EAAA,EAGA,MAAM1e,EAAWzG,EAAiB,cAClC8f,EAAmB,aAAa,OAAArZ,EAAS,UAAS,KAAI,OAAAA,EAAS,MAAK,MAAK,OAAAA,EAAS,eAAc,KAAI,CACtG,CAKA,SAASsd,GAAwBzlB,EAAO,CAEtC,GAAIA,EAAM,SAAWA,EAAM,QACzB,OAAQA,EAAM,KACZ,IAAK,IACHA,EAAM,iBACNmiB,GAAA,EACA,MACF,IAAK,IACHniB,EAAM,iBACNqkB,GAAA,EACA,MAKN,GAAIrkB,EAAM,UAAYA,EAAM,IAAI,gBAAkB,IAAK,CACrDA,EAAM,iBACN6iB,GAAA,EACA,OAIF,GAAIlC,IAAWA,GAAQ,MAAM,UAAY,OACvC,OAAQ3gB,EAAM,KACZ,IAAK,QACHA,EAAM,iBACN4kB,GAAA,EACA,MACF,IAAK,YACH5kB,EAAM,iBAEF0I,EAAS,WAAW,aACtB,QAAQ,IAAI,8DAA8D,EAE1EqlB,GAAA,EAEF,MACF,IAAK,aACH/tB,EAAM,iBAEF0I,EAAS,WAAW,aACtB,QAAQ,IAAI,0DAA0D,EAEtEslB,GAAA,EAEF,MAGR,CAKA,eAAerM,IAAkB,CAC/B,MAAMsM,EAAe,CACnB,eACA,cACA,YACA,aAGIC,EAAWxN,GAAc,cAAc,GAAG,EAEhD,UAAWzE,KAAQgS,EACjBC,EAAS,YAAcjS,EACvB,MAAM,IAAI,QAAQpmB,GAAW,WAAWA,EAAS,GAAG,CAAC,CAEzD,CAKA,SAAS+rB,IAAc,CACrBlB,GAAc,MAAM,QAAU,OAC9BC,GAAQ,MAAM,QAAU,OAGxB,WAAW,IAAM,CACf,GAAKjM,EAUH,QAAQ,IAAI,2CAA2C,EAEvDA,EAAe,mBAXf,IAAI,CACF,QAAQ,IAAI,uCAAuC,EACnDA,EAAiB,IAAI3T,GAAe,mBAAmB,EACvD,OAAO,oBAAoB,eAAiB2T,EAC5C,QAAQ,IAAI,uBAAuB,QAC5Bpf,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EASjD,GAAI,CAACiV,EACH,GAAI,CACFA,EAA4B,IAAI4I,GAChC5I,EAA0B,oBAAoB7I,CAAgB,EAC9D,OAAO,oBAAoB,0BAA4B6I,EACvD,QAAQ,IAAI,kCAAkC,QACvCjV,EAAO,CACd,QAAQ,MAAM,oCAAqCA,CAAK,EAE5D,EACC,GAAG,CACR,CAKA,SAASksB,EAAmBvF,EAAM,CAChC,MAAMkS,EAAe,SAAS,eAAe,eAAe,EACxDA,IACFA,EAAa,YAAclS,EAE/B,CAKA,SAASqF,EAAUpP,EAAO7T,EAAS,CACjC,MAAM6b,EAAe,SAAS,eAAe,eAAe,EACxDA,GAAgB0G,IAClB1G,EAAa,YAAc7b,EAC3BuiB,EAAW,MAAM,QAAU,QAE7B,QAAQ,MAAM,GAAG,OAAA1O,EAAK,MAAK,OAAA7T,EAAS,CACtC,CAKA,SAASkjB,IAAY,CACfX,IACFA,EAAW,MAAM,QAAU,OAE/B,CAKA,SAAS8L,EAAYxa,EAAO7T,EAAS,CAEnCmjB,EAAmB,KAAK,OAAAtP,EAAK,MAAK,OAAA7T,EAAS,EAC3C,QAAQ,IAAI,GAAG,OAAA6T,EAAK,MAAK,OAAA7T,EAAS,CACpC,CAKA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,QAAQ,IAAI,oBAAoB,EAChC+iB,GAAA,CACF,CAAC,EAkWD,eAAe4L,IAAwB,CACrC,MAAMoB,EAAmB,SAAS,eAAe,gBAAgB,EACjE,GAAKA,EAEL,GAAI,CACFA,EAAiB,UAAY,YAG7B,MAAMr2B,EAAa,MAAMo1B,GAAA,EAEzB,GAAI,OAAO,KAAKp1B,EAAW,WAAW,EAAE,SAAW,GAAK,OAAO,KAAKA,EAAW,aAAa,EAAE,SAAW,EAAG,CAC1Gq2B,EAAiB,UAAY,qGAC7B,OAIF,MAAMC,EAAcC,GAA0Bv2B,CAAU,EACxDq2B,EAAiB,UAAYC,EAG7BE,GAAA,CAAkB,OAEXj5B,EAAO,CACd,QAAQ,MAAM,qCAAsCA,CAAK,EACzD84B,EAAiB,UAAY,sFAEjC,CAKA,SAASb,GAAwB52B,EAAS,CAIxC,GAAIA,EAAQ,SAAS,GAAG,EAAG,CACzB,MAAMF,EAAQE,EAAQ,MAAM,GAAG,EAC/B,GAAIF,EAAM,OAAS,EAEjB,OAAOA,EAAM,CAAC,CAChB,CAIF,GAAIE,EAAQ,SAAS,GAAG,EAAG,CACzB,MAAMF,EAAQE,EAAQ,MAAM,GAAG,EAC/B,GAAIF,EAAM,QAAU,EAElB,MAAO,GAAG,OAAAA,EAAM,CAAC,EAAC,KAAI,OAAAA,EAAM,CAAC,EAC/B,CAIF,OAAOE,EAAQ,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAC3C,CAKA,SAAS23B,GAA0Bv2B,EAAY,CAC7C,IAAI6gB,EAAO,GAGX,MAAMpE,EAAkB,OAAO,KAAKzc,EAAW,WAAW,EAAE,OAC5D,GAAIyc,EAAkB,EAAG,CACvBoE,GAAQ,2JAGoB,OAAApE,EAAe,4JAM3C,MAAMza,EAAW,OAAO,KAAKhC,EAAW,WAAW,EAAE,MAAM,EAAG,EAAE,EAChE,UAAWpB,KAAWoD,EAAU,CAC9B,MAAM/B,EAAOD,EAAW,YAAYpB,CAAO,EAErCV,EAAU+B,EAAK,SAAWu1B,GAAwB52B,CAAO,EAE/DiiB,GAAQ,iKAE6B,OAAAjiB,EAAO,wEAE7B,OAAAV,EAAO,+BACH,OAAA+B,EAAK,YAAY,OAAM,0BAC5B,OAAAA,EAAK,UAAY,IAAI,KAAKA,EAAK,SAAS,EAAE,iBAAmB,MAAK,8CAM9Ewc,EAAkB,KACpBoE,GAAQ,0EAA0E,OAAApE,EAAkB,GAAE,uBAGxGoE,GAAQ,eAIV,MAAM4V,EAAe,OAAO,KAAKz2B,EAAW,aAAa,EAAE,OAC3D,GAAIy2B,EAAe,EAAG,CACpB5V,GAAQ,0JAGmB,OAAA4V,EAAY,qJAKvC,SAAW,CAACv4B,EAAS+B,CAAI,IAAK,OAAO,QAAQD,EAAW,aAAa,EACnE6gB,GAAQ,iKAE6B,OAAA3iB,EAAO,yEAE5B,OAAA+B,EAAK,WAAU,0BACjB,OAAAA,EAAK,SAAW,IAAI,KAAKA,EAAK,QAAQ,EAAE,iBAAmB,MAAK,8CAMhF4gB,GAAQ,eAGV,OAAIA,IAAS,KACXA,EAAO,2FAGFA,CACT,CA2LA,SAAS2V,IAAoB,CAE3B,OAAO,mBAAqB,SAASt4B,EAAS,CAC5C,MAAM6C,EAAU,SAAS,eAAe,WAAW,OAAA7C,EAAS,EACtDw4B,EAAS31B,EAAQ,cAAc,cAAc,uCAAuC,EAEtFA,EAAQ,MAAM,UAAY,QAC5BA,EAAQ,MAAM,QAAU,QACxB21B,EAAO,YAAc,IAErB,WAAW,IAAMC,GAAsB51B,CAAO,EAAG,GAAG,IAEpDA,EAAQ,MAAM,QAAU,OACxB21B,EAAO,YAAc,IACvB,EAIF,OAAO,kBAAoB,SAASx4B,EAASK,EAAW,CACtD,MAAMwC,EAAU,SAAS,eAAe,WAAW,OAAA7C,EAAO,KAAI,OAAAK,EAAW,EACnEm4B,EAAS31B,EAAQ,cAAc,cAAc,sCAAsC,EAErFA,EAAQ,MAAM,UAAY,QAC5BA,EAAQ,MAAM,QAAU,QACxB21B,EAAO,YAAc,IAErB,WAAW,IAAMC,GAAsB51B,CAAO,EAAG,GAAG,IAEpDA,EAAQ,MAAM,QAAU,OACxB21B,EAAO,YAAc,IACvB,EAIF,OAAO,gBAAkB,SAAS93B,EAAS,CACzCg4B,GAAqBh4B,CAAO,GAI9B,WAAW,IAAM,CACK,SAAS,iBAAiB,4BAA4B,EAC9D,QAAQqV,GAAU,CACxB4iB,GAAiB5iB,CAAM,GACzB6iB,GAAwB7iB,CAAM,CAChC,CACD,GACA,GAAG,CACR,CAKA,SAAS0iB,GAAsBziB,EAAW,CACvBA,EAAU,iBAAiB,4BAA4B,EAC/D,QAAQD,GAAU,CACrB4iB,GAAiB5iB,CAAM,GACzB6iB,GAAwB7iB,CAAM,CAChC,CACD,CACH,CAKA,SAAS4iB,GAAiBtS,EAAS,CACjC,MAAMnb,EAAOmb,EAAQ,wBACrB,OAAOnb,EAAK,MAAQ,GAAKA,EAAK,OAAS,CACzC,CAKA,eAAe0tB,GAAwB7iB,EAAQ,CAC7C,GAAI,CACF,MAAMrV,EAAUqV,EAAO,QAAQ,QACzB9T,EAAc,KAAK,MAAM8T,EAAO,QAAQ,WAAW,EACnD0e,EAAiB1e,EAAO,cAAc,cAAc,kBAAkB,EAG5E,GAAIA,EAAO,QAAQ,WAAa,OAC9B,OAIE0e,IACFA,EAAe,MAAM,QAAU,QAC/BA,EAAe,YAAc,WAI/B,MAAMl0B,EAAY,MAAMs4B,GAAmBn4B,CAAO,EAClD,GAAI,CAACH,EACH,MAAM,IAAI,MAAM,UAAU,EAI5B,MAAM6G,EAAQ,IAAI,MAClBA,EAAM,YAAc,YAEpB,MAAM,IAAI,QAAQ,CAACxH,EAAS+L,IAAW,CACrCvE,EAAM,OAAS,IAAMxH,EAAA,EACrBwH,EAAM,QAAU,IAAMuE,EAAO,IAAI,MAAM,QAAQ,CAAC,EAChDvE,EAAM,IAAM7G,EAAU,IACvB,EAID,MAAM2V,EADYH,EAAO,cACO,wBAC1B+iB,EAAc5iB,EAAc,MAAQ,EACpC6iB,EAAe7iB,EAAc,OAAS,EAE5CH,EAAO,MAAQ+iB,EAAc,OAAO,iBACpC/iB,EAAO,OAASgjB,EAAe,OAAO,iBACtChjB,EAAO,MAAM,MAAQ+iB,EAAc,KACnC/iB,EAAO,MAAM,OAASgjB,EAAe,KAErC,MAAMnnB,EAAMmE,EAAO,WAAW,IAAI,EAClCnE,EAAI,MAAM,OAAO,iBAAkB,OAAO,gBAAgB,EAG1D,MAAMonB,EAAY5xB,EAAM,MAAQA,EAAM,OAChC6xB,EAAkBH,EAAcC,EAEtC,IAAIG,EAAWC,EAAYhjB,EAASC,EAqBpC,GAnBI4iB,EAAYC,GAEdC,EAAYJ,EACZK,EAAaL,EAAcE,EAC3B7iB,EAAU,EACVC,GAAW2iB,EAAeI,GAAc,IAGxCA,EAAaJ,EACbG,EAAYH,EAAeC,EAC3B7iB,GAAW2iB,EAAcI,GAAa,EACtC9iB,EAAU,GAIZxE,EAAI,UAAU,EAAG,EAAGknB,EAAaC,CAAY,EAC7CnnB,EAAI,UAAUxK,EAAO+O,EAASC,EAAS8iB,EAAWC,CAAU,EAGxDl3B,GAAeA,EAAY,OAAS,EAAG,CAEzC,MAAM+J,EAASktB,EAAY9xB,EAAM,MAC3B6E,EAASktB,EAAa/xB,EAAM,OAElCnF,EAAY,QAAQ,CAACsB,EAAYkJ,IAAU,CACzC,MAAMyB,EAAI3K,EAAW,EAAIyI,EAASmK,EAC5BhI,EAAI5K,EAAW,EAAI0I,EAASmK,EAGlCxE,EAAI,UAAY,UAChBA,EAAI,YAAc,UAClBA,EAAI,UAAY,EAEhBA,EAAI,YACJA,EAAI,IAAI1D,EAAGC,EAAG,EAAG,EAAG,EAAI,KAAK,EAAE,EAC/ByD,EAAI,OACJA,EAAI,SAGJA,EAAI,UAAY,UAChBA,EAAI,KAAO,kBACXA,EAAI,UAAY,SAChBA,EAAI,aAAe,SACnBA,EAAI,UAAUnF,EAAQ,GAAG,WAAYyB,EAAGC,CAAC,EAC1C,EAICsmB,IACFA,EAAe,MAAM,QAAU,QAIjC1e,EAAO,QAAQ,SAAW,aAEnB1W,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,EAChC,MAAMo1B,EAAiB1e,EAAO,cAAc,cAAc,kBAAkB,EACxE0e,IACFA,EAAe,YAAc,OAC7BA,EAAe,MAAM,MAAQ,UAC/B,CAEJ,CAKA,eAAeoE,GAAmBn4B,EAAS,CACzC,GAAI,CAEF,MAAMF,EAAQE,EAAQ,MAAM,GAAG,EAC/B,GAAIF,EAAM,OAAS,EACjB,MAAM,IAAI,MAAM,WAAW,EAG7B,MAAMR,EAAUQ,EAAM,CAAC,EACjBH,EAAYG,EAAM,CAAC,EAGzB,GAAI,CAACiL,EACH,MAAM,IAAI,MAAM,sBAAsB,EAIxC,MAAMgI,GADS,MAAMhI,EAAiB,eAAezL,EAASK,CAAS,GAC5C,KAAKsE,GAAOA,EAAI,KAAOjE,CAAO,EAEzD,GAAI,CAAC+S,EACH,MAAM,IAAI,MAAM,UAAU,OAAA/S,EAAS,EAMrC,MAAO,CACL,IAHe,MAAM+K,EAAiB,kBAAkB,eAAegI,CAAW,EAIlF,KAAMA,CAAA,CACR,OAEOpU,EAAO,CACd,eAAQ,MAAM,YAAaA,CAAK,EACzB,KAEX,CAKA,SAASq5B,GAAqBh4B,EAAS,CAErC,MAAMk2B,EAAY,qlBASN,OAAAl2B,EAAO,0SAWbm2B,EAAgB,SAAS,eAAe,oBAAoB,EAC9DA,GACFA,EAAc,SAIhB,SAAS,KAAK,mBAAmB,YAAaD,CAAS,EAGvDwC,GAAkB14B,CAAO,EAGzB,OAAO,sBAAwB,UAAW,CACxC,MAAM0gB,EAAQ,SAAS,eAAe,oBAAoB,EACtDA,GACFA,EAAM,QACR,CAEJ,CAKA,eAAegY,GAAkB14B,EAAS,CACxC,MAAMqV,EAAS,SAAS,eAAe,eAAe,EACtD,GAAKA,EAEL,GAAI,CAEF,MAAMsjB,EAAgB,SAAS,cAAc,mBAAmB,OAAA34B,EAAO,KAAI,EACrEuB,EAAco3B,EAAgB,KAAK,MAAMA,EAAc,QAAQ,WAAW,EAAI,GAG9E94B,EAAY,MAAMs4B,GAAmBn4B,CAAO,EAClD,GAAI,CAACH,EACH,MAAM,IAAI,MAAM,UAAU,EAI5B,MAAM6G,EAAQ,IAAI,MAClBA,EAAM,YAAc,YAEpB,MAAM,IAAI,QAAQ,CAACxH,EAAS+L,IAAW,CACrCvE,EAAM,OAAS,IAAMxH,EAAA,EACrBwH,EAAM,QAAU,IAAMuE,EAAO,IAAI,MAAM,QAAQ,CAAC,EAChDvE,EAAM,IAAM7G,EAAU,IACvB,EAGD,MAAM+4B,EAAW,IACXC,EAAY,IAElB,IAAIL,EAAY9xB,EAAM,MAClB+xB,EAAa/xB,EAAM,OAEvB,GAAI8xB,EAAYI,GAAYH,EAAaI,EAAW,CAClD,MAAMrtB,EAAQ,KAAK,IAAIotB,EAAWJ,EAAWK,EAAYJ,CAAU,EACnED,GAAahtB,EACbitB,GAAcjtB,CAAA,CAGhB6J,EAAO,MAAQmjB,EACfnjB,EAAO,OAASojB,EAEhB,MAAMvnB,EAAMmE,EAAO,WAAW,IAAI,EAMlC,GAHAnE,EAAI,UAAUxK,EAAO,EAAG,EAAG8xB,EAAWC,CAAU,EAG5Cl3B,GAAeA,EAAY,OAAS,EAAG,CACzC,MAAM+J,EAASktB,EAAY9xB,EAAM,MAC3B6E,EAASktB,EAAa/xB,EAAM,OAElCnF,EAAY,QAAQ,CAACsB,EAAYkJ,IAAU,CACzC,MAAMyB,EAAI3K,EAAW,EAAIyI,EACnBmC,EAAI5K,EAAW,EAAI0I,EAGzB2F,EAAI,UAAY,UAChBA,EAAI,YAAc,UAClBA,EAAI,UAAY,EAEhBA,EAAI,YACJA,EAAI,IAAI1D,EAAGC,EAAG,EAAG,EAAG,EAAI,KAAK,EAAE,EAC/ByD,EAAI,OACJA,EAAI,SAGJA,EAAI,UAAY,UAChBA,EAAI,KAAO,kBACXA,EAAI,UAAY,SAChBA,EAAI,aAAe,SACnBA,EAAI,UAAUnF,EAAQ,GAAG,WAAYyB,EAAGC,CAAC,EAC1C,EACH,OAEO9O,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,EAChC0W,EAAO,cAAc,UAAY,2DAErC,CAGA,OAAO,yBAA2B,SAASsI,EAAO,KAAM,CAClD/J,GACFA,EAA0B,iBAAiB+J,CAAI,CAEnD,EAKA,eAAeyZ,IAA0B,CAEvC,GAAIrlB,EAAS,WAAW,aAAc,CACpC,QAAQ,IAAI,mEAAmE,EAC/E,OAGF,GAAI,CAACA,EAAS,cAAgB,CAACA,EAAS,aAAc,CACpD,QAAQ,IAAI,gBAAgB,EAC5B,OAGF,GAAI,CAEF,MAAMrS,EAAS,MAAMqL,EAAiB,eACpCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,mBAGxB,GAAIrS,EAAO,QAAU,EAAG,CACtB,QAAQ,IAAI,iBAAiB,EAC7B,OAIF,MAAM0I,EAAe1I,EAAO,UAAUuE,GAAOA,EAAI,KAAO8N,EAAS,aAAa,EAAE,EAEhF,GAAI3J,IAAiB,GAAI,CACvB,QAAQ,KAAK,gBAAgB,EAC7B,OAIF,MAAMwV,EAAgBxV,IAAiB,EAAI1I,EAAO,OAAS,EAAI0I,EAAe,EACxE8S,EAAgBxb,EAAOke,CAAa,EAE1C,QAAQ,IAAI,QAAQ,OAAAxV,EAAe,EAAC,SAAQ,OAAAwV,EAAgB,EAAC,IAAG,EAGhE,MAAMuV,EAAkBjY,EAAe,EAAI,QAEpCvc,EAAO,CACd,QAAQ,MAAM,cAAeA,CAAK,EAClCgsB,EAAU,SAAUhsB,EAAM,OAAO,EAErC,CAOA,eAAe04B,GAAoByB,EAAW,GAAO,CAEnD,GAAI/mB,EAAS,WAAW,aACtB,eAAQ,IAAI,+DAA+D,EACpE,GAGT,GAAI,CAACA,EAAS,cAAgB,CAACA,EAAS,aACtC,eAAQ,IAAI,gBAAgB,EACrB,GAGT,GAAI,CAEF,MAAMrS,EAAS,MAAMqL,EAAiB,eACpCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,mBAGxB,GAAIrS,EAAO,QAAU,EACnB,eAAQ,IAAI,iBAAiB,EACtB,GAIT,MAAM0I,EAAe1I,EAAO,UAAUuE,GAAOA,EAAI,KAAO8N,EAAS,aAAa,EAAE,EAEhF,GAAI3J,IAAiB,GACnB,eAAQ,KAAK,gBAAgB,EACtB,GAIT,GAAIA,IAAiB1I,EAAO,OAAS,GAC/Bo5B,EACF,eAAQ,IAAI,qBAAqB,EAC1B,GAMX,MAAMC,EAAY3wB,IAAiB1I,EAAO,OAAS,EAAI,EAAI0I,EAAe,EACpE4wB,EAAYt5B,EAAOq5B,CAAS,EAElC,eAAQ,IAAI,QAAQ,OAAA3wB,EAAe,EAAC,SAAQ,OAAA2wB,EAAY,EAAC,IAAG,EAG5D,MAAM5F,EAAkB6F,EAAW,EAAI,EAChC,SAEAr6B,EAAO,CACd,eAAQ,MAAM,cAAeA,CAAK,EAClCgsB,EAAU,SAAUhsB,EAAM,OAAO,EAC1B,GAEX,CAKA,SAASytB,IAA+B,aACtC,GAAI,CAACrO,EAAgB,CACnB4M,EAAU,QAAS,UAAU,EAC7B,OAIF,GAAI,CAAC5M,EAAe,WAAaA,EAAe,UAAU,SAAW,EAAG,CACtE4M,EAAU,SAAU,mBAAmB,EACvC,OAIF,MAAM9a,GAAcC,GAAArO,GAAAX,GAAAZ,EAAA,OAAO,sBAAP,YAAAA,EAA4B,iBAA5B,YAAAY,EAA4C,0BAA5C,YAAAW,EAAqE,uBAArE,YAAAqO,EAAA,KAAArO,GACpB,GAAIoO,GAAeA,EAAY,UAAYA,EAAY,SAAS,gBAAkB,GAAO,CACvF8a,EAAU,0BAA2B,gBAAgB,EACrD,OAIF,MAAMrgB,EAAe,SAAS,eAAe,8BAA8B,EAgB3E,GAfIA,GAAgBA,EAAa,OAC/B,QAAQ,IAAI,oBAAoB,OAAAA,EAAa,MAAO,EACpDyT,EAAe,kBAAoBzT,EAAa,QAGhD,QAAQ,IAAI,iCAAiC,EAC7CyT,EAAe,kBAAoB,eAC/BzT,IACFA,EAAa,MAAQ,iBAOrB,CAFYyT,EAAe,yBAI7B,OAIF,MAAMlM,EAAmB,SAAS,eAAe,oBAAoB,EACrE,GAAIA,EAAkB,CACpB,QAAQ,IAAI,kBAAkB,EAG9BA,EAAiB,oBAAoB,QAASua,EAA4B,EAG1Eva,EAAiB,YAAc,iBAC/BA,EAAiB,UAAU,IAAI,QAAQ,EAGvC,MAAMonB,EAAe,IAAM,CACzB,QAAQ,IAAI,oBAAoB,EAChClb,EAAe,wBAAuB,EAIxClM,EAAiB,iBAAiB,QAASonB,CAAY,EAGvDpnB,EAAiB,cAAgBonB,CAAA,CAGnCpO,EAAmB,iCAAiC,CACtD,CAKA,SAASqO,IAA2B,CAClC,MAAMrnB,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,IACF,QAAQ,IAAI,iBAAiB,EAGzBA,EAAiB,gBACnBA,EAAiB,oBAAoB,QAASA,EAAiB,aAAa,EAC5EA,EAAiB,cAAgB,MAInCA,EAAiB,YAAc,iBAC/BA,EAAiB,UAAU,OAAO,QAAQ,EAG1CA,EAAiB,iBAAiB,QAASua,EAA4B,EAEvE,QAAQ,IAAI,qBAAqB,EAErC,CAGA,OAAO,yBAA2B8M,GAKlC,SAASC,GAAmB75B,EAAS+J,EAAO,CAEtCA,GACFA,EAAM,kBAGR,MAAMvD,EAAQiM,EAAS,OAAO,KAAK+S,GAAKA,EAAE,KAAOxlB,CAAO,EACxD,GAAI,CAACwG,EAAO,CACV6kB,EAAU,KAAM,UAAU,EAC1B,OAIF,MAAMyO,EAAmB,SAAS,eAAe,iBAAiB,EAC9DA,IACFA,EAAiB,YAActzB,EAAM,IAIvC,MAAMuzB,EAAiB,SAAS,eAAe,aAAa,EACxDA,IACFA,EAAe,MAAQ,IAIzB,MAAM3Y,EAAQ,SAAS,eAAe,kBAAkB,EACpDA,IACFA,EAAM,MAAM,QAAU,OACtBA,EAAM,QAAQ,QAAUphB,EAGxB,WAAW,IAAM,CACX+5B,GACFA,EAAe,OACjB,EACC,GAAG,EAEV,CAKA,SAASnM,GAAqB,CAC5B,MAAMxM,EAAQ,SAAS,eAAe,kBAAkB,EACpDA,IACFA,EAAM,MAAM,QAAU,OACtBA,EAAM,QAAQ,QAAU,GAE5B,CAKA,eAAeyM,IAAmB,SAChC,MAAMzM,EAAQ,SAAS,eAAe,kBAAkB,EAClDphB,EAAUohB,GAAA,YAAAA,EAAO,QAAQ,QACzB2Y,EAAiB,SAAS,eAAe,aAAa,EACtDlyB,EAASkyB,GAAA,YAAAA,EAAgB,MAAM,OAErC,GAAI,CAAC/5B,EAAS,CACZqrB,EAAU,KAAM,WAAW,EAC3B,OAGF,GAAI,CAACxjB,EAAQ,CACXwjB,EAAU,OAAQ,SAAS,EAC3B0O,GAAA,MAAAA,EAAgB,QAChB,OAGF,GAAI,CAEF,MAAMtuB,EAAiB,UAAUzL,EAAS6H,CAAM,EAGhD,MAAMrB,EAAQiM,EAAS,OAAO,KAAK+S,GAAKA,EAAE,KAAOxlB,CAAO,EACxD,GAAIwG,EAAO,CACTA,EAAM,OAAS,UACfA,EAAM,WAAaqB,EACnBrB,EAAM,SAAW,IAAI,OAAO,cAG5B,MAAMkrB,EAAY,SAAS,cAAc,mBAAmB,OAAA1xB,EAAO,KAAI,EACvE,GAAI0xB,EAAW,CACb,MAAM8E,EAAU7E,EAAoBnrB,CAAK,EACzCkrB,EAAU,WAAW,aAAa8E,EAAS9E,CAAS,GAGhD9wB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC9B,WAAW,IAAM,CACf,OAAO,oBAAoB,OAAO,qBAAqBZ,CAAO,GAC7D,GAAG,CACR,CAIF4wB,EAAA,IAGIpvB,EAAAiR,EAAS,eAAT,YAAAjR,EAAuB,MAAOxB,IAChC,QAAQ,IAAI,iBAAiB,EAC7B2yB,GAAA,EACF,CAGF/E,EAAA,EACA6I,EAAY,OAAQ,MAAM,OAAAz2B,EAAO,UAAS,QAEnCX,EAAO,CACd,QAAQ,MAAM,UAAWA,CAAK,EAC9BgsB,EAAU,OAAQhsB,EAAM,OAAO,EAEnC,CAKA,eAAe26B,GAAkBh6B,EAAS+J,EAAO,CAE3CA,GACFA,EAAM,kBAGR,MAAMvD,EAAQiM,EAAS,OAAO,KAAK+S,GAAKA,EAAE,KAAOxlB,CAAO,EACxD,GAAI,CAACwG,EAAO,CACV6kB,EAAU,KAAM,UAAU,EAC1B,OAGF,GAAI7kB,EAAM,SAAW,UAAW,CAC9B6kB,EAAU,OAAQ,cAAc,EAChC,OAIF4O,GAAqBj6B,EAASwG,EAAM,UAAU,CAChD,CA6BA,SAASwnB,IAA2B,CAClC,MAAMD,EAAe,SAAS,eAAe,eAAe,EACtDmM,EAAc,SAAS,eAAe,cAAc,EAE1D,GAAI,CAACnM,GAAgB,CAACtiB,EAAkB,OAExC,MAAM0uB,EAAiBpM,EAAa,MAC9BqM,GAAcF,GAAA,YAAAA,EAAa,MAAM,SAAU,GAGjDG,GAAkBF,EAAgBC,CAAW,CAC/C,CAKA,SAASlM,IAAyB,CAChC,MAAMH,EAAe,SAAS,eAAe,eAAe,EACtDmM,EAAc,SAAS,eAAe,cAAc,EAE1D,GAAI,CAACA,GAAe,CAACzuB,EAAkB,OAEvC,MAAM2uB,EAAcF,EAAY,MAAM,OAChCC,GAAiBpM,GAAA,YAAAA,EAAc,QAAS,MAG9CsM,GAAkBF,EAAgBC,CAAW,CAC/C,CAKA,SAASC,GAAkB54B,EAAQ24B,EAAa,CAC9C,GAAI,CAAC3uB,EAAkB,OAEvB,IAAI6uB,EAAiB7uB,EAAiB,qBAAqBhK,CAAM,EAGjE,GAAI24B,EAAa,CACf,MAAMtwB,EAAaswB,EAAY,cAC/BE,EAAiBA,EAAe,OAAO9zB,GACrCA,EAAM,GAAG,cAAc,SAASsD,CAAU,GAC1CtD,EAAM,KAAK,cAAc,SAASsD,CAAU,EAC9C,CAIF6mB,GAAgB2J,CAAc,EAE9B,QAAQ,IAAI,YAAY,OAAA74B,EAAM,UAAS,OAAA24B,EAAW,UAAS,OAAAE,EAAe,OAAM,MAAK,CACvF,CAKA,SAASL,GAAqBj6B,EAASu6B,EAAY,CACjD,MAAMnZ,EAAQ,SAAS,eAAe,oBAAoB,EACpDoZ,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAoB,SAAS,eAAe,oBAAoB,EAChEC,EAAmB,SAAS,eAAe,mBAAmB,EAEpE,GAAI,CAACtZ,EAAO,CACV,QAAQ,MAAM,8BAA8B,EAC5C,OAIEoZ,IACFA,EAAe,YAAcx6B,GAG3By6B,IACFA,EAAkB,YAAcF,GAAc,KAI5CG,IACFA,EAAiB,YAAc,+CAIjCtZ,EAAM,MAAM,QAAU,OACtBA,EAAM,QAAQ,QAAUphB,CAC1B,CAKA,SAAS8vB,GAAuB,CAC9B,MAAM1O,EAAQ,SAAS,eAAe,oBAAoB,EACtDA,IACFA,EAAM,MAAM,QAAU,OACtBA,EAAM,QAAQ,QAAU,GAE5B,CAKA,eAAe2O,IAAqB,OAClC,MAAM3O,EAAQ,SAAS,eAAe,oBAAoB,EACpDphB,EAAUohB,GAAA,YAAAA,EAAO,QAAQ,QAE/B,GAAI,CAACphB,EAAS,CACZqrB,EAAU,KAAM,aAAa,EAC7B,OAGF,GAAI,CAEF,MAAM5f,EAAiB,YAAYzL,CAAO,EAC1C,QAAQ,IAAI,8BAA8B,OAAAA,EAAS,EAGnD,MAAMwG,EAAQiM,EAAS,OAAO,KAAK+S,GAAKA,EAAE,KAAOxlB,CAAO,EACxD,GAAIwG,EAAO,CACT,QAAQ,IAAI,oBAAoB,OAAAA,EAAM,OAAM,kBAAiB,OAAAA,EAAM,WAAY,EAE/E,MAAMvE,EAAc,MAAMwJ,EAAiB,oBAAoBzL,CAAO,EACtEwG,EAAM,OAAUvE,GAAeA,EAAY,OAAS,EAAK,cAAgB,UACzE,OAAOuE,EAAM,WACb,OAAOA,EAAM,SAEb,QAAQ,IAAI,oBAAoB,OAAAA,EAAM,OAAM,kBAAiB,OAAAA,EAAM,WAAY,EAG/E,MAAMkrB,EAAY,SAAS,cAAc,mBAAmB,OAAA1xB,EAAO,KAAI,EACvE,GAAI0xB,EAAW,CACb,MAAM8E,EAAU7E,EAAoBnrB,CAAK,EACzCkrB,EAAU,WAAW,aAAa8E,EAAS9E,CAAS,EACpD,QAAQ,IAAI,uBAAuB,OAAA1xB,EAAS,GAGxCY,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC9B,WAAW,IAAM,CACf,OAAO,oBAAoB,OAAO,qBAAqBZ,CAAO,GAC7D,GAAG,CACR,CAIF4wB,EAAA,EAGAmC,EAAA,CAA+B,CAGjCjD,EAAA,EACA2G,EAAY,OAAQ,MAAM,OAAAz2B,EAAO,YAAW,QAErCX,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,EAChCgsB,EAAU,OAAQhsB,EAAM,OAAO,EAEnC,CAKA,SAASi3B,GAAyBt2B,EAAS,CACzC,MAAMohB,EAAQ,SAAS,eAAe,wBAAwB,EACxDoZ,EAAiB,SAAS,eAAe,qBAAqB,EAEpE,GAAI,CAACpZ,EAAO,CACV,QAAQ,MAAM,kCAAkC,EAChD,OAIEoZ,IACFA,EAAe,YAAcx6B,GAI/BohB,EAAM,MAAM,QAAU,OACtBA,EAAM,QAAQ,QAAUphB,CAC1B,CAKA,SAASmwB,IAA2B,CAClC,MAAM/O,EAAQ,SAAS,eAAe,wBAAwB,EAC1DA,IACFA,EAAM,MAAM,QAAU,OACtBA,EAAM,QAAQ,QAAU,GAE5B,CAKA,eAAegP,IAAyB,OACtC,MAAMhP,EAAQ,SAAS,eAAe,wBAAwB,EACxDphB,EAAUohB,GAAA,YAAAA,EAAO,QAAQ,QAE/B,GAAI,CAACphB,EAAS,CACZqrB,EAAU,KAAM,aAAa,EAC7B,OAGF,GAAI,CAEF,MAAM5f,EAAiB,gBAAgBzL,CAAO,EAG9C,MAAMwG,EAAQiM,EAAS,OAAO,KAAK+S,GAAKA,EAAE,KAAOxlB,CAAO,EACxD,GAAIwG,EAAO,CACT,MAAMvE,EAAc,MAAMwJ,EAAiB,oBAAoBzL,CAAO,EACtEwG,EAAM,OAAUvE,GAAeA,EAAY,OAAS,EAAK,cAAgB,UAGzE,MAAMyvB,EAAY,SAAS,cAAc,mBAAmB,OAAA1xB,EAAO,KAAI,EACvE,GAAI0xB,EAAW,CACb,MAAM8E,EAAU7E,EAAoBnrB,CAAK,EACzCkrB,EAAU,WAAW,aAAa8E,EAAS9E,CAAS,GAGhD9wB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC9B,WAAW,IAAM,CACf,OAAO,oBAAoB,OAAO,qBAAqBZ,CAAO,GAC7D,GAAG,CACR,CAIF4wB,EAAA,EAGAmC,EAAA,CAA+B,CAGjC5C,GAAA,EACAsG,EAAY,OAAQ,MAAM,OAAAz2B,EAAO,aAAY,QAEtCX,EAAO,CACd,QAAQ,MAAM,YAAaA,CAAK,EAChCgsB,EAAU,OAAQhsB,EAAM,OAAO,EAEnC,CAGA,OAAO,6BAA+BytB,GACtC,OAAO,oBAAsBiL,GAC7B,OAAO,mBAAqB8B,GAG5B,OAAO,kBAAoBG,GAG3B,OAAO,kBAAoBnG,EAK3B,SAAS1G,IAAuB,CAC9B,MAAMF,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAgB,SAAS,eAAe,iBAAiB,EAE/D,GAAID,GAAoBC,EAAe,CACrC,MAAMnW,EAAWkW,EAAiB,QAKlC,GAJAC,EAAc,SAAW,CAACnW,EAE1B,QAAQ,IAAI,SAAS,OAAAA,EAAW,KAAO,KAAM,EAEzCA,EAAU,CACZ,MAAM4jB,EAAY,WAAWzN,EAAc,KAAK,EAChD,QAAQ,IAAI,YAAY,OAAAyN,EAAS,IAAG,EACtC,CAEJ,CAKA,SAASvN,IAA4B,CACnC,MAAMF,EAAgB,SAAS,eAAe,iBAAiB,EAC/D,GAAIA,EAAe,CACjB,MAAMyN,EAAY,WAAWzN,EAAc,KAAK,EAChD,QAAQ,IAAI,YAAY,OAAAyN,EAAS,IAAG,EAExC,CAKA,SAASrN,IAAuB,CAC9B,MAAMD,EAAmB,SAAS,eAAe,oBAAoB,EAErE,GAAIA,EAAkB,CACpB,MAAMuN,EAAYvN,EAAiB,QACnC,QAAQ,IAAI,cAAc,OAAAuN,EAAY,KAAO,KAAM,EAG/Cnc,GAAkB,OAAOA,EAAe,+BAAkC,YAC5EA,EAAe,8BAA8Bmc,CAAS,CACxD,CAEJ,CAKA,SAASpN,IAA6B,CACpC,MAAMD,EAAyB,SAAS,eAAe,2BAA2B,EAElF,GAAIA,EAAwB,CAC1B,MAAMqN,EAAYrN,EAAuB,QACzC,QAAQ,IAAI,cAAc,OAAAqN,EAAY,KAAO,KAAM,EAG/CtjB,GAAuB,OAAOA,EAAoB,YAAe,YACnEA,EAAoB,WAAWsjB,CAAS,EAI1CrP,EAAmB,UAAU,OAAAqP,EAAY,KAAO,KAAM,EAE1D,CAKA,SAAS5N,IAAgC,CACvC,MAAMD,EAA4B,SAAS,eAAe,8BAA8B,EAExF,GAAIA,EAA2B,CAC7B,MAAMyB,EAAezB,EAA0B,MAC/C,QAAQ,IAAI,mCAAmC,OAAAyB,EAAc,EAGzD/P,GAAkB,OAAOA,EAAe,sBAAyB,YACnEA,EAAe,qBAAqB+P,CAAY,EAIlD,MAAMhc,EAAWgc,IAAiB,kBAAoB,iCAAmC,mCACzFjD,EAAmB,+BAA+B,OAAA/Y,EAAU,EAG5D,MAAMD,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,IACFA,EAAiB,UAAU,OAAO,oBAAqB,sBAAsB,EAC7EA,EAAiB,UAAU,IAAI,GAAG,OAAAic,EAAY,QAAO,EACvD,CAEJ,CAKA,SAASuG,IAAsB,CAC7B,MAAM1H,EAAmB,SAAS,eAAe,oBAAoB,EACrE,MAAO,CACL,UAAWA,EAAmBA,EAAiB,QAAU,GAE7D,CAKA,SAASwH,IAAsB,CAC7B,MAAM5H,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAgB,SAAS,eAAe,iBAAiB,EAE/D,OAAID,GAAoBC,EACf,CACL,SAAUD,EAAiB,QAC3B,UAAW,WAAWC,EAAc,KAAK,GAAK,KAI3C,CAAE,SAAU,GAAO,UAAW,IACvC,CAKA,SAAS9B,EAAwBlZ,EAAU2oB,EAAUnU,EAAS,CAC5D,MAAMzS,EAAe,SAAS,eAAe,eAAe,EACtDikB,EAAe,SAAS,eAAe,eAAe,EACtD4C,EAAkB,SAAS,eAAe,kBAAkB,EAC5DC,EAAiB,SAAS,eAAe,iBAAiB,EAE5D9mB,IACFA,EAAa,MAAM,MAAQ,GAAG,OAAA/B,EAAQ,MAGpCgmB,IACFA,EAAa,YAAc,GAAG,OAAAhmB,EAAQ,MAGpC4oB,IACFA,EAAgB,YAAcD,GAG5BE,IACFA,EAAe,YAAcrU,EAEjC,CAKA,SAASmF,GAAwB,CAC/B,MAAMmP,EAAoB,SAAS,eAAe,oBAAoB,EAClEA,IACFA,EAAkB,MAAM,QAAU,OAEtC,CAKA,eAAepP,IAAqB,WAClC,QAAQ,IAAI,yBAAyB,EAGjCd,IACFA,EAAmB,kBACnBA,EAAmB,cAAc,SAAS,GAG5C,GAAI,CACFM,EAAwB,EAAG,2BAA4B,gDAAgD,EAGvG,IAAIqF,EACJ,GAAI,CACFA,EAAc,MAAMhlB,EAAiB,kBAAkB,iBACvDqf,GAAA,MAAAA,EAAoB,cAAc,SAAQ,OACnCmQ,EAAiB,CACxB,MAAAnQ,GAAA,MAAAA,EAAoB,YAAYmQ,EAAiB,UAC3C,IAAIC,GACR,YACA,yCACA,CACE,cAAeD,EACf,UAAW,wBACX,WAAY,2BACd,CACF,CAGF,GAAI,CAACxK,EAAa,CAChB,MAAMpxB,EAAQ,IAAI,MAAM,kBAAkB,EAC1C,MAAAyrB,GAAA,MAAAA,EAAoB,YAAYzrB,EAAO,WACjCA,CAAA,CAGR,QAAQ,IAAI,UAAWoxB,EAAY,WAAW,EAE9CrF,EAAwB,GAAI,kCAAmC,0CAA0C,EAGzG,MAAMsF,GAAA,EACN5F,GAAA,MAAAA,EAAoB,cAAc,YAElCM,EAAwB,GAAI,wBAAyB,mDAAmD,EAGxG,MAAM9kB,EAAS,MAAMmF,EAAiB,cACtCqf,GAAA,MAAAA,EAAoB,iBAAiB,SAAUxkB,EAAO,QAGtDmM,EAAS,mBAAqBge,EAAY,YAC1Che,EAAS,OAASnM,EAClBykB,GAAiB,CACf,KAAM0F,EAAY,YAClB,KAAM,yBACN,WAAYnqB,EAAO,QAGrB,QAAQ,IAAI,aAAa,OAAAA,EAAO,OAAM,OAAM,EAG5C8kB,EAAwB,GAAI,4BAA6B,iDAAiD,EAC1GN,GAAA,MAAAA,EAAoB,cAAc,YAElC,MAAMqQ,EAAe,GACfC,EAAiB,CACrB,YAAa,KACb,MAAO,KACP,kBAAmB,GACnB,YAAa,GACb,OAAQ,EAAC,GAIPx6B,EAAA,OAAO,sBAAP,MAAAA,EAA4B,mBAC9Bu6B,EAAa,KACX,OAAO,oBAAoB,kBAAkB,0BAC1C,KAAKE,GAAmB,CACnBA,GACFD,EAAe,YAAcC,EAC7BD,EAAe,kBAAoB,GACnCtQ,GAAA,MAAAA,EAAoB,qBAAqB,cAAe,IACxDA,GAAA,MAAAA,EAAoB,iBAAiB,cACnC,OAAO,KAAKuQ,EAAgB,kBAAoB,EAAE,EAAE,OACpD,OAAO,KAAKA,EAAgB,kBAAoB,EAAE,EAAE,QAEtD,QAAQ,IAAI,iBAAiB,EAC7BjQ,EAAwB,GAAI,qCAAsC,iCAAiC,IAEnG,QAAQ,IAAI,4BAA4B,EACxCN,GAAA,MAAAA,EAAoB,eAAe,cACrC,CACD,EACA,MAAMzrB,GAAS,CACd,QAAQ,KAAK,mBAAoBA,EAAM,OAAO,EAC9CyrB,GAAA,MAAAA,EAAoB,YAAYzrB,EAAO,YACvC+7B,EAAe,OAAO,KAAK,WAAW,OAAA/7B,EAAM,QAAS,EACtD,IAKHmC,EAAA,OAAO,sBAAP,MAAAA,EAA4B,aAC9B25B,EAAa,KACX,OAAO,oBAAoB,YAAY,oBACpC,KAAKG,GAAa,CACbA,GACFF,EAAe,MAAQE,EACvBF,EAAe,YAAc,GAC7BtQ,GAAA,MAAAA,EAAoB,qBAAqB,QAAS,IAClDA,GAAA,MAAAA,EAAoB,iBAAiB,QACnC,OAAO,KAAKwQ,EAAU,YAAc,EAAE,EAAE,OACxC,OAAO,KAAKA,EAAU,YAAc,EAAE,EAAE,QAE1C,QAAQ,IAAI,iBAAiB,EAC7BlQ,EAAwB,GAAI,+BAAgC,2BAA2B,IAEvF,QAAQ,IAAI,4BAA4B,EACxCN,GAAA,MAAAA,EAAoB,eAAe,cACrC,CACD,EACA,MAAMzrB,GAAS,CACd,QAAQ,KAAK,mBAAoBA,EAAM,OAAO,EAC9CyrB,GAAA,MAAAA,EAAoB,YAAYzrB,EAAO,YACvC+7B,EAAe,OAAO,KAAK,WAAW,OAAA/7B,EAAM,QAAS,EACtD,GAKP,MAAM,QAAQ,WAAW87B,CAAY,EACrCrQ,GAAA,MAAAA,EAAoB,cAAc,YAElCM,EAAwB,GAAI,4BAA6B,6CAA6C,EAGtG,MAAMmQ,EAAmB,GACzB,GAAIH,EAAe,kBAAmB,CAEpC,MAAMp0B,GADkBo0B,EAAe,YAAY,YAAc,IACxB,kBAAoB,EAC7DG,EAAiB,KAAK,GAAG,OAAAv0B,EAAgB,eAAc,EAEzD,GAAIo0B,EAAe,YAAa,CAE9B,MAAMhW,GADYgW,EAAe,MAAM,YAAc,IACxB,YAAc,EAC3CG,EAAiB,KAAK,GAAG,OAAAnW,EAAU,SAAQ,EAG7C,MAAMoW,EAAgBD,EAAiB,OAAS,EAC5C,oBAAoB,OAAAj1B,EAAO,OAAM,aAAY,OAAAi1B,EAAiB,KAAK,IAAI,GACvE,mBAAmB,OAAAj1B,EAAO,OAAM,qCAKpC,GAHA8kB,EAAwB,GAAI,+BAAgCoQ,CAAa,EAGrEJ,EAAe,eAAej5B,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC5D,GAAI,CACF,MAAM,OAAO,oBAAoB,OAAO,iCAAiCi5B,EAAe,KAAK,EAC7FtQ,GAAA,MAAAA,EAAoB,cAAc,aAClC,QAAQ,IAAI,kBAAkB,QACvBzrB,EAAO,CACd,QAAQ,KAAK,oBAAqBA,EAAM,OAAO,EAC/CyrB,GAAA,MAAAA,EAAoB,YAAYzrB,EAAO,UAAS,CAIpD+rB,EAAwB,IAAK,2BAA4B,+CAA+C,EAGxG,QAAQ,IAAI,uBAAuB,OAAAgQ,EAAe,kBAAiB,UAAS,OAAAA,EAAe,YAAa,EAEpGA,EAAe,OAAO,OAAS,GACjC,QAAQ,KAAK,mBAAoBA,EAAe,MAAM,EAIxD,IAAIK,EAAoB,KACpB3Q,IACF2Q,EAAoB3Q,EAAmB,gBACvC,QAAQ,IAAI,oBAAqB2Q,CAAiB,EAGlD,OAAO,oBAAoB,sBAAwBA,GAIrD,WAAW,IAAM,CAaf,GAZA5P,EAAA,EAGA8E,GAAgBrqB,CAAM,EAGtBsqB,EAAA,EAGArF,EAAmBiQ,CAAa,EAG5BC,GAAqBA,EAAkB,iBAAkB,CAC3D,MAAMC,EAAW,SAAS,OAAAD,EAAkB,iBAAgB,MAAK,OAAAA,EAAkB,QAAQ,iBAAgB,KAC3G,QAAQ,IAAI,UAAU,OAAAC,EAAU,EAGlC,QAAQ,IAAI,kBAAkB,OAAAp1B,EAAO,OAAM,iBAAgB,OAAA80B,EAAe,kBAAiB,aAAY,OAAAA,EAAe,YAAa,GAClI,IAAI,QAEA/7B,EAAO,CACd,cAAQ,MAAM,aAAcA,CAAK,EAGjCyrB,GAAA,MAAAA,EAAoB,YAAYzrB,EAAO,WACvCyrB,GAAA,MAAAA,EAAoB,gBAEhBzrB,aAAiB67B,IACnBrP,EAAA,EACA8P,GAAoBt8B,CAAK,IAEzBwsB,EAAA,EACAR,EAAU,UAAW,GAAG,OAAAhsB,EAAM,QAAO,qBAAoB,GAGrDA,CAAA,CAEV,CAKA,MAAM67B,WAAwB,KAAM,CAClC,YAAYjf,EAAO7T,EAASse,EAAU,GAAI,CACxC,MAAMte,CAAO,EACb,KAAK,KAAO,kBACZ,KAAK,MAAQ6T,EACb,KAAK,QAAUyK,CAAA,CAEnB,CAKA,SAASiV,GAAoBt8B,EAAO,CAClC,MAAM4kB,EAAe,GAAG,OAAA5kB,EAAM,MAAK,QAAO,OAAAA,EAAM,SAC1Cu8B,EAAgBv8B,EAAM,QAAQ,WAClC,gBAAgB,OAAAA,EAAM,QAAQ,YAAe,GAE/CgsB,EACE,WACApH,EAAe2X,EAAgB,eAAiBv8B,EAAM,QAAQ,WAAa,0BAI7Ew8B,GAAA,CACF,CAKA,SAASA,IAAiB,CACxB,MAAMlR,EAAa,SAAS,eAAe,aAAa,EAIxD,GAHI,CAACA,GAGDA,EAAW,cAAc,eAAe,EAAG,OAE/C,MAAMmR,EAAc,SAAS,cAAc,QAAQ,EACnDA,EAAY,YAAc,OAC1BA,EAAY,UAAY,eACxBA,EAAY,MAAM,QAAU,4KAU5BA,EAAY,QAAU,SAAY,CAChCnR,EAAW,MAAM,QAAU,OAC3B,wBAEA,GAAI,CACF,MAAMiB,GAAA,CAAmB,OAClBmQ,EAAY,CACnB,QAAQ,MAAM,QAASA,CAAU,EACnC,GAIiBpR,EAAW,cAAc,gBAAgB,GAAKA,GACtD,YAAYmR,CAAW,CACpC,CAOA,eAAeE,GAA0Bh8B,EAAS,CAChD,MAAMohB,EAAQ,SAAS,eAAe,gCAAgC,EAChE6a,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAoB,SAAS,eAAe,qBAAqB,EAGjEC,EAAiB/a,EAAM,cAAc,iDAAiD,EAW5F,GAVI+a,IACFA,EAAe,QAAU,IAIvBF,IACFA,EAAiB,MAAM,QAAU,QAI/BxpB,EAAS,cAAgBA,EAAS,cAAgBA,EAAS,aAAa,KAAOzS,EACjF,GAAI,CAEF,MAAM4nB,EAAe,MAAMwU,GAAA,EACrBC,EAAczU,EAAeA,EAAa,OAAS,EAEzD,GAAIyU,EAAc,EAAG,CAEfJ,GAAoBC,IACtBA,EAAkB,YAAcG,EAChCJ,EAAiB,MAAM,QAAU,SAInC,MAAMK,EAAsBlb,EAAM,cAAc,0DAA0D,EACtGkb,IACFA,EAAoB,SAAW,GAC/BA,EAAoB,cAAc,MAAM,QAAU,KAIpD,MAAMC,EAAoBnb,EAAM,cAAc,oDAAoD,EAC9Fmb,IACFA,EAAkB,SAAW,GAC7BA,EAAkB,cAAc,MAAM,QAAU,IAClD,MAGAC,EAAmB,qBAAsB,4BAA4B,EACrEA,EAAmB,eAAgB,kCAAkC,CACvE,OACOn9B,EAAO,CACd,QAAQ,KAAK,oDAAqDA,CAAK,EACvEm9B,EAAmB,qBAAsB,gCAAgC,EACzEA,EAAmB,eAAgB,mCAAmC,OAIxEA,EAAmB,qBAAsB,2BAA2B,EACpEA,EAAmB,eAAgB,2BAA2B,EAI3Cpb,EAAM,iBAAiB,8BAA8B,EAC7D,QAAQyH,GAAU,CAC7BA,EAAO,iBAAiB,SAAU4T,EAAyB,EAC5D,CACH,CAKA,SAASD,EAAmBE,EAAO70B,EAAQ,CAEzC,MAAMghB,EADQ,SAAS,eAAe,gCAAgC,EACjD,cAAc,uCAAuC,OAAA6T,EAAK,KAAI,EAC/E7T,IACFA,EAAO,SAAW,GAClBA,EAAO,cAAc,MAAM,QAAU,MACrCA,EAAO,cAAc,MAAQhhB,EAEjC,CAKA,SAAS40B,IAA4B,CACnC,MAAME,EAAgB,SAAS,cAAc,sCAAsC,EAC7EC,EAAkB,SAAS,eAAe,8BAA8B,EACxEC,EAAgB,SAAS,eAAe,oBAAoB,EAElE,GAAIF,EAAe,CACjB,MAAMG,EAAQH,EAAc,MAGtBI,EAAcH,EAAgB,cAAc,cAAc,MAAM,EACtE,GAAIG,EACF,OAAQD,EAAA,CACN,IAAK,YACHC,EAAY,YAAc,mGAC1B,MACF,IAAK,qBACHA,EAAY,YAAc,+FAC1B,MACF,IAAK,eACHA,EAAY,YAAc,8FAC1B,MAKN,GAAIF,EACF,OAAQC,EAAA,CACN,IAAK,YACHD,EAAc,YAAc,mCAC5B,MACF,IAAK,qBACHA,EAAc,YAAc,4BAC5B,MACF,IAAK,eACHA,EAAc,YAAc,2BAC5B,MAEN,CAEJ,CAKA,eAAe9N,IAA+B,CAC5C,GAAI,CAACtc,EAAS,aAAc,CAC1B4Y,EAAU,OAAQ,QAAQ,EAC1B,OAGF,QAAQ,IAAI,yBAAyB,OAAA5Y,EAAS,aAAa,GAAE,OAAM,EAGnE,MAAMuqB,GAAgCvqB,EAAS,aAAa,EAAE,CAChE,CAKA,eAAeuqB,GAAgCh9B,EAAS,CACtD,MAAMohB,EAAQ,SAAS,eAAe,gCAAgC,EAChEoZ,EAAiB,SAAS,eAAe,iBAAiB,EAC1DyC,EAAe,SAAS,eAAe,eAAe,EACtDhG,EAAe,SAAS,eAAe,eAAe,EACtD2F,EAAkB,SAAS,eAAe,8BAA8B,EACxEC,EAAgB,SAAS,eAAe,oBAAoB,EAElE,GAAKzb,EAGL,CAAAoZ,EAAe,YAAcx6B,EAC7Bi9B,EAAa,MAAM,QAAU,QAC7BhG,EAAa,MAAM,QAAU,OAC7B2F,EAAgB,QAAU,GAC1BC,EAAc,SAAW,GAGzBb,GAA0Bh8B,CAAO,EAGjCohB,EAAM,MAAM,QAAU,OAEtB,GAAI,CAEF,QAAQ,IAAI,uBAAuB,OAAAphB,EAAO,SAAQ,EAElD,MAAMD,EAAS,MADE,MAAM,MAAM,+CAA+C,OAAAC,EAAO,SAAQ,GAC7D,OAE9B,GAAID,EAAO,QAET,SAAS,eAAe,wBAAwB,EAAE,YAAcA,EAAO,WAAW,gBAClF,SAAS,eAAe,yBAAyB,EAAE,YAAcA,EAAO,WAAW,sBACnF,SAAS,eAAe,qBAAqB,EAAE,YAAcA,EAAO,WAAW,aAC/E,SAAS,eAAe,mBAAmB,EAAE,YAAcA,EAAO,WAAW,WAG7Ek9B,EAAa,MAAM,QAAU,OAC7BhG,EAAa,MAAM,QAAU,QAE7B,QAAQ,IAAI,0BAA0B,OAAAl3B,EAAO,WAAW,WAAU,UAAS,OAAAA,EAAO,WAAW,sBAAqB,QAAO,EAGzHqhB,EAAM,QAAQ,WAAa,KAAK,UAAUrhB,EAAO,UAAU,MAE3D,OAAM,IAAI,MAAMA,EAAO,OAAS,UAAU,CAC5C,OACOV,EAAO,CACd,QAAQ,MAAM,2BAA4BA,CAAK,EAC/C49B,EAAa,UAAY,6CAA6C,OAAA59B,EAAM,QAAO,YAEvF,CAKA,SAAS+vB,IAAkC,CACzC,MAAMhO,EAAQ,SAAS,eAAe,gCAAgC,EACtE,GAAIA,EAAO,CACTA,EAAM,MAAM,QAAU,OAGtB,MAAMwb,EAAkB,SAAS,eAAe,8BAA8B,EACxEC,EAAgB,SAAS,eAAe,oBAAoB,EAC9DD,MAAiC,QAAU,IAC3CC,IACFA,EAAc,SAAW,GAEzBA,EAAc,YAAc,6BAC9B,CAEJ,CAKA,SAASvN,IAAiC,CACxC,MAAMsN,EAAkB,SAAS,eAAe,8BAA8B,EACxEC,EAAgB,SAAS,eAAe,oBAAoB,EAE9DD,GAAmBC,IACrBA,EAAc,SAAW,CAACD,EAAgB,QAE9C,CAKA,eAAevN,IAAgC,CAC7C,GAAI,CAAC5c,EAAS,aAAc,CAC1B4Y,EAAU,OAAQ,OAAO,EACzB,OAGF,MAAMrrB,EAAUyS,EAAS,aAAa,GAChC2O,EAAQ,SAAS,eAAe,gCAAgC,EAChEyb,EAAgB,SAAS,eAAe,oBAAoB,EAElE,GAAI,CAACzb,GAAS,CAACyb,EAAe,OAG9B,MAAMF,EAAgBvb,EAAM,cAAc,sCAAsC,EAC1E8b,EAAgBP,EAAgBA,EAAc,MAAQ,YAE5D,GAAI,CAEF,MAAMnM,EAAeqM,EAAc,YACnCA,EAAc,YAAc,gBAC5BA,EAAc,SAAW,GAEzB,QAAQ,IAAI,yBAAyB,OAAA78B,EAAO,aAAY,OAAAk9B,EAAe,EAEvE,IAAIn9B,EAEJ,OAAQm9B,EAAA,CACN,IAAK,YAEHn9B,EAAS,MAAMo9B,GAAyBn9B,CAAO,EAC/C,MAEF,IAAK,qBAEHD,EAAS,MAAMq9B,GAAyBp9B,CAAO,EAC/C,MAEF,IAAK,eAEHD,EAAS,MAAMs9B,GAA4Br9B,CAAO,EAClD,MAEF,QACE,MAAM,IAAI,MAAM,2BAA2B,OAAAk9B,EAAe,EAG9D,GAAIn9B,EAAO,QAAS,CAClB,QAAQ,IAAI,uBAAwBA,EAAO,UAAU,EAGrD88B,EAAc,YAAcrM,EAG5BpB,GAAA,EAGA,MAAM3rB,EAAQ1D,EAAO,WACfu9B,EAAiBC,GAAqBv9B,EAASk9B,EAAez5B,CAAK,EACzEgzB,EAAY,OAAQ6G,CAAc,EAGlC/R,EAAmB,MAAM,OAAAvrB,EAAO,eAAc,OAAAk9B,EAAa,IAAG,EAG9D,MAAMM,GAA0Bx9B,EAASk9B,CAAa,MAGtD,OAAM,IAAI,MAAMn9B,EAAO,OAAS,QAAQ,CAC1C,OAEOV,EAAO,CACd,QAAQ,MAAM,uBAAuB,OAAAW,EAAO,QAAQX,CAAK,EAGzDw9B,EAAc,YAAc,aAC5BA,EAAc,SAAW,GAEzBxR,EAAU,OAAQ,QAAQ,OAAArrB,EAAO,eAAc,OAAAX,EAAM,QAAS,EAElE,CAKA,eAAe89B,GAAyBn9B,EAAS,CAQ/C,OAAO,MAPU,MAAM,MAAM,+CAA+C,OAAAA,GAAW,CACrF,OAAQ,SACR,QAAS,CACP,eAAgB,mBAClB,CACD,GAEqB,MACxB,CAKA,eAAeo9B,GAAyBp9B,EAAS,CAC/C,GAAI,CAACyS,EAAS,cAAgB,CAACA,EAAS,aACtC,MAAM,IAAI,MAAM,iDAAiD,EAGnE,GAAI,CAEF,MAAMmV,EAAe,MAAMwU,GAAA,EACrBzpB,EAAY,CAACF,EAAS,aAAc,GAAGmV,CAAY,EAEzD,IAAI6V,EAAe,EACfliB,EAAS,GAGb,UAAWnU,KAASuL,EAClB,GAAI,CAEEvL,EAAM,KAAOqL,EAAS,aAAa,IAAMgM,IAC3C,QAAQ,IAAI,wDAAwD,OAAArX,EAAM,GAAI,EAC9EqX,EAAe,iBAGX,OAAOyW,GAAkC,YAC3C,WAAWA,EAA+B,GAAG,GAKjD,MAAMwI,GAAyBt2B,EAAM,EAAE,EAEvCq2B,IACAlS,EAAmB,OAAO,OAAAkS,EAAY,KAAI,OAAA9qB,EAAU,OAAM,UAAS,QAC5DtT,EAAO,CACd,QAAQ,MAAM,yBAAyB,OAAA+H,EAAM,GAAE,KAAK/H,CAAK,EACzDkc,EAAO,KAAK,GAAG,OAAAnU,EAAM,GAAE,MAAK,OAAA/H,EAAM,QAAS,EAK/C,GAAI,OAAO,iCACT,UAAW+H,KAASuL,EAClB,MAAM,OAAO,iCAAiCvL,EAAM,EAAE,EAI1D,MAAO,CACL,QAAS,GACT,WAAY,CACV,kBAAmBq2B,EACnB,oBAAqB9qB,EAAU,OAC/B,uBAAwB8qB,EACxB,oBAAqB,EACrB,WAAY,4BACZ,OAAAliB,CAAA,CACF,CACF,OAEOlc,EAAO,CACd,eAAQ,MAAM,6BAA8BA,CAAK,EAC1C,CACL,QAAS,GACT,MAAOA,EAAM,QACf,CAEJ,CAKA,eAAeg+B,GAA4Br9B,EAAS,CAClD,GAAI,CAACyS,EAAS,aACZ,MAAM,IAAI,MAAM,2BAA2B,EAG7C,GAAI,CACF,aAAMirB,GAAyBjrB,EAAS,aAAa,EAAE,EAGnD,OAAO,kCACT,MAAM,OAAO,iCAAiCA,EAAS,aAAa,EAAE,EAIpEgM,GACFA,EAAe,iBAGV,CACL,QAAS,GACT,WAAY,CACV,kBAAmB,EACnB,oBAAqB,EACrB,uBAAwB,EACxB,oBAAqB,EACrB,WAAY,+BACd,CACF,OAEOpf,EAAO,CACd,eAAQ,MAAM,iCAAkCA,CAAK,EAC9C,CACL,QAAS,GACT,MAAOA,EAAM,QACf,CAEJ,CAKA,SAASk+B,GAAqBv9B,EAASk9B,EAAez5B,EAAO,OAC3D,IAAI2E,EAAU,MAAM,OAAApI,EAAO,kBAE3B,OAAQk9B,EAAA,CACN,IAAK,YACH90B,GAAW,SAAS,OAAA3E,EAAM,kBAAiB,KAAI,OAAAA,EAAM,oBAAmB,MACxE2E,GAAW,SAAS,OAAA3E,EAAM,uBAAsB,MAChD2E,GAAW,SAAS,OAAA3E,EAAM,oBAAmB,MACzCA,EAAM,aACR2E,GAAW,UAAU,OAAA3E,EAAM,aAE7B,MAEF,IAAK,qBACH2E,GAAW,WACXA,GAAW,SAAS,OAAA3E,EAAM,kBAAiB,KAAI,OAAAA,EAAM,oBAAmB,MACpEA,EAAM,QAAUA,EAAM,OAAO,OAAS,IACxC2E,GAAW,OAAO,OAAA3E,EAAM,OAAO,OAAM,aAEvC,MAEF,IAAK,eACH2E,GAAW,cACXA,GAAW,SAAS,SAAAxH,EAAA6R,EAAS,eAAT,YAAA7R,EAAuB,KAAM,WACjD,MAGJ,OAAOwH,CACT,CAKA,eAAeo1B,GAA0Bx9B,EAASk9B,EAAe,OAC/D,OAAQA,EAAA,CACN,IAAK,YAEH,GAAIzqB,EAAS,cAAgBA,EAAS,aAAa,KAAOzS,EAAS,CACjE2yB,GAAA,EAGA,MAAMnsB,EAAQiM,EAAS,OAAO,KAAK+S,GAAKA,EAAE,KAAOxlB,CAAO,EACxD,GAAIwG,EAAO,CACTA,EAAM,OAAS,UAGf,MAAMkrB,EAAY,SAAS,cAAc,mBAAmB,OAAA1xB,EAAO,KAAI,EACvE,GAAI0xB,EAAW,CACb,MAAM8E,EAAU7E,EAAoBnrB,CAAK,EACzCkrB,EAAU,WAAW,aAAa8E,EAAS9E,CAAS,EACtD,CACF,CAEF,MAEF,IAAK,qBACL,IAAK,eAEC,OAAOwD,GAAkC,YAC3C,MAAMA,EAAA,EAER,MAIA,OAAOtE,GAAwB,YACjCA,EAAA,GAIEhwB,EAAA,OAAO,sBAAP,MAAAA,EAA4B,QAC9B,MAAM,OAAO,oBAAoB,OAAO,0BAE5C,CAKA,SAASmyB,GAAiC,CACxC,MAAM4K,EAAiB,SAAS,eAAe,oBAAoB,EACnE,GAAKA,EAEL,GAAIlrB,EAAS,aAAc,CACzB,MAAMjM,EAAQiM,EAAS,aAEnBjM,EAAM,SAAW,aAEnBm3B,EAAe,YAAc,mBAC7BA,EAAe,UAAY,kBAC3BA,EAAe,MAAQ,UAAU,OAAAn3B,EAAM,IACvCm3B,EAAe,SAAW,IACjBn3B,EAAM,SAAW,WAE1Bm3B,EAAe,YAAc,iBAC7BA,EAAe,UAAY,kBAC3BA,EAAe,MAAQ,oBACvBA,EAAe,SAAW,KAG1BA,EAAe,YAAc,iBAC7BA,EAAe,UAAY,kBAC3BA,EAAe,MAAQ,QAAQ,OAAAn3B,EAAM,GAAE,QACvCm3B,EAAe,SAAW,GAC5B,MAGAA,EAAe,YAAc,iBAC7BA,EAAe,UAAY,kBAC3BA,EAAe,MAAQ,SACvBA,EAAe,SAAW,EAE9B,CAKA,SAAS7K,IAA0C,CACjD,MAAM8K,EAAe,SAAS,eAAe,8BAA8B,EACtEA,IAEDnrB,EAAS,cACXmrB,EAAa,SAAW,GACxBA,EAAa,MAAQ,QAAQ,OAAAnrB,EAAS,aAAa,GAAE,cAErDmrB,EAAa,SAAW,GACxBA,EAAa,MAAQ,UAEzB,CAGA,OAAO,wCAA0C9K,GAKjD,eAAepG,IAA4B,CACzC,GAAI,CAACjO,EAAgB,CACnB4M,EAAU,OAAQ,UAAU,EAC5B,OAGF,MAAMtQ,EAAqB0D,EAAe,oBAC1C,GAAI1D,EAAmB,UAAU,SAAW,EAAG,CAC7CsQ,EAAU,OAAQ,WAAW,EAC7B,OAIF,MAAMjjB,EAAU,cAAc,OAAA2S,EAAmB,UAAU,OAAM,WAE7D,QAAQ3S,CAAO,IAEjBqW,EAAe,iBACf8M,EAAmB,YAAY,EAG3B,OAAO,kCAAoC9Y,EAAS,cACtD,MAAM,OAAO,iCAAiCA,EAAS,aAAa,EAAE,EAIpE,OAAOyiB,GAAkC,YAC3CA,EAAA,EAGN,CAKA,eAAetI,IAAkB,CAC/B,GAAI,CAACnO,EAAgB,CACnB4M,EAAU,WAAY,UAAU,EAChC,OAGF,GAAI,CAAC5Y,EAAS,aAAc,CAC1B4Y,EAAU,WAAY,QAAQ,EAC9B,OAIF,MAAMwS,EAAU,SAAS,eAAe,gBAAgB,EACpDA,IACFA,EAAQ,SAAW,GACnBA,EAAQ,YAAc,KAGxB,GAAI,CACF,QAAQ,IAAI,mBAAmB,EAG/B,MAAMpf,EAAe,qBAAoB,OAElCpf,EAAO,CACd,QAAQ,MAAM,eAAgBA,CAAK,EACnCgsB,EAAU,WAAYhsB,EAAM,SAAW,eAAe,SACxD,CAEMw+B,IACFA,EAAQ,SAAW,GACnBA,EAAQ,YAAc,KACxB,CAEJ,CAYA,eAAezB,IAA6B,CAC1C,GAAI,CAAC3pB,EAAS,cAAgB,CAACA,EAAS,cAAgB,CAAChH,EACvD,MAAO,GAGT,GAAI,CAEF,MAAMkH,EAAY,MAAMlH,EAAiB,eACvCgH,EAAS,aAAa,GACtBA,EAAS,aAAa,mBAGxB,GAAI,CAACE,GAAaA,EAAU,SAAW,EACrC,MAAO,GAIT,MAAM5N,EAAoB4N,EAAU,UAAUhO,GAAOA,EAAI,KAAO8N,EAAS,aAAa,EAAE,EACxF,GAAI1N,IAAsB,GACxB,MAAO,GAIT,MAAM2iB,EAAe/U,EAAU5N,CAAiB,EAC1C4iB,EAAc,IAAI,KAAKD,EAAa,QAAQ,EAG5CE,EAAejV,EAAU,OAAOhO,GACpB,IAAI,KAAKA,EAAI,QAAQ,EACpBgjB,CAClB,EAGD,OAAAC,EAAa,KAAK,CAACvkB,EAAGqB,IAAM,IAAI,KAAKrB,EAAE,QAAQ,EAAI,IAAI,KAAKqB,EAAE,QAAQ,CAAC,EAEhEkjB,CAAA,OAEAvoB,EAAO,CACd,eAAQ,MAAM,+BAAgCA,CAAK,EAC5C,EAAC,CAEZ,CAKA,eAAeq+B,GAAyBh9B,EAAS,CAC/C,GAAI,CAAC+K,EACH,MAAM,IAAI,MAAM,gCAAgC,EAGlD,GAAI,CAEF,MAAMA,EAAiB,qBAAqB/K,EAAS,EAAE,EACvD,QAAQ,IAAI,kCAAkC,OAAAA,EAAS,QAChDrB,EAAO,CACd,cAAQ,MAAM,yCAAyC,OAAAqB,EAAO,KAAKrB,CAAK,EAClEA,CAAA,CAEV","names":["HttpFileSystemManager","controller","timeoutId","response","error","operation","operationName","maxRetries","lastError","attempt","ms","resolve","now","isConnected","result","plantId","imagesByView","totalImages","total","images","viewAngle","imageName","imageData","parts","imageUrl","imageId","annotationData","_a","dirPath","url","filename","imageExtensions","ext","regex","match","dateStr","hourStr","date","skipData","_b","status","AnnotationStorageManager","fileSystemManager","annotationsHandle","serverError","exportData","data","backup","annotations","plantInfo","_c","skipInfo","apiError","fileName","writable","fsError","removeError","statusData","existingData","skipError","content","localData","parsed","localError","totalPlants","annotatedCount","completedCount","blob","a","pureImageAnnotations","annotation","pureAnnotations","stats","totalKeypoints","timeSeriesManager","summary","timeSeriesData","imageIds","item","viewAnnotations","adjustmentKey","manualAdjustments","annotatedImages","loadedCount","skipInfoData","skipFileCount","name","handle","TimeSeriesAnnotationManager","b","img","isManualAdjustment","plantAnnotations","timeSequence","currentImageIndex","sourceImageId","sourceImageIndex","i","targetImageId","propagatedCount","imageIndex","fromIndex","count","annotated","manual","inherited","allImageAnnotations","plantData","plantImageAnnotations","plantStats","plantImages","plantAnnotatedImages","plantKeypoints","plantDetail","debugData","PlantDataManager","plantFolders","plants","plantFolder","plant","annotatedPlantIds","bulkAnnotationData","bulkData","startTime","imageAnnotationsMap","plantAnnotationsMap","hasAnnotations","totalAnnotations","selectedViewAngle","viewAngleStats","viewAnnotationCount","image","imageAnnotations","persistedStatus","endTime","allAnnotationFiles","annotationFileSet","viewAngles","view","checkLoading","reason","newStatus","seriesInfo","options","currentImageId","savedCount","directionInfo","message","finalAnnotations","existingAnnotations","newAnnotations","merged","newAnnotation","existingIndex","existing","currentPlantId","metadata","currentIndex","completedImages","completedPlants","plantImageCount","plantStat","completionRate","plantCompletionRate","detailed","persistentStats","completed","inProgress","pending","skipped","totalCompleted","imageStats","query","lowerQuery","event","timeSeriesStats","timeSeriesStatus","storageAnnotations","comparison","storageKey","savedData","saved","annotationsByType","typeKey","totalFixed","typeAnnotations","hasOrderIssues","orders","kp","AnnotationTool","canvasId","modeSelector","retryCount","rect","currentDimensions","history","recent","d","e","preserveView","plantDataManager","imageURL","reject","canvasWidth","canvasHeight","imageWidth","imageHeight","scaleX","scaleY","scale","newScale","scaleChange","centerX","centerY","displayStrategy","keypoint","index","screenPos","fallback","previewPos","direction","fillColor","isHovered","isSelected","displayOrder","customType","alpha","bottomRightScreen","screenWidth","screenHeight","labelY","labelText","textWidth","padding","startScreenPos","currentScreenPos","left","top","width","height","sizeText","x","y","label","strategy","startX","startY","currentX","currentY","deltaX","midX","midY","imageX","imageY","screenX","screenY","imageLeft","imageTop","visibleBounds","bounds","imagePos","inVisibleArea","validCoords","finalResult","mousePos","clickedCustomAnnotation","clickedKeypoint","deltaY","directionCursor","keypointScreen","hoveredCustomAnnotation","hoveredKeypoint","newCursor","startPos","distance","currentTime","timeSinceMouseDown","wasDragged","currentType","_d","angle","normalizedAngle","clickData","oldDirection","advanceError","forceExit","t","ok","currentPoint","needDirectionKeypoints","isLegacy","isNoDirection","defaultAutoScale","currentScale","targetScale","scaleAction","pulseCount","maxPulses","pulse","ctx","radius","minTranslateX","minTranslateY","totalUpgraded","nextKeypoint","progress","hint","style","canvasContainer","mode","autoDirectionBtn","modeText","appState","crossSectionalMap","allImages","directionlessAnnotations","ann","order","imageAnnotationPairs","availableOrders","allPoints","currentOrder","imagesWithCurrentOrder","allAnnotations","nextImageData","currentOrderIndex","nextOrder","nextOrderImages","targetImage","loadedAnnotation","maxWaitTime","duration","processedCount","progressIndicator","progressCurrent","progressTotal","progressFill","progressModeInfo","totalCount","progressPercentage","userModePreference","branchPointPreviewManager","zoomFactor","factor","zoomElement","threshold","customTypeId","normalizedDirection","typeDesc","directionDesc","customTypes","endPos","minSize","sameTypeKeypoints","existingOrders","regularKeypoints","removed","orderA","orderB","state","typeHasIssues","smallRadius","actualRadius","fontSize","textBasedRadius","maxRadiusForLargeScale","canvas","container","labelElement","containerRect","offsetX","offsetY","labelOffsetY","existingTooltip","tooltip","directionText","coordinateText","indicator","sizeInfo","statusText","showInfo","currentKeypointCount","isLocked","expectedImageId","isConsistent","refreshFunction","refreshError","operationType","previousPosition","realTimeSyncManager","keypointInfo","createSyncData","updateSyncData","deleteSyncData","angleDegrees","angleRadians","arrowLength","endX","endY","headAngle1","headAngle2","headLength","textOffset","textX","textY","textHeight","guideX","guideY","angleText","upgraded","enabled","zoomSettings","highestKeypoint","highest","current","highestOrder","isImageSwitch","newImageAnnotations","position1","sumX","sumY","centerX_img","centerY_img","expectedPosition","success","rightArrowEvent","remaining","CustomAnnotationManager","__vitePreload","CustomAnnotationRenderer","bottomRight","customAnnotation","currentCustomType","newCount","prompt","actualDirections","progressPrompt","removedDirection","isComplete","clickDataArray","enhancedDirections","screenCoords","imageCoords","clickPosition","keypoints","validation","currentAnnotations","previousAnnotations","currentImageData","previousImageData","SiftMatcher","siftMatcher","calibratedAnnotations","quality","errors","currentPlant","previousFrameId","tempCanvas","tempCtx","previousImage","originalAnnotations","notification","acceptBtn","rejectBtn","title","type","visualizations","showOriginal","showCalibrated","showArrows","originalPos","calibratedPos","color","x1","y1","x2","y2","offset","dx","dy","headAngle","BranchPointPreviewManager","resizeObserver","targetAnnotation","cropSize","cropX","cropY","actualCropWidth","actualCropHeight","pointX","pointY","otherX","otherY","header","newX","newY","maxX","maxY","constrainedX","constrainedY","show","previousIndex","annotationCount","timeString","annotationTool","customAnnotationManager","fallbackOrder","isInCustomMode","previewMessage","file","handleError","isTarget","borderWidth","lineWidth","actualScale","zoomText","targetOrder","NoteManager","httpFileSystemManager","noteData","cacheKey","plantNotes","emptyResult","fetchError","imageNotes","noteId","updates","filters","searchParams","searchUrl","plantKey","imageKey","note","key","timestamp","requestFn","requestPromise","countKey","promises","plantCount","imageCount","notes","plantNotesCount","imageNotesCount","expiredKeys","NoteUI","noteManager","modal","toolbarSection","existingBtn","noteContainer","noteBtn","annotationControls","noteModalClose","noteCancelBtn","noteSaveBtn","noteListModalClose","addNoteBtn","noteSearchBtn","noteSearch","plantNoteBtn","imageNoteBtn","noteTitle","noteContent","globalAppState","fallbackPlantId","fallbackImageId","effectivePlantId","effectiveImageId","listContainer","html","noteScope","formattedNote","scopeIndicator","imageInfo","tag","btn","styleId","backwardPropagationGroup","isNewImageNote","checkbox","titleInput","laterImages","targetImages","results","noteType","tags","author","backwardPropagationCheckbox","enableBackwardPropagation","propagationResults","listModal","errorMessage","typeFilter","matchesQuery","matchesType","inputId","counterId","maxLength","input","counter","currentLength","plantNoteContainer","imageNoteContainer","shouldShow","plantNoteCountElement","bulkStats","actualCount","validationError","plantError","imageNoteCountElement","totalNotes","validationResults","actualTotal","totalImageNotes","p","viewError","imagePromises","badge","badgeText","plantItems","quickStats","metrics","text","div","noteCount","fallbackError","id","element","AnnotationManager","baseUrl","imageAnnotationCount","BulkLoadingPerformanceMonitor","details","checkpoint","dataSize","isBulk","cacheSize","context","report","cacheHitRate","bulkRequestRatio","score","requestEfficiency","suggestions","RealTimeSyncManager","annotationStorageManager","listener","listeners","currentImage","currentDate","futureImages","syncedCount","payload","existingKeypoint","orderMatch","typeMatch","customTypeMatch","newKeypoint","matchingIndex","removedKeypoint","syncData","existingCustomAnnotation","removedAnnotation","CustomAnnotationToolbarController","settingsController","selectedTypeId","currentSelection","option","currentMode","selectedType","typeBadge","hasCustomTypes","typeId","typeIcon","totalTypes","CustomAnnotationSettingsController","button","tabName","typesList","typeLabel","action","formData","typeData","rawAngle","prefix","builtinIdx","opt","isPoint","currentImageStatsDiv","exportSection","statsHtml","typeStats","info","importData","app","loadingScreen","mainApp","errorModal","noteUI","annotationManager","performanceMonitor","currentDataset","customAnnotationToolbarController","customAnnotationSettingsController","initializeCustomAnnotationControllers","initializeApp","updateFullscreenLoading","showError","hideError","updateProgressInfo","checkBrowserCompatibility","bindEventListeners","simulateLoading","showMainApp","autoConnectDataset","hideFullscreenLoading","unsupportedAPIs","api","missingAPIs","selectDatasetBtn","handleSelectDataset","errorCloseBtn","resetZoomBtn","fitScreenBtn","handleViewAngleSelect","undoBtn","redoBtn","clearAllBtn","handleClearAllAnnotations","siftMatchBtn","handleSiftMatch","togglePreviewBtn","handleAutoDirectionSelection","autoDirectionModeSelector","handleAutoDirectionModeChange","zoomLockCheckbox","zoomLockValue","handleZoomLockChange","handleZoomLockValueChange","autoMoveCheckbox","handleAutoMoveChange","realTimeChangeCheckbox","handleRealTimeChangeChange","skipModalClose","skipCancelBtn","skipConfirmBtn","hideSkipPlantModal","confirmSkipPlant","skipModal","statusFilter","handleStatusFilterChange","plantSearch","handlePlantSearchInput","saveAnnotationBtn","handleSaveAnnotation","saveAnnotationCancelBtn","hideSaveAnnotationModal","saveAnnotationConfirmBtn","selectedMode","performSaveAnnotation","completePlantBtn","handleCompletePlant","exportDataBtn","handleExportData","deletePlantAnnotationsBtn","handleDeletePlantAnnotations","deleteModalClose","deleteCancelBtn","deleteConfirmBtn","deleteConfirmationCheckbox","hideDeletePlantAnnotationsModal","confirmDeletePlantAnnotations","handleDeleteConfirmationChange","deleteModal","handleKeyboardShortcuts","handlePlantUpdated","saveAnnotationModal","unskipModalClose","unskipCancelBtn","unskipConfirmBtn","hideUnskipPlantModal","confirmUnskipPlant","uncompleteModalClose","uncompleteCancelBtn","uncompleteConfirmBtn","hideUncompletePlantModal","confirmUncompletePlant","unskipModal","uncompleteModal","selectBtn","originalText","datasetInfo","validateDatasetStructure","renderPlantList","updateProgressStats","plantDirectories","firstPlant","hideProgressStats","progressStats","progressStatsElement","completedImagesCount","totalImagesCount","completionPercentage","completedPlantsCount","totalPlantsCount","progressBarFill","skippedText","percentage","plantItem","createPlantListItem","retryDelay","bulkError","statusIcon","getStatusIcon","imageCountText","viewAnglesText","selectedViewText","isSkipped","skipReasonHtml","stateButtonsHtml","getStatusText","handlePlantSelect","loadImageNoteCount","isDirectRefresh","directError","initializeEmptyWorkspace","clearWorkspaceState","viewAngleSection","updateDeletePlantAnnotationsButtonState","updateCompletePlantButtonState","hideAnnotationStatusDisplay","thumbnailContainer","titleElement","updateCurrentPlantTitle","updatePlantItemSelection","allImageIds","showViewAngleSelection","viewAngleInfo","availableViews","hasImages","buttonText","selectedButton","renderImageThumbnails","handleImageSelect","selectedPlantId","selectedItem","thumbnail","createImageThumbnail","isFirst","refreshThumbnailAnnotationStatus","annotationBadge","statusElement","loadThumbnailImage","thumbnailElement","imgElement","loadingElement","imageToSave","isFirstImageForPlant","updateImageThumbnailSelection","getZoomLockSettings","autoMoveSettings","getAutoMoveSettings","shouldPreserveView","customAnnotations","updateAnnotationStatusDisplay","selectedImageId","thumb","selectedThumb","scrollToThumbnail","thumbnailRect","containerScrollTop","thumbnailOffsetTop","containerHeight","thumbnailHeight","targetScrollTop","statusSection","annotationSource","manualAdjustmentNotice","savedAnnotations","coverage","showSaveAnnotationModal","directionSaveMode","saveDirectionsOnly","saveResult","showUncompletePlantModal","confirmMessage","newItem","showSuccess","nextPlant","showExportOptionsModal","modalHTML","existingModal","updateExportStats","generateExportPreview","performExport","statsContent","getDirectExportData","calculateExportStats","finalExportData","annotationStorage","inferPlantIdFromImageId","skippedPlants","averageKeypointsPerImage","statusTextElement","imageCountElement","viewAnglesElement","plantViewInfo","selectedViewElement","navigateToPreviousImage","navigateToNextImage","loadingTexts","loadingP","progressText","previewContainer","previewHTML","generateSimplePreviewHTML","bindPreviewEvents","skippedCount","toggle","renderPreviewCanvases","showImageDetailModal","isElementVisible","renderAnnotationPreview","getImageDataFromId","targetWidth","targetHeight","imgAspect","containerAspect","drawWidth","drawHeight","renderImageDetail","previewCanvas","maxWidth","maxHeight","autoMode","nextIndex","nextImage","pauseHandler","resetAutoDirectionButton","showSkipPlantModal","plantNameElement","reasonTextarea","handleUnskipPlant","showUnskipPlantModal","searchInput","selectedStatus","searchQuery","applyPlantsFilter","filteredPlants","skipReason","plantIdElement","skipReasonElement","newStatusElement","lockValue","isEnabled","subtitle","loadingSubtitle","loadingDetails","fullscreenLoading","connectionError","ConnectionError","loadingTasks","loadingResults","bulkAnnotations","bulkNotes","loadedComponents","loadedMessage","performanceReport","gradeMsg","showConnectionError","detailMessage","addRetryButton","retryButton","retryError","setupDeletionScopeOptions","futureImagesInfo","futureImagesCount","plantAllOption","getFutureImagesForClearing","futureCount","currentFutureOption","currentOnlyOption","disableScopeOption","handleDeletionScopeChange","value","selectedScope","confirmCheckbox","confirmButton","scope","confirmText","showDeletePlantAnnotationsModal","statsLoading","deletionScope","executeFullPlantDeletion","executeSpreadingDeletion","executeCurrentImageDeletion","successMessage","createSuccessMessage","handlePostDeletionUpdates","deletedCount","clearAnnotationsForImage","completeButton","deleteButton","siftBtn"],"ignoreList":[],"sources":["../../src/core/HttpFileSystemManager.js","../../src/core/AnnotationStorageManager.js","../../src/core/TimeSeriesAnnotationManager.js","../../src/core/PlantDataManager.js","../../src/core/AnnotationTool.js","../../src/core/BranchPointPreviewManager.js","../../src/core/NoteManager.js","../../src/core/NoteUI.js","../../src/core/AnnotationManager.js","../../src/utils/BulkLoadingPerformanceMonitor.js","../../src/core/RealTimeSyncManager.js","../../src/core/CustomAnnotationToolbarController.js","../../src/core/CustomAnnotationSettingsController.js","../../src/main.js"],"sourcesContent":["/**\n * HTTP文件系统管理器\n * \n * 功能：\n * - 通过HTTP请求与后端通信\n * - 替代直接文件系统访问\n * - 支持植物数据和标注文件管理\n */\n\nexport class HttpFileSystemManager {\n  constructor() {\n    this.baseUrl = 'http://localhost:3003/api';\n    this.datasetPath = '/Users/tshoiasc/Brassica napus dataset/dataset';\n    this.isInitialized = false;\n    this.maxRetries = 3;\n    this.retryDelay = 1000;\n    this.connectionTimeout = 5000;\n    this.lastConnectionCheck = 0;\n    this.connectionCheckInterval = 30000;\n  }\n\n  /**\n   * 初始化管理器，带重试机制\n   */\n  async initialize() {\n    return this.withRetry(async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.connectionTimeout);\n      \n      try {\n        const response = await fetch(`${this.baseUrl}/health`, {\n          signal: controller.signal,\n          headers: { 'Cache-Control': 'no-cache' }\n        });\n        \n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        \n        if (result.success) {\n          this.isInitialized = true;\n          this.lastConnectionCheck = Date.now();\n          console.log('HttpFileSystemManager 初始化成功');\n          return true;\n        }\n        \n        throw new Error('Backend server responded but reported failure');\n      } catch (error) {\n        clearTimeout(timeoutId);\n        if (error.name === 'AbortError') {\n          throw new Error(`连接超时 (${this.connectionTimeout}ms)`);\n        }\n        throw error;\n      }\n    }, '初始化管理器');\n  }\n\n  /**\n   * 检查是否支持（始终返回true，因为使用HTTP）\n   */\n  static isSupported() {\n    return true;\n  }\n\n  /**\n   * 重试机制包装器\n   */\n  async withRetry(operation, operationName = '操作', maxRetries = this.maxRetries) {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        if (attempt > 1) {\n          console.log(`${operationName} 重试第 ${attempt - 1} 次...`);\n          await this.delay(this.retryDelay * attempt);\n        }\n        \n        return await operation();\n      } catch (error) {\n        lastError = error;\n        \n        if (this.isConnectionError(error) && attempt < maxRetries) {\n          console.warn(`${operationName} 失败 (尝试 ${attempt}/${maxRetries}):`, error.message);\n          continue;\n        }\n        \n        console.error(`${operationName} 最终失败:`, error);\n        throw error;\n      }\n    }\n    \n    throw lastError;\n  }\n  \n  /**\n   * 检查是否为连接错误\n   */\n  isConnectionError(error) {\n    return error.message.includes('Failed to fetch') ||\n           error.message.includes('ERR_CONNECTION_REFUSED') ||\n           error.message.includes('网络错误') ||\n           error.message.includes('连接超时') ||\n           error.name === 'TypeError' && error.message.includes('fetch');\n  }\n  \n  /**\n   * 延迟函数\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  \n  /**\n   * 检查连接状态\n   */\n  async checkConnection() {\n    const now = Date.now();\n    if (now - this.lastConnectionCheck < this.connectionCheckInterval) {\n      return this.isInitialized;\n    }\n    \n    try {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), 2000);\n      \n      const response = await fetch(`${this.baseUrl}/health`, {\n        signal: controller.signal,\n        headers: { 'Cache-Control': 'no-cache' }\n      });\n      \n      const isConnected = response.ok;\n      this.isInitialized = isConnected;\n      this.lastConnectionCheck = now;\n      \n      return isConnected;\n    } catch (error) {\n      this.isInitialized = false;\n      this.lastConnectionCheck = now;\n      return false;\n    }\n  }\n  \n  /**\n   * 获取数据集信息\n   */\n  async getDatasetInfo() {\n    await this.ensureConnection();\n    \n    return this.withRetry(async () => {\n      const response = await fetch(`${this.baseUrl}/dataset-info`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        return result.data;\n      }\n      \n      throw new Error(result.error || '获取数据集信息失败');\n    }, '获取数据集信息');\n  }\n  \n  /**\n   * 确保连接可用\n   */\n  async ensureConnection() {\n    if (!(await this.checkConnection())) {\n      throw new Error('后端服务连接不可用，请确保服务器正在运行在 http://localhost:3003');\n    }\n  }\n\n  /**\n   * 遍历植物文件夹\n   */\n  async traversePlantDirectories() {\n    await this.ensureConnection();\n    \n    return this.withRetry(async () => {\n      const response = await fetch(`${this.baseUrl}/plant-directories`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`找到 ${result.data.length} 个有效植物文件夹`);\n        return result.data;\n      }\n      \n      throw new Error(result.error || '遍历植物文件夹失败');\n    }, '遍历植物文件夹');\n  }\n\n  /**\n   * 读取植物的图像文件\n   */\n  async readPlantImages(plantId) {\n    if (!plantId) {\n      throw new Error('植物ID不能为空');\n    }\n    \n    await this.ensureConnection();\n    \n    return this.withRetry(async () => {\n      const response = await fetch(`${this.baseUrl}/plant-images/${encodeURIComponent(plantId)}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        const imagesByView = result.data;\n        \n        const totalImages = Object.values(imagesByView).reduce((total, images) => total + images.length, 0);\n        console.log(`植物 ${plantId} 总共 ${totalImages} 张图像`);\n        \n        return imagesByView;\n      }\n      \n      throw new Error(result.error || '读取植物图像失败');\n    }, `读取植物 ${plantId} 图像`);\n  }\n\n  /**\n   * 获取图像文件URL\n   */\n  getImageUrl(plantId, viewAngle, imageName) {\n    return `${this.baseUrl}/image/${plantId}/${viewAngle}/${imageName}`;\n  }\n\n  /**\n   * 创建图像URL (替代createImageURL)\n   */\n  async createImageURL(imageData) {\n    try {\n      console.log('创建图像URL，imageData:', imageData);\n      \n      // 从imageData中提取信息\n      const parts = imageData.id.split('_');\n      console.log('图像ID分割结果:', parts);\n      \n      if (parts.length >= 3) {\n        const plantId = parts[0];\n        const viewAngle = parts[1];\n        const imageName = parts.slice(2).join('_'); // 处理文件名中可能包含下划线的情况\n        \n        const imageUrl = this.getImageUrl(plantId, viewAngle, imageName);\n        console.log('生成的图像URL:', imageUrl);\n        \n        return imageUrl;\n      }\n      \n      throw new Error(`Invalid image data format. ID: ${imageData.id}, expected format: plantId_viewAngle_imageName`);\n    } catch (error) {\n      console.error(`创建图像URL失败 ${imageData.name}:`, error);\n      console.error('imageData:', imageData);\n      throw error;\n    }\n  }\n\n  /**\n   * 保存标注文件\n   */\n  async saveAnnotationFile(imageId, annotationData) {\n    if (!imageId) {\n      throw new Error('图像ID不能为空');\n    }\n    if (!annotationData) {\n      throw new Error('标注数据不能为空');\n    }\n    \n    await this.ensureConnection();\n    \n    return this.withRetry(async () => {\n      const response = await fetch(`${this.baseUrl}/annotation/${encodeURIComponent(imageId)}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ annotationData })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`保存标注文件: ${imageId}`);\n        return true;\n      }\n      \n      throw new Error(result.error || '保存标注文件失败');\n    }, `保存标注文件 ${imageId}`);\n  }\n\n  /**\n   * 读取标注文件\n   */\n  async loadAnnotationFile(imageId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/annotation/${imageId}`);\n      const result = await response.json();\n      \n      if (result.success) {\n        if (result.data) {\n          console.log(`[标注] 成功读取 ${imageId}, 包含 ${result.data.annotations?.length || 0} 个标注点`);\n        }\n        return result.data;\n      }\n      \n      throw new Error(result.error || '读取标注文件失败');\n    } catch (error) {\n      console.error(`[标注] 读取标注文件失败 (${imageId}):`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 获取所有标注文件列表\n   */\n  async getAllAnnotationFiles() {\n    try {\n      const response = await fetch(`${this.baseUrl}/annotations`);\n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`[标注] 扫描完成，找到 ${result.data.length} 个标注文件`);\n        return result.data;\n      }\n      \n      throw new Error(result.error || '获取标注文件列表失败');\n    } catch (error) {\n      console.error('[标注] 获取标注文件列表失败:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 删除标注文件\n   */\n  async deleteAnnotationFile(imageId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/annotation/${imageId}`, {\n        method: 'DELETE'\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`删除标注文件: ${imageId}`);\n        return true;\n      }\n      \n      throw new Error(result.error || '删除标注文件失败');\n    } catch (error) {\n      console.error(`删除标注文件失败 (${imageId}):`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取目录统计信息\n   */\n  async getDirectoryStats(dirPath = null) {\n    try {\n      const url = dirPath ? \n        `${this.baseUrl}/directory-stats?dirPath=${encodeURIComponent(dirPath)}` : \n        `${this.baseUrl}/directory-stats`;\n      \n      const response = await fetch(url);\n      const result = await response.json();\n      \n      if (result.success) {\n        return result.data;\n      }\n      \n      throw new Error(result.error || '获取目录统计失败');\n    } catch (error) {\n      console.error('获取目录统计失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 检查是否为图像文件\n   */\n  isImageFile(filename) {\n    const imageExtensions = ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.webp'];\n    const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));\n    return imageExtensions.includes(ext);\n  }\n\n  /**\n   * 解析图像文件名中的时间信息\n   */\n  parseImageDateTime(filename) {\n    const regex = /BR\\d+-\\d+-(\\d{4}-\\d{2}-\\d{2})_(\\d{2})_VIS_sv_\\d+/;\n    const match = filename.match(regex);\n    \n    if (match) {\n      const dateStr = match[1];\n      const hourStr = match[2];\n      const dateTime = new Date(`${dateStr}T${hourStr}:00:00`);\n      return dateTime;\n    }\n    \n    console.warn(`无法解析文件名时间信息: ${filename}`);\n    return new Date(0);\n  }\n\n  /**\n   * 格式化图像时间显示 - 🔧 FIXED: Only show date, no time\n   */\n  formatImageTime(filename) {\n    const regex = /BR\\d+-\\d+-(\\d{4}-\\d{2}-\\d{2})_(\\d{2})_VIS_sv_\\d+/;\n    const match = filename.match(regex);\n    \n    if (match) {\n      const dateStr = match[1];\n      const hourStr = match[2];\n      const date = new Date(`${dateStr}T${hourStr}:00:00`);\n      // 🔧 FIX: Remove time portion, only show year/month/day\n      return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n    }\n    \n    return filename;\n  }\n\n  /**\n   * 获取所有跳过信息\n   */\n  async getAllSkipInfo() {\n    try {\n      const response = await fetch(`${this.baseUrl}/skip-info`);\n      const result = await response.json();\n      \n      if (result.success) {\n        return result.data;\n      }\n      \n      throw new Error(result.error || '获取跳过信息失败');\n    } catch (error) {\n      console.error('获取跳过信息失败:', error);\n      return {};\n    }\n  }\n\n  /**\n   * 获取特定植物的跳过信息\n   */\n  async getSkipInfo(plantId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/skip-info/${plantId}`);\n      const result = await response.json();\n      \n      if (result.success) {\n        return result.data;\n      }\n      \n      throw new Error(result.error || '获取跳过信息失败');\n    } catch (error) {\n      console.error(`获取植物 ${plantId} 跳过信息失败:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 保存植物跳过信息\n   */\n  async saveSkipInfo(plantId, skipData) {\n    try {\n      const response = await fetch(`${this.baseUrl}/skip-info/${plantId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ skipData })\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`保存跳过信息: ${plantId}`);\n        return true;\n      }\n      \n      throw new Error(result.error || '保存跳过信息失败');\n    } catch (error) {\n      console.error(`保存植物 ${plantId} 跳过信息失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 删除植物跳过信息\n   */\n  async deleteSkipInfo(plantId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/skip-info/${plantId}`, {\n        method: 'DELETE'\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`删除跳过信息: ${plantId}`);\n        return true;\n      }\n      \n      throw new Error(result.error || '删除跳过信息失败');\n    } catch (error) {\n      console.error(`删除植物 ${plantId} 跳过信息失败:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 🔧 FIX: Get plant status from dedicated API\n   */\n  async getPlantStatus(plantId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/plant-status/${plantId}`);\n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`[植物状态] 从API获取植物 ${plantId} 状态: ${result.data?.status || 'null'}`);\n        return result.data;\n      }\n      \n      // If no status found, return null (not an error)\n      if (response.status === 404 || result.message?.includes('未找到')) {\n        console.log(`[植物状态] 植物 ${plantId} 无状态信息`);\n        return null;\n      }\n      \n      throw new Error(result.error || '获取植物状态失败');\n    } catch (error) {\n      console.error(`获取植物 ${plantId} 状态失败:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 🔧 FIX: Save plant status to dedicated API\n   */\n  async savePlantStatus(plantId, status) {\n    try {\n      const response = await fetch(`${this.baseUrl}/plant-status/${plantId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \n          status, \n          lastModified: new Date().toISOString() \n        })\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`[植物状态] 保存植物 ${plantId} 状态: ${status}`);\n        return true;\n      }\n      \n      throw new Error(result.error || '保存植物状态失败');\n    } catch (error) {\n      console.error(`保存植物 ${plantId} 状态失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 FIX: Delete plant status from dedicated API\n   */\n  async deletePlantStatus(plantId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/plant-status/${plantId}`, {\n        method: 'DELETE'\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`[植物状态] 删除植物 ${plantId} 状态`);\n        return true;\n      }\n      \n      throw new Error(result.error || '删除植物状态失败');\n    } catch (error) {\n      console.error(`删除植物 ${plantId} 状态失败:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 清理资源（HTTP版本不需要实际清理）\n   */\n  cleanup() {\n    console.log('HttpFileSystemManager 清理完成');\n  }\n\n  /**\n   * 兼容性方法：获取annotations目录（HTTP版本返回虚拟状态）\n   */\n  getAnnotationsDirectory() {\n    return this.isInitialized ? { exists: true } : null;\n  }\n\n  /**\n   * 兼容性方法：确保annotations目录存在\n   */\n  async ensureAnnotationsDirectory() {\n    // HTTP版本中，后端自动处理目录创建\n    return { exists: true };\n  }\n}","/**\n * 标注数据存储管理器\n * \n * 功能：\n * - 将标注数据保存为JSON文件到项目目录\n * - 从JSON文件加载标注数据\n * - 提供导出功能\n * - 管理标注历史和备份\n */\n\nexport class AnnotationStorageManager {\n  constructor() {\n    this.apiBaseUrl = 'http://localhost:3002/api'; // 本地存储服务器\n    this.annotations = new Map();\n    this.imageAnnotations = new Map(); // 新增：按图像ID存储标注\n    this.isInitialized = false;\n    this.fileSystemManager = null; // 文件系统管理器\n    this.useFileSystem = false; // 是否使用文件系统存储\n  }\n\n  /**\n   * 设置文件系统管理器\n   */\n  setFileSystemManager(fileSystemManager) {\n    this.fileSystemManager = fileSystemManager;\n    this.useFileSystem = !!fileSystemManager;\n    console.log('[标注] 文件系统存储已启用');\n\n    // 检查annotations目录句柄是否存在\n    if (fileSystemManager) {\n      const annotationsHandle = fileSystemManager.getAnnotationsDirectory();\n      console.log(`[标注] setFileSystemManager: annotations句柄${annotationsHandle ? '存在' : '不存在'}`);\n    }\n  }\n\n  /**\n   * 初始化存储管理器\n   */\n  async initialize() {\n    try {\n      if (this.useFileSystem && this.fileSystemManager) {\n        // 文件系统模式：扫描标注文件但不预加载到内存\n        await this.scanAnnotationFiles();\n        console.log('AnnotationStorageManager 初始化完成 (文件系统模式)');\n        this.isInitialized = true;\n        return;\n      }\n\n      // 如果没有启用文件系统，尝试服务器模式\n      try {\n        await this.loadAnnotationsFromServer();\n        await this.loadImageAnnotationsFromServer();\n        console.log('AnnotationStorageManager 初始化完成 (服务器模式)');\n      } catch (serverError) {\n        console.warn('服务器模式初始化失败，使用localStorage模式:', serverError.message);\n        // 尝试从localStorage恢复数据\n        this.loadFromLocalStorage();\n        this.loadImageAnnotationsFromLocalStorage();\n        console.log('AnnotationStorageManager 初始化完成 (localStorage模式)');\n      }\n\n      this.isInitialized = true;\n    } catch (error) {\n      console.error('初始化标注存储管理器失败:', error);\n      this.isInitialized = true; // 即使失败也标记为已初始化，避免重复初始化\n    }\n  }\n\n  /**\n   * 从服务器加载标注数据\n   */\n  async loadAnnotationsFromServer() {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/load-annotations`);\n      const result = await response.json();\n      \n      if (result.success && result.data) {\n        // 将数据加载到Map中\n        for (const [plantId, annotationData] of Object.entries(result.data.annotations || {})) {\n          this.annotations.set(plantId, annotationData);\n        }\n        \n        console.log(`从服务器加载了 ${this.annotations.size} 个植物的标注数据`);\n        return result.data;\n      } else {\n        throw new Error(result.error || '加载标注数据失败');\n      }\n    } catch (error) {\n      console.warn('从服务器加载标注数据失败，尝试从localStorage恢复:', error.message);\n      this.loadFromLocalStorage();\n      return { annotations: {} };\n    }\n  }\n\n  /**\n   * 保存标注数据到服务器\n   */\n  async saveAnnotationsToServer() {\n    try {\n      const exportData = {\n        saveTime: new Date().toISOString(),\n        totalPlants: this.annotations.size,\n        annotations: {}\n      };\n\n      // 转换Map为普通对象\n      for (const [plantId, annotationData] of this.annotations) {\n        exportData.annotations[plantId] = annotationData;\n      }\n\n      // 发送保存请求到本地服务器\n      const response = await fetch(`${this.apiBaseUrl}/save-annotations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(exportData)\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        console.log(`成功保存 ${this.annotations.size} 个植物的标注数据到服务器`);\n        // 同时备份到localStorage\n        this.saveToLocalStorage();\n        return true;\n      } else {\n        throw new Error(result.error || '服务器保存失败');\n      }\n    } catch (error) {\n      console.error('保存标注数据到服务器失败:', error);\n      // 如果无法保存到服务器，至少保存到localStorage作为备份\n      this.saveToLocalStorage();\n      return false;\n    }\n  }\n\n  /**\n   * 保存到localStorage作为备份\n   */\n  saveToLocalStorage() {\n    try {\n      const data = {};\n      for (const [plantId, annotationData] of this.annotations) {\n        data[plantId] = annotationData;\n      }\n      localStorage.setItem('plant_annotations_backup', JSON.stringify({\n        saveTime: new Date().toISOString(),\n        annotations: data\n      }));\n      console.log('标注数据已备份到localStorage');\n    } catch (error) {\n      console.error('备份到localStorage失败:', error);\n    }\n  }\n\n  /**\n   * 从localStorage恢复数据\n   */\n  loadFromLocalStorage() {\n    try {\n      const backup = localStorage.getItem('plant_annotations_backup');\n      if (backup) {\n        const data = JSON.parse(backup);\n        for (const [plantId, annotationData] of Object.entries(data.annotations || {})) {\n          if (!this.annotations.has(plantId)) {\n            this.annotations.set(plantId, annotationData);\n          }\n        }\n        console.log('从localStorage恢复了备份数据');\n      }\n    } catch (error) {\n      console.error('从localStorage恢复数据失败:', error);\n    }\n  }\n\n  /**\n   * 保存植物标注数据\n   */\n  async savePlantAnnotations(plantId, annotations, plantInfo = {}) {\n    const annotationData = {\n      plantId,\n      annotations, // 当前选中图像的标注\n      selectedImage: plantInfo.selectedImage?.name || null,\n      selectedImagePath: plantInfo.selectedImage?.id || null,\n      viewAngle: plantInfo.selectedViewAngle || null,\n      status: annotations.length > 0 ? 'completed' : 'in-progress',\n      lastModified: new Date().toISOString(),\n      imageDateTime: plantInfo.selectedImage?.dateTime || null,\n      keypointCount: annotations.length,\n      \n      // 时间序列数据支持\n      timeSeriesData: plantInfo.timeSeriesData || null,\n      isTimeSeriesEnabled: !!plantInfo.timeSeriesData,\n      \n      // 完整的视角和时间序列信息\n      plantViewAngles: plantInfo.plantViewAngles || [], // 植株所有可用的视角\n      selectedViewAngleHistory: plantInfo.selectedViewAngleHistory || {}, // 每个视角的选择历史\n      timeSeriesMetadata: plantInfo.timeSeriesMetadata || {} // 时间序列元数据\n    };\n\n    this.annotations.set(plantId, annotationData);\n    \n    // 自动保存到文件\n    await this.saveAnnotationsToServer();\n    \n    return annotationData;\n  }\n\n  /**\n   * 获取植物标注数据\n   */\n  getPlantAnnotations(plantId) {\n    const data = this.annotations.get(plantId);\n    return data ? data.annotations : [];\n  }\n\n  /**\n   * 获取植物标注状态\n   */\n  getPlantStatus(plantId) {\n    const data = this.annotations.get(plantId);\n    if (!data) return 'pending';\n    \n    return data.annotations.length > 0 ? 'completed' : 'in-progress';\n  }\n\n  /**\n   * 获取所有已标注的植物ID\n   */\n  getAnnotatedPlantIds() {\n    return Array.from(this.annotations.keys());\n  }\n\n  /**\n   * 保存植株跳过信息\n   */\n  async saveSkipInfo(plantId, skipInfo) {\n    try {\n      // 获取或创建植株标注数据\n      let annotationData = this.annotations.get(plantId);\n      if (!annotationData) {\n        annotationData = {\n          plantId,\n          annotations: [],\n          lastModified: new Date().toISOString(),\n          createdAt: new Date().toISOString(),\n          selectedViewAngle: null,\n          selectedImage: null,\n          plantViewAngles: [],\n          selectedViewAngleHistory: {},\n          timeSeriesMetadata: {}\n        };\n      }\n\n      // 更新跳过信息\n      annotationData.status = skipInfo.status;\n      annotationData.skipReason = skipInfo.skipReason;\n      annotationData.skipDate = skipInfo.skipDate;\n      annotationData.lastModified = skipInfo.lastModified;\n\n      this.annotations.set(plantId, annotationData);\n\n      // 保存到文件系统或HTTP后端\n      if (this.useFileSystem && this.fileSystemManager.saveSkipInfo) {\n        try {\n          // HTTP模式：通过API保存跳过信息\n          await this.fileSystemManager.saveSkipInfo(plantId, annotationData);\n          console.log(`植株 ${plantId} 跳过信息已保存到后端`);\n        } catch (apiError) {\n          console.warn('后端保存失败，使用localStorage备份:', apiError);\n          this.saveToLocalStorage();\n          console.log(`植株 ${plantId} 跳过信息已备份到localStorage`);\n        }\n      } else if (this.fileSystemManager && this.fileSystemManager.getAnnotationsDirectory()) {\n        try {\n          // 原有的文件系统模式\n          const fileName = `${plantId}_skip_info.json`;\n          const annotationsHandle = this.fileSystemManager.getAnnotationsDirectory();\n          const fileHandle = await annotationsHandle.getFileHandle(fileName, { create: true });\n          const writable = await fileHandle.createWritable();\n\n          await writable.write(JSON.stringify(annotationData, null, 2));\n          await writable.close();\n\n          console.log(`植株 ${plantId} 跳过信息已保存到文件系统: ${fileName}`);\n        } catch (fsError) {\n          console.warn('文件系统保存失败，使用localStorage备份:', fsError);\n          this.saveToLocalStorage();\n          console.log(`植株 ${plantId} 跳过信息已备份到localStorage`);\n        }\n      } else {\n        // 如果文件系统不可用，保存到localStorage\n        this.saveToLocalStorage();\n        console.log(`植株 ${plantId} 跳过信息已保存到localStorage`);\n      }\n\n    } catch (error) {\n      console.error(`保存植株 ${plantId} 跳过信息失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 NEW: 移除植株跳过信息\n   */\n  async removeSkipInfo(plantId) {\n    try {\n      // 从内存中移除跳过状态\n      const annotationData = this.annotations.get(plantId);\n      if (annotationData) {\n        delete annotationData.status;\n        delete annotationData.skipReason;\n        delete annotationData.skipDate;\n        annotationData.lastModified = new Date().toISOString();\n        \n        // 如果没有其他数据，完全移除\n        if (!annotationData.annotations || annotationData.annotations.length === 0) {\n          this.annotations.delete(plantId);\n        }\n      }\n\n      // 从文件系统或HTTP后端移除\n      if (this.useFileSystem && this.fileSystemManager.deleteSkipInfo) {\n        try {\n          // HTTP模式：通过API移除跳过信息\n          await this.fileSystemManager.deleteSkipInfo(plantId);\n          console.log(`植株 ${plantId} 跳过信息已从后端移除`);\n        } catch (apiError) {\n          console.warn('后端移除失败，使用localStorage清理:', apiError);\n          this.saveToLocalStorage();\n          console.log(`植株 ${plantId} 跳过信息已从localStorage清理`);\n        }\n      } else if (this.fileSystemManager && this.fileSystemManager.getAnnotationsDirectory()) {\n        try {\n          // 原有的文件系统模式：删除跳过信息文件\n          const fileName = `${plantId}_skip_info.json`;\n          const annotationsHandle = this.fileSystemManager.getAnnotationsDirectory();\n          \n          try {\n            await annotationsHandle.removeEntry(fileName);\n            console.log(`植株 ${plantId} 跳过信息文件已删除: ${fileName}`);\n          } catch (removeError) {\n            // 文件不存在是正常的\n            if (removeError.name !== 'NotFoundError') {\n              throw removeError;\n            }\n            console.log(`植株 ${plantId} 跳过信息文件不存在，无需删除`);\n          }\n        } catch (fsError) {\n          console.warn('文件系统删除失败，使用localStorage清理:', fsError);\n          this.saveToLocalStorage();\n          console.log(`植株 ${plantId} 跳过信息已从localStorage清理`);\n        }\n      } else {\n        // 如果文件系统不可用，从localStorage清理\n        this.saveToLocalStorage();\n        console.log(`植株 ${plantId} 跳过信息已从localStorage清理`);\n      }\n\n    } catch (error) {\n      console.error(`移除植株 ${plantId} 跳过信息失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 FIX: Save plant status independently of annotations\n   */\n  async savePlantStatus(plantId, status) {\n    try {\n      // 获取或创建植株数据\n      let annotationData = this.annotations.get(plantId);\n      if (!annotationData) {\n        annotationData = {\n          plantId,\n          annotations: [],\n          lastModified: new Date().toISOString(),\n          createdAt: new Date().toISOString(),\n          selectedViewAngle: null,\n          selectedImage: null,\n          plantViewAngles: [],\n          selectedViewAngleHistory: {},\n          timeSeriesMetadata: {}\n        };\n      }\n\n      // 更新状态和时间戳\n      annotationData.status = status;\n      annotationData.lastModified = new Date().toISOString();\n\n      this.annotations.set(plantId, annotationData);\n\n      // 🔧 FIX: Use dedicated plant status API instead of skip-info API\n      if (this.useFileSystem && this.fileSystemManager.savePlantStatus) {\n        try {\n          // HTTP模式：通过专用植物状态API保存\n          await this.fileSystemManager.savePlantStatus(plantId, status);\n          console.log(`植株 ${plantId} 状态 ${status} 已保存到专用API`);\n        } catch (apiError) {\n          console.warn('植物状态API保存失败，使用localStorage备份:', apiError);\n          this.saveToLocalStorage();\n          console.log(`植株 ${plantId} 状态已备份到localStorage`);\n        }\n      } else if (this.fileSystemManager && this.fileSystemManager.getAnnotationsDirectory()) {\n        try {\n          // 文件系统模式：保存为独立的状态文件\n          const fileName = `${plantId}_status.json`;\n          const annotationsHandle = this.fileSystemManager.getAnnotationsDirectory();\n          const fileHandle = await annotationsHandle.getFileHandle(fileName, { create: true });\n          const writable = await fileHandle.createWritable();\n\n          const statusData = {\n            plantId,\n            status,\n            lastModified: new Date().toISOString(),\n            timestamp: new Date().toISOString()\n          };\n\n          await writable.write(JSON.stringify(statusData, null, 2));\n          await writable.close();\n\n          console.log(`植株 ${plantId} 状态 ${status} 已保存到文件系统: ${fileName}`);\n        } catch (fsError) {\n          console.warn('文件系统保存状态失败，使用localStorage备份:', fsError);\n          this.saveToLocalStorage();\n          console.log(`植株 ${plantId} 状态已备份到localStorage`);\n        }\n      } else {\n        // 如果文件系统不可用，保存到localStorage\n        this.saveToLocalStorage();\n        console.log(`植株 ${plantId} 状态 ${status} 已保存到localStorage`);\n      }\n\n      console.log(`[植物状态] ${plantId}: ${status} (独立保存完成)`);\n\n    } catch (error) {\n      console.error(`保存植株 ${plantId} 状态失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 FIX: Load plant status independently for status restoration\n   */\n  async loadPlantStatus(plantId) {\n    try {\n      console.log(`[状态加载] 开始为植物 ${plantId} 加载状态...`);\n      console.log(`[状态加载] useFileSystem: ${this.useFileSystem}, fileSystemManager存在: ${!!this.fileSystemManager}`);\n      \n      // First check if we have status in memory\n      const existingData = this.annotations.get(plantId);\n      if (existingData && existingData.status) {\n        console.log(`[植物状态] ${plantId}: 从内存加载状态 ${existingData.status}`);\n        return existingData.status;\n      }\n\n      // 🔧 FIX: Try to load from dedicated plant status API first\n      if (this.useFileSystem && this.fileSystemManager.getPlantStatus) {\n        try {\n          console.log(`[状态加载] 尝试从专用API加载植物 ${plantId} 状态...`);\n          const statusData = await this.fileSystemManager.getPlantStatus(plantId);\n          console.log(`[状态加载] 专用API响应:`, statusData);\n          if (statusData && statusData.status) {\n            console.log(`[植物状态] ${plantId}: 从专用API加载状态 ${statusData.status}`);\n            return statusData.status;\n          }\n        } catch (apiError) {\n          console.warn(`从专用API加载植株 ${plantId} 状态失败:`, apiError);\n        }\n      } else {\n        console.log(`[状态加载] 跳过专用API: useFileSystem=${this.useFileSystem}, getPlantStatus存在=${!!this.fileSystemManager?.getPlantStatus}`);\n      }\n\n      // Fallback: Try to load from skip-info API for backwards compatibility\n      if (this.useFileSystem && this.fileSystemManager.getSkipInfo) {\n        try {\n          const data = await this.fileSystemManager.getSkipInfo(plantId);\n          if (data && data.status) {\n            console.log(`[植物状态] ${plantId}: 从skip-info API加载状态 ${data.status} (向后兼容)`);\n            return data.status;\n          }\n        } catch (skipError) {\n          console.warn(`从skip-info API加载植株 ${plantId} 状态失败:`, skipError);\n        }\n      } else if (this.fileSystemManager && this.fileSystemManager.getAnnotationsDirectory()) {\n        try {\n          // 文件系统模式：尝试加载状态文件\n          const fileName = `${plantId}_status.json`;\n          const annotationsHandle = this.fileSystemManager.getAnnotationsDirectory();\n          const fileHandle = await annotationsHandle.getFileHandle(fileName);\n          const file = await fileHandle.getFile();\n          const content = await file.text();\n          const statusData = JSON.parse(content);\n          \n          if (statusData.status) {\n            console.log(`[植物状态] ${plantId}: 从文件系统加载状态 ${statusData.status}`);\n            return statusData.status;\n          }\n        } catch (fsError) {\n          // Status file doesn't exist, this is normal for pending plants\n          console.log(`[植物状态] ${plantId}: 无状态文件，使用默认状态`);\n        }\n      }\n\n      // Fallback to localStorage\n      try {\n        const localData = localStorage.getItem('plantAnnotations');\n        if (localData) {\n          const parsed = JSON.parse(localData);\n          if (parsed[plantId] && parsed[plantId].status) {\n            console.log(`[植物状态] ${plantId}: 从localStorage加载状态 ${parsed[plantId].status}`);\n            return parsed[plantId].status;\n          }\n        }\n      } catch (localError) {\n        console.warn('从localStorage加载状态失败:', localError);\n      }\n\n      // Return null if no status found (let calling code decide default)\n      console.log(`[植物状态] ${plantId}: 未找到持久化状态`);\n      return null;\n\n    } catch (error) {\n      console.error(`加载植株 ${plantId} 状态失败:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 检查植物是否有标注数据\n   */\n  hasAnnotations(plantId) {\n    const data = this.annotations.get(plantId);\n    return data && data.annotations.length > 0;\n  }\n\n  /**\n   * 删除植物标注数据\n   */\n  async deletePlantAnnotations(plantId) {\n    this.annotations.delete(plantId);\n    await this.saveAnnotationsToServer();\n  }\n\n  /**\n   * 获取标注进度统计\n   */\n  getAnnotationStats(totalPlants) {\n    const annotatedCount = this.getAnnotatedPlantIds().length;\n    const completedCount = Array.from(this.annotations.values())\n      .filter(data => data.annotations.length > 0).length;\n\n    return {\n      total: totalPlants,\n      annotated: annotatedCount,\n      completed: completedCount,\n      pending: totalPlants - annotatedCount,\n      completionRate: totalPlants > 0 ? (completedCount / totalPlants * 100).toFixed(1) : 0\n    };\n  }\n\n  /**\n   * 导出所有标注数据\n   */\n  exportAllAnnotations() {\n    const exportData = {\n      exportTime: new Date().toISOString(),\n      version: '1.0',\n      totalPlants: this.annotations.size,\n      annotations: {}\n    };\n\n    for (const [plantId, annotationData] of this.annotations) {\n      exportData.annotations[plantId] = {\n        ...annotationData,\n        exportedAt: new Date().toISOString()\n      };\n    }\n\n    return exportData;\n  }\n\n  /**\n   * 导出为JSON文件下载\n   */\n  downloadAnnotationsAsJSON() {\n    const exportData = this.exportAllAnnotations();\n    \n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `plant_annotations_${new Date().toISOString().split('T')[0]}.json`;\n    \n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    \n    URL.revokeObjectURL(url);\n    \n    return exportData;\n  }\n\n  /**\n   * 导出所有图像的纯净标注数据（新的简化版本）\n   * 返回格式：{ imageId: annotations[] }\n   */\n  async exportPureImageAnnotations() {\n    const pureImageAnnotations = {};\n    \n    // 直接从imageAnnotations导出\n    for (const [imageId, annotationData] of this.imageAnnotations) {\n      if (annotationData.annotations && annotationData.annotations.length > 0) {\n        pureImageAnnotations[imageId] = annotationData.annotations.map(annotation => ({\n          id: annotation.id,\n          x: annotation.x,\n          y: annotation.y,\n          timestamp: annotation.timestamp,\n          direction: annotation.direction || 'right', // 包含新的方向信息\n          order: annotation.order || 0 // 包含序号信息，兼容旧数据\n        }));\n      }\n    }\n    \n    console.log(`导出 ${Object.keys(pureImageAnnotations).length} 张图像的纯净标注数据`);\n    return pureImageAnnotations;\n  }\n\n  /**\n   * 下载纯净的图像标注数据为JSON文件\n   */\n  async downloadPureImageAnnotationsAsJSON() {\n    const pureAnnotations = await this.exportPureImageAnnotations();\n    const stats = this.getPureAnnotationsStats(pureAnnotations);\n    \n    const exportData = {\n      exportTime: new Date().toISOString(),\n      version: '2.0',\n      format: 'pure_image_annotations',\n      description: '每张图像对应的标注点数据，不包含内部管理信息',\n      stats: {\n        totalImages: stats.totalImages,\n        annotatedImages: stats.annotatedImages,\n        totalKeypoints: stats.totalKeypoints,\n        completionRate: stats.completionRate\n      },\n      annotations: pureAnnotations\n    };\n    \n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `pure_image_annotations_${new Date().toISOString().split('T')[0]}.json`;\n    \n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    \n    URL.revokeObjectURL(url);\n    \n    console.log(`导出了 ${stats.annotatedImages} 张图像的纯净标注数据，共 ${stats.totalKeypoints} 个关键点`);\n    \n    return exportData;\n  }\n\n  /**\n   * 获取纯净标注数据的统计信息\n   */\n  getPureAnnotationsStats(pureAnnotations) {\n    const totalImages = Object.keys(pureAnnotations).length;\n    let totalKeypoints = 0;\n    \n    for (const annotations of Object.values(pureAnnotations)) {\n      totalKeypoints += annotations.length;\n    }\n    \n    return {\n      totalImages,\n      annotatedImages: totalImages,\n      totalKeypoints,\n      averageKeypointsPerImage: totalImages > 0 ? (totalKeypoints / totalImages).toFixed(2) : 0,\n      completionRate: '100.0' // 只包含有标注的图像\n    };\n  }\n\n  /**\n   * 设置时间序列管理器的引用\n   */\n  setTimeSeriesManager(timeSeriesManager) {\n    this.timeSeriesManager = timeSeriesManager;\n  }\n\n  /**\n   * 清理所有标注数据\n   */\n  async clearAllAnnotations() {\n    this.annotations.clear();\n    await this.saveAnnotationsToServer();\n  }\n\n  /**\n   * 获取所有标注数据的摘要\n   */\n  getSummary() {\n    const summary = {\n      totalAnnotations: this.annotations.size,\n      completedPlants: 0,\n      totalKeypoints: 0,\n      lastModified: null\n    };\n\n    for (const [plantId, data] of this.annotations) {\n      if (data.annotations.length > 0) {\n        summary.completedPlants++;\n        summary.totalKeypoints += data.annotations.length;\n        \n        if (!summary.lastModified || data.lastModified > summary.lastModified) {\n          summary.lastModified = data.lastModified;\n        }\n      }\n    }\n\n    return summary;\n  }\n\n  /**\n   * 恢复时间序列数据到管理器\n   */\n  restoreTimeSeriesData(timeSeriesManager) {\n    for (const [plantId, data] of this.annotations) {\n      if (data.isTimeSeriesEnabled && data.timeSeriesData) {\n        try {\n          // 恢复时间序列标注数据\n          this.restorePlantTimeSeriesData(timeSeriesManager, plantId, data);\n          console.log(`恢复植株 ${plantId} 的时间序列数据`);\n        } catch (error) {\n          console.error(`恢复植株 ${plantId} 时间序列数据失败:`, error);\n        }\n      }\n    }\n  }\n\n  /**\n   * 恢复单个植株的时间序列数据\n   */\n  restorePlantTimeSeriesData(timeSeriesManager, plantId, annotationData) {\n    const { timeSeriesData, viewAngle } = annotationData;\n    \n    if (!timeSeriesData || !viewAngle) return;\n    \n    // 恢复时间序列结构\n    if (!timeSeriesManager.timeSequences.has(plantId)) {\n      timeSeriesManager.timeSequences.set(plantId, new Map());\n    }\n    \n    if (!timeSeriesManager.timeSeriesAnnotations.has(plantId)) {\n      timeSeriesManager.timeSeriesAnnotations.set(plantId, new Map());\n    }\n    \n    // 恢复时间序列\n    const imageIds = timeSeriesData.annotationData.map(item => item.imageId);\n    timeSeriesManager.timeSequences.get(plantId).set(viewAngle, imageIds);\n    \n    // 恢复标注数据\n    const viewAnnotations = new Map();\n    for (const item of timeSeriesData.annotationData) {\n      viewAnnotations.set(item.imageId, {\n        annotations: item.annotations,\n        timestamp: item.metadata.timestamp,\n        isManualAdjustment: item.metadata.isManualAdjustment,\n        inheritedFrom: item.metadata.inheritedFrom\n      });\n    }\n    \n    timeSeriesManager.timeSeriesAnnotations.get(plantId).set(viewAngle, viewAnnotations);\n    \n    // 恢复手动调整记录\n    const adjustmentKey = `${plantId}_${viewAngle}`;\n    if (!timeSeriesManager.manualAdjustments.has(adjustmentKey)) {\n      timeSeriesManager.manualAdjustments.set(adjustmentKey, new Set());\n    }\n    \n    const manualAdjustments = timeSeriesManager.manualAdjustments.get(adjustmentKey);\n    for (const item of timeSeriesData.annotationData) {\n      if (item.metadata.isManualAdjustment) {\n        manualAdjustments.add(item.imageId);\n      }\n    }\n  }\n\n  /**\n   * 获取植株的视角选择历史\n   */\n  getPlantViewAngleHistory(plantId) {\n    const data = this.annotations.get(plantId);\n    return data?.selectedViewAngleHistory || {};\n  }\n\n  /**\n   * 获取植株的完整标注摘要\n   */\n  getPlantAnnotationSummary(plantId) {\n    const data = this.annotations.get(plantId);\n    if (!data) return null;\n\n    const summary = {\n      plantId,\n      status: data.status,\n      lastModified: data.lastModified,\n      selectedViewAngle: data.viewAngle,\n      availableViewAngles: data.plantViewAngles || [],\n      isTimeSeriesEnabled: data.isTimeSeriesEnabled,\n      currentImageInfo: {\n        imageName: data.selectedImage,\n        imageId: data.selectedImagePath,\n        dateTime: data.imageDateTime\n      }\n    };\n\n    // 如果有时间序列数据，添加统计信息\n    if (data.timeSeriesData) {\n      summary.timeSeriesStats = {\n        totalImages: data.timeSeriesData.totalImages,\n        annotatedImages: data.timeSeriesData.annotationData.length,\n        manualAdjustments: data.timeSeriesData.annotationData.filter(\n          item => item.metadata.isManualAdjustment\n        ).length\n      };\n    }\n\n    return summary;\n  }\n\n  /**\n   * 保存图像标注数据\n   */\n  async saveImageAnnotation(imageId, annotationData) {\n    // 优先使用文件系统保存\n    if (this.useFileSystem) {\n      try {\n        const success = await this.saveImageAnnotationToFileSystem(imageId, annotationData);\n        if (success) {\n          console.log(`成功保存图像 ${imageId} 的标注数据到文件系统`);\n          // 只在文件系统保存成功时才更新内存（用于统计等功能）\n          this.imageAnnotations.set(imageId, annotationData);\n          // 备份到localStorage\n          this.saveImageAnnotationsToLocalStorage();\n          return true;\n        }\n      } catch (error) {\n        console.error(`保存图像 ${imageId} 标注数据到文件系统失败:`, error);\n      }\n    } else {\n      // 如果没有启用文件系统，更新内存\n      this.imageAnnotations.set(imageId, annotationData);\n    }\n\n    // 如果文件系统保存失败或未启用，尝试保存到服务器\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/save-image-annotation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          imageId,\n          annotationData\n        })\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        console.log(`成功保存图像 ${imageId} 的标注数据到服务器`);\n        // 备份到localStorage\n        this.saveImageAnnotationsToLocalStorage();\n        return true;\n      } else {\n        throw new Error(result.error || '服务器保存失败');\n      }\n    } catch (error) {\n      console.error(`保存图像 ${imageId} 标注数据到服务器失败:`, error);\n      // 如果无法保存到服务器，至少保存到localStorage作为备份\n      this.saveImageAnnotationsToLocalStorage();\n      return false;\n    }\n  }\n\n  /**\n   * 获取图像标注数据\n   */\n  async getImageAnnotation(imageId) {\n    // 如果启用了文件系统，直接从文件系统读取\n    if (this.useFileSystem && this.fileSystemManager) {\n      try {\n        const annotationData = await this.fileSystemManager.loadAnnotationFile(imageId);\n        if (annotationData) {\n          console.log(`[标注] 读取成功 ${imageId}: ${annotationData.annotations?.length || 0} 个标注点`);\n        }\n        return annotationData;\n      } catch (error) {\n        console.warn(`从文件系统加载标注失败 (${imageId}):`, error);\n        return null;\n      }\n    }\n\n    // 如果没有启用文件系统，从内存中获取（向后兼容）\n    return this.imageAnnotations.get(imageId) || null;\n  }\n\n  /**\n   * 从服务器加载图像标注数据\n   */\n  async loadImageAnnotationsFromServer() {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/load-image-annotations`);\n      const result = await response.json();\n      \n      if (result.success && result.data) {\n        // 将数据加载到Map中\n        for (const [imageId, annotationData] of Object.entries(result.data.imageAnnotations || {})) {\n          this.imageAnnotations.set(imageId, annotationData);\n        }\n        \n        console.log(`从服务器加载了 ${this.imageAnnotations.size} 张图像的标注数据`);\n        return result.data;\n      } else {\n        console.log('服务器没有图像标注数据或加载失败');\n        return { imageAnnotations: {} };\n      }\n    } catch (error) {\n      console.warn('从服务器加载图像标注数据失败，尝试从localStorage恢复:', error.message);\n      this.loadImageAnnotationsFromLocalStorage();\n      return { imageAnnotations: {} };\n    }\n  }\n\n  /**\n   * 保存图像标注到localStorage作为备份\n   */\n  saveImageAnnotationsToLocalStorage() {\n    try {\n      const data = {};\n      for (const [imageId, annotationData] of this.imageAnnotations) {\n        data[imageId] = annotationData;\n      }\n      localStorage.setItem('image_annotations_backup', JSON.stringify({\n        saveTime: new Date().toISOString(),\n        imageAnnotations: data\n      }));\n      console.log('图像标注数据已备份到localStorage');\n    } catch (error) {\n      console.error('备份图像标注到localStorage失败:', error);\n    }\n  }\n\n  /**\n   * 从localStorage恢复图像标注数据\n   */\n  loadImageAnnotationsFromLocalStorage() {\n    try {\n      const backup = localStorage.getItem('image_annotations_backup');\n      if (backup) {\n        const data = JSON.parse(backup);\n        for (const [imageId, annotationData] of Object.entries(data.imageAnnotations || {})) {\n          if (!this.imageAnnotations.has(imageId)) {\n            this.imageAnnotations.set(imageId, annotationData);\n          }\n        }\n        console.log('从localStorage恢复了图像标注备份数据');\n      }\n    } catch (error) {\n      console.error('从localStorage恢复图像标注数据失败:', error);\n    }\n  }\n\n  /**\n   * 导出所有图像标注数据（新的简化版本）\n   */\n  exportAllImageAnnotations() {\n    const exportData = {\n      exportTime: new Date().toISOString(),\n      version: '2.0',\n      format: 'simple_image_annotations',\n      totalImages: this.imageAnnotations.size,\n      annotations: {}\n    };\n\n    for (const [imageId, annotationData] of this.imageAnnotations) {\n      if (annotationData.annotations && annotationData.annotations.length > 0) {\n        exportData.annotations[imageId] = annotationData.annotations;\n      }\n    }\n\n    return exportData;\n  }\n\n  /**\n   * 获取所有有标注的图像统计\n   */\n  getImageAnnotationStats() {\n    let annotatedImages = 0;\n    let totalKeypoints = 0;\n\n    for (const [imageId, annotationData] of this.imageAnnotations) {\n      if (annotationData.annotations && annotationData.annotations.length > 0) {\n        annotatedImages++;\n        totalKeypoints += annotationData.annotations.length;\n      }\n    }\n\n    return {\n      totalImages: this.imageAnnotations.size,\n      annotatedImages,\n      totalKeypoints,\n      averageKeypointsPerImage: annotatedImages > 0 ? (totalKeypoints / annotatedImages).toFixed(2) : 0\n    };\n  }\n\n  /**\n   * 从文件系统加载所有标注数据\n   */\n  async loadAnnotationsFromFileSystem() {\n    if (!this.fileSystemManager) {\n      throw new Error('文件系统管理器未设置');\n    }\n\n    console.log('开始从文件系统加载标注数据...');\n\n    try {\n      const imageIds = await this.fileSystemManager.getAllAnnotationFiles();\n      console.log(`发现 ${imageIds.length} 个标注文件:`, imageIds);\n\n      let loadedCount = 0;\n      for (const imageId of imageIds) {\n        try {\n          const annotationData = await this.fileSystemManager.loadAnnotationFile(imageId);\n          if (annotationData) {\n            this.imageAnnotations.set(imageId, annotationData);\n            loadedCount++;\n            console.log(`成功加载标注文件: ${imageId}, 包含 ${annotationData.annotations?.length || 0} 个标注点`);\n          }\n        } catch (error) {\n          console.error(`加载标注文件失败 (${imageId}):`, error);\n        }\n      }\n\n      console.log(`从文件系统加载了 ${loadedCount} 个图像的标注数据，总计 ${this.imageAnnotations.size} 个图像在内存中`);\n    } catch (error) {\n      console.error('从文件系统加载标注数据失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 保存图像标注到文件系统\n   */\n  async saveImageAnnotationToFileSystem(imageId, annotationData) {\n    if (!this.fileSystemManager) {\n      console.warn('文件系统管理器未设置，跳过文件系统保存');\n      return false;\n    }\n\n    try {\n      await this.fileSystemManager.saveAnnotationFile(imageId, annotationData);\n      return true;\n    } catch (error) {\n      console.error(`保存标注到文件系统失败 (${imageId}):`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 从文件系统删除图像标注\n   */\n  async deleteImageAnnotationFromFileSystem(imageId) {\n    if (!this.fileSystemManager) {\n      return false;\n    }\n\n    try {\n      return await this.fileSystemManager.deleteAnnotationFile(imageId);\n    } catch (error) {\n      console.error(`从文件系统删除标注失败 (${imageId}):`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 扫描标注文件（用于统计，不加载到内存）\n   */\n  async scanAnnotationFiles() {\n    if (!this.fileSystemManager) {\n      return;\n    }\n\n    try {\n      const imageIds = await this.fileSystemManager.getAllAnnotationFiles();\n      // 这里只是为了触发扫描和日志输出，不实际加载到内存\n      console.log(`[标注] 扫描完成，发现 ${imageIds.length} 个标注文件`);\n\n      // 扫描跳过信息文件\n      await this.scanSkipInfoFiles();\n    } catch (error) {\n      console.error('[标注] 扫描标注文件失败:', error);\n    }\n  }\n\n  /**\n   * 扫描跳过信息文件\n   */\n  async scanSkipInfoFiles() {\n    if (!this.fileSystemManager) {\n      return;\n    }\n\n    try {\n      if (this.useFileSystem && this.fileSystemManager.getAllSkipInfo) {\n        // HTTP模式：通过API获取跳过信息\n        const skipInfoData = await this.fileSystemManager.getAllSkipInfo();\n        \n        let skipFileCount = 0;\n        for (const [plantId, skipData] of Object.entries(skipInfoData)) {\n          this.annotations.set(plantId, skipData);\n          skipFileCount++;\n          console.log(`[标注] 加载跳过信息: ${plantId} - ${skipData.skipReason}`);\n        }\n        \n        if (skipFileCount > 0) {\n          console.log(`[标注] 成功加载 ${skipFileCount} 个植株的跳过信息`);\n        }\n      } else {\n        // 原有的文件系统模式\n        const annotationsHandle = this.fileSystemManager.getAnnotationsDirectory();\n        if (!annotationsHandle) {\n          return;\n        }\n\n        let skipFileCount = 0;\n        for await (const [name, handle] of annotationsHandle.entries()) {\n          if (handle.kind === 'file' && name.endsWith('_skip_info.json')) {\n            try {\n              const file = await handle.getFile();\n              const content = await file.text();\n              const skipData = JSON.parse(content);\n\n              // 将跳过信息加载到内存\n              this.annotations.set(skipData.plantId, skipData);\n              skipFileCount++;\n\n              console.log(`[标注] 加载跳过信息: ${skipData.plantId} - ${skipData.skipReason}`);\n            } catch (error) {\n              console.warn(`[标注] 加载跳过信息文件失败 (${name}):`, error);\n            }\n          }\n        }\n\n        if (skipFileCount > 0) {\n          console.log(`[标注] 成功加载 ${skipFileCount} 个植株的跳过信息`);\n        }\n      }\n    } catch (error) {\n      console.error('[标注] 扫描跳过信息文件失败:', error);\n    }\n  }\n}","/**\n * 时间序列标注管理器\n * \n * 功能：\n * - 管理植株在不同时间点的标注数据\n * - 支持标注传播（首次标注自动应用到所有时间点）\n * - 支持微调（调整后向后传播到后续时间点）\n * - 处理时间序列的标注继承和覆盖\n */\n\nexport class TimeSeriesAnnotationManager {\n  constructor() {\n    // 存储格式：plantId -> viewAngle -> imageId -> annotations\n    this.timeSeriesAnnotations = new Map();\n    // 存储图像的时间顺序：plantId -> viewAngle -> [imageId...]\n    this.timeSequences = new Map();\n    // 标记哪些是用户手动调整的时间点\n    this.manualAdjustments = new Map();\n  }\n\n  /**\n   * 初始化植株的时间序列\n   */\n  initializePlantTimeSeries(plantId, viewAngle, images) {\n    const plantKey = `${plantId}_${viewAngle}`;\n    \n    // 按时间排序图像\n    const sortedImages = images.sort((a, b) => a.dateTime - b.dateTime);\n    const imageIds = sortedImages.map(img => img.id);\n    \n    // 存储时间序列\n    if (!this.timeSequences.has(plantId)) {\n      this.timeSequences.set(plantId, new Map());\n    }\n    this.timeSequences.get(plantId).set(viewAngle, imageIds);\n    \n    // 初始化标注存储\n    if (!this.timeSeriesAnnotations.has(plantId)) {\n      this.timeSeriesAnnotations.set(plantId, new Map());\n    }\n    if (!this.timeSeriesAnnotations.get(plantId).has(viewAngle)) {\n      this.timeSeriesAnnotations.get(plantId).set(viewAngle, new Map());\n    }\n    \n    console.log(`初始化植株 ${plantId} 视角 ${viewAngle} 的时间序列，共 ${imageIds.length} 个时间点`);\n    \n    return {\n      plantId,\n      viewAngle,\n      imageIds,\n      totalImages: imageIds.length,\n      firstImageId: imageIds[0],\n      lastImageId: imageIds[imageIds.length - 1]\n    };\n  }\n\n  /**\n   * 保存标注并处理传播逻辑\n   */\n  saveAnnotations(plantId, viewAngle, imageId, annotations, isManualAdjustment = false) {\n    const plantAnnotations = this.timeSeriesAnnotations.get(plantId);\n    if (!plantAnnotations) {\n      throw new Error(`植株 ${plantId} 未初始化`);\n    }\n\n    const viewAnnotations = plantAnnotations.get(viewAngle);\n    if (!viewAnnotations) {\n      throw new Error(`植株 ${plantId} 视角 ${viewAngle} 未初始化`);\n    }\n\n    const timeSequence = this.timeSequences.get(plantId)?.get(viewAngle);\n    if (!timeSequence) {\n      throw new Error(`植株 ${plantId} 视角 ${viewAngle} 时间序列未初始化`);\n    }\n\n    const currentImageIndex = timeSequence.indexOf(imageId);\n    if (currentImageIndex === -1) {\n      throw new Error(`图像 ${imageId} 不在时间序列中`);\n    }\n\n    // 保存当前时间点的标注\n    viewAnnotations.set(imageId, {\n      annotations,\n      timestamp: new Date().toISOString(),\n      isManualAdjustment\n    });\n\n    // 记录手动调整\n    if (isManualAdjustment) {\n      const adjustmentKey = `${plantId}_${viewAngle}`;\n      if (!this.manualAdjustments.has(adjustmentKey)) {\n        this.manualAdjustments.set(adjustmentKey, new Set());\n      }\n      this.manualAdjustments.get(adjustmentKey).add(imageId);\n    }\n\n    // 处理传播逻辑\n    this.propagateAnnotations(plantId, viewAngle, imageId, annotations, currentImageIndex);\n\n    console.log(`保存植株 ${plantId} 视角 ${viewAngle} 图像 ${imageId} 的标注，包含 ${annotations.length} 个关键点`);\n    \n    return {\n      savedImageId: imageId,\n      propagatedCount: this.getPropagationCount(plantId, viewAngle, currentImageIndex),\n      isFirstAnnotation: currentImageIndex === 0 && !isManualAdjustment,\n      isManualAdjustment\n    };\n  }\n\n  /**\n   * 标注传播逻辑\n   */\n  propagateAnnotations(plantId, viewAngle, sourceImageId, annotations, sourceImageIndex) {\n    const timeSequence = this.timeSequences.get(plantId).get(viewAngle);\n    const viewAnnotations = this.timeSeriesAnnotations.get(plantId).get(viewAngle);\n    const adjustmentKey = `${plantId}_${viewAngle}`;\n    const manualAdjustments = this.manualAdjustments.get(adjustmentKey) || new Set();\n\n    // 如果这是首次标注（第一张图像），传播到所有未手动调整的时间点\n    if (sourceImageIndex === 0) {\n      for (let i = 1; i < timeSequence.length; i++) {\n        const targetImageId = timeSequence[i];\n        \n        // 如果该时间点没有被手动调整过，应用标注\n        if (!manualAdjustments.has(targetImageId)) {\n          viewAnnotations.set(targetImageId, {\n            annotations: this.deepCloneAnnotations(annotations),\n            timestamp: new Date().toISOString(),\n            isManualAdjustment: false,\n            inheritedFrom: sourceImageId\n          });\n        }\n      }\n      console.log(`从首个图像 ${sourceImageId} 传播标注到后续 ${timeSequence.length - 1} 个时间点`);\n    } \n    // 如果这是中间时间点的调整，向后传播\n    else {\n      let propagatedCount = 0;\n      for (let i = sourceImageIndex + 1; i < timeSequence.length; i++) {\n        const targetImageId = timeSequence[i];\n        \n        // 如果后续时间点没有更新的手动调整，应用当前调整\n        if (!manualAdjustments.has(targetImageId)) {\n          viewAnnotations.set(targetImageId, {\n            annotations: this.deepCloneAnnotations(annotations),\n            timestamp: new Date().toISOString(),\n            isManualAdjustment: false,\n            inheritedFrom: sourceImageId\n          });\n          propagatedCount++;\n        } else {\n          // 遇到手动调整的时间点，停止传播\n          break;\n        }\n      }\n      \n      if (propagatedCount > 0) {\n        console.log(`从时间点 ${sourceImageIndex} 向后传播标注到 ${propagatedCount} 个时间点`);\n      }\n    }\n  }\n\n  /**\n   * 获取指定时间点的标注\n   */\n  getAnnotations(plantId, viewAngle, imageId) {\n    const viewAnnotations = this.timeSeriesAnnotations.get(plantId)?.get(viewAngle);\n    if (!viewAnnotations) {\n      return [];\n    }\n\n    const annotationData = viewAnnotations.get(imageId);\n    return annotationData ? annotationData.annotations : [];\n  }\n\n  /**\n   * 获取标注的元数据\n   */\n  getAnnotationMetadata(plantId, viewAngle, imageId) {\n    const viewAnnotations = this.timeSeriesAnnotations.get(plantId)?.get(viewAngle);\n    if (!viewAnnotations) {\n      return null;\n    }\n\n    const data = viewAnnotations.get(imageId);\n    if (!data) {\n      return null;\n    }\n\n    const timeSequence = this.timeSequences.get(plantId)?.get(viewAngle);\n    const imageIndex = timeSequence ? timeSequence.indexOf(imageId) : -1;\n\n    return {\n      hasAnnotations: data.annotations.length > 0,\n      isManualAdjustment: data.isManualAdjustment,\n      inheritedFrom: data.inheritedFrom,\n      timestamp: data.timestamp,\n      imageIndex,\n      isFirstImage: imageIndex === 0,\n      isLastImage: imageIndex === timeSequence.length - 1\n    };\n  }\n\n  /**\n   * 获取传播统计信息\n   */\n  getPropagationCount(plantId, viewAngle, fromIndex) {\n    const timeSequence = this.timeSequences.get(plantId)?.get(viewAngle);\n    if (!timeSequence) return 0;\n\n    if (fromIndex === 0) {\n      // 首次标注，计算传播到的总数\n      return timeSequence.length - 1;\n    } else {\n      // 中间调整，计算向后传播的数量\n      const adjustmentKey = `${plantId}_${viewAngle}`;\n      const manualAdjustments = this.manualAdjustments.get(adjustmentKey) || new Set();\n      \n      let count = 0;\n      for (let i = fromIndex + 1; i < timeSequence.length; i++) {\n        if (!manualAdjustments.has(timeSequence[i])) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count;\n    }\n  }\n\n  /**\n   * 检查是否有标注数据\n   */\n  hasAnnotations(plantId, viewAngle, imageId) {\n    const annotations = this.getAnnotations(plantId, viewAngle, imageId);\n    return annotations.length > 0;\n  }\n\n  /**\n   * 获取植株视角的标注统计\n   */\n  getAnnotationStats(plantId, viewAngle) {\n    const timeSequence = this.timeSequences.get(plantId)?.get(viewAngle);\n    if (!timeSequence) {\n      return { total: 0, annotated: 0, manual: 0, inherited: 0 };\n    }\n\n    const viewAnnotations = this.timeSeriesAnnotations.get(plantId)?.get(viewAngle);\n    if (!viewAnnotations) {\n      return { total: timeSequence.length, annotated: 0, manual: 0, inherited: 0 };\n    }\n\n    let annotated = 0;\n    let manual = 0;\n    let inherited = 0;\n\n    for (const imageId of timeSequence) {\n      const data = viewAnnotations.get(imageId);\n      if (data && data.annotations.length > 0) {\n        annotated++;\n        if (data.isManualAdjustment) {\n          manual++;\n        } else if (data.inheritedFrom) {\n          inherited++;\n        }\n      }\n    }\n\n    return {\n      total: timeSequence.length,\n      annotated,\n      manual,\n      inherited,\n      coverage: ((annotated / timeSequence.length) * 100).toFixed(1)\n    };\n  }\n\n  /**\n   * 深度克隆标注数据\n   */\n  deepCloneAnnotations(annotations) {\n    return annotations.map(annotation => ({\n      ...annotation,\n      x: annotation.x,\n      y: annotation.y\n    }));\n  }\n\n  /**\n   * 清除植株的所有标注\n   */\n  clearPlantAnnotations(plantId, viewAngle) {\n    const plantAnnotations = this.timeSeriesAnnotations.get(plantId);\n    if (plantAnnotations && plantAnnotations.has(viewAngle)) {\n      plantAnnotations.get(viewAngle).clear();\n    }\n\n    const adjustmentKey = `${plantId}_${viewAngle}`;\n    if (this.manualAdjustments.has(adjustmentKey)) {\n      this.manualAdjustments.get(adjustmentKey).clear();\n    }\n\n    console.log(`清除植株 ${plantId} 视角 ${viewAngle} 的所有标注`);\n  }\n\n  /**\n   * 导出时间序列标注数据\n   */\n  exportTimeSeriesData(plantId, viewAngle) {\n    const timeSequence = this.timeSequences.get(plantId)?.get(viewAngle);\n    const viewAnnotations = this.timeSeriesAnnotations.get(plantId)?.get(viewAngle);\n    \n    if (!timeSequence || !viewAnnotations) {\n      return null;\n    }\n\n    const exportData = {\n      plantId,\n      viewAngle,\n      totalImages: timeSequence.length,\n      annotationData: []\n    };\n\n    for (const imageId of timeSequence) {\n      const data = viewAnnotations.get(imageId);\n      if (data) {\n        exportData.annotationData.push({\n          imageId,\n          annotations: data.annotations,\n          metadata: {\n            timestamp: data.timestamp,\n            isManualAdjustment: data.isManualAdjustment,\n            inheritedFrom: data.inheritedFrom\n          }\n        });\n      }\n    }\n\n    return exportData;\n  }\n\n  /**\n   * 导出所有图像的纯净标注数据（不包含内部管理信息）\n   * 返回格式：{ imageId: annotations[] }\n   */\n  exportAllImageAnnotations() {\n    const allImageAnnotations = {};\n    \n    // 遍历所有植株\n    for (const [plantId, plantData] of this.timeSeriesAnnotations) {\n      // 遍历每个植株的所有视角\n      for (const [viewAngle, viewAnnotations] of plantData) {\n        // 遍历该视角的所有图像\n        for (const [imageId, annotationData] of viewAnnotations) {\n          // 包含所有有标注的图像，不管是原始、继承还是微调的\n          if (annotationData.annotations && annotationData.annotations.length > 0) {\n            // 只保存纯净的标注点数据，移除内部管理信息\n            allImageAnnotations[imageId] = annotationData.annotations.map(annotation => ({\n              id: annotation.id,\n              x: annotation.x,\n              y: annotation.y,\n              timestamp: annotation.timestamp\n            }));\n          }\n        }\n      }\n    }\n    \n    return allImageAnnotations;\n  }\n\n  /**\n   * 导出指定植株的所有图像标注数据\n   */\n  exportPlantImageAnnotations(plantId) {\n    const plantImageAnnotations = {};\n    const plantData = this.timeSeriesAnnotations.get(plantId);\n    \n    if (!plantData) {\n      return plantImageAnnotations;\n    }\n    \n    // 遍历该植株的所有视角\n    for (const [viewAngle, viewAnnotations] of plantData) {\n      // 遍历该视角的所有图像\n      for (const [imageId, annotationData] of viewAnnotations) {\n        if (annotationData.annotations && annotationData.annotations.length > 0) {\n          // 只保存纯净的标注点数据\n          plantImageAnnotations[imageId] = annotationData.annotations.map(annotation => ({\n            id: annotation.id,\n            x: annotation.x,\n            y: annotation.y,\n            timestamp: annotation.timestamp\n          }));\n        }\n      }\n    }\n    \n    return plantImageAnnotations;\n  }\n\n  /**\n   * 获取标注数据统计信息\n   */\n  getExportStats() {\n    let totalImages = 0;\n    let annotatedImages = 0;\n    let totalKeypoints = 0;\n    const plantStats = {};\n    \n    for (const [plantId, plantData] of this.timeSeriesAnnotations) {\n      let plantImages = 0;\n      let plantAnnotatedImages = 0;\n      let plantKeypoints = 0;\n      \n      for (const [viewAngle, viewAnnotations] of plantData) {\n        for (const [imageId, annotationData] of viewAnnotations) {\n          plantImages++;\n          totalImages++;\n          \n          if (annotationData.annotations && annotationData.annotations.length > 0) {\n            plantAnnotatedImages++;\n            annotatedImages++;\n            plantKeypoints += annotationData.annotations.length;\n            totalKeypoints += annotationData.annotations.length;\n          }\n        }\n      }\n      \n      plantStats[plantId] = {\n        totalImages: plantImages,\n        annotatedImages: plantAnnotatedImages,\n        totalKeypoints: plantKeypoints,\n        completionRate: plantImages > 0 ? ((plantAnnotatedImages / plantImages) * 100).toFixed(1) : 0\n      };\n    }\n    \n    return {\n      totalImages,\n      annotatedImages,\n      totalKeypoints,\n      completionRate: totalImages > 0 ? ((annotatedImages / totalImages) * 100).toFixed(1) : 0,\n      plantStats\n    };\n  }\n\n  /**\n   * 调试：获取时间序列管理器的当前状态\n   */\n  getDebugStatus() {\n    const status = {\n      plantsCount: this.timeSeriesAnnotations.size,\n      totalSequences: 0,\n      totalAnnotatedImages: 0,\n      plantDetails: {}\n    };\n    \n    for (const [plantId, plantData] of this.timeSeriesAnnotations) {\n      const plantDetail = {\n        viewAnglesCount: plantData.size,\n        viewAngles: {}\n      };\n      \n      for (const [viewAngle, viewAnnotations] of plantData) {\n        status.totalSequences++;\n        const annotatedImages = Array.from(viewAnnotations.values()).filter(\n          data => data.annotations && data.annotations.length > 0\n        ).length;\n        \n        status.totalAnnotatedImages += annotatedImages;\n        \n        plantDetail.viewAngles[viewAngle] = {\n          totalImages: viewAnnotations.size,\n          annotatedImages,\n          imageIds: Array.from(viewAnnotations.keys())\n        };\n      }\n      \n      status.plantDetails[plantId] = plantDetail;\n    }\n    \n    console.log('时间序列管理器状态:', status);\n    return status;\n  }\n\n  /**\n   * 调试：强制导出所有时间序列数据（详细版本）\n   */\n  exportAllTimeSeriesDataDebug() {\n    const debugData = {\n      managedPlants: this.timeSeriesAnnotations.size,\n      allData: {}\n    };\n    \n    for (const [plantId, plantData] of this.timeSeriesAnnotations) {\n      debugData.allData[plantId] = {};\n      \n      for (const [viewAngle, viewAnnotations] of plantData) {\n        debugData.allData[plantId][viewAngle] = {};\n        \n        for (const [imageId, annotationData] of viewAnnotations) {\n          debugData.allData[plantId][viewAngle][imageId] = {\n            hasAnnotations: !!(annotationData.annotations && annotationData.annotations.length > 0),\n            annotationCount: annotationData.annotations?.length || 0,\n            annotations: annotationData.annotations || [],\n            metadata: {\n              timestamp: annotationData.timestamp,\n              isManualAdjustment: annotationData.isManualAdjustment,\n              inheritedFrom: annotationData.inheritedFrom\n            }\n          };\n        }\n      }\n    }\n    \n    console.log('时间序列详细数据:', debugData);\n    return debugData;\n  }\n} ","/**\n * 植物数据管理器\n * \n * 功能：\n * - 植物数据的加载和解析\n * - 图像时间排序和管理\n * - 标注状态跟踪\n * - 数据缓存和性能优化\n */\n\nimport { HttpFileSystemManager } from './HttpFileSystemManager.js';\nimport { AnnotationStorageManager } from './AnnotationStorageManager.js';\nimport { TimeSeriesAnnotationManager } from './TimeSeriesAnnotationManager.js';\n\nexport class PlantDataManager {\n  constructor() {\n    this.fileSystemManager = new HttpFileSystemManager();\n    this.annotationStorage = new AnnotationStorageManager();\n    this.timeSeriesManager = new TimeSeriesAnnotationManager();\n    this.plants = new Map();\n    this.plantImages = new Map();\n    this.annotationStatus = new Map();\n    this.loadingPlants = new Set();\n  }\n\n  /**\n   * 初始化数据管理器\n   */\n  async initialize() {\n    try {\n      // 初始化HTTP文件系统管理器\n      await this.fileSystemManager.initialize();\n      \n      await this.annotationStorage.initialize();\n      \n      // 恢复时间序列数据到管理器\n      this.annotationStorage.restoreTimeSeriesData(this.timeSeriesManager);\n      \n      // 设置时间序列管理器的引用到存储管理器\n      this.annotationStorage.setTimeSeriesManager(this.timeSeriesManager);\n      \n      console.log('PlantDataManager 初始化完成');\n    } catch (error) {\n      console.error('PlantDataManager 初始化失败:', error);\n    }\n  }\n\n  /**\n   * 加载数据集中的所有植物\n   */\n  async loadDataset() {\n    console.log('开始加载数据集...');\n\n    try {\n      // 注意：不要在这里cleanup，因为会清除annotations目录句柄\n      // 只清理植物相关数据\n      this.plants.clear();\n      this.plantImages.clear();\n      this.annotationStatus.clear();\n      this.loadingPlants.clear();\n\n      // 设置文件系统管理器到标注存储\n      this.annotationStorage.setFileSystemManager(this.fileSystemManager);\n\n      // 重新初始化标注存储以使用文件系统\n      this.annotationStorage.isInitialized = false;\n      await this.annotationStorage.initialize();\n\n      // 初始化时间序列相关功能\n      this.annotationStorage.restoreTimeSeriesData(this.timeSeriesManager);\n      this.annotationStorage.setTimeSeriesManager(this.timeSeriesManager);\n      \n      // 遍历植物文件夹（不再需要传入datasetHandle）\n      const plantFolders = await this.fileSystemManager.traversePlantDirectories();\n      \n      if (plantFolders.length === 0) {\n        throw new Error('数据集中未找到有效的植物文件夹');\n      }\n      \n      // 批量加载植物基本信息\n      const plants = [];\n      for (const plantFolder of plantFolders) {\n        const plant = await this.createPlantData(plantFolder);\n        plants.push(plant);\n        this.plants.set(plant.id, plant);\n      }\n      \n      // 从持久化存储恢复标注状态\n      await this.restoreAnnotationStatus(plants);\n      \n      // 按植物ID排序\n      plants.sort((a, b) => a.id.localeCompare(b.id));\n      \n      console.log(`成功加载 ${plants.length} 个植物`);\n      return plants;\n      \n    } catch (error) {\n      console.error('加载数据集失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 恢复植物的标注状态\n   */\n  async restoreAnnotationStatus(plants) {\n    if (this.annotationStorage.useFileSystem) {\n      // 文件系统模式：检查每个植物的标注文件\n      await this.restoreAnnotationStatusFromFileSystem(plants);\n    } else {\n      // 服务器模式：使用原有逻辑\n      const annotatedPlantIds = this.annotationStorage.getAnnotatedPlantIds();\n\n      for (const plant of plants) {\n        if (annotatedPlantIds.includes(plant.id)) {\n          const status = this.annotationStorage.getPlantStatus(plant.id);\n          const annotations = this.annotationStorage.getPlantAnnotations(plant.id);\n          const summary = this.annotationStorage.getPlantAnnotationSummary(plant.id);\n\n          plant.status = status;\n          plant.annotations = annotations;\n\n          // 恢复跳过信息\n          const annotationData = this.annotationStorage.annotations.get(plant.id);\n          if (annotationData && annotationData.status === 'skipped') {\n            plant.skipReason = annotationData.skipReason;\n            plant.skipDate = annotationData.skipDate;\n          }\n\n          // 恢复视角选择信息\n          if (summary) {\n            plant.selectedViewAngle = summary.selectedViewAngle;\n            plant.viewAngles = summary.availableViewAngles;\n\n            const skipInfo = plant.status === 'skipped' ? ` (跳过: ${plant.skipReason})` : '';\n            console.log(`恢复植株 ${plant.id} 的标注状态: ${status}, 视角: ${summary.selectedViewAngle}, ${annotations.length} 个标注点${skipInfo}`);\n          }\n\n          // 缓存到内存\n          this.annotationStatus.set(plant.id, annotations);\n        }\n      }\n    }\n  }\n\n  /**\n   * 从文件系统恢复植物标注状态（批量优化版）\n   */\n  async restoreAnnotationStatusFromFileSystem(plants) {\n    console.log('[标注] 开始从文件系统恢复植物状态...');\n\n    // 🚀 PERFORMANCE OPTIMIZATION: Try bulk loading first\n    let bulkAnnotationData = null;\n    try {\n      // Try to get bulk annotation data if AnnotationManager is available\n      if (window.PlantAnnotationTool?.annotationManager) {\n        console.log('[标注] 尝试使用批量标注数据进行快速状态恢复...');\n        bulkAnnotationData = await window.PlantAnnotationTool.annotationManager.getAllAnnotationsInBulk();\n        \n        if (bulkAnnotationData) {\n          console.log('[标注] 批量标注数据获取成功，使用高性能模式');\n          await this.restoreStatusFromBulkData(plants, bulkAnnotationData);\n          return; // Skip individual file reads completely\n        }\n      }\n    } catch (error) {\n      console.warn('[标注] 批量加载失败，回退到单独文件读取模式:', error);\n    }\n\n    // 🔄 FALLBACK: Individual file reading (legacy mode)\n    console.log('[标注] 使用传统单独文件读取模式');\n    await this.restoreStatusFromIndividualFiles(plants);\n  }\n\n  /**\n   * 从批量数据恢复植物状态（高性能模式）\n   */\n  async restoreStatusFromBulkData(plants, bulkData) {\n    console.log('[标注] 使用批量数据进行快速状态恢复...');\n    const startTime = performance.now();\n    \n    // Create lookup maps for fast access\n    const imageAnnotationsMap = bulkData.imageAnnotations || {};\n    const plantAnnotationsMap = bulkData.plantAnnotations || {};\n    \n    for (const plant of plants) {\n      try {\n        let hasAnnotations = false;\n        let totalAnnotations = 0;\n        let selectedViewAngle = null;\n        const viewAngleStats = {};\n\n        // 获取植物的所有图像（如果还没有加载）\n        if (!this.plantImages.has(plant.id)) {\n          const imagesByView = await this.fileSystemManager.readPlantImages(plant.id);\n          this.plantImages.set(plant.id, imagesByView);\n        }\n\n        const imagesByView = this.plantImages.get(plant.id);\n\n        // 检查每个视角的标注情况 - 使用内存查找而非文件读取\n        for (const [viewAngle, images] of Object.entries(imagesByView)) {\n          let viewAnnotationCount = 0;\n\n          for (const image of images) {\n            // 🚀 FAST LOOKUP: Use in-memory data instead of file reads\n            const imageAnnotations = imageAnnotationsMap[image.id];\n            if (imageAnnotations && imageAnnotations.length > 0) {\n              hasAnnotations = true;\n              const count = imageAnnotations.length;\n              totalAnnotations += count;\n              viewAnnotationCount += count;\n\n              // 记录最常用的视角作为选中视角\n              if (!selectedViewAngle || viewAnnotationCount > (viewAngleStats[selectedViewAngle] || 0)) {\n                selectedViewAngle = viewAngle;\n              }\n            }\n          }\n\n          if (viewAnnotationCount > 0) {\n            viewAngleStats[viewAngle] = viewAnnotationCount;\n          }\n        }\n\n        // 检查植物级标注\n        const plantAnnotations = plantAnnotationsMap[plant.id];\n        if (plantAnnotations && plantAnnotations.length > 0) {\n          hasAnnotations = true;\n          totalAnnotations += plantAnnotations.length;\n        }\n\n        // 检查是否有跳过信息\n        const skipData = this.annotationStorage.annotations.get(plant.id);\n        if (skipData && skipData.status === 'skipped') {\n          // 恢复跳过状态\n          plant.status = 'skipped';\n          plant.skipReason = skipData.skipReason;\n          plant.skipDate = skipData.skipDate;\n        } else {\n          // 🔧 FIX: Check for persisted completion status from dedicated API in bulk mode too\n          console.log(`[批量恢复] 检查植物 ${plant.id} 的专用状态API...`);\n          const persistedStatus = await this.annotationStorage.loadPlantStatus(plant.id);\n          console.log(`[批量恢复] 植物 ${plant.id} 专用API状态: ${persistedStatus}`);\n          \n          if (persistedStatus === 'completed') {\n            // 保持已完成状态，即使没有标注数据  \n            plant.status = 'completed';\n            plant.selectedViewAngle = selectedViewAngle;\n            console.log(`[批量恢复] 植物 ${plant.id}: completed (从专用API恢复)`);\n          } else if (hasAnnotations) {\n            // 🔧 FIX: Plants with annotations are 'in-progress', not auto-completed\n            plant.status = 'in-progress';\n            plant.selectedViewAngle = selectedViewAngle;\n            console.log(`[批量恢复] 植物 ${plant.id}: in-progress (有标注数据)`);\n          } else {\n            // 无标注数据且无持久化状态\n            plant.status = 'pending';\n            console.log(`[批量恢复] 植物 ${plant.id}: pending (无数据)`);\n          }\n        }\n\n      } catch (error) {\n        console.warn(`[标注] 检查植物 ${plant.id} 状态失败:`, error);\n        plant.status = 'pending';\n      }\n    }\n\n    const endTime = performance.now();\n    console.log(`[标注] 批量状态恢复完成，耗时: ${(endTime - startTime).toFixed(2)}ms`);\n  }\n\n  /**\n   * 从单独文件恢复植物状态（传统模式）\n   */\n  async restoreStatusFromIndividualFiles(plants) {\n    console.log('[标注] 使用传统文件读取模式恢复状态...');\n\n    // 获取所有标注文件列表（一次性获取）\n    const allAnnotationFiles = await this.annotationStorage.fileSystemManager.getAllAnnotationFiles();\n    const annotationFileSet = new Set(allAnnotationFiles);\n\n    for (const plant of plants) {\n      try {\n        let hasAnnotations = false;\n        let totalAnnotations = 0;\n        let selectedViewAngle = null;\n        const viewAngleStats = {};\n\n        // 获取植物的所有图像（如果还没有加载）\n        if (!this.plantImages.has(plant.id)) {\n          const imagesByView = await this.fileSystemManager.readPlantImages(plant.id);\n          this.plantImages.set(plant.id, imagesByView);\n        }\n\n        const imagesByView = this.plantImages.get(plant.id);\n\n        // 检查每个视角的标注情况\n        for (const [viewAngle, images] of Object.entries(imagesByView)) {\n          let viewAnnotationCount = 0;\n\n          for (const image of images) {\n            // 快速检查：如果标注文件存在于列表中，才尝试读取\n            if (annotationFileSet.has(image.id)) {\n              const annotationData = await this.annotationStorage.getImageAnnotation(image.id);\n              if (annotationData && annotationData.annotations && annotationData.annotations.length > 0) {\n                hasAnnotations = true;\n                const count = annotationData.annotations.length;\n                totalAnnotations += count;\n                viewAnnotationCount += count;\n\n                // 记录最常用的视角作为选中视角\n                if (!selectedViewAngle || viewAnnotationCount > (viewAngleStats[selectedViewAngle] || 0)) {\n                  selectedViewAngle = viewAngle;\n                }\n              }\n            }\n          }\n\n          if (viewAnnotationCount > 0) {\n            viewAngleStats[viewAngle] = viewAnnotationCount;\n          }\n        }\n\n        // 检查是否有跳过信息\n        const skipData = this.annotationStorage.annotations.get(plant.id);\n        if (skipData && skipData.status === 'skipped') {\n          // 恢复跳过状态\n          plant.status = 'skipped';\n          plant.skipReason = skipData.skipReason;\n          plant.skipDate = skipData.skipDate;\n          console.log(`[标注] 植物 ${plant.id}: skipped (${skipData.skipReason})`);\n        } else {\n          // 🔧 FIX: Check for persisted completion status before applying default logic\n          console.log(`[状态恢复] 开始检查植物 ${plant.id} 的持久化状态...`);\n          const persistedStatus = await this.annotationStorage.loadPlantStatus(plant.id);\n          console.log(`[状态恢复] 植物 ${plant.id} 持久化状态结果: ${persistedStatus}`);\n          \n          if (persistedStatus === 'completed') {\n            // 保持已完成状态，即使没有标注数据\n            plant.status = 'completed';\n            plant.selectedViewAngle = selectedViewAngle;\n            console.log(`[标注] 植物 ${plant.id}: completed (从持久化存储恢复)`);\n          } else if (hasAnnotations) {\n            // 🔧 FIX: Plants with annotations are 'in-progress', not auto-completed\n            plant.status = 'in-progress';\n            plant.selectedViewAngle = selectedViewAngle;\n            console.log(`[标注] 植物 ${plant.id}: in-progress, 选中视角: ${selectedViewAngle} (${totalAnnotations} 个标注点)`);\n          } else {\n            // 无标注数据且无持久化状态\n            plant.status = 'pending';\n            console.log(`[标注] 植物 ${plant.id}: pending (无标注数据且无持久化状态)`);\n          }\n        }\n\n      } catch (error) {\n        console.warn(`[标注] 检查植物 ${plant.id} 状态失败:`, error);\n        plant.status = 'pending';\n      }\n    }\n\n    console.log('[标注] 植物状态恢复完成');\n  }\n\n  /**\n   * 创建植物数据对象\n   */\n  async createPlantData(plantFolder) {\n    const plant = {\n      id: plantFolder.id,\n      name: plantFolder.name,\n      path: plantFolder.path, // HTTP版本使用path而不是handle\n      status: 'pending', // pending, in-progress, completed\n      imageCount: 0,\n      hasImages: false,\n      viewAngles: [], // 可用的视角列表\n      selectedViewAngle: null, // 用户选择的视角\n      selectedImage: null,\n      annotations: [],\n      lastModified: null,\n      loadedAt: new Date().toISOString()\n    };\n    \n    // 异步加载图像数量（不阻塞主流程）\n    this.loadPlantImageCount(plant);\n    \n    return plant;\n  }\n\n  /**\n   * 异步加载植物的图像数量\n   */\n  async loadPlantImageCount(plant) {\n    if (this.loadingPlants.has(plant.id)) {\n      return;\n    }\n    \n    this.loadingPlants.add(plant.id);\n    \n    try {\n      const imagesByView = await this.fileSystemManager.readPlantImages(plant.id);\n      \n      // 统计各视角的图像数量\n      const viewAngles = Object.keys(imagesByView).filter(view => imagesByView[view].length > 0);\n      const totalImages = Object.values(imagesByView).reduce((total, images) => total + images.length, 0);\n      \n      // 更新植物信息\n      plant.viewAngles = viewAngles;\n      plant.imageCount = totalImages;\n      plant.hasImages = totalImages > 0;\n      \n      // 缓存图像数据\n      if (totalImages > 0) {\n        this.plantImages.set(plant.id, imagesByView);\n      }\n      \n      console.log(`植物 ${plant.id} 包含 ${totalImages} 张图像，视角: ${viewAngles.join(', ')}`);\n      \n      // 触发UI更新事件\n      this.emitPlantUpdated(plant);\n      \n    } catch (error) {\n      console.error(`加载植物 ${plant.id} 图像信息失败:`, error);\n      plant.hasImages = false;\n      plant.imageCount = 0;\n      plant.viewAngles = [];\n    } finally {\n      this.loadingPlants.delete(plant.id);\n    }\n  }\n\n  /**\n   * 获取植物列表\n   */\n  getPlantList() {\n    return Array.from(this.plants.values()).sort((a, b) => a.id.localeCompare(b.id));\n  }\n\n  /**\n   * 根据ID获取植物\n   */\n  getPlant(plantId) {\n    return this.plants.get(plantId);\n  }\n\n  /**\n   * 获取植物的图像列表（指定视角）\n   */\n  async getPlantImages(plantId, viewAngle = null) {\n    // 检查缓存\n    if (this.plantImages.has(plantId)) {\n      const imagesByView = this.plantImages.get(plantId);\n      \n      if (viewAngle) {\n        return imagesByView[viewAngle] || [];\n      } else {\n        // 如果没有指定视角，返回所有视角的数据\n        return imagesByView;\n      }\n    }\n    \n    // 如果正在加载，等待完成\n    if (this.loadingPlants.has(plantId)) {\n      return new Promise((resolve) => {\n        const checkLoading = () => {\n          if (!this.loadingPlants.has(plantId)) {\n            const imagesByView = this.plantImages.get(plantId) || {};\n            resolve(viewAngle ? (imagesByView[viewAngle] || []) : imagesByView);\n          } else {\n            setTimeout(checkLoading, 100);\n          }\n        };\n        checkLoading();\n      });\n    }\n    \n    // 立即加载\n    const plant = this.plants.get(plantId);\n    if (!plant) {\n      throw new Error(`植物 ${plantId} 不存在`);\n    }\n    \n    try {\n      const imagesByView = await this.fileSystemManager.readPlantImages(plant.id);\n      this.plantImages.set(plantId, imagesByView);\n      \n      if (viewAngle) {\n        return imagesByView[viewAngle] || [];\n      } else {\n        return imagesByView;\n      }\n    } catch (error) {\n      console.error(`获取植物 ${plantId} 图像失败:`, error);\n      return viewAngle ? [] : {};\n    }\n  }\n\n  /**\n   * 🔧 FIXED: 更新植物状态 - 始终保存状态到持久化存储\n   */\n  updatePlantStatus(plantId, status) {\n    const plant = this.plants.get(plantId);\n    if (plant) {\n      plant.status = status;\n      plant.lastModified = new Date().toISOString();\n\n      // 🔧 FIX: Always save plant status to persistent storage, regardless of annotations\n      if (this.annotationStorage) {\n        // Use the new savePlantStatus method for independent status persistence\n        this.annotationStorage.savePlantStatus(plantId, status)\n          .then(() => {\n            console.log(`[状态更新] ${plantId}: ${status} - 已保存到持久化存储`);\n          })\n          .catch(error => {\n            console.error('保存植物状态失败:', error);\n            // 备用方案：如果有标注数据，尝试传统的保存方法\n            const annotations = this.getPlantAnnotations(plantId);\n            if (annotations.length > 0) {\n              const plantInfo = {\n                selectedImage: plant.selectedImage,\n                selectedViewAngle: plant.selectedViewAngle\n              };\n              return this.annotationStorage.savePlantAnnotations(plantId, annotations, plantInfo);\n            }\n          });\n      }\n\n      this.emitPlantUpdated(plant);\n    }\n  }\n\n  /**\n   * 跳过植株\n   */\n  async skipPlant(plantId, reason) {\n    const plant = this.plants.get(plantId);\n    if (!plant) {\n      throw new Error(`植株 ${plantId} 不存在`);\n    }\n\n    // 更新植株状态\n    plant.status = 'skipped';\n    plant.skipReason = reason;\n    plant.skipDate = new Date().toISOString();\n    plant.lastModified = new Date().toISOString();\n\n    // 保存跳过信息到持久化存储\n    try {\n      const skipInfo = {\n        status: 'skipped',\n        skipReason: reason,\n        skipDate: plant.skipDate,\n        lastModified: plant.lastModified\n      };\n\n      await this.annotationStorage.saveSkipInfo(plantId, skipInfo);\n      console.log(`植株 ${plantId} 已标记为跳过: ${reason}`);\n\n      this.emitPlantUpdated(plant);\n\n    } catch (error) {\n      console.error(`保存植株 ${plantId} 跳过信息失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 NEW: 撤销跳过植株\n   */\n  async unskipPlant(plantId) {\n    const plant = this.plants.get(plantId);\n    if (!plant) {\n      throw new Error(`植株 ${plantId} 不存在`);\n    }\n\n    if (plant.status !== 'skipped') {\n      throw new Error(`植株 ${plantId} 当前状态不是跳过状态`);\n    }\n\n    try {\n      // 确定新状态：如果有标注数据则为 in-progress，否则为 pending\n      const annotations = await this.getPlantAnnotations(plantId);\n      const newStatus = (annotations && annotations.length > 0) ? 'in-progress' : 'pending';\n\n      // 更新植株状态\n      plant.status = newStatus;\n      plant.lastModified = new Date().toISOString();\n      \n      // 清除跳过相关信息\n      delete plant.skipReason;\n      delete plant.skipDate;\n\n      // 移除持久化存储中的跳过信息\n      await this.annotationStorage.removeSkipInfo(plantId);\n      \n      // 更新植株状态到持久化存储\n      await this.annotationStorage.savePlantStatus(plantId, newStatus);\n\n      console.log(`植株 ${plantId} 已撤销跳过状态，新状态: ${newStatus}`);\n      this.emitPlantUpdated(plant);\n\n    } catch (error) {\n      console.error(`撤销植株 ${plantId} 跳过状态失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 NEW: 撤销完成植株\n   */\n  async uncompletePlant(plantId) {\n    const plant = this.plants.get(plantId);\n    if (!plant) {\n      throw new Error(`植株 ${plantId} 不存在`);\n    }\n\n    if (plant.status !== 'completed') {\n      throw new Error(`植株 ${plantId} 当前状态不是已完成状态`);\n    }\n\n    try {\n      // 确定新状态：如果有标注数据则为 in-progress，否则为 pending\n      const annotations = await this.getPlantAnnotations(plantId);\n      const newStatus = (annotations && annotations.length > 0) ? 'in-progress' : 'pending';\n\n      // 更新植株状态\n      plant.status = newStatus;\n      plant.lastModified = new Date().toISOString();\n\n      // 更新植株状态到持久化存储\n      await this.annotationStorage.savePlantStatus(plantId, newStatus);\n\n      console.log(`植株 ${plantId} 已撤销完成状态，新状态: ${newStatus}`);\n      this.emitPlantUpdated(plant);\n\n    } catch (error) {\n      console.error(`撤销植株 ${plantId} 完成状态失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 设置植物的选中视角\n   */\n  setSelectedViewAngle(plantId, viewAngle) {\n    const plant = this.plants.get(plantId);\n    if (plant) {\n      plant.selectedViewAngle = viewAngle;\n      plant.selectedImage = null; // 重置选中的图像\n      \n      // 如果植物状态还是pending，更新为in-progress\n      if (plant.status === 'pending') {\n        this.updatePlantStatus(plantId, 'in-progress');\n      }\n      \n      this.emitPlantUpdated(plant);\n    }\n  }\n\n  /**\n   * 设置植物的选中图像\n   */\n  setSelectedImage(plantId, imageData) {\n    const plant = this.plants.get(plantId);\n    if (plant) {\n      plant.selectedImage = imageData;\n      \n      // 自动设置视角（如果还没有设置的话）\n      if (!plant.selectedViewAngle && imageData.viewAngle) {\n        plant.selectedViewAngle = imageData.viewAngle;\n      }\n\n      // 初始化时间序列（如果还没有初始化）\n      if (plant.selectedViewAngle) {\n        this.initializeTimeSeriesIfNeeded(plantId, plant.selectedViewAngle);\n      }\n      \n      // 如果植物状态还是pending，更新为in-progress\n      if (plant.status === 'pending') {\n        this.updatePlantStatus(plantId, 'in-progress');\n      }\n      \n      this.emitPlantUpdated(plant);\n    }\n  }\n\n  /**\n   * 初始化时间序列（如果需要）\n   */\n  async initializeTimeSeriesIfNeeded(plantId, viewAngle) {\n    try {\n      const images = await this.getPlantImages(plantId, viewAngle);\n      if (images.length > 0) {\n        const seriesInfo = this.timeSeriesManager.initializePlantTimeSeries(plantId, viewAngle, images);\n        console.log(`初始化时间序列: ${seriesInfo.totalImages} 张图像`);\n        return seriesInfo;\n      }\n    } catch (error) {\n      console.error('初始化时间序列失败:', error);\n    }\n    return null;\n  }\n\n  /**\n   * 获取植物的标注数据（新的简化方案）\n   */\n  async savePlantAnnotations(plantId, annotations, isManualAdjustment = false, options = {}) {\n    const plant = this.plants.get(plantId);\n    if (!plant) {\n      throw new Error(`植株 ${plantId} 不存在`);\n    }\n\n    if (!plant.selectedImage || !plant.selectedViewAngle) {\n      throw new Error('请先选择图像和视角');\n    }\n\n    const currentImageId = plant.selectedImage.id;\n    const viewAngle = plant.selectedViewAngle;\n\n    try {\n      // 获取该视角的所有图像\n      const images = await this.getPlantImages(plantId, viewAngle);\n      const currentImageIndex = images.findIndex(img => img.id === currentImageId);\n      \n      if (currentImageIndex === -1) {\n        throw new Error('当前图像不在图像列表中');\n      }\n\n      let savedCount = 0;\n      \n      if (isManualAdjustment) {\n        // 仅保存当前图像\n        await this.saveAnnotationToFile(plantId, currentImageId, annotations, options);\n        savedCount = 1;\n        console.log(`保存标注到当前图像: ${currentImageId}`);\n      } else {\n        // 向后传播：保存到当前图像及后续所有图像\n        for (let i = currentImageIndex; i < images.length; i++) {\n          const imageId = images[i].id;\n          await this.saveAnnotationToFile(plantId, imageId, annotations, options);\n          savedCount++;\n        }\n        console.log(`向后传播保存标注到 ${savedCount} 张图像`);\n      }\n\n      // 🔧 FIX: Update plant status - only set to in-progress when saving annotations\n      // Completion status should only be set explicitly via Complete Plant button\n      plant.annotations = annotations;\n      plant.lastModified = new Date().toISOString();\n      plant.status = annotations.length > 0 ? 'in-progress' : 'pending';\n\n      // 更新内存缓存\n      this.annotationStatus.set(plantId, annotations);\n\n      // 触发UI更新\n      this.emitPlantUpdated(plant);\n\n      const directionInfo = options.saveDirectionsOnly ? ' (仅方向信息)' : '';\n      const message = isManualAdjustment ? \n        `已保存到当前图像${directionInfo}` : \n        `已传播保存到 ${savedCount} 张图像${directionInfo}`;\n\n      return {\n        success: true,\n        savedCount,\n        message,\n        viewAngle: viewAngle,\n        isManualAdjustment,\n        saveDirectionsOnly: options.saveDirectionsOnly\n      };\n      \n    } catch (error) {\n      console.error(`保存植株 ${plantId} 标注数据失败:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 保存标注数据到特定图像文件\n   */\n  async saveAnnotationToFile(plantId, imageId, annotations, options = {}) {\n    let finalAnnotations = annotations;\n    \n    // 如果只保存方向信息，需要合并现有的位置信息\n    if (options.saveDirectionsOnly) {\n      const existingData = await this.annotationStorage.getImageAnnotation(imageId);\n      if (existingData && existingData.annotations) {\n        finalAnnotations = this.mergeDirectionData(existingData.annotations, annotations);\n      }\n    }\n    \n    // 为每个图像创建独立的标注文件\n    const annotationData = {\n      plantId,\n      imageId,\n      annotations: finalAnnotations,\n      timestamp: new Date().toISOString(),\n      version: '2.0' // 新版本标记\n    };\n\n    // 保存到持久化存储\n    await this.annotationStorage.saveImageAnnotation(imageId, annotationData);\n  }\n\n  /**\n   * 合并方向数据（仅更新方向信息，保持位置不变）\n   */\n  mergeDirectionData(existingAnnotations, newAnnotations) {\n    const merged = [...existingAnnotations];\n    \n    // 为每个新标注点的方向信息更新对应的现有标注点\n    newAnnotations.forEach(newAnnotation => {\n      const existingIndex = merged.findIndex(existing => existing.order === newAnnotation.order);\n      \n      if (existingIndex !== -1) {\n        // 只更新方向相关信息，保持位置不变\n        merged[existingIndex] = {\n          ...merged[existingIndex],\n          direction: newAnnotation.direction,\n          directionType: newAnnotation.directionType,\n          timestamp: new Date().toISOString()\n        };\n      } else {\n        // 如果没有找到对应的标注点，添加新的\n        merged.push(newAnnotation);\n      }\n    });\n    \n    return merged;\n  }\n\n  /**\n   * 保存标注数据到指定图像（自动保存专用）\n   */\n  async saveImageAnnotations(imageId, annotations) {\n    try {\n      // 获取当前植株ID\n      const currentPlantId = window.appState?.currentPlant?.id || this.getCurrentPlantIdFromImage(imageId);\n\n      // 创建标注数据结构\n      const annotationData = {\n        imageId,\n        plantId: currentPlantId,\n        annotations,\n        timestamp: new Date().toISOString(),\n        version: '2.0'\n      };\n\n      // 保存到持久化存储\n      await this.annotationStorage.saveImageAnnotation(imageId, annotationData);\n\n      console.log(`自动保存完成：图像 ${imageId} (植株: ${currentPlantId}) 的 ${annotations.length} 个标注点`);\n\n    } catch (error) {\n      console.error('自动保存图像标注失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 从图像ID推断植株ID\n   */\n  getCurrentPlantIdFromImage(imageId) {\n    // 尝试从图像ID中提取植株ID\n    // 图像ID格式通常是: BR017-028122_sv-000_BR017-028122-2018-07-04_00_VIS_sv_000-0-0-0.png\n    // 植株ID通常是: BR017-028122\n\n    if (imageId.includes('_')) {\n      const parts = imageId.split('_');\n      if (parts.length > 0) {\n        // 取第一部分作为植株ID\n        return parts[0];\n      }\n    }\n\n    // 如果无法解析，尝试从文件名中提取\n    if (imageId.includes('-')) {\n      const parts = imageId.split('-');\n      if (parts.length >= 2) {\n        // 组合前两部分作为植株ID (如 BR017-028122)\n        return `${parts[0]}-${parts[1]}`;\n      }\n    }\n\n    // 最后的备选方案：返回原始imageId的前缀\n    return imageId.split('.')[0].split('_')[0];\n  }\n\n  /**\n   * 获取特定图像的标注数据\n   */\n  async getImageAnnotations(imageId) {\n    try {\n      const annotationData = await this.annotationStorage.getImageAnnotation(imageId);\n\n      if (!annotationData || !annotationData.annotations) {\n        return [];\n      }\n\n      const annotations = annotationData.annotations;\n\n      // 🔧 DISABLED: 为传统数据添加序号（兼容性处理）\n      // IMPORTANT: This automatic renumbering was causing order inconsistencies\n      // across frames in real-time sync. Annotations should maintain their\n      // original order numbers to ensure consistent synchronization.\n      // this.ensureAnnotationOrders(annotations);\n      \n      console.log(`🔄 Loaded ${annotations.length} annotations for image ${imageId} (auto-renumbering disabled)`);\n\n      return annotations;\n    } catch (error) {\n      console.error('获取图像标注失败:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 获取植物的标注数据（简化版本）\n   */\n  getPlantAnnotations(plantId, imageId = null) {\n    if (imageId) {\n      // 直接从文件读取指定图像的标注\n      return this.getImageAnnotations(imageId);\n    }\n\n    // 如果没有指定图像，返回植物的当前标注状态\n    return this.annotationStatus.get(plantId) || [];\n  }\n\n  /**\n   * 获取当前图像的标注元数据\n   */\n  getCurrentImageAnnotationMetadata(plantId) {\n    const plant = this.plants.get(plantId);\n    if (!plant || !plant.selectedImage || !plant.selectedViewAngle) {\n      return null;\n    }\n\n    return this.timeSeriesManager.getAnnotationMetadata(\n      plantId,\n      plant.selectedViewAngle,\n      plant.selectedImage.id\n    );\n  }\n\n  /**\n   * 获取植株视角的时间序列统计\n   */\n  getPlantTimeSeriesStats(plantId, viewAngle) {\n    return this.timeSeriesManager.getAnnotationStats(plantId, viewAngle);\n  }\n\n  /**\n   * 检查是否为手动调整模式\n   */\n  shouldShowManualAdjustmentMode(plantId) {\n    const metadata = this.getCurrentImageAnnotationMetadata(plantId);\n    if (!metadata) return false;\n\n    // 如果不是第一张图像，且已有标注，显示微调模式\n    return !metadata.isFirstImage && metadata.hasAnnotations;\n  }\n\n  /**\n   * 获取下一个未完成的植物\n   */\n  getNextPendingPlant(currentPlantId = null) {\n    const plants = this.getPlantList();\n    \n    if (!currentPlantId) {\n      // 返回第一个未完成的植物\n      return plants.find(plant => plant.status !== 'completed');\n    }\n    \n    // 找到当前植物的索引\n    const currentIndex = plants.findIndex(plant => plant.id === currentPlantId);\n    \n    if (currentIndex === -1) {\n      return plants.find(plant => plant.status !== 'completed');\n    }\n    \n    // 从当前植物的下一个开始查找\n    for (let i = currentIndex + 1; i < plants.length; i++) {\n      if (plants[i].status !== 'completed') {\n        return plants[i];\n      }\n    }\n    \n    // 如果没找到，从头开始查找\n    for (let i = 0; i < currentIndex; i++) {\n      if (plants[i].status !== 'completed') {\n        return plants[i];\n      }\n    }\n    \n    return null; // 所有植物都已完成\n  }\n\n  /**\n   * 获取详细的图片统计信息\n   */\n  getDetailedImageStats() {\n    const plants = this.getPlantList();\n    let totalImages = 0;\n    let completedImages = 0;\n    let totalPlants = plants.length;\n    let completedPlants = 0;\n    \n    const plantStats = [];\n\n    for (const plant of plants) {\n      const plantImageCount = plant.imageCount || 0;\n      totalImages += plantImageCount;\n      \n      const plantStat = {\n        plantId: plant.id,\n        imageCount: plantImageCount,\n        status: plant.status,\n        isCompleted: plant.status === 'completed'\n      };\n      \n      if (plant.status === 'completed') {\n        completedPlants++;\n        completedImages += plantImageCount;\n      }\n      \n      plantStats.push(plantStat);\n    }\n\n    const completionRate = totalImages > 0 ? (completedImages / totalImages * 100) : 0;\n    const plantCompletionRate = totalPlants > 0 ? (completedPlants / totalPlants * 100) : 0;\n\n    return {\n      totalImages,\n      completedImages,\n      totalPlants,\n      completedPlants,\n      completionRate: completionRate.toFixed(1),\n      plantCompletionRate: plantCompletionRate.toFixed(1),\n      pendingImages: totalImages - completedImages,\n      plantStats\n    };\n  }\n\n  /**\n   * 获取简化的图片统计信息\n   */\n  getImageStats() {\n    const detailed = this.getDetailedImageStats();\n    return {\n      totalImages: detailed.totalImages,\n      completedImages: detailed.completedImages,\n      totalPlants: detailed.totalPlants,\n      completedPlants: detailed.completedPlants,\n      completionRate: detailed.completionRate\n    };\n  }\n\n  /**\n   * 获取进度统计\n   */\n  getProgress() {\n    const plants = this.getPlantList();\n    const total = plants.length;\n    \n    // 使用持久化存储的统计信息\n    const persistentStats = this.annotationStorage.getAnnotationStats(total);\n    \n    // 结合内存中的状态\n    const completed = plants.filter(plant => plant.status === 'completed').length;\n    const inProgress = plants.filter(plant => plant.status === 'in-progress').length;\n    const pending = plants.filter(plant => plant.status === 'pending').length;\n    const skipped = plants.filter(plant => plant.status === 'skipped').length;\n\n    // 计算总完成数（包括跳过的植株）\n    const totalCompleted = completed + skipped;\n\n    // 添加图片统计\n    const imageStats = this.getImageStats();\n\n    return {\n      total,\n      completed: Math.max(completed, persistentStats.completed),\n      inProgress,\n      pending,\n      skipped,\n      totalCompleted, // 新增：包含跳过的总完成数\n      completionRate: total > 0 ? (Math.max(totalCompleted, persistentStats.completed + skipped) / total * 100).toFixed(1) : 0,\n      persistent: persistentStats,\n      images: imageStats\n    };\n  }\n\n  /**\n   * 搜索植物\n   */\n  searchPlants(query) {\n    if (!query) {\n      return this.getPlantList();\n    }\n    \n    const lowerQuery = query.toLowerCase();\n    return this.getPlantList().filter(plant => \n      plant.id.toLowerCase().includes(lowerQuery) ||\n      plant.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * 按状态过滤植物\n   */\n  filterPlantsByStatus(status) {\n    if (status === 'all') {\n      return this.getPlantList();\n    }\n    \n    return this.getPlantList().filter(plant => plant.status === status);\n  }\n\n  /**\n   * 触发植物更新事件\n   */\n  emitPlantUpdated(plant) {\n    // 触发自定义事件\n    const event = new CustomEvent('plantUpdated', {\n      detail: { plant }\n    });\n    document.dispatchEvent(event);\n  }\n\n  /**\n   * 清理资源和缓存\n   */\n  cleanup() {\n    this.plants.clear();\n    this.plantImages.clear();\n    this.annotationStatus.clear();\n    this.loadingPlants.clear();\n    \n    if (this.fileSystemManager) {\n      this.fileSystemManager.cleanup();\n    }\n  }\n\n  /**\n   * 导出所有标注数据\n   */\n  exportAllAnnotations() {\n    // 使用持久化存储的导出功能\n    return this.annotationStorage.exportAllAnnotations();\n  }\n\n  /**\n   * 下载标注数据为JSON文件\n   */\n  downloadAnnotationsAsJSON() {\n    return this.annotationStorage.downloadAnnotationsAsJSON();\n  }\n\n  /**\n   * 导出所有图像的纯净标注数据（新格式）\n   * 不包含时间序列管理的内部信息，直接输出图像ID对应的标注点\n   */\n  async exportPureImageAnnotations() {\n    return await this.annotationStorage.exportPureImageAnnotations();\n  }\n\n  /**\n   * 下载纯净的图像标注数据为JSON文件\n   */\n  async downloadPureImageAnnotationsAsJSON() {\n    return await this.annotationStorage.downloadPureImageAnnotationsAsJSON();\n  }\n\n  /**\n   * 获取导出数据的统计信息\n   */\n  async getExportStats() {\n    const pureAnnotations = await this.exportPureImageAnnotations();\n    const timeSeriesStats = this.timeSeriesManager.getExportStats();\n    \n    return {\n      pureFormat: this.annotationStorage.getPureAnnotationsStats(pureAnnotations),\n      timeSeriesFormat: timeSeriesStats,\n      recommendation: '建议使用纯净格式进行数据分析和处理'\n    };\n  }\n\n  /**\n   * 调试：检查时间序列数据状态和导出问题\n   */\n  async debugTimeSeriesExport() {\n    console.log('=== 时间序列导出调试 ===');\n    \n    // 1. 检查时间序列管理器状态\n    const timeSeriesStatus = this.timeSeriesManager.getDebugStatus();\n    \n    // 2. 检查时间序列管理器中的详细数据\n    const timeSeriesData = this.timeSeriesManager.exportAllTimeSeriesDataDebug();\n    \n    // 3. 检查导出的纯净数据\n    const pureAnnotations = await this.exportPureImageAnnotations();\n    console.log('导出的纯净标注数据:', pureAnnotations);\n    \n    // 4. 检查存储管理器中的数据\n    const storageAnnotations = this.annotationStorage.annotations;\n    console.log('存储管理器中的数据:', Array.from(storageAnnotations.entries()));\n    \n    // 5. 比较数据差异\n    const comparison = {\n      timeSeriesManagerImages: timeSeriesStatus.totalAnnotatedImages,\n      pureExportImages: Object.keys(pureAnnotations).length,\n      storageManagerPlants: storageAnnotations.size\n    };\n    \n    console.log('数据比较:', comparison);\n    \n    return {\n      timeSeriesStatus,\n      timeSeriesData,\n      pureAnnotations,\n      storageData: Array.from(storageAnnotations.entries()),\n      comparison\n    };\n  }\n\n  /**\n   * 保存标注状态到本地存储\n   */\n  saveAnnotationStatus(plantId, data) {\n    try {\n      const storageKey = `plant_annotation_${plantId}`;\n      const savedData = {\n        ...data,\n        savedAt: new Date().toISOString()\n      };\n      localStorage.setItem(storageKey, JSON.stringify(savedData));\n    } catch (error) {\n      console.error('保存标注状态失败:', error);\n    }\n  }\n\n  /**\n   * 从本地存储加载标注状态\n   */\n  loadAnnotationStatus(plantId) {\n    try {\n      const storageKey = `plant_annotation_${plantId}`;\n      const saved = localStorage.getItem(storageKey);\n      \n      if (saved) {\n        return JSON.parse(saved);\n      }\n    } catch (error) {\n      console.error('加载标注状态失败:', error);\n    }\n    \n    return null;\n  }\n\n  /**\n   * 🔧 FIXED: 确保标注数据都有序号（支持类型特定编号系统）\n   * 为缺少序号的标注点分配序号，但保持类型特定的编号系统\n   */\n  ensureAnnotationOrders(annotations) {\n    if (!annotations || annotations.length === 0) {\n      return;\n    }\n    \n    // 🔧 FIX: 按类型分组标注点\n    const annotationsByType = {};\n    \n    // 分组：内置regular(已迁移为自定义) 与 各种自定义类型\n    annotations.forEach(annotation => {\n      // 🐛 BUGFIX: Ensure all annotations have annotationType field set\n      if (!annotation.annotationType) {\n        // 🔧 FIX: Smart detection - check if this is actually a custom annotation\n        if (annotation.customTypeId) {\n          annotation.annotationType = 'custom'; // Preserve custom type\n        } else {\n          // 迁移后不应再出现纯regular，兜底映射到内置类型\n          annotation.annotationType = 'custom';\n          annotation.customTypeId = annotation.customTypeId || 'builtin-regular-keypoint';\n        }\n      }\n      \n      const typeKey = annotation.annotationType === 'custom' \n        ? `custom:${annotation.customTypeId || 'unknown'}`\n        : `custom:builtin-regular-keypoint`;\n      \n      if (!annotationsByType[typeKey]) {\n        annotationsByType[typeKey] = [];\n      }\n      annotationsByType[typeKey].push(annotation);\n    });\n    \n    let totalFixed = 0;\n    \n    // 🔧 FIX: 为每个类型独立处理序号\n    Object.entries(annotationsByType).forEach(([typeKey, typeAnnotations]) => {\n      let hasOrderIssues = false;\n      \n      // 检查该类型是否有序号问题\n      for (let i = 0; i < typeAnnotations.length; i++) {\n        if (typeof typeAnnotations[i].order !== 'number' || typeAnnotations[i].order <= 0) {\n          hasOrderIssues = true;\n          break;\n        }\n      }\n      \n      // 检查该类型内部是否有重复序号\n      if (!hasOrderIssues) {\n        const orders = typeAnnotations.map(kp => kp.order);\n        const uniqueOrders = [...new Set(orders)];\n        if (uniqueOrders.length !== orders.length) {\n          hasOrderIssues = true;\n        }\n      }\n      \n      // 如果该类型有序号问题，重新分配\n      if (hasOrderIssues) {\n        console.log(`发现 ${typeKey} 类型标注序号问题，正在为 ${typeAnnotations.length} 个标注点分配序号...`);\n        \n        // 按照原有顺序为该类型分配序号（从1开始）\n        for (let i = 0; i < typeAnnotations.length; i++) {\n          typeAnnotations[i].order = i + 1;\n        }\n        \n        totalFixed += typeAnnotations.length;\n        console.log(`已为 ${typeKey} 类型分配序号：1-${typeAnnotations.length}`);\n      }\n    });\n    \n    if (totalFixed > 0) {\n      console.log(`序号修复完成：共修复 ${totalFixed} 个标注点，保持类型特定编号系统`);\n    }\n  }\n} ","/**\n * 标注工具组件\n * \n * 功能：\n * - Canvas图像渲染和缩放\n * - 触摸板缩放支持 (0.1x-10x)\n * - 关键点添加、删除、拖拽\n * - 撤销/重做功能\n * - 视图状态管理\n */\n\nexport class AnnotationTool {\n  constructor(canvasId, options = {}) {\n    console.log('[调试] AnnotationTool 构造函数被调用', { canvasId, timestamp: Date.now() });\n\n    this.canvas = document.getElementById(canvasId);\n    if (!this.canvas) {\n      throw new Error(`Canvas element with id \"${canvasId}\" not found`);\n    }\n    \n    this.ctx = this.canvas.getContext('2d');\n    this.options = {\n      minZoom: 0.1,\n      maxZoom: 10,\n      zoomSpeed: 0.1,\n      // 标注点基础配置\n      baseKeypointRadius: 8,               // 基础标注点半径\n      minKeypointRadius: 4,                // 最小标注点半径  \n      maxKeypointRadius: 20,               // 最大标注点半径\n      keypointScaleFactor: 0.8,            // 标注点缩放因子\n      // 颜色配置\n      keypointLeftColor: '#ff4444',        // 左侧关键点颜色\n      keypointRightColor: '#4444ff',       // 右侧关键点颜色\n      keypointHoverColor: '#ff6666',\n      keypointSelectedColor: '#ffaa00',    // 选中关键点颜色\n      keypointBorderColor: '#ffffff',\n      keypointBorderWidth: 2,\n      // 标签显示配置\n      labelThresholdScale: 0.6,            // 标签外部显示的缩放阈值\n      tinyThresholdScale: 0.3,             // 极小显示模式的缩放阈值\n      labelOffset: 15,                     // 外部标签偏移距离\n      // 方向标注配置\n      directionThreshold: 20,              // 最小拖拽距离阈值\n      directionArrowLength: 40,            // 方向箭头长度\n      ...options\n    };\n    \n    // 状态管理\n    this.state = {\n      scale: 1,\n      translateX: 0,\n      translateY: 0,\n      isDragging: false,\n      isPanning: false,\n      lastPanPoint: null,\n      // 新增：方向标注状态\n      isDirectionDragging: false,\n      dragStartPoint: null,\n      currentDragPoint: null,\n      previewKeypoint: null,\n      // 新增：选中和方向选择状态\n      selectedKeypoint: null,               // 当前选中的关键点\n      isDirectionSelectionMode: false,     // 是否处于方向选择模式\n      directionSelectionPoint: null,       // 方向选择的鼠标位置\n      // 新增：自动化方向选择状态\n      isAutoDirectionMode: false,          // 是否处于自动化方向选择模式\n      autoDirectionIndex: 0,               // 当前自动选择的关键点索引\n      autoDirectionKeypoints: [],          // 需要自动选择方向的关键点列表\n      // 🔧 NEW: 多方向标注状态\n      isDirectionCountMode: false,         // 是否处于方向数量选择模式\n      currentDirectionCount: 1,            // 当前方向数量\n      directionsSet: 0,                    // 已设置的方向数量\n      // 新增：自动切换到预期位置\n      autoMoveToExpectedPosition: false,   // 是否自动切换到预期位置\n      // 新增：自定义区域拖拽状态\n      isCustomRegionDragging: false,       // 是否正在拖拽自定义区域\n      customRegionStartPoint: null,        // 区域拖拽开始点\n      customRegionCurrentPoint: null       // 区域拖拽当前点\n    };\n    \n    // 图像相关\n    this.currentImage = null;\n    this.imageElement = null;\n    this.imageLoaded = false;\n    \n    // 标注数据\n    this.keypoints = [];\n    this.hoveredKeypoint = null;\n    this.draggedKeypoint = null;\n    \n    // 历史管理（撤销/重做）\n    this.history = [];\n    this.historyIndex = -1;\n    this.maxHistorySize = 50;\n    \n    // 自定义标注系统\n    this.customAnnotationManager = null;\n    this.customAnnotationRenderer = null;\n    \n    // 自定义标注拖拽状态\n    this.customAnnotationDragState = {\n      isDragging: false,\n      draggedAnnotation: null,\n      startPosition: null\n    };\n    \n    // 🔧 NEW: 图像切换锁定机制 - 防止快速切换时的数据混乱\n    this.imageSwitchLock = {\n      isLocked: false,\n      currentLoadingImageId: null,\n      lockStartTime: null\n    };\n    \n    // 🔧 NEW: Enhanced Auto Direction State Management\n    this.autoDirectionMode = 'longitudinal'; // 'longitudinal' | 'cross-sectional' - default fallback\n    this.crossSectionalState = null; // Will be initialized when cross-sectional mode starts\n    this.crossSectionalMap = new Map(); // Maps order numbers to image-annotation pairs\n    \n    // 绑定事件\n    this.bindEvents();\n    \n    // 初始化Canvas\n    this.initializeCanvas();\n    \n    // 初始化自定义标注系统 - 异步但立即开始\n    this.initializeCustomAnnotationSystem();\n    \n    // 🔧 FIX: Initialize auto direction mode from UI selector\n    this.initializeAutoDirectionModeFromUI();\n    \n    console.log('AnnotationTool initialized with advanced direction annotation support and custom annotations');\n  }\n\n  /**\n   * 🔧 FIX: Initialize auto direction mode from UI selector\n   */\n  initializeAutoDirectionModeFromUI() {\n    // Use setTimeout to ensure DOM is fully loaded\n    setTimeout(() => {\n      const modeSelector = document.getElementById('auto-direction-mode-selector');\n      if (modeSelector && modeSelector.value) {\n        this.autoDirectionMode = modeSelector.value;\n        console.log('[调试] 从UI选择器初始化自动方向模式:', this.autoDirectionMode);\n      } else {\n        // Set default value in UI selector if none exists\n        this.autoDirectionMode = 'longitudinal';\n        if (modeSelector) {\n          modeSelector.value = 'longitudinal';\n          console.log('[调试] 设置UI选择器默认值为: longitudinal');\n        }\n      }\n    }, 100);\n  }\n\n  /**\n   * 初始化Canvas\n   */\n  initializeCanvas() {\n    // 🔧 FIX: Add resize state tracking and debouncing\n    this.resizeState = {\n      isResizing: false,\n      lastResizeTime: 0,\n      debounceTimeout: null,\n      dimensionsHistory: []\n    };\n    \n    // 延迟设置Canvas尺寸，确保容器已正确渲染\n    setTimeout(() => {\n      this.resizeCanvasWithRetry();\n    }, 200);\n    \n    // 设置Canvas样式\n    this.canvas.style.cursor = 'crosshair';\n    \n    // 🔧 FIX: Debounced window resize listener to prevent excessive resizing\n    window.addEventListener('resize', () => {\n      this.debouncedResize();\n    });\n  }\n\n  /**\n   * 带重试机制的Canvas尺寸调整\n   */\n  resizeCanvasWithRetry(retryCount = 0) {\n    const maxRetries = 10;\n    const container = this.canvas.parentElement;\n    const rect = container.getBoundingClientRect();\n    \n    // 检查容器尺寸是否有效\n    if (rect.width === 0 || rect.height === 0) {\n      if (retryCount < maxRetries) {\n        console.warn(`Canvas容器尺寸为0，延迟重试... (${retryCount + 1}/${maxRetries})`);\n        setTimeout(() => {\n          this.resizeCanvasWithRetry(retryCount + 1);\n        }, 300); // 增加重试间隔\n        return;\n      } else {\n        console.error('Canvas容器尺寸始终为0，使用默认尺寸');\n        // 使用默认尺寸\n        this.canvas.width = 600;\n        this.canvas.height = 400;\n        this.canvas.style.width = '600px';\n        this.canvas.style.height = '400px';\n        this.render();\n        return;\n      }\n    }\n    \n    // 设置正确的尺寸\n    this.resizeCanvas();\n    this.render();\n  }\n\n  /**\n   * 🔧 ENHANCED: Debounced resize handler to prevent resize loops\n   */\n  debouncedResize() {\n    const now = Date.now();\n    \n    // 🔧 FIX: Prevent resize loops with timing checks\n    if (this.resizeState.isResizing && (now - this.resizeState.lastResizeTime) < 100) {\n      console.debug('Resize loop detected, skipping resize');\n      return;\n    }\n    \n    // Clear existing debounce timeout\n    if (this.resizeState.debounceTimeout) {\n      clearTimeout(this.resizeState.debounceTimeout);\n    }\n    \n    // Debounce resize calls\n    this.resizeState.debounceTimeout = setTimeout(() => {\n      this.resizeCanvas();\n      this.render();\n    }, 150); // 150ms debounce\n  }\n\n  /**\n   * 调整Canvas尺寸 - Enhanced with loop prevention\n   */\n  resizeCanvas() {\n    const container = this.canvas.parentElement;\n    const rect = container.getBoundingClientRect();\n    \n    // 确保容器有有效尺寸\n    if (rect.width === 0 || rect.height === 0) {\n      console.warn('Canvas容器尺寸无效，跳过调整');\n      return;\n    }\n    \n    // 🔧 FIX: Prevent resize loops by checking if dimensions actually changed\n    const currentDimensions = `${rect.width}x${rect.height}`;\n    const history = this.resizeState.dimensionsHistory;\n    \n    // Check if we're oscillating between dimensions\n    if (history.length >= 3) {\n      const recent = history.slice(-3);\n      if (recent.includes(currentDimensions) && recent.filter(d => d === currentDimensions).length >= 2) {\n        console.warn(`Canvas resize oscillation detected (${currentDimensions}), stabilizing...`);\n        return;\n      }\n    }\n    \n    // Record dimension change\n    history.push(currentDimensions);\n    if (history.length > 5) {\n      history.shift(); // Keep only recent 5 changes\n    }\n    \n    // 🔧 FIX: Set resize state to prevent recursive calls\n    this.resizeState.isResizing = true;\n    this.resizeState.lastResizeTime = Date.now();\n    \n    try {\n      // 设置Canvas实际尺寸\n      this.canvas.width = rect.width;\n      this.canvas.height = rect.height;\n      \n      // 设置Canvas显示尺寸\n      this.canvas.style.width = rect.width + 'px';\n      this.canvas.style.height = rect.height + 'px';\n      \n      console.log(`Canvas resized to ${rect.width}x${rect.height}`);\n      \n      // 🔧 FIX: Only call fitToScreen if not already in resize process\n      if (this.imageLoaded && this.imageElement && !this.resizeState.fittingToScreen) {\n        this.safeFitToScreen();\n      }\n    } finally {\n      // Reset resize state after a delay\n      setTimeout(() => {\n        this.resizeState.isResizing = false;\n      }, 200);\n    }\n  }\n\n  /**\n   * 绑定事件监听器\n   */\n  bindEvents() {\n    console.log('[调试] bindEvents 被调用，绑定鼠标事件监听器', { timestamp: Date.now() });\n\n    // 鼠标事件\n    this.canvas.addEventListener('mousedown', (e) => this.handleMouseDown(e));\n    this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));\n    this.canvas.addEventListener('mouseup', (e) => this.handleMouseUp(e));\n    this.canvas.addEventListener('contextmenu', (e) => this.handleContextMenu(e));\n    \n    // 触摸板缩放\n    this.canvas.addEventListener('wheel', (e) => this.handleWheel(e), { passive: false });\n    \n    // 键盘事件\n    document.addEventListener('keydown', (e) => this.handleKeyDown(e));\n    document.addEventListener('keyup', (e) => this.handleKeyUp(e));\n    \n    // 防止上下文菜单\n    this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\n  }\n\n  /**\n   * 🔧 ENHANCED: 加载图像（带图像切换锁定机制）\n   * @param {Object} imageData - 图像数据\n   * @param {boolean} preserveView - 是否保持当前视图状态（缩放和位置）\n   */\n  async loadImage(imageData, preserveView = false) {\n    try {\n      console.log('Loading image:', imageData.name);\n      \n      // 🔧 NEW: 设置图像切换锁定，防止auto-save在切换过程中执行\n      this.setImageSwitchLock(true, imageData.id);\n      \n      // 🔧 NEW: 图像切换时中断所有方向相关模式\n      this.interruptAllDirectionModes('image_switch');\n      \n      this.currentImage = imageData;\n      this.imageLoaded = false;\n      \n      // 检查plantDataManager是否可用\n      if (!window.PlantAnnotationTool || !window.PlantAnnotationTool.plantDataManager) {\n        // 🔧 FIX: 出错时解锁\n        this.setImageSwitchLock(false);\n        throw new Error('PlantDataManager未初始化，请刷新页面重试');\n      }\n      \n      const plantDataManager = window.PlantAnnotationTool.plantDataManager;\n      \n      if (!plantDataManager.fileSystemManager) {\n        // 🔧 FIX: 出错时解锁\n        this.setImageSwitchLock(false);\n        throw new Error('FileSystemManager未初始化，请刷新页面重试');\n      }\n      \n      // 获取图像URL\n      const imageURL = await plantDataManager.fileSystemManager.createImageURL(imageData);\n      \n      // 创建图像元素\n      this.imageElement = new Image();\n      this.imageElement.crossOrigin = 'anonymous'; // 🔧 FIX: Allow canvas access for SIFT matching\n      \n      return new Promise((resolve, reject) => {\n        this.imageElement.onload = () => {\n          this.imageLoaded = true;\n          console.log(`Image loaded: ${this.imageElement.width}x${this.imageElement.height}`);\n\n          // 根据preserveView参数决定是否重置视图\n          if (!preserveView) {\n            // 🔧 FIX: Use safe fit to screen to prevent resize loops\n            this.safeFitToScreen();\n            console.log('重置视图到适合屏幕');\n          } else {\n            console.log('保持当前视图状态');\n          }\n\n          // 注意：不再自动清空标注点，让外部调用者决定是否需要清空\n          // this.clearKeypoints(); // 移除这行\n\n          // 渲染\n          this.render();\n\n          // 🔧 NEW: 图像加载完成后解锁，允许auto-save\n          this.setImageSwitchLock(false);\n\n          resolve();\n        };\n        \n        this.imageElement.onerror = () => {\n          // 🔧 FIX: 出错时解锁\n          this.setImageSwitchLock(false);\n          reject(new Error('Failed to load image'));\n        };\n        \n        this.imageElement.src = imageURL;\n      });\n      \n    } catch (error) {\n      console.error('Error loading image:', error);\n      // 🔧 FIX: 出错时解锁\n      this.setImageSwitchLock(false);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 ENHANCED: Safe fit to screen with loop prevention\n   */\n  safeFitToScreen() {\n    // Prevent recursive fit-to-screen calls\n    if (this.resizeState.fittingToScreen) {\n      console.debug('fitToScreen already in progress, skipping');\n      return;\n    }\n    \n    this.resizeState.fittingToScreen = true;\n    \n    try {\n      this.fitToScreen();\n    } finally {\n      // Reset flag after processing\n      setTimeout(() => {\n        this.resizeState.fittingToScreen = false;\n      }, 50);\n    }\n  }\n\n  /**\n   * 适应屏幕尺寸 - Enhanced with stability checks\n   */\n  fitToScreen() {\n    if (!this.imageElement || !this.imageLoaded) return;\n    \n    const canvasWidth = this.canvas.width;\n    const canvasHeight = this.canvas.height;\n    const imageWidth = this.imageElement.width;\n    const imageHeight = this.imageElement.height;\n    \n    // 🔧 FIX: Validate canvas and image dimensions\n    if (canvasWidth <= 0 || canvasHeight <= 0 || imageWidth <= 0 || imageHeight <= 0) {\n      console.warn('Invalid dimensions for fit to screen, skipping');\n      return;\n    }\n    \n    // 计算缩放比例（保持宽高比）\n    const scaleX = (canvasWidth * 0.9) / imageWidth;\n    const scaleY = (canvasHeight * 0.9) / imageHeight;\n    const scale = Math.min(scaleX, scaleY);\n    \n    // 🔧 FIX: Add scale change detection to prevent unnecessary updates\n    const newScale = Math.max(this.options.minZoom, Math.min(this.options.maxZoom, scale));\n    const scaleChange = Math.abs(newScale - this.state.scale);\n    \n    // Only update if scale change is significant (more than 1%)\n    if (scaleChange > 0.01) {\n      this.state.scale = newScale;\n      \n      // 居中显示\n      this.state.translateX = (canvasWidth - imageWidth * this.state.scale) / 2;\n      this.state.translateY = (canvasHeight - imageHeight * this.state.scale) / 2;\n      \n      this.updateZoomInfo();\n      console.log(`Fit to screen: scale=${this.state.scale.toFixed(2)} (change: ${scaleChange.toFixed(3)})`);\n    } else {\n      console.debug(`Scale change too small (${scaleChange.toFixed(3)}), skipping update`);\n    }\n  }\n\n  /**\n   * 重置视图\n   */\n  resetView() {\n    if (!this.imageElement || !this.imageLoaded) return;\n    \n    this.state.scale = 1;\n    this.state.translateX = 0;\n    this.state.translateY = 0;\n    \n    this.updateZoomInfo();\n    this.render();\n  }\n\n  /**\n   * 清空图像和重置视图 - 用于植物切换时完全清空工作区\n   */\n  clearImage() {\n    console.log('清空图像和重置视图');\n    \n    // 🔧 NEW: 植物切换时中断所有方向相关模式\n    this.interruptAllDirectionModes('plant_switch');\n    \n    // 清空图像相关状态\n    this.currentImage = null;\n    this.imageElement = null;\n    this.imageLoaded = false;\n    \n    // 重置视图状态\n    this.state.scale = 1;\n    this.state.translateX = 0;\n    this.state.translateY = 0;\n    \n    // 🔧 FIX: 清空标注点但不触发自动保存（防止覆盖已保存的数据）\n    this.clearKeypointsWithoutSave();\n    \n    // 🔧 FIX: Additional safety - clear any keypoint labels that might remain\n    this.clearKeypointLabels();\n    \n    // 更新显示\n    this.updateZoomInfo();\n    this.render(); // 现在会显示占位符而不是图像和标注点\n  }\n\n  /**\n   * 渲染Canvas\n   */\n  render() {\n    // 清空Canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    if (!this.imageElement || !this.imageLoaded) {\n      this.renderPlaceholder();\n      return;\n    }\n    \n    // 保存Canvas状态\n    this.ctx.save();\n    \n    // 应用变换\n    this.ctx.translate(this.state.translateX, this.state.translateY);\n    this.ctx.scale(this.state.scale, this.state.scale);\n    \n    // 绘制图像\n    this.ctx.drawImage(this.imageElement, 0, 0);\n    \n    // 恢复Canvas状态\n    this.ctx.restore();\n    \n    // 🔧 NEW: 如果在校准预览模式，渲染校准可视化\n    if (this.calibrationPreviewState?.isActive) {\n      this.renderCalibrationPreview();\n    } else {\n      // 正常模式：绘制标注点\n      this.renderKeypoints();\n    }\n    \n    // 绘制自定义标注\n    this.renderCustomAnnotations();\n  }\n\n  /**\n   * 渲染占位符\n   */\n  renderPlaceholder() {\n    const centerX = this.canvas.width / 2;\n    const centerY = this.canvas.height / 2;\n    \n    this.ctx.fillStyle = '#f3f4f6';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = '#6b7280';\n    this.ctx.font = '16px Inter, sans-serif';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('Please choose image to annotate', centerX, centerY);\n  }\n\n  /**\n   * 渲染标注点（统一版本，支持自定义类型）\n   */\n  renderKeypoints() {\n    // 🔧 FIX: Don't render keypoints when no image is loaded to prevent \"ghost\" annotations\n    if (!this.imageElement || !this.imageLoaded) {\n      console.log('[AnnotationTool] Skipping keypoint render - no image loaded');\n      return;\n    }\n    \n    // 清除所有标签元素\n    this.clearKeypointLabels();\n    \n    // 获取当前的显示策略\n    const displayStrategy = this.getKeypointDisplayStrategy();\n    \n    // 渲染已存在的标注点\n    this.keypoints.forEach((keypoint, index) => {\n      const screenPos = this.imageToScreen(keypoint.x, keypoint.y);\n      \n      // 🔄 NEW: 统一渲染系统 - 支持自定义类型\n      if (keypoint.annotationType === 'custom') {\n        this.renderCustomKeypoint(keypoint, screenPos, displayStrategy);\n      } else {\n        // 将任何非custom标注兜底视为内置regular类型（迁移后极少出现）\n        const fallback = { ...keypoint, annotationType: 'custom', customTypeId: 'builtin-regular-keypoint' };\n        this.renderCustomKeypoint(fallback, screenPos, displayStrategy);\n      }\n    });\n    \n    // 渲染拖拽预览\n    if (this.state.isDirectionDragging && this.state.previewKeypoint) {\n      const previewPos = this.imageToScreen(this.state.previewKeypoint.x, this.state.previewKeypoint.y);\n      const direction = this.state.previewKeypoint.direction;\n      const fillColor = direction === 'left' ? this.options.keypointLeftColor : this.options.keypointRightColor;\n      \n      // 半透明预览\n      this.ctx.globalAlpha = 0.7;\n      this.renderSingleKeypoint(previewPos.x, previewPos.y, fillColor, '?', direction, displayStrategy);\n      this.ctx.globalAlpha = 1.0;\n      \n      // 绘制拖拽指示器\n      this.renderDragIndicator();\n    }\n    \n    // 渲染自定义区域拖拽预览\n    if (this.state.isCustomRegionDragging) {\n      this.renderCustomRegionPreview();\n    }\n    \n    // 渲染方向选择指引\n    if (this.state.isDirectionSelectionMode && this.state.selectedKeypoint && this.state.directionSelectionPoint) {\n      this.renderDirectionSelectionGuide();\n    }\n    \n    // 更新缩放级别指示器\n    this.updateZoomIndicator(displayStrategy);\n    \n    // 更新标注点大小信息\n    this.updateAnnotationSizeInfo(displayStrategy);\n  }\n\n  /**\n   * 🔄 NEW: 渲染常规标注点\n   */\n  renderRegularKeypoint(keypoint, screenPos, displayStrategy, index) {\n    // 确定颜色（根据方向和选中状态）\n    const isHovered = this.hoveredKeypoint === keypoint;\n    const isSelected = this.state.selectedKeypoint === keypoint;\n    let fillColor;\n    \n    if (isSelected) {\n      fillColor = this.options.keypointSelectedColor;\n    } else if (isHovered) {\n      fillColor = this.options.keypointHoverColor;\n    } else if (keypoint.directionType === 'angle' || typeof keypoint.direction === 'number') {\n      // 角度类型使用特殊颜色\n      fillColor = '#00aa00'; // 绿色表示已设置角度\n    } else if (keypoint.direction === 'left') {\n      fillColor = this.options.keypointLeftColor;\n    } else if (keypoint.direction === 'right') {\n      fillColor = this.options.keypointRightColor;\n    } else {\n      // 无方向标注点使用紫色\n      fillColor = '#9333ea'; // 紫色表示无方向\n    }\n    \n    // 使用标注点的序号，如果没有则使用索引+1作为后备\n    const displayOrder = keypoint.order || (index + 1);\n    \n    this.renderSingleKeypoint(screenPos.x, screenPos.y, fillColor, displayOrder, keypoint.direction, displayStrategy, keypoint);\n\n    // 🔧 NEW: 绘制多方向箭头（如果有多个方向）\n    if (keypoint.directions && keypoint.directions.length > 1) {\n      this.renderMultipleDirections(keypoint);\n    } else {\n      // 绘制单一方向箭头（支持所有类型的方向）\n      this.renderDirectionIndicator(screenPos.x, screenPos.y, keypoint.direction, keypoint);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 渲染自定义标注点\n   */\n  renderCustomKeypoint(keypoint, screenPos, displayStrategy) {\n    const customType = this.getCustomType(keypoint.customTypeId);\n    if (!customType) {\n      console.warn(`Custom type ${keypoint.customTypeId} not found`);\n      return;\n    }\n    \n    // 确定透明度\n    const isHovered = this.hoveredKeypoint === keypoint;\n    const isSelected = this.state.selectedKeypoint === keypoint;\n    let alpha = 1;\n    \n    if (isSelected) {\n      alpha = 0.9;\n    } else if (isHovered) {\n      alpha = 0.8;\n    }\n    \n    this.ctx.save();\n    this.ctx.globalAlpha = alpha;\n    \n    if (keypoint.width && keypoint.height) {\n      // 渲染区域标注\n      this.renderCustomRegion(keypoint, screenPos, customType, displayStrategy);\n    } else {\n      // 渲染点标注\n      this.renderCustomPoint(keypoint, screenPos, customType, displayStrategy);\n    }\n    \n    this.ctx.restore();\n  }\n  \n  /**\n   * 🔄 NEW: 渲染自定义点标注\n   */\n  renderCustomPoint(keypoint, screenPos, customType, displayStrategy) {\n    // 绘制点\n    this.ctx.beginPath();\n    this.ctx.arc(screenPos.x, screenPos.y, displayStrategy.radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = customType.color;\n    this.ctx.fill();\n    \n    // 绘制边框\n    this.ctx.strokeStyle = '#ffffff';\n    this.ctx.lineWidth = displayStrategy.borderWidth;\n    this.ctx.stroke();\n    \n    // 绘制标签\n    if (displayStrategy.showInternalLabel) {\n      this.ctx.fillStyle = '#ffffff';\n      this.ctx.font = `bold ${displayStrategy.fontSize}px Arial`;\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(keypoint.order.toString(), screenPos.x, screenPos.y);\n    } else if (displayStrategy.showExternalLabel) {\n      this.renderCustomPointLabel(keypoint, screenPos, customType, displayStrategy);\n    }\n\n    // 绘制方向指示（默认开启；仅当显式为 false 时关闭）\n    if (!(customType && customType.metadata && customType.metadata.isDirectional === false)) {\n      this.renderDirectionIndicator(screenPos.x, screenPos.y, keypoint.direction, keypoint);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 渲染自定义区域标注\n   */\n  renderCustomRegion(keypoint, screenPos, customType, displayStrategy) {\n    // 计算区域屏幕坐标\n    const bottomRightScreen = this.imageToScreen(\n      keypoint.x + keypoint.width,\n      keypoint.y + keypoint.height\n    );\n    \n    const screenWidth = bottomRightScreen.x - screenPos.x;\n    const screenHeight = bottomRightScreen.y - screenPos.y;\n    \n    // 绘制填充区域\n    this.ctx.fillStyle = customType.color;\n    this.ctx.globalAlpha = 0.2;\n    this.ctx.fillRect(screenPos.x, screenPos.y, screenWidth, screenHeight);\n    \n    // 绘制边框\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.strokeStyle = customType.color;\n    this.ctx.lineWidth = displayStrategy.borderWidth;\n    this.ctx.strokeRect(screenPos.x, screenPos.y, screenWidth, screenHeight);\n    \n    // 绘制标签（在中心）\n    const centerX = screenPos.x + screenWidth / 2;\n    const centerY = screenPos.y + screenHeight / 2;\n    \n    if (displayStrategy.showInternalLabel && Math.min(screenWidth, screenHeight) > 20) {\n      this.ctx.fillStyle = customType.color;\n      this.ctx.font = `bold ${displayStrategy.fontSize}px Arial`;\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(keypoint.order.toString(), centerX, centerY);\n    }\n    \n    if (displayStrategy.showExternalLabel) {\n      this.renderCustomRegionLabel(keypoint, { x: centerX, y: screenPos.y }, customType, displayStrategy);\n    }\n\n    // 绘制方向指示（矩形中心为锚点；默认开启，除非 isDirectional === false）\n    if (!(customType && customType.metadata && customType.metadata.isDirectional === false)) {\n      this.renderDirectionIndicator(\n        centerX,\n        centerY,\n        keypoint.direction,\n        keypoint\n      );\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 渲染自定义点标签\n   */\n  renderCustomPointLabel(keypoint, screenPos, customType, displayStrategy) {\n    const labelY = screenPos.y - displayStrategy.radius - displayStrategy.labelOffset;\n    \n    this.ctx.save();\n    \n    // 创建标签文本\n    const labelText = `${customType.name} #${keypoint.order}`;\n    this.ctx.font = `${displayStrategy.fontSize}px Arial`;\n    const textMetrics = this.ctx.measureText(labelText);\n    const textWidth = textMetrics.width;\n    \n    // 绘制标签背景\n    const padding = 4;\n    this.ctx.fillStyle = customType.color;\n    this.ctx.fillRect(\n      screenPos.x - textWidth / 2 - padding,\n      labelY - displayStrategy.fontSize / 2 - padding,\n      textWidth + padding * 2,\n      displayStrategy.fontSize + padding * 2\n    );\n    \n    // 绘制标签文本\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(labelText, screenPos.x, labelY);\n    \n    this.ctx.restore();\n  }\n  \n  /**\n   * 🔄 NEW: 渲染自定义区域标签\n   */\n  renderCustomRegionLabel(keypoint, screenPos, customType, displayStrategy) {\n    const labelY = screenPos.y - displayStrategy.labelOffset;\n    \n    this.ctx.save();\n    \n    // 创建标签文本\n    const labelText = `${customType.name} #${keypoint.order}`;\n    this.ctx.font = `${displayStrategy.fontSize}px Arial`;\n    const textMetrics = this.ctx.measureText(labelText);\n    const textWidth = textMetrics.width;\n    \n    // 绘制标签背景\n    const padding = 4;\n    this.ctx.fillStyle = customType.color;\n    this.ctx.fillRect(\n      screenPos.x - textWidth / 2 - padding,\n      labelY - displayStrategy.fontSize / 2 - padding,\n      textWidth + padding * 2,\n      displayStrategy.fontSize + padding * 2\n    );\n    \n    // 绘制标签文本\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(labelText, screenPos.x, labelY);\n    \n    this.ctx.restore();\n  }\n  \n  /**\n   * 🔄 NEW: 渲染自定义区域拖拽预览\n   */\n  renderCustomRegionPreview() {\n    if (!this.state.isCustomRegionDragging) return;\n    \n    const startScreenPos = this.state.customRegionStartPoint;\n    const currentScreenPos = this.state.customRegionCurrentPoint;\n    \n    if (!startScreenPos || !currentScreenPos) return;\n    \n    const customType = this.customAnnotationManager?.getCurrentCustomType();\n    if (!customType || customType.type !== 'region') return;\n    \n    const left = Math.min(startScreenPos.x, currentScreenPos.x);\n    const top = Math.min(startScreenPos.y, currentScreenPos.y);\n    const width = Math.abs(currentScreenPos.x - startScreenPos.x);\n    const height = Math.abs(currentScreenPos.y - startScreenPos.y);\n    \n    this.ctx.save();\n    this.ctx.globalAlpha = 0.5;\n    \n    // 绘制预览填充\n    this.ctx.fillStyle = customType.color;\n    this.ctx.fillRect(left, top, width, height);\n    \n    // 绘制预览边框\n    this.ctx.strokeStyle = customType.color;\n    this.ctx.lineWidth = 2;\n    this.ctx.setLineDash([5, 5]);\n    this.ctx.strokeRect(left, top, width, height);\n    \n    // 绘制尺寸信息\n    this.ctx.globalAlpha = 0.8;\n    this.ctx.fillStyle = '#000000';\n    this.ctx.font = '12px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    \n    const sizeText = `${Math.round(width)}x${Math.round(height)}`;\n    this.ctx.fillText(sizeText, left + width/2, top + height/2);\n    \n    this.ctx.restore();\n  }\n  \n  /**\n   * 渲染单个标注点\n   */\n  renderSingleKeypoint(x, y, fillColor, label, direction, strategy, keypoint = null) {\n    // 绘制标注点圆圈\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, strategy.radius, 0, 2 * Math.PI);\n    \n    // 填充\n    this.ctx.fillStyle = fillColor;\n    this.ctx.fill();\n    \n    // 边框\n    this.ctx.strokeStyle = this.options.keypointBorderColor;\n    this.ctx.lineWidth = strategy.borderWidth;\n    this.ctx.stroke();\n    \n    // 根据显示策略绘制标签\n    if (strategy.showInternalLabel) {\n      // 在标注点内部显示序号\n      this.ctx.fillStyle = this.options.keypointBorderColor;\n      this.ctx.font = `bold ${strategy.fontSize}px Inter, sans-serif`;\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(label.toString(), x, y);\n      \n      // 不再在标注点上方显示方向符号，改为使用虚线箭头\n      \n    } else if (strategy.showExternalLabel) {\n      // 在标注点外部显示标签\n      this.createExternalLabel(x, y, label, direction, fillColor, strategy);\n      \n    } else if (strategy.showMinimalMode) {\n      // 极小模式：只显示标注点，悬停时显示详细信息\n      if (keypoint && this.hoveredKeypoint === keypoint) {\n        this.createTooltip(x, y, label, direction, keypoint);\n      }\n    }\n  }\n\n  /**\n   * 渲染拖拽指示器\n   */\n  renderDragIndicator() {\n    if (!this.state.dragStartPoint || !this.state.currentDragPoint) return;\n    \n    const startX = this.state.dragStartPoint.x;\n    const startY = this.state.dragStartPoint.y;\n    const currentX = this.state.currentDragPoint.x;\n    const currentY = this.state.currentDragPoint.y;\n    \n    // 计算拖拽距离和方向\n    const deltaX = currentX - startX;\n    const distance = Math.sqrt(deltaX * deltaX + (currentY - startY) * (currentY - startY));\n    \n    if (distance >= this.options.directionThreshold) {\n      // 绘制拖拽线条\n      this.ctx.strokeStyle = deltaX < 0 ? this.options.keypointLeftColor : this.options.keypointRightColor;\n      this.ctx.lineWidth = 3;\n      this.ctx.setLineDash([5, 5]);\n      \n      this.ctx.beginPath();\n      this.ctx.moveTo(startX, startY);\n      this.ctx.lineTo(currentX, currentY);\n      this.ctx.stroke();\n      \n      // 重置线条样式\n      this.ctx.setLineDash([]);\n      \n      // 绘制方向文字\n      const midX = (startX + currentX) / 2;\n      const midY = (startY + currentY) / 2 - 20;\n      \n      this.ctx.fillStyle = deltaX < 0 ? this.options.keypointLeftColor : this.options.keypointRightColor;\n      this.ctx.font = 'bold 14px Inter, sans-serif';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(deltaX < 0 ? '← Left' : 'Right →', midX, midY);\n    }\n  }\n\n  /**\n   * 图像坐标转屏幕坐标\n   */\n  imageToScreen(imageX, imageY) {\n    return {\n      x: imageX * this.state.scale + this.state.translateX,\n      y: imageY * this.state.scale + this.state.translateY\n    };\n  }\n\n  /**\n   * 屏幕坐标转图像坐标\n   */\n  screenToImage(screenX, screenY) {\n    return {\n      x: (screenX - this.state.translateX) / this.state.scale,\n      y: (screenY - this.state.translateY) / this.state.scale\n    };\n  }\n\n  /**\n   * 获取鼠标相对Canvas的位置\n   */\n  getMousePos(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    };\n  }\n\n  /**\n   * 🔧 NEW: Calculate the visible image bounds in screen coordinates\n   */\n  getVisibleImageBounds() {\n    if (!this.imageElement || !this.imageLoaded) {\n      return null;\n    }\n\n    // Image dimensions in screen space\n    const imageWidth = this.imageElement.width * this.state.scale;\n    const imageHeight = this.imageElement.height * this.state.scale;\n    \n    // Image position in screen space (top-left corner)\n    const imageLeft = this.state.translateX;\n    const imageTop = this.state.translateY;\n    \n    // Calculate visible bounds (intersection with canvas)\n    const visibleBounds = {\n      left: Math.max(0, imageLeft),\n      top: Math.max(0, imageTop),\n      right: Math.min(this.canvas.width, imageLeft + imageWidth),\n      bottom: Math.min(this.canvas.height, imageTop + imageHeight),\n      // Also store the full image bounds for reference\n      imageLeft,\n      imageTop,\n      imageRight: imageLeft + imageWidth,\n      imageBottom: imageTop + imageHeight\n    };\n    \n    // 🔧 DEBUG: Log bounds occasionally for troubleshooting\n    if (Math.random() < 0.001) { // 0.1% chance to log\n      console.log('[AnnotationTool] Image bounds debug:', {\n        imageSize: { width: this.imageElement.width, height: this.imageElement.height },\n        canvasSize: { width: this.canvas.width, height: this.canvas.height },\n        scale: this.state.scale,\n        translate: { x: this.state.translateX, y: this.state.translateY },\n        visibleBounds,\n        imageLoaded: this.imageLoaded\n      });\n    }\n    \n    return visibleBounds;\n  }\n\n  /**\n   * 🔧 NEW: Check if a screen point is within the visible image area\n   */\n  isPointInVisibleImage(screenX, screenY) {\n    const bounds = this.getVisibleImageBounds();\n    if (!bounds) {\n      return false;\n    }\n    \n    // Check if point is within the visible image area (intersection of image and canvas)\n    return screenX >= bounds.left && \n           screenX <= bounds.right && \n           screenY >= bounds.top && \n           screenY <= bounds.bottom;\n  }\n\n  /**\n   * 🔧 NEW: Check if image coordinates are valid and within image boundaries\n   */\n  isImageCoordinateValid(imageX, imageY) {\n    if (!this.imageElement || !this.imageLoaded) {\n      return false;\n    }\n    \n    return imageX >= 0 && \n           imageX <= this.imageElement.width && \n           imageY >= 0 && \n           imageY <= this.imageElement.height;\n  }\n\n  /**\n   * 🔧 NEW: Comprehensive bounds checking for annotation creation\n   */\n  canCreateAnnotationAt(screenX, screenY) {\n    // Check if image is loaded\n    if (!this.imageElement || !this.imageLoaded) {\n      console.warn('[AnnotationTool] Cannot create annotation: no image loaded');\n      return false;\n    }\n\n    // Check if point is within visible image area\n    if (!this.isPointInVisibleImage(screenX, screenY)) {\n      console.warn('[AnnotationTool] Cannot create annotation: position is outside visible image area');\n      return false;\n    }\n\n    // Double-check with image coordinates\n    const imagePos = this.screenToImage(screenX, screenY);\n    if (!this.isImageCoordinateValid(imagePos.x, imagePos.y)) {\n      console.warn('[AnnotationTool] Cannot create annotation: position is outside image boundaries');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 🔧 NEW: Silent bounds checking for cursor state (no console warnings)\n   */\n  canAnnotateAtSilent(screenX, screenY) {\n    // Check if image is loaded\n    if (!this.imageElement || !this.imageLoaded) {\n      return false;\n    }\n\n    // Check if point is within visible image area\n    if (!this.isPointInVisibleImage(screenX, screenY)) {\n      return false;\n    }\n\n    // Double-check with image coordinates\n    const imagePos = this.screenToImage(screenX, screenY);\n    if (!this.isImageCoordinateValid(imagePos.x, imagePos.y)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 🔧 DEBUG: Manual bounds checking for troubleshooting\n   */\n  debugBoundsAt(screenX, screenY) {\n    console.log('[AnnotationTool] Debug bounds check at:', { screenX, screenY });\n    \n    if (!this.imageElement || !this.imageLoaded) {\n      console.log('❌ Image not loaded');\n      return false;\n    }\n    \n    const bounds = this.getVisibleImageBounds();\n    console.log('📐 Visible bounds:', bounds);\n    \n    const inVisibleArea = this.isPointInVisibleImage(screenX, screenY);\n    console.log('🎯 In visible area:', inVisibleArea);\n    \n    const imagePos = this.screenToImage(screenX, screenY);\n    const validCoords = this.isImageCoordinateValid(imagePos.x, imagePos.y);\n    console.log('📍 Image coords:', imagePos, 'Valid:', validCoords);\n    \n    const finalResult = this.canAnnotateAtSilent(screenX, screenY);\n    console.log('✅ Final result:', finalResult);\n    \n    return finalResult;\n  }\n\n  /**\n   * 处理鼠标按下\n   */\n  async handleMouseDown(event) {\n    console.log('[调试] handleMouseDown 被调用', {\n      button: event.button,\n      timestamp: Date.now(),\n      target: event.target.tagName,\n      isTrusted: event.isTrusted,\n      type: event.type,\n      eventPhase: event.eventPhase,\n      bubbles: event.bubbles,\n      cancelable: event.cancelable,\n      stackTrace: new Error().stack\n    });\n\n    const mousePos = this.getMousePos(event);\n\n    if (event.button === 0) { // 左键\n      if (event.shiftKey) {\n        // Shift + 左键：开始平移\n        this.state.isPanning = true;\n        this.state.lastPanPoint = mousePos;\n        this.canvas.style.cursor = 'grabbing';\n      } else {\n        // 检查是否点击了自定义标注\n        const clickedCustomAnnotation = this.getCustomAnnotationAt(mousePos);\n        \n        if (clickedCustomAnnotation) {\n          // 处理自定义标注点击\n          this.handleCustomAnnotationClick(clickedCustomAnnotation, mousePos);\n          \n          // 开始拖拽自定义标注\n          this.startCustomAnnotationDrag(clickedCustomAnnotation, mousePos);\n          return;\n        }\n        \n        // 检查是否点击了标注点\n        const clickedKeypoint = this.getKeypointAt(mousePos);\n        \n        if (clickedKeypoint) {\n          console.log('[调试] 点击了标注点', {\n            clickedKeypoint: clickedKeypoint.order,\n            isDirectionSelectionMode: this.state.isDirectionSelectionMode,\n            selectedKeypoint: this.state.selectedKeypoint?.order,\n            isSameKeypoint: this.state.selectedKeypoint === clickedKeypoint\n          });\n\n          // 如果处于方向选择模式且点击的是已选中的标注点，处理方向选择\n          if (this.state.isDirectionSelectionMode && this.state.selectedKeypoint === clickedKeypoint) {\n            console.log('[调试] 处理方向选择');\n            try {\n              await this.handleDirectionSelection(mousePos);\n            } catch (error) {\n              console.error('[方向选择] 处理方向选择失败:', error);\n            }\n            return;\n          }\n\n          // 如果不是在处理方向选择，则开始拖拽标注点\n          // 但是首先检查这是否是一个点击（而不是拖拽）\n          this.draggedKeypoint = clickedKeypoint;\n          this.state.dragStartPoint = mousePos;\n          this.state.mouseDownTime = Date.now(); // 记录按下时间\n          this.state.wasDraggedDuringSession = false; // 重置拖拽标记\n          this.canvas.style.cursor = 'grabbing';\n\n          // 重要：点击了标注点就直接返回，不要继续执行后面的逻辑\n          return;\n        } else {\n          // 如果处于方向选择模式，处理方向选择\n          if (this.state.isDirectionSelectionMode) {\n            // 无论是自动模式还是手动模式，点击空白区域都应该设置方向\n            console.log('[调试] 方向选择模式下点击，处理方向选择');\n            try {\n              await this.handleDirectionSelection(mousePos);\n            } catch (error) {\n              console.error('[方向选择] 处理方向选择失败:', error);\n            }\n            return;\n          }\n\n          // 🔧 FIX: Check if image is loaded before allowing annotation creation\n          if (!this.imageElement || !this.imageLoaded) {\n            console.warn('[AnnotationTool] Cannot create annotation: no image loaded');\n            if (window.PlantAnnotationTool?.showError) {\n              window.PlantAnnotationTool.showError('No Image Loaded', 'Please select and load an image before creating annotations.');\n            }\n            return;\n          }\n\n          // 检查是否处于自定义标注模式\n          if (this.customAnnotationManager && this.customAnnotationManager.isInCustomMode()) {\n            const customType = this.customAnnotationManager.getCurrentCustomType();\n            if (!customType) {\n              console.warn('No custom type selected');\n              return;\n            }\n            if (customType.type === 'region') {\n              // 区域类型：走自定义区域流程\n              this.handleCustomAnnotationMode(mousePos);\n              return;\n            }\n            if (customType.type === 'point') {\n              // 点类型：允许拖拽设置方向或简单点击后进入方向选择\n              this.state.blankAreaClickStart = mousePos;\n              this.state.mouseDownTime = Date.now();\n              this.state.wasDraggedDuringSession = false;\n              return;\n            }\n          }\n\n          // 🚫 禁止在未选择 Annotation Type 时创建标注\n          console.warn('[AnnotationTool] Annotation disabled: please select an Annotation Type to start annotating.');\n          if (window.PlantAnnotationTool?.showError) {\n            window.PlantAnnotationTool.showError('Annotation Disabled', 'Please open Annotation Type Setting and select a type before annotating.');\n          }\n          return;\n        }\n      }\n    } else if (event.button === 2) { // 右键\n      if (this.state.isAutoDirectionMode) {\n        // 右键暂停自动化方向升级模式\n        this.pauseAutoDirectionMode();\n      } else if (this.state.isDirectionSelectionMode) {\n        // 右键取消方向选择\n        this.cancelDirectionSelection(true); // 强制退出\n      }\n    } else if (event.button === 1) { // 🔧 NEW: 中键 - 方向数量选择\n      this.handleMiddleMouseButton(mousePos);\n    }\n  }\n\n  /**\n   * 处理鼠标移动\n   */\n  handleMouseMove(event) {\n    const mousePos = this.getMousePos(event);\n    \n    if (this.state.isPanning && this.state.lastPanPoint) {\n      // 平移图像\n      const deltaX = mousePos.x - this.state.lastPanPoint.x;\n      const deltaY = mousePos.y - this.state.lastPanPoint.y;\n      \n      this.state.translateX += deltaX;\n      this.state.translateY += deltaY;\n      \n      this.state.lastPanPoint = mousePos;\n      this.render();\n      \n    } else if (this.draggedKeypoint) {\n      // 拖拽标注点\n      const imagePos = this.screenToImage(mousePos.x, mousePos.y);\n      \n      // 🔧 FIX: Constrain dragged keypoint to stay within image boundaries\n      if (this.isImageCoordinateValid(imagePos.x, imagePos.y)) {\n        this.draggedKeypoint.x = imagePos.x;\n        this.draggedKeypoint.y = imagePos.y;\n        \n        // 标记已经进行了拖拽\n        this.state.wasDraggedDuringSession = true;\n        \n        this.render();\n        \n        // 通知预览管理器显示被拖动点对应的预览\n        this.notifyDraggedKeypointPreview(this.draggedKeypoint);\n      }\n      // If the position is invalid, don't update the keypoint position (ignore the movement)\n      \n    } else if (this.customAnnotationDragState.isDragging) {\n      // 拖拽自定义标注\n      this.updateCustomAnnotationDrag(mousePos);\n\n    } else if (this.state.blankAreaClickStart) {\n      // 检查是否开始了拖拽（从空白区域点击开始）\n      const distance = Math.sqrt(\n        Math.pow(mousePos.x - this.state.blankAreaClickStart.x, 2) +\n        Math.pow(mousePos.y - this.state.blankAreaClickStart.y, 2)\n      );\n\n      if (distance >= this.options.directionThreshold) {\n        // 距离足够，标记为拖拽状态\n        this.state.wasDraggedDuringSession = true;\n\n        // 自定义点类型也支持方向拖拽\n        this.startDirectionAnnotation(this.state.blankAreaClickStart);\n        this.state.blankAreaClickStart = null; // 清除空白点击状态\n        this.updateDirectionDragging(mousePos);\n      }\n\n    } else if (this.state.isDirectionDragging) {\n      // 方向拖拽处理\n      this.updateDirectionDragging(mousePos);\n\n    } else if (this.state.isCustomRegionDragging) {\n      // 自定义区域拖拽处理\n      this.updateCustomRegionDrag(mousePos);\n\n    } else if (this.state.isDirectionSelectionMode) {\n      // 方向选择模式下的鼠标移动\n      this.state.directionSelectionPoint = mousePos;\n      \n      // 🔧 FIX: Proper cursor management for direction selection mode\n      let directionCursor = 'crosshair'; // Default for direction selection\n      \n      // Check if we're hovering over the selected keypoint for better UX\n      if (this.state.selectedKeypoint) {\n        const keypointScreen = this.imageToScreen(\n          this.state.selectedKeypoint.x,\n          this.state.selectedKeypoint.y\n        );\n        const distance = Math.sqrt(\n          Math.pow(mousePos.x - keypointScreen.x, 2) +\n          Math.pow(mousePos.y - keypointScreen.y, 2)\n        );\n        \n        // If hovering over the selected keypoint, show pointer cursor\n        if (distance <= (this.options.baseKeypointRadius * 2)) {\n          directionCursor = 'pointer';\n        }\n      }\n      \n      // Update cursor for direction selection mode\n      if (this.canvas.style.cursor !== directionCursor) {\n        this.canvas.style.cursor = directionCursor;\n      }\n      \n      this.render();\n      \n    } else {\n      // 检查是否悬停在自定义标注上\n      const hoveredCustomAnnotation = this.getCustomAnnotationAt(mousePos);\n      \n      if (hoveredCustomAnnotation) {\n        // 悬停在自定义标注上\n        this.canvas.style.cursor = 'pointer';\n        \n        // 更新悬停状态\n        if (this.customAnnotationRenderer) {\n          this.customAnnotationRenderer.setHoveredAnnotation(hoveredCustomAnnotation);\n        }\n        \n        this.render();\n        return;\n      } else {\n        // 清除悬停状态\n        if (this.customAnnotationRenderer) {\n          this.customAnnotationRenderer.setHoveredAnnotation(null);\n        }\n      }\n      \n      // 检查悬停的标注点\n      const hoveredKeypoint = this.getKeypointAt(mousePos);\n      \n      // 🔧 FIX: Always check cursor state for better responsiveness\n      let newCursor = 'crosshair'; // Default cursor\n      \n      // 🔧 FIX: Special handling for auto direction mode\n      if (this.state.isAutoDirectionMode) {\n        // In auto direction mode, provide different cursor feedback\n        if (hoveredKeypoint) {\n          newCursor = 'pointer'; // Can click keypoints in auto mode\n        } else {\n          newCursor = 'crosshair'; // Allow normal interaction in auto mode\n        }\n      } else if (this.customAnnotationManager && this.customAnnotationManager.isInCustomMode()) {\n        // 🔧 FIX: Custom annotation mode - maintain crosshair cursor for annotation purposes\n        if (hoveredKeypoint) {\n          newCursor = 'pointer'; // Can still interact with existing keypoints\n        } else {\n          // Check if mouse is within valid annotation area\n          const canAnnotate = this.canAnnotateAtSilent(mousePos.x, mousePos.y);\n          newCursor = canAnnotate ? 'crosshair' : 'not-allowed';\n        }\n      } else {\n        // Normal mode cursor logic\n        if (hoveredKeypoint) {\n          newCursor = 'pointer';\n        } else {\n          // Check if mouse is within valid annotation area\n          const canAnnotate = this.canAnnotateAtSilent(mousePos.x, mousePos.y);\n          newCursor = canAnnotate ? 'crosshair' : 'not-allowed';\n        }\n      }\n      \n      // Update cursor if it changed\n      if (this.canvas.style.cursor !== newCursor) {\n        this.canvas.style.cursor = newCursor;\n      }\n      \n      // Update hovered keypoint and render if it changed\n      if (hoveredKeypoint !== this.hoveredKeypoint) {\n        this.hoveredKeypoint = hoveredKeypoint;\n        this.render();\n      }\n    }\n  }\n\n  /**\n   * 处理鼠标抬起\n   */\n  handleMouseUp(event) {\n    const mousePos = this.getMousePos(event);\n    \n    if (this.state.isPanning) {\n      this.state.isPanning = false;\n      this.state.lastPanPoint = null;\n      this.canvas.style.cursor = 'crosshair';\n    }\n    \n    // 检查是否是简单点击（没有拖拽）\n    if (this.draggedKeypoint) {\n      // 检查是否有实际移动\n      const startPos = this.state.dragStartPoint || mousePos;\n      const distance = Math.sqrt(\n        Math.pow(mousePos.x - startPos.x, 2) +\n        Math.pow(mousePos.y - startPos.y, 2)\n      );\n\n      // 检查是否在短时间内进行了拖拽操作\n      const currentTime = Date.now();\n      const timeSinceMouseDown = currentTime - (this.state.mouseDownTime || currentTime);\n      const wasDragged = this.state.wasDraggedDuringSession || false;\n\n      // 更严格的点击判断：距离小且时间短且没有拖拽过\n      if (distance < 8 && timeSinceMouseDown < 200 && !wasDragged) {\n        // 这是一个快速点击，不是拖拽\n        this.handleKeypointClick(this.draggedKeypoint);\n      } else {\n        // 这是拖拽，保存状态\n        this.saveState();\n        this.autoSaveCurrentImage();\n        \n        // 🔄 NEW: 实时同步 - 标注点移动\n        this.triggerRealTimeSync('MOVE_KEYPOINT', this.draggedKeypoint, this.state.dragStartPoint);\n      }\n\n      // 重置拖拽状态\n      this.draggedKeypoint = null;\n      this.state.wasDraggedDuringSession = false;\n      this.state.mouseDownTime = null;\n      this.canvas.style.cursor = 'crosshair';\n      this.restoreNormalPreview();\n    }\n    \n    // 检查是否是空白区域的简单点击（进入方向选择或创建点）\n    if (this.state.blankAreaClickStart) {\n      const distance = Math.sqrt(\n        Math.pow(mousePos.x - this.state.blankAreaClickStart.x, 2) +\n        Math.pow(mousePos.y - this.state.blankAreaClickStart.y, 2)\n      );\n\n      const currentTime = Date.now();\n      const timeSinceMouseDown = currentTime - (this.state.mouseDownTime || currentTime);\n      const wasDragged = this.state.wasDraggedDuringSession || false;\n\n      // 判断是否是简单点击：距离小、时间短、没有拖拽\n      if (distance < 8 && timeSinceMouseDown < 300 && !wasDragged) {\n        const isCustomPointMode = this.customAnnotationManager?.isInCustomMode() && this.customAnnotationManager.getCurrentCustomType()?.type === 'point';\n        if (isCustomPointMode) {\n          // 自定义点类型：创建无方向点，不自动进入方向选择\n          const imagePos = this.screenToImage(this.state.blankAreaClickStart.x, this.state.blankAreaClickStart.y);\n          const currentType = this.customAnnotationManager.getCurrentCustomType();\n          // 创建时不写入 direction 字段\n          const kp = this.addKeypointWithDirection(imagePos.x, imagePos.y, undefined, currentType.id);\n          if (kp) {\n            // 确保移除可能被默认赋值的 direction\n            delete kp.direction;\n            delete kp.directionType;\n            this.render();\n            this.autoSaveCurrentImage();\n          }\n        } else {\n          // 未选择自定义点类型：保留兼容路径（此前在mouseDown已阻止未选类型）\n          this.createNoDirectionKeypoint(this.state.blankAreaClickStart);\n        }\n      }\n\n      // 清除空白点击状态\n      this.state.blankAreaClickStart = null;\n      this.state.mouseDownTime = null;\n      this.state.wasDraggedDuringSession = false;\n    }\n\n    \n    // 完成自定义标注拖拽\n    if (this.customAnnotationDragState.isDragging) {\n      this.finishCustomAnnotationDrag();\n    }\n    \n    if (this.state.isDirectionDragging) {\n      // 完成方向标注\n      this.finishDirectionAnnotation();\n    }\n    \n    if (this.state.isCustomRegionDragging) {\n      // 完成自定义区域拖拽\n      this.finishCustomRegionDrag();\n    }\n  }\n\n  /**\n   * 创建无方向标注点\n   */\n  createNoDirectionKeypoint(mousePos) {\n    // 🚫 不允许在未选择 Annotation Type 的情况下创建“默认/regular”关键点\n    if (!this.customAnnotationManager || !this.customAnnotationManager.isInCustomMode()) {\n      if (window.PlantAnnotationTool?.showError) {\n        window.PlantAnnotationTool.showError('Annotation Disabled', 'Please select an Annotation Type before creating keypoints.');\n      }\n      return;\n    }\n\n    // 🔧 FIX: Comprehensive bounds checking for annotation creation\n    if (!this.canCreateAnnotationAt(mousePos.x, mousePos.y)) {\n      if (window.PlantAnnotationTool?.showError) {\n        window.PlantAnnotationTool.showError('Invalid Position', 'Annotations can only be placed within the image area. Please click directly on the image.');\n      }\n      return;\n    }\n\n    const imagePos = this.screenToImage(mousePos.x, mousePos.y);\n\n    // 在“类型模式”下，空白点击应该创建当前选中类型的标注\n    const currentType = this.customAnnotationManager.getCurrentCustomType();\n    if (!currentType) {\n      if (window.PlantAnnotationTool?.showError) {\n        window.PlantAnnotationTool.showError('No Type Selected', 'Please select an Annotation Type before annotating.');\n      }\n      return;\n    }\n\n    if (currentType.type === 'region') {\n      // 如果是矩形类型，启动统一的矩形拖拽流程\n      this.startUnifiedCustomRegionDrag(mousePos, currentType.id);\n      return;\n    }\n\n    // Keypoint 类型：使用类型默认角度\n    const direction = typeof currentType.metadata?.defaultAngle === 'number' ? currentType.metadata.defaultAngle : null;\n    const keypoint = this.addCustomPointAnnotation(imagePos.x, imagePos.y, currentType.id);\n    // addCustomPointAnnotation 内部已处理 defaultAngle 应用与保存/渲染/同步\n    return keypoint;\n  }\n\n  /**\n   * 选择关键点\n   */\n  selectKeypoint(keypoint) {\n    console.log('[调试] selectKeypoint 被调用', {\n      keypoint: keypoint.order,\n      currentDirection: keypoint.direction,\n      directionType: keypoint.directionType\n    });\n\n    // 🔧 BUG FIX: 确保标注点具有多方向支持\n    this.ensureMultiDirectionSupport(keypoint);\n\n    this.state.selectedKeypoint = keypoint;\n    this.state.isDirectionSelectionMode = true;\n    this.state.directionSelectionPoint = null;\n\n    console.log('[调试] 方向选择模式状态', {\n      isDirectionSelectionMode: this.state.isDirectionSelectionMode,\n      selectedKeypoint: this.state.selectedKeypoint?.order,\n      isAutoDirectionMode: this.state.isAutoDirectionMode\n    });\n\n    // 🔧 FIX: Set appropriate cursor for direction selection mode\n    this.canvas.style.cursor = 'crosshair';\n\n    // 通知预览管理器显示这个点的预览\n    this.notifySelectedKeypointPreview(keypoint);\n\n    this.render();\n    console.log(`Selected keypoint #${keypoint.order} for direction selection`);\n  }\n\n  /**\n   * 处理关键点点击\n   */\n  handleKeypointClick(keypoint) {\n    console.log('[调试] handleKeypointClick 被调用', {\n      keypoint: keypoint.order,\n      isAutoDirectionMode: this.state.isAutoDirectionMode,\n      isDirectionSelectionMode: this.state.isDirectionSelectionMode,\n      currentSelectedKeypoint: this.state.selectedKeypoint?.order\n    });\n\n    if (this.state.isAutoDirectionMode) {\n      // 自动化模式下，选择当前关键点\n      this.selectKeypoint(keypoint);\n    } else {\n      // 普通模式下，总是选择关键点进入方向选择模式\n      // 无论是否已经处于方向选择模式\n      this.selectKeypoint(keypoint);\n    }\n  }\n\n  /**\n   * 处理方向选择\n   */\n  async handleDirectionSelection(mousePos) {\n    console.log('[调试] handleDirectionSelection 被调用', {\n      selectedKeypoint: this.state.selectedKeypoint,\n      mousePos,\n      isAutoDirectionMode: this.state.isAutoDirectionMode\n    });\n\n    if (!this.state.selectedKeypoint) {\n      console.log('[调试] 没有选中的标注点，退出方向选择');\n      return;\n    }\n\n    const keypointScreen = this.imageToScreen(\n      this.state.selectedKeypoint.x,\n      this.state.selectedKeypoint.y\n    );\n\n    // 计算方向角度\n    const deltaX = mousePos.x - keypointScreen.x;\n    const deltaY = mousePos.y - keypointScreen.y;\n    const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n\n    // 标准化角度到 0-360 度\n    const normalizedAngle = (angle + 360) % 360;\n\n    // 🔧 NEW: 记录点击坐标\n    const imagePos = this.screenToImage(mousePos.x, mousePos.y);\n    const clickData = {\n      x: imagePos.x,\n      y: imagePos.y,\n      screenX: mousePos.x,\n      screenY: mousePos.y,\n      timestamp: Date.now()\n    };\n\n    console.log('[调试] 计算的角度信息', {\n      deltaX, deltaY, angle, normalizedAngle,\n      clickData,\n      keypointBefore: {...this.state.selectedKeypoint}\n    });\n\n    // 🔧 NEW: 支持多方向设置\n    if (this.state.selectedKeypoint.maxDirections > 1) {\n      // 多方向模式\n      const direction = { \n        angle: normalizedAngle, \n        type: 'angle',\n        clickPosition: clickData  // 🔧 NEW: 记录点击位置\n      };\n      \n      if (this.addDirectionToKeypoint(this.state.selectedKeypoint, direction)) {\n        // 🔧 FIX: Only increment counter after successful addition\n        this.state.directionsSet++;\n        \n        console.log(`[多方向] 设置方向 ${this.state.directionsSet}/${this.state.selectedKeypoint.maxDirections}: ${normalizedAngle.toFixed(1)}°`);\n        \n        // 更新进度显示\n        this.showMultiDirectionProgress();\n        \n        // 🔄 NEW: 实时同步 - 多方向编辑\n        this.triggerRealTimeSync('EDIT_DIRECTION', this.state.selectedKeypoint);\n        \n        // 🔧 FIX: Check actual directions count, not counter\n        if (this.state.selectedKeypoint.directions.length >= this.state.selectedKeypoint.maxDirections) {\n          console.log('[多方向] 所有方向设置完成');\n          this.finishMultiDirectionSetting();\n        }\n      }\n    } else {\n      // 单方向模式（原有逻辑）\n      // 更新关键点方向\n      const oldDirection = this.state.selectedKeypoint.direction;\n      this.state.selectedKeypoint.direction = normalizedAngle;\n      this.state.selectedKeypoint.directionType = 'angle'; // 标记为角度类型\n      \n      // 🔧 NEW: 记录点击坐标\n      this.state.selectedKeypoint.directionClick = clickData;\n      \n      // 同时更新directions数组以保持一致性\n      this.state.selectedKeypoint.directions = [{ \n        angle: normalizedAngle, \n        type: 'angle',\n        clickPosition: clickData  // 🔧 NEW: 记录点击位置\n      }];\n\n      console.log('[调试] 方向更新', {\n        keypointId: this.state.selectedKeypoint.id,\n        order: this.state.selectedKeypoint.order,\n        oldDirection,\n        newDirection: normalizedAngle,\n        clickData,\n        keypointAfter: {...this.state.selectedKeypoint}\n      });\n      \n      // 🔄 NEW: 实时同步 - 单方向编辑\n      this.triggerRealTimeSync('EDIT_DIRECTION', this.state.selectedKeypoint);\n      \n      // 🔧 ENHANCED: Handle both longitudinal and cross-sectional auto direction modes\n      if (this.state.isAutoDirectionMode) {\n        console.log('[调试] 自动模式，处理下一步:', this.autoDirectionMode);\n        \n        if (this.autoDirectionMode === 'cross-sectional') {\n          // Cross-sectional mode: process current point and advance\n          await this.handleCrossSectionalDirectionSet(normalizedAngle);\n        } else {\n          // Longitudinal mode: proceed to next keypoint in current image\n          this.selectNextAutoDirectionKeypoint();\n        }\n      } else {\n        console.log('[调试] 非自动模式，取消方向选择');\n        this.cancelDirectionSelection(true); // 强制退出\n\n        // 🔧 FIX: Only move to expected position if auto-move is enabled AND we just created a new point\n        // Don't auto-move when just setting direction on existing points\n        if (this.state.autoMoveToExpectedPosition && this.justCreatedNewPoint) {\n          console.log('[自动移动] 检测到新建标注点，移动到下一个预期位置');\n          this.moveToNextExpectedPosition();\n          this.justCreatedNewPoint = false; // Reset flag\n        } else {\n          console.log('[自动移动] 跳过移动 - 仅为现有标注点设置方向或auto-move已关闭');\n        }\n      }\n    }\n  }\n\n  /**\n   * 🔧 NEW: Handle Cross-Sectional Direction Set\n   * @param {number} direction - Direction angle in degrees\n   */\n  async handleCrossSectionalDirectionSet(direction) {\n    if (!this.crossSectionalState) {\n      console.error('[Cross-Sectional] No cross-sectional state available');\n      return;\n    }\n    \n    try {\n      console.log(`[Cross-Sectional] Setting direction ${direction.toFixed(1)}° for current point`);\n      \n      // 🔧 FIX: Check if cross-sectional state still exists\n      if (!this.crossSectionalState) {\n        console.warn('[Cross-Sectional] State is null, cannot process direction');\n        return;\n      }\n      \n      // Process current cross-sectional point with the direction\n      await this.processCurrentCrossSectionalPoint(direction);\n      \n      // Save state\n      this.saveState();\n      this.autoSaveCurrentImage();\n      \n      // 🔧 FIX: Check state again after processing\n      if (!this.crossSectionalState) {\n        console.warn('[Cross-Sectional] State became null during processing');\n        return;\n      }\n      \n      // Check if all annotations are processed\n      if (this.crossSectionalState.processedCount >= this.crossSectionalState.totalCount) {\n        console.log('[Cross-Sectional] All annotations processed, completing mode');\n        this.completeCrossSectionalMode();\n      } else {\n        // Continue with next annotation\n        console.log('[Cross-Sectional] Continuing to next annotation');\n        // The advance method will be called from processCurrentCrossSectionalPoint\n      }\n      \n    } catch (error) {\n      console.error('[Cross-Sectional] Failed to handle direction set:', error);\n      \n      // Show error to user but don't break the mode\n      if (window.PlantAnnotationTool?.showError) {\n        window.PlantAnnotationTool.showError('Cross-Sectional Error', `Failed to process direction: ${error.message}`);\n      }\n      \n      // Try to continue anyway by advancing to next point\n      try {\n        console.log('[Cross-Sectional] Attempting to continue despite error...');\n        // 🔧 FIX: Check if state exists before accessing\n        if (this.crossSectionalState) {\n          this.crossSectionalState.processedCount++;\n          await this.advanceCrossSectionalProgress();\n        } else {\n          console.warn('[Cross-Sectional] Cannot continue - state is null');\n        }\n      } catch (advanceError) {\n        console.error('[Cross-Sectional] Failed to advance after error:', advanceError);\n        // Exit cross-sectional mode if we can't continue\n        if (this.crossSectionalState) {\n          this.completeCrossSectionalMode();\n        } else {\n          console.warn('[Cross-Sectional] Cannot complete - state is null, forcing exit');\n          this.exitAutoDirectionMode();\n        }\n      }\n    }\n  }\n\n  /**\n   * 取消方向选择\n   */\n  cancelDirectionSelection(forceExit = false) {\n    console.log('[调试] cancelDirectionSelection 被调用', {\n      wasInDirectionMode: this.state.isDirectionSelectionMode,\n      selectedKeypoint: this.state.selectedKeypoint?.order,\n      isAutoMode: this.state.isAutoDirectionMode,\n      forceExit\n    });\n\n    this.state.selectedKeypoint = null;\n    this.state.isDirectionSelectionMode = false;\n    this.state.directionSelectionPoint = null;\n\n    // 只有在强制退出或非自动模式时才退出自动模式\n    if (this.state.isAutoDirectionMode && forceExit) {\n      console.log('[调试] 强制退出自动模式');\n      this.exitAutoDirectionMode();\n    } else if (this.state.isAutoDirectionMode) {\n      console.log('[调试] 自动模式中取消方向选择，但保持自动模式');\n      // 在自动模式下，只是清除当前选择，不退出自动模式\n    }\n\n    // 🔧 FIX: Reset cursor to appropriate state when exiting direction selection\n    if (this.state.isAutoDirectionMode) {\n      // In auto mode, maintain crosshair cursor\n      this.canvas.style.cursor = 'crosshair';\n    } else {\n      // In normal mode, reset to default crosshair\n      this.canvas.style.cursor = 'crosshair';\n    }\n\n    this.restoreNormalPreview();\n    this.render();\n    console.log('Direction selection cancelled');\n  }\n\n  /**\n   * 🔧 ENHANCED: 开始自动化方向选择模式（支持纵向和横向模式）\n   */\n  async startAutoDirectionMode() {\n    console.log('[调试] startAutoDirectionMode 被调用，当前模式:', this.autoDirectionMode);\n\n    // 先清理之前的状态\n    if (this.state.isDirectionSelectionMode || this.state.isAutoDirectionMode) {\n      console.log('[调试] 清理之前的方向选择状态');\n      this.state.selectedKeypoint = null;\n      this.state.isDirectionSelectionMode = false;\n      this.state.directionSelectionPoint = null;\n      this.state.isAutoDirectionMode = false;\n    }\n\n    // Clear any existing cross-sectional state\n    this.crossSectionalState = null;\n    this.crossSectionalMap.clear();\n\n    try {\n      // 如果当前选择的类型存在且不支持方向，直接提示并返回\n      if (this.customAnnotationManager) {\n        const t = this.customAnnotationManager.getCurrentCustomType?.();\n        if (t && t.metadata && t.metadata.isDirectional === false) {\n          if (window.PlantAnnotationTool?.showError) {\n            window.PlantAnnotationTool.showError('Auto Direction Disabled', '当前选择的类型未启用方向功能');\n          }\n          return false;\n        }\n      }\n      if (this.autoDirectionMode === 'cross-sectional') {\n        // 🔧 NEW: Cross-Sectional Mode - Process same order across all images\n        const ok = await this.startCrossSectionalMode();\n        if (!ok) {\n          this.exitAutoDirectionMode();\n          this.resetAutoDirectionButton();\n        }\n        return ok;\n      } else {\n        // 🔧 EXISTING: Longitudinal Mode - Complete all points in one image first\n        const ok = this.startLongitudinalMode();\n        if (!ok) {\n          this.exitAutoDirectionMode();\n          this.resetAutoDirectionButton();\n        }\n        return ok;\n      }\n    } catch (error) {\n      console.error('[Auto Direction] Failed to start auto direction mode:', error);\n      if (window.PlantAnnotationTool?.showError) {\n        window.PlantAnnotationTool.showError('Auto Direction Error', error.message);\n      }\n      return false;\n    }\n  }\n\n  /**\n   * 🔧 NEW: Start Cross-Sectional Mode\n   */\n  async startCrossSectionalMode() {\n    console.log('[Cross-Sectional] Starting cross-sectional mode');\n    \n    try {\n      // Build cross-sectional map for all images\n      this.crossSectionalMap = await this.buildCrossSectionalMap();\n      \n      if (this.crossSectionalMap.size === 0) {\n        console.log('[Cross-Sectional] No directionless annotations found across all images');\n        if (window.PlantAnnotationTool?.showInfo) {\n          window.PlantAnnotationTool.showInfo('No Work Needed', 'No directionless annotations found across all images in current view angle.');\n        }\n        return false;\n      }\n      \n      // Initialize cross-sectional state\n      this.initializeCrossSectionalState();\n      \n      // Set auto direction mode flag\n      this.state.isAutoDirectionMode = true;\n      \n      // Update UI to reflect cross-sectional mode\n      this.updateAutoDirectionModeUI();\n      \n      // Start processing with first annotation\n      const currentPoint = this.getCurrentCrossSectionalPoint();\n      if (currentPoint) {\n        console.log(`[Cross-Sectional] Starting with annotation #${currentPoint.annotation.order} in ${currentPoint.imageName}`);\n        \n        // Switch to the first image with annotations to process\n        await this.switchToImageForCrossSectional(currentPoint.imageId);\n        \n        // Show cross-sectional progress UI\n        this.updateCrossSectionalProgressUI();\n        \n        if (window.PlantAnnotationTool?.showInfo) {\n          window.PlantAnnotationTool.showInfo('Cross-Sectional Mode', \n            `Processing ${this.crossSectionalState.totalCount} annotations across ${this.crossSectionalState.availableOrders.length} order numbers. Click to set directions.`);\n        }\n        \n        return true;\n      } else {\n        throw new Error('No annotations to process in cross-sectional mode');\n      }\n      \n    } catch (error) {\n      console.error('[Cross-Sectional] Failed to start cross-sectional mode:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 EXISTING: Start Longitudinal Mode (original behavior)\n   */\n  startLongitudinalMode() {\n    console.log('[Longitudinal] Starting longitudinal mode');\n    \n    // 找到所有需要设置方向的标注点（传统left/right标注点 + 无方向标注点）\n    const needDirectionKeypoints = this.keypoints.filter(kp => {\n      // 传统left/right标注点\n      const isLegacy = (kp.direction === 'left' || kp.direction === 'right') &&\n                      kp.directionType !== 'angle' &&\n                      typeof kp.direction !== 'number';\n\n      // 无方向标注点\n      const isNoDirection = kp.direction === null || kp.direction === undefined;\n\n      return isLegacy || isNoDirection;\n    });\n\n    console.log('[Longitudinal] 找到需要设置方向的标注点', needDirectionKeypoints.map(kp => ({\n      order: kp.order,\n      direction: kp.direction,\n      directionType: kp.directionType,\n      type: kp.direction === null ? '无方向' : '传统方向'\n    })));\n\n    if (needDirectionKeypoints.length === 0) {\n      console.log('[Longitudinal] 没有需要设置方向的标注点');\n      // 显示提示信息\n      if (window.PlantAnnotationTool?.showInfo) {\n        window.PlantAnnotationTool.showInfo('无需设置', '当前图像没有需要设置方向的标注点');\n      }\n      // 确保按钮和状态复位\n      this.exitAutoDirectionMode();\n      this.resetAutoDirectionButton();\n      return false;\n    }\n\n    // 按序号排序\n    needDirectionKeypoints.sort((a, b) => (a.order || 0) - (b.order || 0));\n\n    this.state.isAutoDirectionMode = true;\n    this.state.autoDirectionKeypoints = needDirectionKeypoints;\n    this.state.autoDirectionIndex = 0;\n\n    console.log('[Longitudinal] 设置自动模式状态', {\n      isAutoDirectionMode: this.state.isAutoDirectionMode,\n      autoDirectionKeypoints: this.state.autoDirectionKeypoints.length,\n      autoDirectionIndex: this.state.autoDirectionIndex\n    });\n\n    // Update UI to reflect longitudinal mode\n    this.updateAutoDirectionModeUI();\n\n    // 选择第一个关键点并自动放大\n    this.selectKeypointWithZoom(needDirectionKeypoints[0]);\n\n    console.log(`[Longitudinal] 开始自动化方向设置模式，共 ${needDirectionKeypoints.length} 个标注点需要设置方向`);\n\n    // 显示提示信息\n    if (window.PlantAnnotationTool?.showInfo) {\n      window.PlantAnnotationTool.showInfo('Longitudinal Mode', \n        `Setting directions for ${needDirectionKeypoints.length} annotations in current image. Move mouse to select direction, click to confirm, right-click to pause.`);\n    }\n\n    return true;\n  }\n\n  /**\n   * 选择关键点并自动放大到该位置\n   */\n  selectKeypointWithZoom(keypoint) {\n    console.log('[调试] selectKeypointWithZoom 开始', {\n      keypoint: keypoint.order,\n      isAutoMode: this.state.isAutoDirectionMode,\n      isDirectionMode: this.state.isDirectionSelectionMode\n    });\n\n    // 先选择关键点\n    this.selectKeypoint(keypoint);\n\n    console.log('[调试] selectKeypoint 完成后状态', {\n      isAutoMode: this.state.isAutoDirectionMode,\n      isDirectionMode: this.state.isDirectionSelectionMode,\n      selectedKeypoint: this.state.selectedKeypoint?.order\n    });\n\n    // 自动放大到关键点位置\n    const defaultAutoScale = 2.5; // 默认的自动化放大倍数\n    const currentScale = this.state.scale;\n\n    // 如果当前缩放大于默认值，保持当前缩放；否则使用默认值\n    const targetScale = Math.max(currentScale, defaultAutoScale);\n    const newScale = Math.min(targetScale, this.options.maxZoom);\n\n    // 计算画布中心\n    const centerX = this.canvas.width / 2;\n    const centerY = this.canvas.height / 2;\n\n    // 计算标注点在新缩放下的位置，使其居中\n    this.state.scale = newScale;\n    this.state.translateX = centerX - (keypoint.x * newScale);\n    this.state.translateY = centerY - (keypoint.y * newScale);\n\n    // 确保图像不会超出边界\n    this.constrainView();\n\n    this.updateZoomInfo();\n    this.render();\n\n    const scaleAction = currentScale >= defaultAutoScale ? '保持当前缩放' : '使用默认缩放';\n    console.log(`自动居中到标注点 #${keypoint.order}，缩放: ${newScale.toFixed(1)}x (${scaleAction})`);\n\n    // 添加视觉提示\n    this.showKeypointFocusHint(keypoint);\n\n    console.log('[调试] selectKeypointWithZoom 完成后状态', {\n      isAutoMode: this.state.isAutoDirectionMode,\n      isDirectionMode: this.state.isDirectionSelectionMode,\n      selectedKeypoint: this.state.selectedKeypoint?.order\n    });\n  }\n\n  /**\n   * 显示标注点聚焦提示\n   */\n  showKeypointFocusHint(keypoint) {\n    // 创建一个临时的聚焦效果\n    const originalRender = this.render.bind(this);\n    let pulseCount = 0;\n    const maxPulses = 3;\n\n    const pulse = () => {\n      if (pulseCount >= maxPulses) {\n        return;\n      }\n\n      // 绘制脉冲效果\n      const screenPos = this.imageToScreen(keypoint.x, keypoint.y);\n      const ctx = this.ctx;\n\n      ctx.save();\n      ctx.globalAlpha = 0.6 - (pulseCount * 0.2);\n      ctx.strokeStyle = '#f59e0b';\n      ctx.lineWidth = 3;\n      ctx.setLineDash([]);\n\n      const radius = 30 + (pulseCount * 10);\n      ctx.beginPath();\n      ctx.arc(screenPos.x, screenPos.y, radius, 0, 2 * Math.PI);\n      ctx.stroke();\n\n      ctx.restore();\n\n      pulseCount++;\n      if (pulseCount < maxPulses) {\n        setTimeout(pulse, 200);\n      }\n    };\n\n    // 延迟一点开始脉冲效果\n    setTimeout(pulse, 100);\n  }\n\n  /**\n   * 约束视图，确保不超出合理边界\n   */\n  constrainView() {\n    if (!this.imageElement) return;\n\n    const imageWidth = this.imageElement.width * this.state.scale;\n    const imageHeight = this.imageElement.height * this.state.scale;\n    const canvasWidth = this.canvas.width;\n    const canvasHeight = this.canvas.height;\n\n    // 如果图像小于画布，居中显示\n    if (imageWidth < canvasWidth) {\n      this.state.translateX = (canvasWidth - imageWidth) / 2;\n    } else {\n      // 确保图像不会移出画布太远\n      const maxTranslateX = 0;\n      const minTranslateX = canvasWidth - imageWidth;\n      this.state.translateX = Math.max(minTranslateX, Math.min(maxTranslateX, this.state.translateX));\n    }\n\n    if (imageHeight < canvasHeight) {\n      this.state.translateY = (canvasHeight - imageHeight) / 2;\n    } else {\n      const maxTranslateY = 0;\n      const minTranslateY = canvasHeight - imageHeight;\n      this.state.translateY = Math.max(minTranslateY, Math.min(maxTranslateY, this.state.translateY));\n    }\n  }\n\n  /**\n   * 选择下一个自动方向选择的关键点\n   */\n  selectNextAutoDirectionKeypoint() {\n    this.state.autoDirectionIndex++;\n\n    if (this.state.autoDirectionIndex >= this.state.autoDirectionKeypoints.length) {\n      // 当前图片的所有标注点都已完成\n      const totalUpgraded = this.state.autoDirectionKeypoints.length;\n      console.log(`当前图片方向设置完成，共设置了 ${totalUpgraded} 个标注点`);\n\n      // 尝试切换到下一张图片继续自动化\n      if (this.tryAutoSwitchToNextImage()) {\n        console.log('自动切换到下一张图片继续方向设置');\n        return;\n      }\n\n      // 没有下一张图片，完全结束自动化模式\n      this.exitAutoDirectionMode();\n      this.resetAutoDirectionButton();\n\n      // 显示完成提示\n      if (window.showSuccess) {\n        window.showSuccess('全部完成', `自动化方向设置已完成！`);\n      }\n      return;\n    }\n\n    const nextKeypoint = this.state.autoDirectionKeypoints[this.state.autoDirectionIndex];\n    this.selectKeypointWithZoom(nextKeypoint);\n\n    const progress = `${this.state.autoDirectionIndex + 1}/${this.state.autoDirectionKeypoints.length}`;\n    console.log(`自动选择下一个传统标注点 #${nextKeypoint.order} (${progress})`);\n\n    // 显示进度提示\n    if (window.showInfo) {\n      window.showInfo('升级进度', `正在升级第 ${this.state.autoDirectionIndex + 1} 个，共 ${this.state.autoDirectionKeypoints.length} 个传统标注点`);\n    }\n  }\n\n  /**\n   * 显示自动模式完成提示\n   */\n  showAutoModeCompletionHint() {\n    // 创建完成提示元素\n    const hint = document.createElement('div');\n    hint.className = 'auto-direction-completion-hint';\n    hint.textContent = '🎉 自动化方向选择已完成！';\n    hint.style.cssText = `\n      position: absolute;\n      top: 50px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n      color: white;\n      padding: 12px 24px;\n      border-radius: 25px;\n      font-size: 14px;\n      font-weight: 600;\n      z-index: 1000;\n      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);\n      animation: completionBounce 0.6s ease-out;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('completion-animation-style')) {\n      const style = document.createElement('style');\n      style.id = 'completion-animation-style';\n      style.textContent = `\n        @keyframes completionBounce {\n          0% {\n            opacity: 0;\n            transform: translateX(-50%) translateY(-20px) scale(0.8);\n          }\n          50% {\n            transform: translateX(-50%) translateY(0) scale(1.1);\n          }\n          100% {\n            opacity: 1;\n            transform: translateX(-50%) translateY(0) scale(1);\n          }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    // 添加到canvas容器\n    const canvasContainer = document.getElementById('canvas-container');\n    if (canvasContainer) {\n      canvasContainer.appendChild(hint);\n      \n      // 3秒后自动移除\n      setTimeout(() => {\n        if (hint.parentElement) {\n          hint.remove();\n        }\n      }, 3000);\n    }\n  }\n\n  /**\n   * 🔧 NEW: Set Auto Direction Mode (Longitudinal vs Cross-Sectional)\n   * @param {string} mode - 'longitudinal' or 'cross-sectional'\n   */\n  setAutoDirectionMode(mode) {\n    if (!['longitudinal', 'cross-sectional'].includes(mode)) {\n      throw new Error('Invalid auto direction mode: ' + mode);\n    }\n    \n    this.autoDirectionMode = mode;\n    console.log(`Auto Direction mode set to: ${mode}`);\n    \n    // Update UI to reflect mode change\n    this.updateAutoDirectionModeUI();\n  }\n\n  /**\n   * 🔧 NEW: Update UI to reflect current auto direction mode\n   */\n  updateAutoDirectionModeUI() {\n    const autoDirectionBtn = document.getElementById('auto-direction-btn');\n    const modeSelector = document.getElementById('auto-direction-mode-selector');\n    \n    if (autoDirectionBtn && this.autoDirectionMode) {\n      // Remove existing mode classes\n      autoDirectionBtn.classList.remove('longitudinal-mode', 'cross-sectional-mode');\n      \n      // Add current mode class\n      autoDirectionBtn.classList.add(`${this.autoDirectionMode}-mode`);\n      \n      // Update button text if needed\n      if (this.state.isAutoDirectionMode) {\n        const modeText = this.autoDirectionMode === 'cross-sectional' ? 'Exit Vertical Mode' : 'Exit Horizontal Mode';\n        autoDirectionBtn.textContent = modeText;\n      } else {\n        autoDirectionBtn.textContent = 'Auto Direction';\n      }\n    }\n    \n    // 🔧 FIX: Only update mode selector if we have a valid mode\n    // Don't override UI selector with null/undefined values\n    if (modeSelector && this.autoDirectionMode) {\n      modeSelector.value = this.autoDirectionMode;\n      console.log('[调试] 更新UI选择器为:', this.autoDirectionMode);\n    }\n  }\n\n  /**\n   * 🔧 NEW: Build Cross-Sectional Map for all images\n   * @returns {Promise<Map>} Map of order numbers to array of {imageId, annotation} pairs\n   */\n  async buildCrossSectionalMap() {\n    const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n    const appState = window.PlantAnnotationTool?.appState;\n    \n    if (!plantDataManager || !appState?.currentPlant) {\n      throw new Error('Plant data manager or current plant not available');\n    }\n    \n    const crossSectionalMap = new Map();\n    \n    try {\n      // Get all images for current plant and view angle\n      const allImages = await plantDataManager.getPlantImages(\n        appState.currentPlant.id,\n        appState.currentPlant.selectedViewAngle\n      );\n      \n      if (!allImages || allImages.length === 0) {\n        throw new Error('No images found for current plant and view angle');\n      }\n      \n      console.log(`[Cross-Sectional] Analyzing ${allImages.length} images for directionless annotations`);\n      \n      // Analyze each image for directionless annotations\n      for (const image of allImages) {\n        try {\n          const annotations = await plantDataManager.getImageAnnotations(image.id);\n          \n          if (annotations && annotations.length > 0) {\n            // Find directionless annotations\n            const directionlessAnnotations = annotations.filter(ann => \n              !ann.direction || ann.direction === 'none' || ann.direction === null\n            );\n            \n            // Group by order number\n            for (const annotation of directionlessAnnotations) {\n              const order = annotation.order || 1;\n              \n              if (!crossSectionalMap.has(order)) {\n                crossSectionalMap.set(order, []);\n              }\n              \n              crossSectionalMap.get(order).push({\n                imageId: image.id,\n                imageName: image.name,\n                annotation: annotation\n              });\n            }\n          }\n        } catch (error) {\n          console.warn(`[Cross-Sectional] Failed to load annotations for image ${image.id}:`, error);\n        }\n      }\n      \n      // Sort each order group by image name for consistent processing order\n      for (const [order, imageAnnotationPairs] of crossSectionalMap) {\n        imageAnnotationPairs.sort((a, b) => a.imageName.localeCompare(b.imageName));\n      }\n      \n      console.log(`[Cross-Sectional] Built map with ${crossSectionalMap.size} order numbers`, \n        Array.from(crossSectionalMap.keys()).sort((a, b) => a - b));\n      \n      return crossSectionalMap;\n      \n    } catch (error) {\n      console.error('[Cross-Sectional] Failed to build cross-sectional map:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 NEW: Get all available order numbers across all images\n   * @returns {Array<number>} Sorted array of order numbers\n   */\n  getAvailableOrderNumbers() {\n    if (!this.crossSectionalMap) {\n      return [];\n    }\n    \n    return Array.from(this.crossSectionalMap.keys()).sort((a, b) => a - b);\n  }\n\n  /**\n   * 🔧 NEW: Get all images that have annotations with specific order\n   * @param {number} order - Order number to search for\n   * @returns {Array} Array of {imageId, imageName, annotation} objects\n   */\n  getImagesWithOrder(order) {\n    if (!this.crossSectionalMap || !this.crossSectionalMap.has(order)) {\n      return [];\n    }\n    \n    return this.crossSectionalMap.get(order);\n  }\n\n  /**\n   * 🔧 NEW: Initialize Cross-Sectional State\n   */\n  initializeCrossSectionalState() {\n    const availableOrders = this.getAvailableOrderNumbers();\n    \n    if (availableOrders.length === 0) {\n      throw new Error('No directionless annotations found across all images');\n    }\n    \n    this.crossSectionalState = {\n      currentOrder: availableOrders[0],\n      currentImageIndex: 0,\n      processedCount: 0,\n      totalCount: this.getAllCrossSectionalPoints().length,\n      availableOrders: availableOrders,\n      startTime: Date.now()\n    };\n    \n    console.log(`[Cross-Sectional] Initialized state:`, this.crossSectionalState);\n  }\n\n  /**\n   * 🔧 NEW: Get all cross-sectional points for progress tracking\n   * @returns {Array} All directionless annotation points across all images\n   */\n  getAllCrossSectionalPoints() {\n    const allPoints = [];\n    \n    if (!this.crossSectionalMap) {\n      return allPoints;\n    }\n    \n    for (const imageAnnotationPairs of this.crossSectionalMap.values()) {\n      allPoints.push(...imageAnnotationPairs);\n    }\n    \n    return allPoints;\n  }\n\n  /**\n   * 🔧 NEW: Get current cross-sectional annotation to process\n   * @returns {Object|null} Current annotation data or null if done\n   */\n  getCurrentCrossSectionalPoint() {\n    if (!this.crossSectionalState) {\n      return null;\n    }\n    \n    const { currentOrder, currentImageIndex } = this.crossSectionalState;\n    const imagesWithCurrentOrder = this.getImagesWithOrder(currentOrder);\n    \n    if (currentImageIndex >= imagesWithCurrentOrder.length) {\n      return null; // No more images for current order\n    }\n    \n    return imagesWithCurrentOrder[currentImageIndex];\n  }\n\n  /**\n   * 🔧 NEW: Process current cross-sectional point with direction\n   * @param {string|number} direction - Direction value ('left', 'right', or angle in degrees)\n   */\n  async processCurrentCrossSectionalPoint(direction) {\n    // 🔧 FIX: Check if state exists first\n    if (!this.crossSectionalState) {\n      console.warn('[Cross-Sectional] Cannot process point - state is null');\n      return;\n    }\n    \n    const currentPoint = this.getCurrentCrossSectionalPoint();\n    \n    if (!currentPoint) {\n      console.warn('[Cross-Sectional] No current point to process');\n      return;\n    }\n    \n    try {\n      // Update the annotation with direction\n      currentPoint.annotation.direction = direction;\n      \n      // Save to storage\n      const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n      if (plantDataManager) {\n        const allAnnotations = await plantDataManager.getImageAnnotations(currentPoint.imageId);\n        await plantDataManager.saveImageAnnotations(currentPoint.imageId, allAnnotations);\n      }\n      \n      // 🔧 FIX: Check state again before updating count\n      if (!this.crossSectionalState) {\n        console.warn('[Cross-Sectional] State became null during processing');\n        return;\n      }\n      \n      // Update progress\n      this.crossSectionalState.processedCount++;\n      \n      console.log(`[Cross-Sectional] Processed annotation #${currentPoint.annotation.order} in ${currentPoint.imageName} with direction: ${direction}`);\n      \n      // Move to next point\n      await this.advanceCrossSectionalProgress();\n      \n    } catch (error) {\n      console.error('[Cross-Sectional] Failed to process point:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🔧 NEW: Advance cross-sectional processing to next point\n   */\n  async advanceCrossSectionalProgress() {\n    if (!this.crossSectionalState) {\n      return;\n    }\n    \n    const { currentOrder, currentImageIndex, availableOrders } = this.crossSectionalState;\n    const imagesWithCurrentOrder = this.getImagesWithOrder(currentOrder);\n    \n    // Check if there are more images with current order\n    if (currentImageIndex + 1 < imagesWithCurrentOrder.length) {\n      // 🔧 FIX: Check state still exists before updating\n      if (!this.crossSectionalState) {\n        console.warn('[Cross-Sectional] State became null during advance, cannot continue');\n        return;\n      }\n      \n      // Move to next image with same order\n      this.crossSectionalState.currentImageIndex++;\n      const nextImageData = imagesWithCurrentOrder[this.crossSectionalState.currentImageIndex];\n      \n      console.log(`[Cross-Sectional] Moving to next image for order ${currentOrder}: ${nextImageData.imageName}`);\n      \n      // Switch to next image\n      await this.switchToImageForCrossSectional(nextImageData.imageId);\n      \n    } else {\n      // Current order complete, move to next order\n      const currentOrderIndex = availableOrders.indexOf(currentOrder);\n      \n      if (currentOrderIndex + 1 < availableOrders.length) {\n        // 🔧 FIX: Check state still exists before updating\n        if (!this.crossSectionalState) {\n          console.warn('[Cross-Sectional] State became null during advance, cannot continue');\n          return;\n        }\n        \n        // Move to next order\n        const nextOrder = availableOrders[currentOrderIndex + 1];\n        this.crossSectionalState.currentOrder = nextOrder;\n        this.crossSectionalState.currentImageIndex = 0;\n        \n        const nextOrderImages = this.getImagesWithOrder(nextOrder);\n        if (nextOrderImages.length > 0) {\n          console.log(`[Cross-Sectional] Moving to next order ${nextOrder}, starting with: ${nextOrderImages[0].imageName}`);\n          \n          // Switch to first image with next order\n          await this.switchToImageForCrossSectional(nextOrderImages[0].imageId);\n        }\n      } else {\n        // All orders processed - complete cross-sectional mode\n        console.log('[Cross-Sectional] All orders processed, completing mode');\n        this.completeCrossSectionalMode();\n      }\n    }\n    \n    // Update progress UI\n    this.updateCrossSectionalProgressUI();\n  }\n\n  /**\n   * 🔧 NEW: Switch to specific image for cross-sectional processing\n   * @param {string} targetImageId - Image ID to switch to\n   */\n  async switchToImageForCrossSectional(targetImageId) {\n    try {\n      console.log(`[Cross-Sectional] Starting image switch to: ${targetImageId}`);\n      \n      const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n      const appState = window.PlantAnnotationTool?.appState;\n      \n      if (!plantDataManager || !appState?.currentPlant) {\n        throw new Error('Plant data manager or current plant not available');\n      }\n      \n      // Get image data\n      const allImages = await plantDataManager.getPlantImages(\n        appState.currentPlant.id,\n        appState.currentPlant.selectedViewAngle\n      );\n      \n      const targetImage = allImages.find(img => img.id === targetImageId);\n      if (!targetImage) {\n        throw new Error(`Image not found: ${targetImageId}`);\n      }\n      \n      console.log(`[Cross-Sectional] Switching to image: ${targetImage.name}`);\n      \n      // Use global image selection function\n      if (window.handleImageSelect) {\n        console.log(`[Cross-Sectional] Calling handleImageSelect...`);\n        await window.handleImageSelect(targetImage, true);\n        console.log(`[Cross-Sectional] handleImageSelect completed successfully`);\n      } else {\n        throw new Error('Global image selection function not available');\n      }\n      \n      // Wait for image to load and annotations to be ready\n      console.log(`[Cross-Sectional] Waiting for image to load...`);\n      await this.waitForImageLoad();\n      console.log(`[Cross-Sectional] Image loaded successfully`);\n      \n      // Select the annotation for current processing\n      const currentPoint = this.getCurrentCrossSectionalPoint();\n      if (currentPoint && currentPoint.annotation) {\n        console.log(`[Cross-Sectional] Looking for annotation #${currentPoint.annotation.order} in loaded keypoints`);\n        \n        // Find the annotation in the loaded keypoints\n        const loadedAnnotation = this.keypoints.find(kp => \n          kp.order === currentPoint.annotation.order\n        );\n        \n        if (loadedAnnotation) {\n          console.log(`[Cross-Sectional] Found annotation #${loadedAnnotation.order}, selecting it`);\n          this.state.selectedKeypoint = loadedAnnotation;\n          this.state.isDirectionSelectionMode = true;\n          \n          // Center view on the annotation\n          this.selectKeypointWithZoom(loadedAnnotation);\n        } else {\n          console.warn(`[Cross-Sectional] Could not find annotation #${currentPoint.annotation.order} in loaded keypoints`);\n        }\n      } else {\n        console.warn(`[Cross-Sectional] No current point available after image switch`);\n      }\n      \n    } catch (error) {\n      console.error('[Cross-Sectional] Failed to switch image:', error);\n      // Don't re-throw the error, continue with error handling\n      if (window.PlantAnnotationTool?.showError) {\n        window.PlantAnnotationTool.showError('Image Switch Failed', error.message);\n      }\n    }\n  }\n\n  /**\n   * 🔧 NEW: Wait for image load to complete\n   */\n  async waitForImageLoad(maxWaitTime = 5000) {\n    const startTime = Date.now();\n    \n    console.log(`[Cross-Sectional] Waiting for image load... (max ${maxWaitTime}ms)`);\n    \n    while (!this.imageLoaded && (Date.now() - startTime) < maxWaitTime) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    \n    if (!this.imageLoaded) {\n      console.warn(`[Cross-Sectional] Image load timeout after ${maxWaitTime}ms`);\n      // Don't throw error, continue anyway\n      return false;\n    }\n    \n    console.log(`[Cross-Sectional] Image loaded in ${Date.now() - startTime}ms`);\n    return true;\n  }\n\n  /**\n   * 🔧 NEW: Complete cross-sectional mode\n   */\n  completeCrossSectionalMode() {\n    // 🔧 FIX: Check if state exists before accessing\n    if (!this.crossSectionalState) {\n      console.warn('[Cross-Sectional] Cannot complete - state is null');\n      // Just exit auto direction mode if state is already gone\n      this.exitAutoDirectionMode();\n      return;\n    }\n    \n    const duration = Date.now() - this.crossSectionalState.startTime;\n    const processedCount = this.crossSectionalState.processedCount;\n    \n    console.log(`[Cross-Sectional] Mode completed! Processed ${processedCount} annotations in ${duration}ms`);\n    \n    // Show completion message\n    if (window.updateProgressInfo) {\n      window.updateProgressInfo(`Cross-Sectional mode completed! Processed ${processedCount} annotations across all images.`);\n    }\n    \n    // Clean up state\n    this.crossSectionalState = null;\n    this.crossSectionalMap.clear();\n    \n    // Exit auto direction mode\n    this.exitAutoDirectionMode();\n  }\n\n  /**\n   * 🔧 NEW: Update cross-sectional progress UI\n   */\n  updateCrossSectionalProgressUI() {\n    const progressIndicator = document.getElementById('auto-direction-progress');\n    const progressCurrent = document.getElementById('progress-current');\n    const progressTotal = document.getElementById('progress-total');\n    const progressFill = document.getElementById('auto-direction-progress-fill');\n    const progressModeInfo = document.getElementById('progress-mode-info');\n    \n    if (!this.crossSectionalState) {\n      if (progressIndicator) {\n        progressIndicator.style.display = 'none';\n      }\n      return;\n    }\n    \n    const { processedCount, totalCount, currentOrder, availableOrders } = this.crossSectionalState;\n    const progressPercentage = totalCount > 0 ? (processedCount / totalCount) * 100 : 0;\n    \n    if (progressIndicator) {\n      progressIndicator.style.display = 'block';\n    }\n    \n    if (progressCurrent) {\n      progressCurrent.textContent = processedCount;\n    }\n    \n    if (progressTotal) {\n      progressTotal.textContent = totalCount;\n    }\n    \n    if (progressFill) {\n      progressFill.style.width = `${progressPercentage}%`;\n      progressFill.className = 'progress-fill cross-sectional-indicator';\n    }\n    \n    if (progressModeInfo) {\n      const currentOrderIndex = availableOrders.indexOf(currentOrder);\n      progressModeInfo.textContent = `Order ${currentOrder} (${currentOrderIndex + 1}/${availableOrders.length})`;\n    }\n  }\n\n  /**\n   * 🔧 NEW: Get Auto Direction Progress (works for both modes)\n   * @returns {Object} Progress information\n   */\n  getAutoDirectionProgress() {\n    if (this.autoDirectionMode === 'cross-sectional' && this.crossSectionalState) {\n      const { processedCount, totalCount, currentOrder, availableOrders } = this.crossSectionalState;\n      \n      return {\n        total: totalCount,\n        completed: processedCount,\n        percentage: totalCount > 0 ? Math.round((processedCount / totalCount) * 100) : 0,\n        currentOrder: currentOrder,\n        totalOrders: availableOrders.length,\n        mode: 'cross-sectional'\n      };\n    } else if (this.autoDirectionMode === 'longitudinal' && this.state.isAutoDirectionMode) {\n      const total = this.state.autoDirectionKeypoints.length;\n      const completed = this.state.autoDirectionIndex;\n      \n      return {\n        total: total,\n        completed: completed,\n        percentage: total > 0 ? Math.round((completed / total) * 100) : 0,\n        mode: 'longitudinal'\n      };\n    }\n    \n    return {\n      total: 0,\n      completed: 0,\n      percentage: 0,\n      mode: this.autoDirectionMode\n    };\n  }\n\n  /**\n   * 退出自动化方向选择模式\n   */\n  exitAutoDirectionMode() {\n    console.log('[调试] exitAutoDirectionMode 被调用', {\n      stackTrace: new Error().stack\n    });\n\n    // 🔧 FIX: Store the user's mode preference before resetting\n    const userModePreference = this.autoDirectionMode;\n    console.log('[调试] 保存用户模式偏好:', userModePreference);\n\n    this.state.isAutoDirectionMode = false;\n    this.state.autoDirectionKeypoints = [];\n    this.state.autoDirectionIndex = 0;\n\n    // 清理方向选择状态，但不需要强制退出（因为已经在退出了）\n    this.state.selectedKeypoint = null;\n    this.state.isDirectionSelectionMode = false;\n    this.state.directionSelectionPoint = null;\n\n    // 🔧 FIX: Only reset cross-sectional state if we're not in the middle of completion\n    // This prevents null reference errors during the completion process\n    if (this.autoDirectionMode === 'cross-sectional' && this.crossSectionalState) {\n      console.log('[调试] 延迟清理 cross-sectional 状态，让完成流程处理');\n      // Don't reset cross-sectional state here - let completeCrossSectionalMode handle it\n      // But preserve the user's mode preference\n      this.autoDirectionMode = userModePreference;\n    } else {\n      // For non-cross-sectional modes or if state is already null, reset state but preserve mode preference\n      this.crossSectionalState = null;\n      // 🔧 FIX: Don't reset autoDirectionMode to null - preserve user's choice\n      this.autoDirectionMode = userModePreference;\n    }\n\n    this.restoreNormalPreview();\n    this.render();\n\n    // 🔧 FIX: Reset auto direction button state when exiting auto direction mode\n    this.resetAutoDirectionButton();\n\n    // 🔧 FIX: Preserve the mode selector UI state\n    const modeSelector = document.getElementById('auto-direction-mode-selector');\n    if (modeSelector && userModePreference) {\n      modeSelector.value = userModePreference;\n      console.log('[调试] 恢复UI选择器状态:', userModePreference);\n    }\n\n    console.log('Exited auto direction mode, preserved mode preference:', userModePreference);\n  }\n\n  /**\n   * 通知预览管理器显示选中关键点的预览\n   */\n  notifySelectedKeypointPreview(keypoint) {\n    const branchPointPreviewManager = window.PlantAnnotationTool?.branchPointPreviewManager;\n    \n    if (branchPointPreviewManager && keypoint && keypoint.order) {\n      branchPointPreviewManager.showSpecificOrderPreview(keypoint.order);\n    }\n  }\n\n  /**\n   * 恢复正常的预览显示\n   */\n  restoreNormalPreview() {\n    // 通过全局对象访问分支点预览管理器\n    const branchPointPreviewManager = window.PlantAnnotationTool?.branchPointPreviewManager;\n    \n    if (branchPointPreviewManager) {\n      // 恢复到显示下一个要标注编号的预览\n      branchPointPreviewManager.restoreNormalPreview();\n    }\n  }\n\n  /**\n   * 处理右键菜单\n   */\n  handleContextMenu(event) {\n    event.preventDefault();\n    \n    const mousePos = this.getMousePos(event);\n    \n    // 首先检查是否点击了自定义标注\n    const clickedCustomAnnotation = this.getCustomAnnotationAt(mousePos);\n    if (clickedCustomAnnotation) {\n      this.removeCustomAnnotation(clickedCustomAnnotation);\n      return;\n    }\n    \n    // 如果没有自定义标注，检查常规关键点\n    const clickedKeypoint = this.getKeypointAt(mousePos);\n    if (clickedKeypoint) {\n      this.removeKeypoint(clickedKeypoint);\n    }\n  }\n\n  /**\n   * 处理滚轮缩放\n   */\n  handleWheel(event) {\n    event.preventDefault();\n    \n    // 🔧 NEW: 如果处于方向数量模式，用滚轮调整方向数量\n    if (this.state.isDirectionCountMode) {\n      this.handleScrollWheel(event);\n      return;\n    }\n    \n    const mousePos = this.getMousePos(event);\n    const delta = -event.deltaY;\n    const zoomFactor = 1 + (delta > 0 ? this.options.zoomSpeed : -this.options.zoomSpeed);\n    \n    this.zoomAt(mousePos.x, mousePos.y, zoomFactor);\n  }\n\n  /**\n   * 在指定点缩放\n   */\n  zoomAt(x, y, factor) {\n    const newScale = this.state.scale * factor;\n    \n    // 限制缩放范围\n    if (newScale < this.options.minZoom || newScale > this.options.maxZoom) {\n      return;\n    }\n    \n    // 计算缩放后的位移\n    this.state.translateX = x - (x - this.state.translateX) * factor;\n    this.state.translateY = y - (y - this.state.translateY) * factor;\n    this.state.scale = newScale;\n    \n    this.updateZoomInfo();\n    this.render();\n  }\n\n  /**\n   * 处理键盘按下\n   */\n  handleKeyDown(event) {\n    if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {\n      return; // 在输入框中时不处理\n    }\n    \n    switch (event.key) {\n      case ' ':\n        event.preventDefault();\n        // 空格键准备平移\n        break;\n        \n      case 'r':\n      case 'R':\n        event.preventDefault();\n        this.resetView();\n        break;\n        \n      case '1':\n        event.preventDefault();\n        this.setZoom(1);\n        break;\n        \n      case 'z':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault();\n          if (event.shiftKey) {\n            this.redo();\n          } else {\n            this.undo();\n          }\n        }\n        break;\n        \n      case 'y':\n        if (event.ctrlKey || event.metaKey) {\n          event.preventDefault();\n          this.redo();\n        }\n        break;\n    }\n  }\n\n  /**\n   * 处理键盘抬起\n   */\n  handleKeyUp(event) {\n    // 可以在这里处理键盘抬起事件\n  }\n\n  /**\n   * 设置缩放级别\n   */\n  setZoom(scale) {\n    if (!this.imageElement || !this.imageLoaded) return;\n    \n    const centerX = this.canvas.width / 2;\n    const centerY = this.canvas.height / 2;\n    \n    this.zoomAt(centerX, centerY, scale / this.state.scale);\n  }\n\n  /**\n   * 更新缩放信息显示\n   */\n  updateZoomInfo() {\n    const zoomElement = document.getElementById('zoom-level');\n    if (zoomElement) {\n      zoomElement.textContent = Math.round(this.state.scale * 100) + '%';\n    }\n  }\n\n  /**\n   * 获取指定位置的标注点\n   */\n  getKeypointAt(screenPos) {\n    const threshold = this.options.baseKeypointRadius + 5;\n    \n    return this.keypoints.find(keypoint => {\n      const keypointScreen = this.imageToScreen(keypoint.x, keypoint.y);\n      const distance = Math.sqrt(\n        Math.pow(screenPos.x - keypointScreen.x, 2) +\n        Math.pow(screenPos.y - keypointScreen.y, 2)\n      );\n      return distance <= threshold;\n    });\n  }\n\n  /**\n   * 添加标注点（向后兼容方法）\n   */\n  addKeypoint(screenPos, direction = 'right') {\n    // 🔧 FIX: Use comprehensive bounds checking for annotation creation\n    if (!this.canCreateAnnotationAt(screenPos.x, screenPos.y)) {\n      console.warn('[AnnotationTool] Cannot add keypoint: position is outside valid annotation area');\n      return;\n    }\n    \n    const imagePos = this.screenToImage(screenPos.x, screenPos.y);\n    this.addKeypointWithDirection(imagePos.x, imagePos.y, direction);\n  }\n\n  /**\n   * 添加带方向的标注点（支持自定义类型）\n   */\n  addKeypointWithDirection(x, y, direction, customTypeId = null, width = null, height = null) {\n    // 🔧 FIX: Ensure image is loaded before creating keypoints\n    if (!this.imageElement || !this.imageLoaded) {\n      console.warn('[AnnotationTool] Cannot add keypoint: no image loaded');\n      return;\n    }\n\n    // 🔄 NEW: If in custom mode and a point type is selected, default to that type\n    if (!customTypeId && this.customAnnotationManager && this.customAnnotationManager.isInCustomMode()) {\n      const currentType = this.customAnnotationManager.getCurrentCustomType();\n      if (currentType && (currentType.type === 'point' || currentType.type === 'region')) {\n        customTypeId = currentType.id;\n        // Respect isDirectional: if false, strip direction\n        if (!currentType.metadata || currentType.metadata.isDirectional === false) {\n          direction = null;\n        }\n      }\n    }\n\n    // 🔧 FIX: 使用类型特定的序号分配\n    const order = customTypeId ? this.findNextAvailableOrderForType(customTypeId) : this.findNextAvailableOrder();\n\n    // 统一方向格式：将传统的left/right转换为角度\n    let normalizedDirection = direction;\n    if (direction === 'left') {\n      normalizedDirection = 180; // 左侧为180度\n    } else if (direction === 'right') {\n      normalizedDirection = 0;   // 右侧为0度\n    } else if (typeof direction === 'number') {\n      normalizedDirection = direction;\n    } else if (direction === undefined) {\n      // 保持 undefined，不写入 direction 字段\n      normalizedDirection = undefined;\n    } else {\n      normalizedDirection = 0;   // 默认为右侧\n    }\n\n    const keypoint = {\n      id: Date.now(),\n      x: x,\n      y: y,\n      timestamp: new Date().toISOString(),\n      ...(normalizedDirection !== undefined && { direction: normalizedDirection }),\n      ...(normalizedDirection !== undefined && { directionType: 'angle' }),\n      order: order,  // 添加序号字段\n      \n      // 🔄 NEW: 统一标注系统 - 支持自定义类型\n      annotationType: customTypeId ? 'custom' : 'regular',\n      ...(customTypeId && { customTypeId }),\n      ...(typeof width === 'number' && { width }),\n      ...(typeof height === 'number' && { height })\n    };\n\n    this.keypoints.push(keypoint);\n    this.saveState();\n    this.render();\n\n    // 自动保存到当前图像\n    this.autoSaveCurrentImage();\n\n    // 🔄 NEW: 实时同步 - 标注点添加\n    this.triggerRealTimeSync('ADD_KEYPOINT', keypoint);\n\n    // 同步分支点预览\n    this.syncBranchPointPreview();\n\n    // 🔧 FIX: Set flag to indicate we just created a new point\n    this.justCreatedNewPoint = true;\n\n    // 🔧 FIX: Only move to expected position if auto-move is enabled\n    if (this.state.autoMoveToExpectedPosition) {\n      this.moveToNextExpectedPosition();\n      this.justCreatedNewPoint = false; // Reset flag after moving\n    }\n\n    const typeDesc = customTypeId ? `custom(${customTypeId})` : 'regular';\n    const directionDesc = typeof normalizedDirection === 'number' ? `${normalizedDirection}°` : normalizedDirection;\n    console.log(`Added ${typeDesc} keypoint #${order} at (${x.toFixed(1)}, ${y.toFixed(1)}) with direction ${directionDesc}`);\n    \n    return keypoint;\n  }\n\n  /**\n   * 🔄 NEW: 添加自定义点标注（统一到keypoints系统）\n   */\n  addCustomPointAnnotation(x, y, customTypeId) {\n    // Use default angle from type metadata if provided\n    let direction = null;\n    try {\n      const customType = this.getCustomType(customTypeId);\n      if (customType && customType.metadata && typeof customType.metadata.defaultAngle === 'number') {\n        direction = customType.metadata.defaultAngle;\n      }\n    } catch (e) {\n      // Fallback to null (will default to 0° in addKeypointWithDirection)\n    }\n    return this.addKeypointWithDirection(x, y, direction, customTypeId);\n  }\n  \n  /**\n   * 🔄 NEW: 添加自定义区域标注（统一到keypoints系统）\n   */\n  addCustomRegionAnnotation(x, y, width, height, customTypeId) {\n    return this.addKeypointWithDirection(x, y, null, customTypeId, width, height);\n  }\n  \n  /**\n   * 🔄 NEW: 获取自定义类型定义\n   */\n  getCustomType(customTypeId) {\n    // 🔧 FIX: 直接从CustomAnnotationManager获取自定义类型\n    if (this.customAnnotationManager) {\n      return this.customAnnotationManager.getCustomType(customTypeId);\n    }\n    return this.customTypes?.get(customTypeId) || null;\n  }\n  \n  /**\n   * 🔄 NEW: 设置自定义类型定义\n   */\n  setCustomTypes(customTypes) {\n    this.customTypes = customTypes;\n  }\n  \n  /**\n   * 🔄 NEW: 处理自定义标注模式下的点击（统一版本）\n   */\n  handleUnifiedCustomAnnotationMode(mousePos) {\n    if (!this.customAnnotationManager) {\n      console.warn('Custom annotation manager not available');\n      return;\n    }\n    \n    try {\n      const customType = this.customAnnotationManager.getCurrentCustomType();\n      if (!customType) {\n        console.warn('No custom type selected');\n        return;\n      }\n      \n      const imagePos = this.screenToImage(mousePos.x, mousePos.y);\n      \n      if (customType.type === 'point') {\n        // 创建自定义点标注\n        const keypoint = this.addCustomPointAnnotation(imagePos.x, imagePos.y, customType.id);\n        if (keypoint) {\n          console.log('Created unified custom point annotation:', keypoint);\n        }\n      } else if (customType.type === 'region') {\n        // 开始拖拽区域标注\n        this.startUnifiedCustomRegionDrag(mousePos, customType.id);\n      }\n    } catch (error) {\n      console.error('Failed to handle unified custom annotation mode:', error);\n    }\n  }\n  \n  /**\n   * 🔄 NEW: 开始统一的自定义区域拖拽\n   */\n  startUnifiedCustomRegionDrag(mousePos, customTypeId) {\n    if (!this.canCreateAnnotationAt(mousePos.x, mousePos.y)) {\n      console.warn('Cannot create custom region annotation: position is outside valid area');\n      return;\n    }\n\n    this.state.isCustomRegionDragging = true;\n    this.state.customRegionStartPoint = mousePos;\n    this.state.customRegionCurrentPoint = mousePos;\n    this.state.customRegionTypeId = customTypeId;\n    this.canvas.style.cursor = 'crosshair';\n    \n    console.log('Started unified custom region drag at:', mousePos);\n  }\n  \n  /**\n   * 🔄 NEW: 完成统一的自定义区域拖拽\n   */\n  finishUnifiedCustomRegionDrag() {\n    if (!this.state.isCustomRegionDragging || !this.state.customRegionStartPoint || !this.state.customRegionCurrentPoint) {\n      this.resetCustomRegionDrag();\n      return;\n    }\n\n    const startPos = this.screenToImage(this.state.customRegionStartPoint.x, this.state.customRegionStartPoint.y);\n    const endPos = this.screenToImage(this.state.customRegionCurrentPoint.x, this.state.customRegionCurrentPoint.y);\n\n    // 检查拖拽距离是否足够\n    const width = Math.abs(endPos.x - startPos.x);\n    const height = Math.abs(endPos.y - startPos.y);\n    const minSize = 10; // 最小区域尺寸\n\n    if (width < minSize || height < minSize) {\n      console.log('Region too small, ignoring');\n      this.resetCustomRegionDrag();\n      return;\n    }\n\n    // 计算区域位置\n    const x = Math.min(startPos.x, endPos.x);\n    const y = Math.min(startPos.y, endPos.y);\n    \n    // 创建自定义区域标注\n    const keypoint = this.addCustomRegionAnnotation(x, y, width, height, this.state.customRegionTypeId);\n    \n    if (keypoint) {\n      console.log('Created unified custom region annotation:', keypoint);\n    }\n\n    this.resetCustomRegionDrag();\n  }\n  \n  /**\n   * 🔧 NEW: 为特定自定义类型找到下一个可用的编号（独立计数）\n   */\n  findNextAvailableOrderForType(customTypeId) {\n    // 只考虑相同自定义类型的标注\n    const sameTypeKeypoints = this.keypoints.filter(kp => \n      kp.annotationType === 'custom' && kp.customTypeId === customTypeId\n    );\n    \n    if (sameTypeKeypoints.length === 0) {\n      return 1;\n    }\n    \n    // 获取该类型所有现有的编号并排序\n    const existingOrders = sameTypeKeypoints\n      .map(kp => kp.order || 0)\n      .filter(order => order > 0)\n      .sort((a, b) => a - b);\n    \n    // 找到最小的缺失编号\n    for (let i = 1; i <= existingOrders.length + 1; i++) {\n      if (!existingOrders.includes(i)) {\n        return i;\n      }\n    }\n    \n    // 如果没有缺失，返回下一个编号\n    return existingOrders.length + 1;\n  }\n\n  /**\n   * 找到下一个可用的编号（最小的缺失编号）- 只考虑常规标注\n   */\n  findNextAvailableOrder() {\n    // 🔧 FIX: 只考虑常规标注的序号，实现独立计数\n    // 🐛 BUGFIX: Include fallback for annotations without annotationType field (loaded from storage)\n    const regularKeypoints = this.keypoints.filter(kp => \n      kp.annotationType === 'regular' || !kp.annotationType);\n    \n    if (regularKeypoints.length === 0) {\n      return 1;\n    }\n    \n    // 获取所有现有的编号并排序\n    const existingOrders = regularKeypoints\n      .map(kp => kp.order || 0)\n      .filter(order => order > 0)\n      .sort((a, b) => a - b);\n    \n    // 找到最小的缺失编号\n    for (let i = 1; i <= existingOrders.length + 1; i++) {\n      if (!existingOrders.includes(i)) {\n        return i;\n      }\n    }\n    \n    // 如果没有缺失，返回下一个编号\n    return existingOrders.length + 1;\n  }\n\n  /**\n   * 删除标注点\n   */\n  removeKeypoint(keypoint) {\n    const index = this.keypoints.indexOf(keypoint);\n    if (index !== -1) {\n      const removed = this.keypoints.splice(index, 1)[0];\n      \n      // 不再重新整理序号，保持其他标注点的编号不变\n      // this.reorderKeypoints(); // 移除这行\n      \n      this.saveState();\n      this.render();\n      \n      // 触发实时同步删除（如果启用）\n      this.triggerRealTimeSync('DELETE_KEYPOINT', removed);\n      \n      // 自动保存到当前图像\n      this.autoSaveCurrentImage();\n      \n      // 同步分支点预览\n      this.syncBranchPointPreview();\n      \n      console.log(`Removed keypoint #${removed.order || 'unknown'} (id: ${keypoint.id})`);\n      console.log(`下一个新增标注点将使用编号: ${this.findNextAvailableOrder()}`);\n    }\n  }\n\n  /**\n   * 清空所有标注点\n   */\n  clearKeypoints() {\n    if (this.keypoints.length > 0) {\n      this.keypoints = [];\n      this.saveState();\n      this.render();\n      \n      // 自动保存到当前图像（清空状态）\n      this.autoSaveCurrentImage();\n      \n      // 同步分支点预览\n      this.syncBranchPointPreview();\n      \n      console.log('Cleared all keypoints (unified system)');\n    }\n  }\n\n  /**\n   * 清空所有标注点但不触发自动保存 - 用于工作区清理（统一版本）\n   */\n  clearKeypointsWithoutSave() {\n    if (this.keypoints.length > 0) {\n      this.keypoints = [];\n      this.saveState();\n      this.render();\n      \n      // 同步分支点预览但不保存\n      this.syncBranchPointPreview();\n      \n      console.log('Cleared all keypoints (without auto-save, unified system)');\n    }\n  }\n\n  /**\n   * 重新整理标注点序号，确保序号连续\n   */\n  reorderKeypoints() {\n    // 先按照当前序号排序（如果有的话）\n    this.keypoints.sort((a, b) => {\n      const orderA = a.order || 0;\n      const orderB = b.order || 0;\n      return orderA - orderB;\n    });\n    \n    // 重新分配连续的序号\n    for (let i = 0; i < this.keypoints.length; i++) {\n      this.keypoints[i].order = i + 1;\n    }\n    \n    console.log(`Reordered ${this.keypoints.length} keypoints`);\n  }\n\n  /**\n   * 保存状态到历史记录\n   */\n  saveState() {\n    const state = {\n      keypoints: JSON.parse(JSON.stringify(this.keypoints)),\n      timestamp: Date.now()\n    };\n    \n    // 移除当前位置之后的历史记录\n    this.history = this.history.slice(0, this.historyIndex + 1);\n    \n    // 添加新状态\n    this.history.push(state);\n    this.historyIndex = this.history.length - 1;\n    \n    // 限制历史记录大小\n    if (this.history.length > this.maxHistorySize) {\n      this.history.shift();\n      this.historyIndex--;\n    }\n  }\n\n  /**\n   * 撤销\n   */\n  undo() {\n    if (this.historyIndex > 0) {\n      this.historyIndex--;\n      const state = this.history[this.historyIndex];\n      this.keypoints = JSON.parse(JSON.stringify(state.keypoints));\n      this.render();\n      \n      // 自动保存到当前图像\n      this.autoSaveCurrentImage();\n      \n      // 同步分支点预览\n      this.syncBranchPointPreview();\n      \n      console.log('Undo');\n    }\n  }\n\n  /**\n   * 重做\n   */\n  redo() {\n    if (this.historyIndex < this.history.length - 1) {\n      this.historyIndex++;\n      const state = this.history[this.historyIndex];\n      this.keypoints = JSON.parse(JSON.stringify(state.keypoints));\n      this.render();\n      \n      // 自动保存到当前图像\n      this.autoSaveCurrentImage();\n      \n      // 同步分支点预览\n      this.syncBranchPointPreview();\n      \n      console.log('Redo');\n    }\n  }\n\n  /**\n   * 获取标注数据（统一版本，包含自定义标注）\n   */\n  getAnnotationData() {\n    return {\n      keypoints: this.keypoints.map(kp => ({...kp})), // 包含所有标注：常规 + 自定义\n      imageInfo: this.currentImage ? {\n        name: this.currentImage.name,\n        width: this.imageElement?.width,\n        height: this.imageElement?.height\n      } : null,\n      viewState: {\n        scale: this.state.scale,\n        translateX: this.state.translateX,\n        translateY: this.state.translateY\n      }\n    };\n  }\n\n  /**\n   * 加载标注数据（统一版本，包含自定义标注）\n   */\n  loadAnnotationData(data) {\n    if (data.keypoints) {\n      this.keypoints = data.keypoints.map(kp => ({...kp})); // 包含所有标注：常规 + 自定义\n\n      // 🔧 DISABLED: 为没有序号的旧数据添加序号（兼容性处理）\n      // IMPORTANT: This automatic renumbering was causing order inconsistencies\n      // across frames in real-time sync. Annotations should maintain their\n      // original order numbers to ensure consistent synchronization.\n      // this.ensureKeypointOrders();\n      \n      console.log(`🔄 Loaded ${this.keypoints.length} keypoints (auto-renumbering disabled)`);\n    }\n\n    if (data.viewState) {\n      this.state.scale = data.viewState.scale || 1;\n      this.state.translateX = data.viewState.translateX || 0;\n      this.state.translateY = data.viewState.translateY || 0;\n      this.updateZoomInfo();\n    }\n\n    this.saveState();\n    this.render();\n  }\n\n  /**\n   * 确保所有标注点都有序号（兼容性处理）- 统一系统版本\n   */\n  ensureKeypointOrders() {\n    // 🔧 FIX: 使用类型感知的序号检查，与PlantDataManager保持一致\n    \n    // 按类型分组标注点\n    const annotationsByType = {};\n    \n    this.keypoints.forEach(keypoint => {\n      const typeKey = keypoint.annotationType === 'custom' \n        ? `custom:${keypoint.customTypeId || 'unknown'}`\n        : 'regular';\n      \n      if (!annotationsByType[typeKey]) {\n        annotationsByType[typeKey] = [];\n      }\n      annotationsByType[typeKey].push(keypoint);\n    });\n    \n    let hasOrderIssues = false;\n    let totalFixed = 0;\n    \n    // 为每个类型独立检查序号\n    Object.entries(annotationsByType).forEach(([typeKey, typeAnnotations]) => {\n      let typeHasIssues = false;\n      \n      // 检查该类型是否有序号问题\n      for (let i = 0; i < typeAnnotations.length; i++) {\n        if (typeof typeAnnotations[i].order !== 'number' || typeAnnotations[i].order <= 0) {\n          typeHasIssues = true;\n          break;\n        }\n      }\n      \n      // 检查该类型内部是否有重复序号\n      if (!typeHasIssues) {\n        const orders = typeAnnotations.map(kp => kp.order);\n        const uniqueOrders = [...new Set(orders)];\n        if (uniqueOrders.length !== orders.length) {\n          typeHasIssues = true;\n        }\n      }\n      \n      // 如果该类型有序号问题，重新分配\n      if (typeHasIssues) {\n        console.log(`发现 ${typeKey} 类型标注序号问题，正在为 ${typeAnnotations.length} 个标注点分配序号...`);\n        hasOrderIssues = true;\n        \n        // 按照原有顺序为该类型分配序号（从1开始）\n        for (let i = 0; i < typeAnnotations.length; i++) {\n          typeAnnotations[i].order = i + 1;\n        }\n        \n        totalFixed += typeAnnotations.length;\n        console.log(`已为 ${typeKey} 类型分配序号：1-${typeAnnotations.length}`);\n      }\n    });\n    \n    if (hasOrderIssues) {\n      console.log('发现传统数据或序号问题，正在为标注点添加/修复序号...');\n      console.log(`序号修复完成：共修复 ${totalFixed} 个标注点，保持类型特定编号系统`);\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy() {\n    // 移除事件监听器\n    // 这里应该移除所有绑定的事件监听器，但为了简化暂时省略\n    \n    // 清理资源\n    if (this.imageElement && this.imageElement.src.startsWith('blob:')) {\n      URL.revokeObjectURL(this.imageElement.src);\n    }\n    \n    console.log('AnnotationTool destroyed');\n  }\n\n  /**\n   * 开始方向标注\n   */\n  startDirectionAnnotation(mousePos) {\n    // 🔧 FIX: Use comprehensive bounds checking for direction annotation creation\n    if (!this.canCreateAnnotationAt(mousePos.x, mousePos.y)) {\n      if (window.PlantAnnotationTool?.showError) {\n        window.PlantAnnotationTool.showError('Invalid Position', 'Direction annotations can only be placed within the image area. Please click directly on the image.');\n      }\n      return;\n    }\n    \n    const imagePos = this.screenToImage(mousePos.x, mousePos.y);\n    \n    this.state.isDirectionDragging = true;\n    this.state.dragStartPoint = mousePos;\n    this.state.currentDragPoint = mousePos;\n    this.state.previewKeypoint = {\n      x: imagePos.x,\n      y: imagePos.y,\n      direction: 0, // 默认方向（0度，向右）\n      directionType: 'angle'\n    };\n    \n    this.canvas.style.cursor = 'grabbing';\n    console.log('Started direction annotation');\n  }\n\n  /**\n   * 更新方向拖拽\n   */\n  updateDirectionDragging(mousePos) {\n    this.state.currentDragPoint = mousePos;\n\n    // 计算拖拽方向角度\n    const deltaX = mousePos.x - this.state.dragStartPoint.x;\n    const deltaY = mousePos.y - this.state.dragStartPoint.y;\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n    if (distance >= this.options.directionThreshold) {\n      // 计算角度（0-360度）\n      const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n      const normalizedAngle = (angle + 360) % 360;\n\n      this.state.previewKeypoint.direction = normalizedAngle;\n      this.state.previewKeypoint.directionType = 'angle';\n    } else {\n      // 距离不够，使用默认方向\n      this.state.previewKeypoint.direction = 0; // 默认向右\n      this.state.previewKeypoint.directionType = 'angle';\n    }\n\n    this.render();\n  }\n\n  /**\n   * 完成方向标注\n   */\n  finishDirectionAnnotation() {\n    if (!this.state.previewKeypoint) {\n      this.resetDirectionDragging();\n      return;\n    }\n\n    // 计算拖拽距离\n    const deltaX = this.state.currentDragPoint.x - this.state.dragStartPoint.x;\n    const deltaY = this.state.currentDragPoint.y - this.state.dragStartPoint.y;\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n    let direction, directionType;\n\n    if (distance >= this.options.directionThreshold) {\n      // 拖拽距离足够，使用计算的角度方向\n      const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n      direction = (angle + 360) % 360;\n      directionType = 'angle';\n\n      console.log(`Added keypoint with angle direction ${direction.toFixed(1)}° at (${this.state.previewKeypoint.x.toFixed(1)}, ${this.state.previewKeypoint.y.toFixed(1)})`);\n    } else {\n      // 拖拽距离不够，当作普通点击，添加默认角度方向\n      direction = 0; // 默认向右（0度）\n      directionType = 'angle';\n\n      console.log(`Added default keypoint (0°) at (${this.state.previewKeypoint.x.toFixed(1)}, ${this.state.previewKeypoint.y.toFixed(1)})`);\n    }\n\n    // 添加带角度方向的标注点\n    this.addKeypointWithDirection(\n      this.state.previewKeypoint.x,\n      this.state.previewKeypoint.y,\n      direction\n    );\n\n    this.resetDirectionDragging();\n  }\n\n  /**\n   * 重置方向拖拽状态\n   */\n  resetDirectionDragging() {\n    this.state.isDirectionDragging = false;\n    this.state.dragStartPoint = null;\n    this.state.currentDragPoint = null;\n    this.state.previewKeypoint = null;\n    this.canvas.style.cursor = 'crosshair';\n    this.render();\n  }\n\n  /**\n   * 获取标注点显示策略\n   */\n  getKeypointDisplayStrategy() {\n    const scale = this.state.scale;\n    \n    // 计算实际的标注点半径（默认使用更小的基础半径）\n    const smallRadius = 2; // 更小的默认点半径\n    let actualRadius;\n    \n    if (scale >= 1.5) {\n      // 大缩放：使用能容纳文字的最小圆圈\n      const fontSize = Math.max(10, Math.min(16, 12 * scale));\n      \n      // 根据文字大小计算合适的圆圈半径\n      // 文字高度约等于fontSize，需要留一点边距\n      const textBasedRadius = Math.max(8, fontSize * 0.7); // 文字大小的70%作为半径\n      \n      // 限制最大半径，在高缩放时不要让圆圈过大\n      const maxRadiusForLargeScale = Math.min(12, 8 + (scale - 1.5) * 2); // 最大12px，缓慢增长\n      \n      actualRadius = Math.min(textBasedRadius, maxRadiusForLargeScale);\n      actualRadius = Math.max(8, actualRadius); // 最小保证8px\n    } else {\n      // 默认和小缩放：使用更小的点\n      actualRadius = smallRadius + (scale - 0.1) * 1.5; // 从2px到4px的范围\n      actualRadius = Math.max(smallRadius, Math.min(4, actualRadius));\n    }\n    \n    return {\n      scale: scale,\n      radius: actualRadius,\n      showInternalLabel: scale >= 1.5, // 只有在1.5倍缩放以上才内部显示\n      showExternalLabel: scale >= this.options.tinyThresholdScale, // 大部分情况下外部显示\n      showMinimalMode: scale < this.options.tinyThresholdScale,\n      fontSize: Math.max(10, Math.min(16, 12 * scale)),\n      directionFontSize: Math.max(8, Math.min(12, 10 * scale)),\n      labelOffset: 8, // 更小的偏移距离\n      borderWidth: Math.max(1, Math.min(2, 1.5 * scale))\n    };\n  }\n\n  /**\n   * 创建外部标签\n   */\n  createExternalLabel(x, y, label, direction, fillColor, strategy) {\n    const canvas = this.canvas;\n    const container = canvas.parentElement;\n    \n    // 创建标签元素\n    const labelElement = document.createElement('div');\n    labelElement.className = `keypoint-label ${direction === 'left' ? 'left-direction' : 'right-direction'}`;\n    labelElement.textContent = label.toString();\n    labelElement.dataset.keypointId = `${x}-${y}`;\n    \n    // 计算标签位置\n    const rect = canvas.getBoundingClientRect();\n    const containerRect = container.getBoundingClientRect();\n    \n    const offsetX = rect.left - containerRect.left;\n    const offsetY = rect.top - containerRect.top;\n    \n    // 根据标注点大小调整标签位置，让标签距离更远\n    const labelOffsetY = strategy.radius < 4 ? 12 : 15;\n    \n    labelElement.style.left = (offsetX + x - 6) + 'px'; // 居中对齐，稍微调整\n    labelElement.style.top = (offsetY + y - strategy.radius - labelOffsetY) + 'px';\n    \n    container.appendChild(labelElement);\n  }\n\n  /**\n   * 创建悬停提示\n   */\n  createTooltip(x, y, label, direction, keypoint) {\n    const canvas = this.canvas;\n    const container = canvas.parentElement;\n    \n    // 移除已存在的提示\n    const existingTooltip = container.querySelector('.keypoint-tooltip');\n    if (existingTooltip) {\n      existingTooltip.remove();\n    }\n    \n    // 创建提示元素\n    const tooltip = document.createElement('div');\n    tooltip.className = 'keypoint-tooltip';\n    \n    const directionText = direction === 'left' ? 'Left' : 'Right';\n    const coordinateText = `(${Math.round(keypoint.x)}, ${Math.round(keypoint.y)})`;\n    \n    tooltip.innerHTML = `\n      <div>分支点 #${label}</div>\n      <div>方向: ${directionText}</div>\n      <div>位置: ${coordinateText}</div>\n    `;\n    \n    // 计算提示位置\n    const rect = canvas.getBoundingClientRect();\n    const containerRect = container.getBoundingClientRect();\n    \n    const offsetX = rect.left - containerRect.left;\n    const offsetY = rect.top - containerRect.top;\n    \n    tooltip.style.left = (offsetX + x - 60) + 'px';\n    tooltip.style.top = (offsetY + y - 80) + 'px';\n    \n    container.appendChild(tooltip);\n    \n    // 自动移除提示\n    setTimeout(() => {\n      if (tooltip.parentElement) {\n        tooltip.remove();\n      }\n    }, 3000);\n  }\n\n  /**\n   * 清除所有标注点标签\n   */\n  clearKeypointLabels() {\n    if (!this.canvas || !this.canvas.parentElement) return;\n    \n    const container = this.canvas.parentElement;\n    const labels = container.querySelectorAll('.keypoint-label');\n    labels.forEach(label => label.remove());\n  }\n\n  /**\n   * 更新缩放级别指示器\n   */\n  updateZoomIndicator(strategy) {\n    const indicator = document.getElementById('zoom-indicator');\n    if (!indicator) return;\n    \n    // 移除所有状态类\n    indicator.classList.remove('small', 'tiny');\n    \n    if (strategy.showMinimalMode) {\n      indicator.classList.add('tiny');\n    } else if (strategy.showExternalLabel) {\n      indicator.classList.add('small');\n    }\n  }\n\n  /**\n   * 更新标注点大小信息\n   */\n  updateAnnotationSizeInfo(strategy) {\n    const sizeInfo = document.getElementById('annotation-size-info');\n    const sizeText = document.getElementById('size-info-text');\n    \n    if (!sizeInfo || !sizeText) return;\n    \n    let statusText = '';\n    let showInfo = false;\n    \n    if (strategy.showMinimalMode) {\n      statusText = '标注点: 极小模式（悬停查看详情）';\n      showInfo = true;\n    } else if (strategy.showExternalLabel) {\n      statusText = '标注点: 外部标签模式';\n      showInfo = true;\n    } else {\n      statusText = '标注点: 正常大小';\n      showInfo = this.keypoints.length > 0 && (strategy.scale < 0.8 || strategy.scale > 3);\n    }\n    \n    sizeText.textContent = statusText;\n    \n    if (showInfo) {\n      sizeInfo.classList.add('visible');\n      \n      // 自动隐藏\n      setTimeout(() => {\n        if (sizeInfo) {\n          sizeInfo.classList.remove('visible');\n        }\n      }, 2000);\n    } else {\n      sizeInfo.classList.remove('visible');\n    }\n  }\n\n  /**\n   * 同步分支点预览\n   */\n  syncBranchPointPreview() {\n    // 通过全局对象访问分支点预览管理器\n    const branchPointPreviewManager = window.PlantAnnotationTool?.branchPointPreviewManager;\n    const appState = window.PlantAnnotationTool?.appState;\n    \n    if (branchPointPreviewManager && appState?.currentPlant && appState?.currentImage) {\n      // 获取当前标注点数量并更新预览上下文\n      const currentKeypointCount = this.keypoints.length;\n      \n      // 异步更新预览上下文\n      setTimeout(async () => {\n        try {\n          const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n          if (plantDataManager) {\n            const images = await plantDataManager.getPlantImages(\n              appState.currentPlant.id, \n              appState.currentPlant.selectedViewAngle\n            );\n            const imageIndex = images.findIndex(img => img.id === appState.currentImage.id);\n            \n            await branchPointPreviewManager.updateContext(\n              appState.currentPlant.id,\n              appState.currentPlant.selectedViewAngle,\n              imageIndex,\n              currentKeypointCount\n            );\n          }\n        } catch (error) {\n          console.warn('同步分支点预览失败:', error);\n        }\n      }, 100);\n    }\n  }\n\n  /**\n   * 通知预览管理器显示被拖动点对应的预览\n   */\n  notifyDraggedKeypointPreview(keypoint) {\n    // 通过全局对象访问分支点预览管理器\n    const branchPointPreviewManager = window.PlantAnnotationTool?.branchPointPreviewManager;\n    \n    if (branchPointPreviewManager && keypoint && keypoint.order) {\n      // 告诉预览管理器显示这个编号的预览\n      branchPointPreviewManager.showSpecificOrderPreview(keypoint.order);\n    }\n  }\n\n  /**\n   * 🔧 NEW: 设置图像切换锁定状态\n   * @param {boolean} isLocked - 是否锁定\n   * @param {string} imageId - 正在加载的图像ID\n   */\n  setImageSwitchLock(isLocked, imageId = null) {\n    this.imageSwitchLock.isLocked = isLocked;\n    this.imageSwitchLock.currentLoadingImageId = imageId;\n    this.imageSwitchLock.lockStartTime = isLocked ? Date.now() : null;\n    \n    console.log(`[图像切换锁] ${isLocked ? '锁定' : '解锁'} - 图像: ${imageId || 'none'}`);\n  }\n  \n  /**\n   * 🔧 NEW: 验证当前图像一致性\n   * @param {string} expectedImageId - 期望的图像ID\n   * @returns {boolean} 是否一致\n   */\n  validateCurrentImageConsistency(expectedImageId) {\n    const appState = window.PlantAnnotationTool?.appState;\n    if (!appState?.currentImage?.id) {\n      console.warn('[一致性检查] 当前图像状态无效');\n      return false;\n    }\n    \n    const isConsistent = appState.currentImage.id === expectedImageId;\n    if (!isConsistent) {\n      console.warn(`[一致性检查] 不一致 - 期望: ${expectedImageId}, 实际: ${appState.currentImage.id}`);\n    }\n    \n    return isConsistent;\n  }\n  \n  /**\n   * 🔧 ENHANCED: 自动保存当前图像（带锁定机制）\n   */\n  async autoSaveCurrentImage() {\n    try {\n      const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n      const appState = window.PlantAnnotationTool?.appState;\n      \n      if (!plantDataManager || !appState?.currentPlant || !appState?.currentImage) {\n        console.warn('自动保存跳过：缺少必要的上下文信息');\n        return;\n      }\n      \n      // 🔧 NEW: 检查图像切换锁定状态\n      if (this.imageSwitchLock.isLocked) {\n        console.warn(`[自动保存] 跳过：图像切换进行中 (${this.imageSwitchLock.currentLoadingImageId})`);\n        return;\n      }\n      \n      // 🔧 FIX: 检查 currentImage 的有效性，防止 null 引用错误\n      if (!appState.currentImage || !appState.currentImage.id) {\n        console.warn('自动保存跳过：当前图像信息无效');\n        return;\n      }\n      \n      // 🔧 NEW: 记录当前图像ID，用于一致性验证\n      const currentImageId = appState.currentImage.id;\n      \n      // 获取当前标注数据\n      const annotationData = this.getAnnotationData();\n      \n      // 🔧 NEW: 在保存前再次验证图像一致性\n      if (!this.validateCurrentImageConsistency(currentImageId)) {\n        console.warn(`[自动保存] 跳过：图像状态在保存前发生变化 (${currentImageId})`);\n        return;\n      }\n      \n      // 保存到当前图像（即使没有标注点也要保存，表示清空状态）\n      await plantDataManager.saveImageAnnotations(\n        currentImageId,\n        annotationData.keypoints\n      );\n      \n      // 🔧 NEW: 在保存后验证图像状态仍然一致\n      if (!this.validateCurrentImageConsistency(currentImageId)) {\n        console.warn(`[自动保存] 警告：图像状态在保存后发生变化，数据可能已保存到错误图像 (${currentImageId})`);\n        return;\n      }\n      \n      console.log(`自动保存完成：${annotationData.keypoints.length} 个标注点已保存到图像 ${currentImageId}`);\n      \n      // 🔧 FIX: 自动保存后立即刷新缩略图状态（通过全局函数访问）\n      try {\n        // 尝试通过window对象访问全局函数\n        const refreshFunction = window.refreshThumbnailAnnotationStatus;\n        if (typeof refreshFunction === 'function') {\n          await refreshFunction(currentImageId);\n          console.log('自动保存后缩略图状态已刷新');\n        } else {\n          console.warn('refreshThumbnailAnnotationStatus 函数未找到，跳过缩略图刷新');\n        }\n      } catch (refreshError) {\n        console.warn('刷新缩略图状态失败:', refreshError);\n      }\n      \n    } catch (error) {\n      console.error('自动保存失败:', error);\n    }\n  }\n\n  /**\n   * 🔄 触发实时同步操作\n   * @param {string} operationType - 操作类型 ('ADD_KEYPOINT', 'MOVE_KEYPOINT', 'DELETE_KEYPOINT', 'EDIT_DIRECTION')\n   * @param {object} keypoint - 相关的关键点数据\n   * @param {object} previousPosition - 之前的位置（仅移动操作需要）\n   */\n  triggerRealTimeSync(operationType, keypoint, previousPosition = null) {\n    try {\n      // 获取实时同步管理器\n      const realTimeSyncManager = window.PlantAnnotationTool?.realTimeSyncManager;\n      \n      if (!realTimeSyncManager) {\n        console.warn('🔄 实时同步管理器未找到，跳过同步操作');\n        return;\n      }\n\n      // 检查是否启用了实时同步\n      if (!realTimeSyncManager.isRealTimeSyncEnabled()) {\n        console.log('🔄 实时同步已禁用，跳过同步操作');\n        return;\n      }\n\n      // 获取当前上下文\n      const appState = window.PlantAnnotationTool?.appState;\n      if (!appState?.currentPlant || !appState?.currentImage) {\n        console.warn('🔄 缺少当前植株或图像信息，跳过同步操作');\n        return;\n      }\n\n      // 🔧 Enhanced Debug: Log detailed keypoint information\n      const keypointInfo = {\n        id: keypoint?.id,\n        order: keypoint?.order,\n        annotationType: keypoint?.annotationType,\n        customTypeId: keypoint?.customTypeId,\n        x: keypoint?.x,\n        y: keypoint?.y\n      };\n\n      console.log(`🔄 触发实时同步: ${operationType}`, {\n        keypoint: keypointInfo,\n        plant: appState.currentPlant.id,\n        image: appState.currentImage.id,\n        isCustom: keypoint?.annotationType === 'custom'\n      });\n\n      // 🔧 FIX: Route custom annotations to custom annotation sync methods\n      // This is crucial for proper order-based synchronization\n      const isCustomAnnotation = keypoint?.annotationType === 'custom';\n      \n      if (isCustomAnnotation) {\n        // Use custom annotation sync methods for custom annotations\n        console.log(`🔄 Using custom annotation sync for ${operationType}`);\n        \n        switch (operationType) {\n          case 'ADD_KEYPOINT':\n            // Create sync data for custom annotation creation\n            const createSyncData = {\n              type: 'CUSTOM_ANNOTATION_CREATE',\n              annotation: keypoint,\n              context: {\n                imageId: appState.currentImage.id,\n                plantId: appState.currentPlant.id,\n                viewAngle: appState.currentPlant.selectedViewAngle,\n                appState: appState\n              },\n              timestamp: new Date().toISOString()\n            };\n            realTimeSyncManager.triggerCustomAnnotationSync(createSyncData);\n            break;\n            \n          case 'MOVE_KEYPOINT':\n            // Create sync data for custom annotation update\n            const updateSyncData = {\n              type: 'CUSTOM_ANNOTATION_UPDATE',\n              annotation: keypoint,\n              context: {\n                imageId: appState.currentImage.id,\n                plantId: appState.currentPlant.id,\n                viewAngle: appState.currentPlant.selectedViewAngle,\n                appState: appState,\n                positionChange: {\n                  from: previousPosition,\n                  to: { x: keypoint.x, y: keypoint.y }\n                }\n              },\n              timestamp: new Date().toISOString()\n            };\n            realTimeSyncManager.triggerCustomAnnotationSync(updateSyncData);\n            break;\n            \n          case 'DELETE_KEYPOINT':\n            // Create sync data for custom annotation deletion\n            const deleteSyncData = {\n              type: 'CUSTOM_ANNOTATION_DELETE',\n              annotation: keypoint,\n              context: {\n                imageId: appState.currentImage.id,\n                plantId: appState.currentPlant.id,\n                viewAngle: appState.currentPlant.selectedViewAngle,\n                appState: appState\n              },\n              timestamp: new Date().toISOString()\n            };\n            realTimeSyncManager.triggerCustomAnnotationSync(deleteSyncData);\n            break;\n            \n          default:\n            console.warn(`🔄 未知的自定义标注同步操作类型: ${operationType}`);\n        }\n      } else {\n        // Use regular keypoint sync methods for regular annotations\n        console.log(`🔄 Using regular keypoint sync for ${operationType}`);\n        \n        switch (operationType) {\n          case 'ADD_KEYPOINT':\n            realTimeSyncManager.triggerKeypointAddSync(\n              keypoint,\n              appState.currentImage,\n              appState.currentPlant\n            );\n            break;\n            \n          case 'MOVE_KEYPOINT':\n            realTimeSyncManager.triggerKeypointMoveSync(\n              keypoint,\n              previousPosition,\n              appState.currentImage,\n              appState.currentPlant\n            );\n            break;\n            \n          case 'DELETE_KEYPOINT':\n            realTimeSyncManager.triggerKeypointDeleteSync(\n              keypoint,\n              appState.currentImage,\n              appState.currentPlant\n            );\n            break;\n            \n          case 'EDIT_DIRECTION':\n            realTimeSyncManager.triggerDirectionEditSync(\n              keypoint,\n              appState.currentImage,\n              appState.currentPlant\n            );\n            break;\n            \n          default:\n            console.warn(`🔄 未知的常规标注同步操作类型: ${operationType}`);\n        }\n      }\n      \n    } catch (error) {\n      console.error('🔄 触发实时同步失败:', error);\n    }\n  }\n\n  /**\n   * 渲染方向指示器（统一处理所有方向类型）\n   */\n  renderDirectionIndicator(x, y, direction, keypoint) {\n    if (!direction) return;\n\n    let angleDegrees;\n    let directionText = '';\n\n    // 统一转换为角度\n    if (typeof direction === 'number') {\n      // 已经是角度\n      angleDegrees = direction;\n      directionText = `${angleDegrees.toFixed(1)}°`;\n    } else if (direction === 'left') {\n      // 左侧：180度\n      angleDegrees = 180;\n      directionText = 'Left (180°)';\n    } else if (direction === 'right') {\n      // 右侧：0度\n      angleDegrees = 0;\n      directionText = 'Right (0°)';\n    } else {\n      return; // 未知方向类型\n    }\n\n    this.renderDirectionArrow(x, y, angleDegrees, directionText, keypoint);\n  }\n\n  /**\n   * 渲染方向箭头（改进版 - 虚线从中心延伸）\n   */\n  renderDirectionArrow(x, y, angleDegrees, directionText, keypoint) {\n    const angleRadians = angleDegrees * Math.PI / 180;\n    const arrowLength = this.options.directionArrowLength;\n\n    // 计算箭头终点\n    const endX = x + Math.cos(angleRadians) * arrowLength;\n    const endY = y + Math.sin(angleRadians) * arrowLength;\n\n    // 绘制虚线主线\n    this.ctx.strokeStyle = '#10b981'; // 绿色\n    this.ctx.lineWidth = 3;\n    this.ctx.setLineDash([8, 4]); // 虚线样式\n    this.ctx.lineCap = 'round';\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(x, y);\n    this.ctx.lineTo(endX, endY);\n    this.ctx.stroke();\n\n    // 重置虚线样式\n    this.ctx.setLineDash([]);\n\n    // 绘制箭头头部（实线）\n    const headAngle1 = angleRadians + Math.PI * 0.8;\n    const headAngle2 = angleRadians - Math.PI * 0.8;\n    const headLength = 15;\n\n    this.ctx.strokeStyle = '#10b981';\n    this.ctx.lineWidth = 3;\n    this.ctx.lineCap = 'round';\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(endX, endY);\n    this.ctx.lineTo(endX + Math.cos(headAngle1) * headLength, endY + Math.sin(headAngle1) * headLength);\n    this.ctx.moveTo(endX, endY);\n    this.ctx.lineTo(endX + Math.cos(headAngle2) * headLength, endY + Math.sin(headAngle2) * headLength);\n    this.ctx.stroke();\n\n    // 绘制方向文本（带背景）\n    const textOffset = 20;\n    const textX = endX + Math.cos(angleRadians) * textOffset;\n    const textY = endY + Math.sin(angleRadians) * textOffset;\n\n    // 测量文本尺寸\n    this.ctx.font = 'bold 11px Arial';\n    const textMetrics = this.ctx.measureText(directionText);\n    const textWidth = textMetrics.width;\n    const textHeight = 11;\n\n    // 绘制文本背景\n    this.ctx.fillStyle = 'rgba(16, 185, 129, 0.9)';\n    this.ctx.fillRect(textX - textWidth/2 - 3, textY - textHeight/2 - 2, textWidth + 6, textHeight + 4);\n\n    // 绘制文本\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(directionText, textX, textY);\n  }\n\n  /**\n   * 渲染方向选择指引\n   */\n  renderDirectionSelectionGuide() {\n    if (!this.state.selectedKeypoint || !this.state.directionSelectionPoint) return;\n\n    const keypointScreen = this.imageToScreen(\n      this.state.selectedKeypoint.x,\n      this.state.selectedKeypoint.y\n    );\n\n    const guideX = this.state.directionSelectionPoint.x;\n    const guideY = this.state.directionSelectionPoint.y;\n\n    // 计算距离，只有足够远才显示指引\n    const distance = Math.sqrt(\n      Math.pow(guideX - keypointScreen.x, 2) +\n      Math.pow(guideY - keypointScreen.y, 2)\n    );\n\n    if (distance < 20) return; // 距离太近不显示\n\n    // 绘制虚线指引线\n    this.ctx.strokeStyle = '#f59e0b'; // 橙色\n    this.ctx.lineWidth = 3;\n    this.ctx.setLineDash([8, 4]);\n    this.ctx.lineCap = 'round';\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(keypointScreen.x, keypointScreen.y);\n    this.ctx.lineTo(guideX, guideY);\n    this.ctx.stroke();\n\n    // 绘制箭头头部\n    const deltaX = guideX - keypointScreen.x;\n    const deltaY = guideY - keypointScreen.y;\n    const angle = Math.atan2(deltaY, deltaX);\n    const normalizedAngle = (angle * 180 / Math.PI + 360) % 360;\n\n    const headAngle1 = angle + Math.PI * 0.8;\n    const headAngle2 = angle - Math.PI * 0.8;\n    const headLength = 12;\n\n    this.ctx.setLineDash([]); // 实线箭头\n    this.ctx.beginPath();\n    this.ctx.moveTo(guideX, guideY);\n    this.ctx.lineTo(guideX + Math.cos(headAngle1) * headLength, guideY + Math.sin(headAngle1) * headLength);\n    this.ctx.moveTo(guideX, guideY);\n    this.ctx.lineTo(guideX + Math.cos(headAngle2) * headLength, guideY + Math.sin(headAngle2) * headLength);\n    this.ctx.stroke();\n\n    // 绘制角度文本（带背景）\n    const textOffset = 25;\n    const textX = guideX + Math.cos(angle) * textOffset;\n    const textY = guideY + Math.sin(angle) * textOffset;\n    const angleText = `${normalizedAngle.toFixed(1)}°`;\n\n    // 测量文本尺寸\n    this.ctx.font = 'bold 12px Arial';\n    const textMetrics = this.ctx.measureText(angleText);\n    const textWidth = textMetrics.width;\n    const textHeight = 12;\n\n    // 绘制文本背景\n    this.ctx.fillStyle = 'rgba(245, 158, 11, 0.9)';\n    this.ctx.fillRect(textX - textWidth/2 - 4, textY - textHeight/2 - 2, textWidth + 8, textHeight + 4);\n\n    // 绘制文本\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(angleText, textX, textY);\n\n    // 重置线条样式\n    this.ctx.setLineDash([]);\n  }\n\n  /**\n   * 升级传统方向到角度方向\n   */\n  upgradeLegacyDirections() {\n    let upgraded = 0;\n\n    this.keypoints.forEach(keypoint => {\n      if (keypoint.direction === 'left' && keypoint.directionType !== 'angle') {\n        keypoint.direction = 180;\n        keypoint.directionType = 'angle';\n        upgraded++;\n      } else if (keypoint.direction === 'right' && keypoint.directionType !== 'angle') {\n        keypoint.direction = 0;\n        keypoint.directionType = 'angle';\n        upgraded++;\n      }\n    });\n\n    if (upgraded > 0) {\n      console.log(`Upgraded ${upgraded} legacy direction annotations to angle format`);\n      this.saveState();\n      this.render();\n      this.autoSaveCurrentImage();\n    }\n\n    return upgraded;\n  }\n\n  /**\n   * 设置自动切换到预期位置功能\n   */\n  setAutoMoveToExpectedPosition(enabled) {\n    this.state.autoMoveToExpectedPosition = enabled;\n    console.log(`自动切换到预期位置: ${enabled ? '开启' : '关闭'}`);\n  }\n\n  /**\n   * 获取目标缩放倍数（锁定倍数优先，否则保持当前倍数）\n   */\n  getTargetScale() {\n    // 获取锁定倍数设置\n    if (typeof window.getZoomLockSettings === 'function') {\n      const zoomSettings = window.getZoomLockSettings();\n      if (zoomSettings.isLocked) {\n        console.log(`[自动切换] 使用锁定倍数: ${zoomSettings.lockValue}x`);\n        return zoomSettings.lockValue;\n      }\n    }\n\n    // 非锁定状态：保持当前倍数\n    console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`);\n    return this.state.scale;\n  }\n\n  /**\n   * 移动视角到最高标记点并保持当前缩放\n   */\n  moveToHighestKeypoint() {\n    if (!this.keypoints || this.keypoints.length === 0) {\n      console.log('没有标注点，无法移动视角');\n      return false;\n    }\n\n    // 找到序号最大的标注点\n    const highestKeypoint = this.keypoints.reduce((highest, current) => {\n      const currentOrder = current.order || 0;\n      const highestOrder = highest.order || 0;\n      return currentOrder > highestOrder ? current : highest;\n    });\n\n    console.log(`移动视角到最高标记点 #${highestKeypoint.order}`);\n\n    // 保持当前缩放，只移动视角中心\n    const currentScale = this.state.scale;\n    const centerX = this.canvas.width / 2;\n    const centerY = this.canvas.height / 2;\n\n    // 计算新的平移，使最高标记点居中\n    this.state.translateX = centerX - (highestKeypoint.x * currentScale);\n    this.state.translateY = centerY - (highestKeypoint.y * currentScale);\n\n    // 确保图像不会超出边界\n    this.constrainView();\n\n    this.updateZoomInfo();\n    this.render();\n\n    console.log(`视角已移动到标注点 #${highestKeypoint.order}，保持缩放: ${currentScale.toFixed(1)}x`);\n    return true;\n  }\n\n  /**\n   * 移动到预期位置（基于预览图中的参考位置）\n   * @param {boolean} isImageSwitch - 是否是图片切换触发的\n   */\n  async moveToExpectedPosition(isImageSwitch = false) {\n    if (!this.state.autoMoveToExpectedPosition) {\n      return; // 功能未开启\n    }\n\n    try {\n      if (isImageSwitch) {\n        // 图片切换时的逻辑：分析切换到的新图像\n        await this.handleImageSwitchAutoMove();\n      } else {\n        // 标注点创建后的逻辑：移动到下一个预期位置\n        await this.moveToNextExpectedPosition();\n      }\n    } catch (error) {\n      console.error('[自动切换] 移动到预期位置失败:', error);\n    }\n  }\n\n  /**\n   * 处理图片切换时的自动移动\n   */\n  async handleImageSwitchAutoMove() {\n    // 分析新图像（当前加载的图像）的标注情况\n    const newImageAnnotations = this.keypoints || [];\n\n    console.log(`[自动切换] 图片切换：新图像有 ${newImageAnnotations.length} 个标注点`);\n\n    if (newImageAnnotations.length === 0) {\n      // 情况1: 新图像没有标注，移动到1号点位置\n      console.log('[自动切换] 新图像没有标注，移动到1号点位置');\n      await this.moveToPosition1();\n    } else {\n      // 检查新图像的标注点是否都没有方向\n      const hasDirectionAnnotations = newImageAnnotations.some(kp =>\n        kp.direction !== null && kp.direction !== undefined &&\n        (typeof kp.direction === 'number' || kp.directionType === 'angle')\n      );\n\n      if (!hasDirectionAnnotations) {\n        // 情况2: 新图像有标注但都没有方向，移动到几何中心\n        console.log('[自动切换] 新图像有无方向标注，移动到几何中心');\n        this.moveToAnnotationsCenter();\n      } else {\n        // 情况3: 新图像有方向标注，保持当前位置不动\n        console.log('[自动切换] 新图像有方向标注，保持当前位置');\n      }\n    }\n  }\n\n  /**\n   * 移动到1号位置（从预览图获取）\n   */\n  async moveToPosition1() {\n    try {\n      // 获取分支点预览管理器\n      const branchPointPreviewManager = window.PlantAnnotationTool?.branchPointPreviewManager;\n      if (!branchPointPreviewManager) {\n        console.log('[自动切换] 预览管理器不可用，无法获取1号位置');\n        return;\n      }\n\n      // 获取1号位置\n      const position1 = await branchPointPreviewManager.getExpectedPosition(1);\n\n      if (position1) {\n        console.log(`[自动切换] 移动到1号位置: (${position1.x.toFixed(1)}, ${position1.y.toFixed(1)})`);\n\n        // 检查是否需要应用锁定倍数\n        const zoomSettings = typeof window.getZoomLockSettings === 'function' ? window.getZoomLockSettings() : { isLocked: false };\n\n        if (zoomSettings.isLocked) {\n          // 锁定状态：使用锁定倍数\n          this.state.scale = zoomSettings.lockValue;\n          console.log(`[自动切换] 应用锁定倍数: ${zoomSettings.lockValue}x`);\n        } else {\n          // 非锁定状态：保持当前倍数\n          console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`);\n        }\n\n        const centerX = this.canvas.width / 2;\n        const centerY = this.canvas.height / 2;\n\n        // 计算新的位置\n        this.state.translateX = centerX - (position1.x * this.state.scale);\n        this.state.translateY = centerY - (position1.y * this.state.scale);\n\n        // 确保图像不会超出边界\n        this.constrainView();\n\n        this.updateZoomInfo();\n        this.render();\n\n        console.log(`[自动切换] 视角已移动到1号位置，缩放: ${this.state.scale.toFixed(1)}x`);\n      } else {\n        console.log(`[自动切换] 未找到1号位置的参考坐标`);\n      }\n    } catch (error) {\n      console.error('[自动切换] 移动到1号位置失败:', error);\n    }\n  }\n\n  /**\n   * 移动到所有标注点的几何中心\n   */\n  moveToAnnotationsCenter() {\n    const annotations = this.keypoints || [];\n    if (annotations.length === 0) {\n      return;\n    }\n\n    // 计算几何中心\n    let sumX = 0, sumY = 0;\n    for (const annotation of annotations) {\n      sumX += annotation.x;\n      sumY += annotation.y;\n    }\n\n    const centerX_img = sumX / annotations.length;\n    const centerY_img = sumY / annotations.length;\n\n    console.log(`[自动切换] 移动到标注点几何中心: (${centerX_img.toFixed(1)}, ${centerY_img.toFixed(1)}), 共${annotations.length}个标注点`);\n\n    // 检查是否需要应用锁定倍数\n    const zoomSettings = typeof window.getZoomLockSettings === 'function' ? window.getZoomLockSettings() : { isLocked: false };\n\n    if (zoomSettings.isLocked) {\n      // 锁定状态：使用锁定倍数\n      this.state.scale = zoomSettings.lockValue;\n      console.log(`[自动切换] 应用锁定倍数: ${zoomSettings.lockValue}x`);\n    } else {\n      // 非锁定状态：保持当前倍数\n      console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`);\n    }\n\n    const centerX = this.canvas.width / 2;\n    const centerY = this.canvas.height / 2;\n\n    // 计算新的位置\n    this.state.translateX = centerX - (centerX_img * this.state.scale);\n    this.state.translateY = centerY - (centerY_img * this.state.scale);\n\n    // 确保图像不会超出边界\n    this.constrainView();\n\n    this.updateZoomInfo();\n    this.render();\n\n    console.log(`[自动切换] 视角已移动到标注点几何中心，缩放: ${this.state.scale.toFixed(1)}x`);\n  }\n\n  /**\n   * 移动到下一个预期位置（原有逻辑）\n   */\n  async moveToNextExpectedPosition() {\n    try {\n      // 获取分支点预览管理器\n      const branchPointPreviewManager = window.PlantAnnotationTool?.branchPointPreviewManager;\n      if (!branchPointPreviewManager) {\n        console.log('[自动切换] 预览管理器不可用');\n        return;\n      }\n\n      // 获取下一个要标注的编号\n      const nextOrder = this.findNextAvailableOrder();\n\n      // 从预览管理器获取预期位置\n      const expectedPosition = await branchPointPreviewManager.getExpectedPosition(nextOrder);\n\n      if (expectedPosition) {\n        console.log(`[自动切换] 移动到预期位置: 编号${nextOrder}, 坐标(${expectedPosition.x.toFixed(1)}, ${expectedPosition.y.toFixed(1)})`);\n\n        // 检查是否需要应用锁定倍数\n        const zoomSettings = typeof window.getZoomLockSettings === 'function' ? window.getZoomLockSettings() : { isLocked: false };\n\n        if (zoomSettings.isLocked) {\n          // 锁定状态：使用锁定倍数\n          this.state.scale = zoomSettings.lockValue;\n          console.log(`[自动切换] 应用锁定倍数: ${zoomSettings.lockValue}x`);\n        } else {\n          // 非锁定状态：保持当前倍数\n          console.log(`[自动切换] 保持当前倍数: ${this.state.scale.toFixed(1)}x`);\n        }\n\n        const centerX = this.canvas.width / 2;\n        const centerY = this.canvas.height / 2;\n\n        // 计算新的位置\n        this.state.translateX = centerX - (expectedPosition.x * this.state.scale);\n        this.state.translateY = centerY - (expectedPosition.y * this.state.scale);\n\n        // 确保图像不会超出边界\n        this.constrainView();\n\n        this.updateZoomInfo();\n        this.render();\n\n        console.log(`[自动切换] 视角已移动到预期位置，缩放: ${this.state.scale.toFixed(1)}x`);\n      } else {\n        console.log(`[自动切换] 未找到编号${nextOrder}的预期位置`);\n      }\n    } catch (error) {\n      console.error('[自动切换] 移动到下一个预期位置失败:', error);\n    }\n  }\n\n  /**\n   * 尝试自动切换到下一张图片继续自动化\n   */\n  tryAutoSwitchToNextImage() {\n    // 检查是否有全局的图片导航功能\n    if (typeof window.navigateToNextImage === 'function') {\n      // 调用全局的下一张图片函数（自动化模式，不循环）\n      window.navigateToNextImage(true).then(success => {\n        if (success) {\n          // 切换成功，延迟一点时间等待图片加载，然后重新开始自动化\n          setTimeout(() => {\n            this.restartAutoDirectionMode();\n          }, 300);\n        } else {\n          // 没有下一张图片，结束自动化\n          console.log('没有更多图片，结束自动化');\n          this.exitAutoDirectionMode();\n          this.resetAutoDirectionButton();\n\n          if (window.showSuccess) {\n            window.showSuccess('全部完成', '所有图片的方向设置已完成！');\n          }\n        }\n      });\n      return true; // 表示已经处理了切换逻辑\n    }\n\n    // 如果没有全局导航函数，尝试模拟右箭头键\n    if (typeof window.handleKeyDown === 'function') {\n      const rightArrowEvent = {\n        key: 'ArrowRight',\n        preventDefault: () => {},\n        stopPropagation: () => {}\n      };\n\n      window.handleKeyDown(rightArrowEvent);\n\n      // 延迟一点时间等待图片切换，然后重新开始自动化\n      setTimeout(() => {\n        this.restartAutoDirectionMode();\n      }, 200);\n      return true;\n    }\n\n    return false; // 无法切换到下一张图片\n  }\n\n  /**\n   * 重新开始自动化方向设置模式（用于图片切换后）\n   */\n  restartAutoDirectionMode() {\n    console.log('[调试] 重新开始自动化方向设置模式');\n\n    // 清除当前状态\n    this.state.isAutoDirectionMode = false;\n    this.state.autoDirectionKeypoints = [];\n    this.state.autoDirectionIndex = 0;\n\n    // 重新启动自动化模式\n    const success = this.startAutoDirectionMode();\n    if (!success) {\n      // 如果新图片没有需要设置方向的点，结束自动化\n      console.log('新图片没有需要设置方向的标注点，结束自动化');\n      this.exitAutoDirectionMode();\n      this.resetAutoDirectionButton();\n\n      if (window.showInfo) {\n        window.showInfo('自动化完成', '已完成所有图片的方向设置');\n      }\n    }\n  }\n\n  /**\n   * 重置自动化方向选择按钮状态\n   */\n  resetAutoDirectionButton() {\n    const autoDirectionBtn = document.getElementById('auto-direction-btn');\n    if (autoDirectionBtn) {\n      console.log('[调试] 重置按钮状态为正常模式');\n\n      // 移除暂停模式的事件监听器\n      if (autoDirectionBtn._pauseHandler) {\n        autoDirectionBtn.removeEventListener('click', autoDirectionBtn._pauseHandler);\n        autoDirectionBtn._pauseHandler = null;\n      }\n\n      // 更新按钮外观\n      autoDirectionBtn.textContent = 'Auto Direction';\n      autoDirectionBtn.classList.remove('active');\n\n      // 重新添加原始的点击事件\n      if (window.handleAutoDirectionSelection) {\n        autoDirectionBtn.addEventListener('click', window.handleAutoDirectionSelection);\n      }\n    }\n  }\n\n  /**\n   * 暂停自动化方向升级模式\n   */\n  pauseAutoDirectionMode() {\n    if (!this.state.isAutoDirectionMode) return;\n\n    const remaining = this.state.autoDirectionKeypoints.length - this.state.autoDirectionIndex;\n    const completed = this.state.autoDirectionIndex;\n\n    this.exitAutoDirectionMode();\n\n    // 重置按钮状态\n    this.resetAutoDirectionButton();\n\n    console.log(`方向升级模式已暂停，已完成 ${completed} 个，剩余 ${remaining} 个`);\n\n    // 显示暂停提示\n    if (window.showInfo) {\n      window.showInfo('升级暂停', `已完成 ${completed} 个标注点的升级，剩余 ${remaining} 个。可重新点击\"自动化方向选择\"继续。`);\n    }\n  }\n\n  /**\n   * 开始自定义标注拖拽\n   */\n  startCustomAnnotationDrag(annotation, mousePos) {\n    if (!this.customAnnotationRenderer) return;\n    \n    this.customAnnotationDragState.isDragging = true;\n    this.customAnnotationDragState.draggedAnnotation = annotation;\n    this.customAnnotationDragState.startPosition = mousePos;\n    \n    // 通知渲染器开始拖拽\n    this.customAnnotationRenderer.startDrag(annotation, mousePos);\n    \n    this.canvas.style.cursor = 'grabbing';\n    console.log('Started custom annotation drag:', annotation.id);\n  }\n  \n  /**\n   * 更新自定义标注拖拽\n   */\n  updateCustomAnnotationDrag(mousePos) {\n    if (!this.customAnnotationRenderer || !this.customAnnotationDragState.isDragging) return;\n    \n    // 更新拖拽位置\n    const updated = this.customAnnotationRenderer.updateDrag(mousePos);\n    \n    if (updated) {\n      this.render();\n    }\n  }\n  \n  /**\n   * 完成自定义标注拖拽\n   */\n  finishCustomAnnotationDrag() {\n    if (!this.customAnnotationRenderer || !this.customAnnotationDragState.isDragging) return;\n    \n    // 完成拖拽\n    const result = this.customAnnotationRenderer.finishDrag();\n    \n    if (result && result.moved) {\n      // 标注被移动了，触发保存和同步\n      this.customAnnotationManager.saveToStorage();\n      \n      // 触发更新事件\n      this.customAnnotationManager.triggerEvent('onAnnotationUpdate', result.annotation);\n      \n      // 实时同步\n      this.customAnnotationManager.triggerCustomAnnotationUpdateSync(result.annotation, {\n        imageId: this.getAppState()?.currentImage?.id,\n        positionChange: {\n          from: result.startPosition,\n          to: {\n            x: result.annotation.x,\n            y: result.annotation.y\n          }\n        },\n        timestamp: new Date().toISOString()\n      });\n      \n      // 🔧 FIX: 更新预览区域 - 同步分支点预览\n      this.syncBranchPointPreview();\n      \n      console.log('Custom annotation dragged and saved:', result.annotation.id);\n    }\n    \n    // 清除拖拽状态\n    this.customAnnotationDragState.isDragging = false;\n    this.customAnnotationDragState.draggedAnnotation = null;\n    this.customAnnotationDragState.startPosition = null;\n    \n    this.canvas.style.cursor = 'crosshair';\n    this.render();\n  }\n  \n  /**\n   * 取消自定义标注拖拽\n   */\n  cancelCustomAnnotationDrag() {\n    if (!this.customAnnotationRenderer || !this.customAnnotationDragState.isDragging) return;\n    \n    // 取消拖拽\n    this.customAnnotationRenderer.cancelDrag();\n    \n    // 清除拖拽状态\n    this.customAnnotationDragState.isDragging = false;\n    this.customAnnotationDragState.draggedAnnotation = null;\n    this.customAnnotationDragState.startPosition = null;\n    \n    this.canvas.style.cursor = 'crosshair';\n    this.render();\n    \n    console.log('Cancelled custom annotation drag');\n  }\n  \n  /**\n   * 获取应用状态\n   */\n  getAppState() {\n    return window.PlantAnnotationTool?.appState;\n  }\n  \n  /**\n   * 初始化自定义标注系统\n   */\n  async initializeCustomAnnotationSystem() {\n    try {\n      // 动态导入自定义标注管理器\n      const { CustomAnnotationManager } = await import('./CustomAnnotationManager.js');\n      this.customAnnotationManager = new CustomAnnotationManager(this);\n      \n      // 🔄 NEW: 设置实时同步管理器\n      const realTimeSyncManager = window.PlantAnnotationTool?.realTimeSyncManager;\n      if (realTimeSyncManager) {\n        this.customAnnotationManager.setRealTimeSyncManager(realTimeSyncManager);\n        console.log('Custom annotation real-time sync manager connected');\n      } else {\n        console.warn('Real-time sync manager not available for custom annotations');\n      }\n      \n      // 🔧 NEW: 添加模式变化监听器同步分支点预览\n      this.customAnnotationManager.addEventListener('onModeChange', (data) => {\n        console.log('Mode changed:', data.mode, 'Type:', data.typeId);\n        this.syncBranchPointPreview();\n      });\n      \n      console.log('CustomAnnotationManager initialized');\n      \n      // 动态导入自定义标注渲染器\n      const { CustomAnnotationRenderer } = await import('./CustomAnnotationRenderer.js');\n      this.customAnnotationRenderer = new CustomAnnotationRenderer(this, this.customAnnotationManager);\n      console.log('CustomAnnotationRenderer initialized');\n      \n      // 标记系统已就绪\n      this.customAnnotationSystemReady = true;\n      \n      // 通知系统自定义标注系统已准备就绪\n      if (window.onCustomAnnotationSystemReady && typeof window.onCustomAnnotationSystemReady === 'function') {\n        setTimeout(() => {\n          window.onCustomAnnotationSystemReady();\n        }, 100); // 给一个小延迟确保完全初始化\n      }\n      \n    } catch (error) {\n      console.warn('Failed to initialize custom annotation system:', error);\n    }\n  }\n\n  /**\n   * 渲染自定义标注（统一版本）\n   * 注意：在统一系统中，自定义标注已经集成到keypoints数组中，\n   * 并通过renderKeypoints方法统一渲染，此方法仅保留兼容性\n   */\n  renderCustomAnnotations() {\n    // 在统一系统中，自定义标注已经通过 renderKeypoints() 方法渲染\n    // 这里保留方法以维持兼容性，但不执行任何操作\n    console.debug('renderCustomAnnotations called (unified system - no action needed)');\n  }\n\n  /**\n   * 获取指定位置的自定义标注（统一版本）\n   */\n  getCustomAnnotationAt(mousePos) {\n    // 在统一系统中，自定义标注存储在keypoints数组中\n    const threshold = this.options.baseKeypointRadius + 5;\n    \n    return this.keypoints.find(keypoint => {\n      // 只检查自定义标注\n      if (keypoint.annotationType !== 'custom') return false;\n      \n      const keypointScreen = this.imageToScreen(keypoint.x, keypoint.y);\n      \n      if (keypoint.width && keypoint.height) {\n        // 区域标注 - 检查是否在矩形区域内\n        const bottomRight = this.imageToScreen(keypoint.x + keypoint.width, keypoint.y + keypoint.height);\n        return mousePos.x >= keypointScreen.x && mousePos.x <= bottomRight.x &&\n               mousePos.y >= keypointScreen.y && mousePos.y <= bottomRight.y;\n      } else {\n        // 点标注 - 检查距离\n        const distance = Math.sqrt(\n          Math.pow(mousePos.x - keypointScreen.x, 2) +\n          Math.pow(mousePos.y - keypointScreen.y, 2)\n        );\n        return distance <= threshold;\n      }\n    }) || null;\n  }\n\n  /**\n   * 处理自定义标注点击（统一版本）\n   */\n  handleCustomAnnotationClick(customAnnotation, mousePos) {\n    // 在统一系统中，自定义标注点击处理与常规标注相同\n    console.log('Custom annotation clicked:', customAnnotation.id, 'type:', customAnnotation.annotationType);\n    \n    // 可以在这里添加自定义标注特有的点击逻辑\n    // 例如显示自定义标注的详细信息\n    const customType = this.getCustomType(customAnnotation.customTypeId);\n    if (customType) {\n      console.log('Custom type:', customType.name, 'color:', customType.color);\n    }\n  }\n\n  /**\n   * 处理自定义标注模式下的点击\n   */\n  handleCustomAnnotationMode(mousePos) {\n    if (!this.customAnnotationManager) {\n      console.warn('Custom annotation manager not available');\n      return;\n    }\n    \n    // 🔧 NEW: 进入自定义标注模式时中断所有方向相关模式\n    this.interruptAllDirectionModes('custom_annotation_mode');\n    \n    try {\n      const appState = window.PlantAnnotationTool?.appState;\n      const currentImageId = appState?.currentImage?.id;\n      \n      if (!currentImageId) {\n        console.warn('No current image ID available for custom annotation');\n        return;\n      }\n      \n      const customType = this.customAnnotationManager.getCurrentCustomType();\n      if (!customType) {\n        console.warn('No custom type selected');\n        return;\n      }\n      \n      if (customType.type === 'region') {\n        // 区域类型：开始拖拽\n        this.startCustomRegionDrag(mousePos);\n      } else if (customType.type === 'point') {\n        // 点类型：使用统一系统直接创建点\n        const imagePos = this.screenToImage(mousePos.x, mousePos.y);\n        \n        // 🔧 FIX: 使用统一系统方法创建自定义点标注\n        const keypoint = this.addCustomPointAnnotation(imagePos.x, imagePos.y, customType.id);\n        \n        if (keypoint) {\n          console.log('Created unified custom point annotation:', keypoint);\n          // 渲染已经在addCustomPointAnnotation中触发\n        } else {\n          console.warn('Failed to create custom point annotation');\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to handle custom annotation mode:', error);\n    }\n  }\n\n  /**\n   * 开始自定义区域拖拽\n   */\n  startCustomRegionDrag(mousePos) {\n    if (!this.canCreateAnnotationAt(mousePos.x, mousePos.y)) {\n      console.warn('Cannot create custom region annotation: position is outside valid area');\n      return;\n    }\n\n    this.state.isCustomRegionDragging = true;\n    this.state.customRegionStartPoint = mousePos;\n    this.state.customRegionCurrentPoint = mousePos;\n    this.canvas.style.cursor = 'crosshair';\n    \n    console.log('Started custom region drag at:', mousePos);\n  }\n\n  /**\n   * 更新自定义区域拖拽\n   */\n  updateCustomRegionDrag(mousePos) {\n    if (!this.state.isCustomRegionDragging) return;\n    \n    this.state.customRegionCurrentPoint = mousePos;\n    this.render(); // 重新渲染以显示拖拽预览\n  }\n\n  /**\n   * 完成自定义区域拖拽\n   */\n  finishCustomRegionDrag() {\n    if (!this.state.isCustomRegionDragging || !this.state.customRegionStartPoint || !this.state.customRegionCurrentPoint) {\n      this.resetCustomRegionDrag();\n      return;\n    }\n\n    const startPos = this.screenToImage(this.state.customRegionStartPoint.x, this.state.customRegionStartPoint.y);\n    const endPos = this.screenToImage(this.state.customRegionCurrentPoint.x, this.state.customRegionCurrentPoint.y);\n\n    // 检查拖拽距离是否足够\n    const width = Math.abs(endPos.x - startPos.x);\n    const height = Math.abs(endPos.y - startPos.y);\n    const minSize = 10; // 最小区域尺寸\n\n    if (width < minSize || height < minSize) {\n      console.log('Region too small, ignoring');\n      this.resetCustomRegionDrag();\n      return;\n    }\n\n    // 获取当前图像ID\n    const appState = window.PlantAnnotationTool?.appState;\n    const imageId = appState?.currentImage?.id;\n\n    if (!imageId) {\n      console.warn('No current image ID available for custom region annotation');\n      this.resetCustomRegionDrag();\n      return;\n    }\n\n    // 创建区域标注\n    try {\n      const currentCustomType = this.customAnnotationManager.getCurrentCustomType();\n      if (!currentCustomType) {\n        console.warn('No custom type selected for region annotation');\n        this.resetCustomRegionDrag();\n        return;\n      }\n      \n      // 计算区域位置\n      const x = Math.min(startPos.x, endPos.x);\n      const y = Math.min(startPos.y, endPos.y);\n      \n      // 🔧 FIX: 使用统一系统方法创建自定义区域标注\n      const keypoint = this.addCustomRegionAnnotation(x, y, width, height, currentCustomType.id);\n      \n      if (keypoint) {\n        console.log('Created unified custom region annotation:', keypoint);\n        // 渲染已经在addCustomRegionAnnotation中触发\n      } else {\n        console.warn('Failed to create custom region annotation');\n      }\n    } catch (error) {\n      console.error('Error creating custom region annotation:', error);\n    }\n\n    this.resetCustomRegionDrag();\n  }\n\n  /**\n   * 重置自定义区域拖拽状态\n   */\n  resetCustomRegionDrag() {\n    this.state.isCustomRegionDragging = false;\n    this.state.customRegionStartPoint = null;\n    this.state.customRegionCurrentPoint = null;\n    this.canvas.style.cursor = 'crosshair';\n    this.render();\n  }\n\n  /**\n   * 删除自定义标注（统一版本）\n   * @param {Object} customAnnotation - 要删除的自定义标注 keypoint\n   */\n  removeCustomAnnotation(customAnnotation) {\n    // 在统一系统中，自定义标注也是keypoint，直接调用removeKeypoint\n    this.removeKeypoint(customAnnotation);\n  }\n\n  /**\n   * 获取自定义标注管理器\n   */\n  getCustomAnnotationManager() {\n    return this.customAnnotationManager;\n  }\n\n  /**\n   * 获取自定义标注渲染器\n   */\n  getCustomAnnotationRenderer() {\n    return this.customAnnotationRenderer;\n  }\n\n  // 🔧 NEW: Multi-Direction Annotation Methods\n  \n  /**\n   * 处理中键点击 - 进入/退出方向数量选择模式\n   */\n  handleMiddleMouseButton(mousePos) {\n    // 只有在选中了标注点时才允许进入方向数量模式\n    if (!this.state.selectedKeypoint) {\n      console.log('[多方向] 未选中标注点，忽略中键点击');\n      return;\n    }\n\n    if (this.state.isDirectionCountMode) {\n      // 退出方向数量模式并应用选择的方向数量\n      this.exitDirectionCountMode();\n    } else {\n      // 进入方向数量模式\n      this.enterDirectionCountMode();\n    }\n  }\n\n  /**\n   * 进入方向数量选择模式\n   */\n  enterDirectionCountMode() {\n    console.log('[多方向] 进入方向数量选择模式');\n    \n    this.state.isDirectionCountMode = true;\n    this.state.currentDirectionCount = this.state.selectedKeypoint.maxDirections || 1;\n    \n    // 显示提示信息\n    this.showDirectionCountPrompt('使用滚轮调整方向数量，再次按中键确认');\n    \n    // 改变光标样式\n    this.canvas.style.cursor = 'help';\n  }\n\n  /**\n   * 退出方向数量选择模式\n   */\n  exitDirectionCountMode() {\n    console.log('[多方向] 退出方向数量选择模式，应用方向数量:', this.state.currentDirectionCount);\n    \n    // 应用选择的方向数量到当前标注点\n    if (this.state.selectedKeypoint) {\n      // 🔧 BUG FIX: 确保标注点具有多方向支持\n      this.ensureMultiDirectionSupport(this.state.selectedKeypoint);\n      \n      this.state.selectedKeypoint.maxDirections = this.state.currentDirectionCount;\n      \n      // 如果新的方向数量小于已有方向数量，需要截断\n      if (this.state.selectedKeypoint.directions.length > this.state.currentDirectionCount) {\n        this.state.selectedKeypoint.directions = this.state.selectedKeypoint.directions.slice(0, this.state.currentDirectionCount);\n        console.log('[多方向] 截断directions数组到', this.state.currentDirectionCount, '个');\n      }\n    }\n    \n    this.state.isDirectionCountMode = false;\n    this.hideDirectionCountPrompt();\n    \n    // 恢复光标样式\n    this.canvas.style.cursor = 'crosshair';\n    \n    // 开始设置方向\n    this.startMultiDirectionSetting();\n  }\n\n  /**\n   * 处理滚轮调整方向数量\n   */\n  handleScrollWheel(event) {\n    if (!this.state.isDirectionCountMode) {\n      return;\n    }\n\n    const delta = -event.deltaY;\n    const direction = delta > 0 ? 1 : -1;\n    \n    // 调整方向数量（限制在1-8之间）\n    const newCount = Math.max(1, Math.min(8, this.state.currentDirectionCount + direction));\n    \n    if (newCount !== this.state.currentDirectionCount) {\n      this.state.currentDirectionCount = newCount;\n      this.updateDirectionCountDisplay();\n      console.log('[多方向] 方向数量调整为:', newCount);\n    }\n  }\n\n  /**\n   * 显示方向数量提示\n   */\n  showDirectionCountPrompt(message) {\n    // 创建或更新提示框\n    let prompt = document.getElementById('direction-count-prompt');\n    if (!prompt) {\n      prompt = document.createElement('div');\n      prompt.id = 'direction-count-prompt';\n      prompt.style.cssText = `\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: rgba(0, 0, 0, 0.8);\n        color: white;\n        padding: 15px 20px;\n        border-radius: 8px;\n        font-size: 14px;\n        z-index: 10000;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      `;\n      document.body.appendChild(prompt);\n    }\n    \n    prompt.innerHTML = `\n      <div style=\"margin-bottom: 8px;\">${message}</div>\n      <div style=\"font-size: 18px; font-weight: bold; text-align: center;\">\n        方向数量: ${this.state.currentDirectionCount}\n      </div>\n    `;\n  }\n\n  /**\n   * 隐藏方向数量提示\n   */\n  hideDirectionCountPrompt() {\n    const prompt = document.getElementById('direction-count-prompt');\n    if (prompt) {\n      prompt.remove();\n    }\n  }\n\n  /**\n   * 更新方向数量显示\n   */\n  updateDirectionCountDisplay() {\n    const prompt = document.getElementById('direction-count-prompt');\n    if (prompt) {\n      prompt.innerHTML = `\n        <div style=\"margin-bottom: 8px;\">使用滚轮调整方向数量，再次按中键确认</div>\n        <div style=\"font-size: 18px; font-weight: bold; text-align: center;\">\n          方向数量: ${this.state.currentDirectionCount}\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * 开始多方向设置\n   */\n  startMultiDirectionSetting() {\n    if (!this.state.selectedKeypoint) {\n      return;\n    }\n\n    // 🔧 FIX: Initialize counter based on existing directions\n    this.state.directionsSet = this.state.selectedKeypoint.directions.length;\n    this.state.isDirectionSelectionMode = true;\n    \n    // 显示进度提示\n    this.showMultiDirectionProgress();\n    \n    console.log(`[多方向] 开始设置 ${this.state.selectedKeypoint.maxDirections} 个方向 (已有 ${this.state.directionsSet} 个)`);\n  }\n\n  /**\n   * 显示多方向设置进度\n   */\n  showMultiDirectionProgress() {\n    const keypoint = this.state.selectedKeypoint;\n    if (!keypoint) return;\n    \n    // 🔧 FIX: Use actual directions count for accuracy\n    const actualDirections = keypoint.directions.length;\n    const progress = `${actualDirections}/${keypoint.maxDirections}`;\n    \n    let message;\n    if (actualDirections >= keypoint.maxDirections) {\n      message = `所有方向已设置完成 ${progress}`;\n    } else {\n      message = `设置方向 ${progress} - 点击设置第 ${actualDirections + 1} 个方向`;\n    }\n    \n    // 更新或创建进度提示\n    let progressPrompt = document.getElementById('multi-direction-progress');\n    if (!progressPrompt) {\n      progressPrompt = document.createElement('div');\n      progressPrompt.id = 'multi-direction-progress';\n      progressPrompt.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(16, 185, 129, 0.9);\n        color: white;\n        padding: 10px 15px;\n        border-radius: 6px;\n        font-size: 13px;\n        z-index: 10000;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      `;\n      document.body.appendChild(progressPrompt);\n    }\n    \n    progressPrompt.textContent = message;\n    \n    // 🔧 FIX: Auto-hide progress when all directions are set\n    if (actualDirections >= keypoint.maxDirections) {\n      setTimeout(() => {\n        this.hideMultiDirectionProgress();\n      }, 2000); // Hide after 2 seconds\n    }\n  }\n\n  /**\n   * 隐藏多方向设置进度\n   */\n  hideMultiDirectionProgress() {\n    const progressPrompt = document.getElementById('multi-direction-progress');\n    if (progressPrompt) {\n      progressPrompt.remove();\n    }\n  }\n\n  /**\n   * 添加方向到标注点\n   */\n  addDirectionToKeypoint(keypoint, direction) {\n    // 🔧 BUG FIX: 确保标注点具有多方向支持\n    this.ensureMultiDirectionSupport(keypoint);\n    \n    if (keypoint.directions.length >= keypoint.maxDirections) {\n      console.warn('[多方向] 已达到最大方向数量:', keypoint.maxDirections);\n      return false;\n    }\n    \n    keypoint.directions.push(direction);\n    console.log('[多方向] 添加方向成功:', direction, '到keypoint #' + keypoint.order);\n    return true;\n  }\n\n  /**\n   * 从标注点移除方向\n   */\n  removeDirectionFromKeypoint(keypoint, index) {\n    // 🔧 BUG FIX: 确保标注点具有多方向支持\n    this.ensureMultiDirectionSupport(keypoint);\n    \n    if (index < 0 || index >= keypoint.directions.length) {\n      console.warn('[多方向] 无效的方向索引:', index);\n      return false;\n    }\n    \n    const removedDirection = keypoint.directions[index];\n    keypoint.directions.splice(index, 1);\n    console.log('[多方向] 移除方向成功:', removedDirection, '从keypoint #' + keypoint.order);\n    return true;\n  }\n\n  /**\n   * 完成多方向设置\n   */\n  finishMultiDirectionSetting() {\n    console.log('[多方向] 完成多方向设置');\n    \n    // 清理UI提示\n    this.hideMultiDirectionProgress();\n    \n    // 🔧 FIX: Ensure state consistency before cleanup\n    if (this.state.selectedKeypoint) {\n      // Sync counter with actual directions\n      this.state.directionsSet = this.state.selectedKeypoint.directions.length;\n      \n      // 🔧 FIX: Verify completion state\n      const isComplete = this.state.selectedKeypoint.directions.length >= this.state.selectedKeypoint.maxDirections;\n      console.log(`[多方向] 设置状态: ${this.state.selectedKeypoint.directions.length}/${this.state.selectedKeypoint.maxDirections} (${isComplete ? '完成' : '未完成'})`);\n    }\n    \n    // 重置状态\n    this.state.isDirectionSelectionMode = false;\n    this.state.directionsSet = 0;\n    this.state.selectedKeypoint = null;\n    \n    // 恢复光标样式\n    this.canvas.style.cursor = 'crosshair';\n    \n    // 保存状态\n    this.saveState();\n    this.autoSaveCurrentImage();\n    \n    // 同步分支点预览\n    this.syncBranchPointPreview();\n    \n    // 自动切换到预期位置\n    this.moveToNextExpectedPosition();\n    \n    console.log('[多方向] 多方向设置完成');\n  }\n\n  /**\n   * 中断方向数量模式\n   */\n  interruptDirectionCountMode(reason) {\n    if (this.state.isDirectionCountMode) {\n      console.log('[多方向] 方向数量模式被中断:', reason);\n      \n      this.state.isDirectionCountMode = false;\n      this.state.currentDirectionCount = 1;\n      this.state.selectedKeypoint = null;\n      \n      this.hideDirectionCountPrompt();\n      this.hideMultiDirectionProgress();\n      \n      // 恢复光标样式\n      this.canvas.style.cursor = 'crosshair';\n    }\n  }\n\n  /**\n   * 中断多方向设置模式\n   */\n  interruptMultiDirectionSetting(reason) {\n    if (this.state.isDirectionSelectionMode && this.state.selectedKeypoint && this.state.selectedKeypoint.maxDirections > 1) {\n      console.log('[多方向] 多方向设置被中断:', reason);\n      \n      // 🔧 FIX: Ensure progress display is properly cleaned up\n      this.hideMultiDirectionProgress();\n      \n      // 重置状态\n      this.state.isDirectionSelectionMode = false;\n      this.state.directionsSet = 0;\n      this.state.selectedKeypoint = null;\n      \n      // 恢复光标样式\n      this.canvas.style.cursor = 'crosshair';\n      \n      // 重新渲染以清除任何视觉提示\n      this.render();\n    }\n  }\n\n  /**\n   * 中断所有方向相关模式\n   */\n  interruptAllDirectionModes(reason) {\n    console.log('[多方向] 中断所有方向模式:', reason);\n    \n    // 中断方向数量模式\n    this.interruptDirectionCountMode(reason);\n    \n    // 中断多方向设置模式\n    this.interruptMultiDirectionSetting(reason);\n    \n    // 🔧 FIX: Handle auto direction mode preservation BEFORE calling cancelDirectionSelection\n    // Cross-sectional mode needs to persist across image switches\n    if (this.state.isAutoDirectionMode) {\n      if (this.autoDirectionMode === 'cross-sectional' && reason === 'image_switch') {\n        // For cross-sectional mode during image switch, only clear current selection\n        // but preserve the overall cross-sectional state and progress\n        console.log('[Cross-Sectional] Preserving cross-sectional mode during image switch');\n        this.state.selectedKeypoint = null;\n        this.state.isDirectionSelectionMode = false;\n        this.state.directionSelectionPoint = null;\n        // Return early to avoid calling cancelDirectionSelection with forceExit\n        return;\n      } else if (this.autoDirectionMode === 'cross-sectional' && reason === 'custom_annotation_mode') {\n        // For cross-sectional mode when entering custom annotation, only pause\n        console.log('[Cross-Sectional] Pausing cross-sectional mode for custom annotation');\n        this.state.selectedKeypoint = null;\n        this.state.isDirectionSelectionMode = false;\n        this.state.directionSelectionPoint = null;\n        // Return early to avoid calling cancelDirectionSelection with forceExit\n        return;\n      } else {\n        // For other cases or longitudinal mode, exit completely\n        // This includes plant_switch which should exit cross-sectional mode\n        this.exitAutoDirectionMode();\n      }\n    }\n    \n    // 中断常规方向选择模式 (only if we didn't return early above)\n    if (this.state.isDirectionSelectionMode) {\n      this.cancelDirectionSelection(true);\n    }\n  }\n\n  /**\n   * 检查标注点是否可以有多个方向\n   */\n  canHaveMultipleDirections(keypoint) {\n    return keypoint && keypoint.annotationType === 'regular';\n  }\n\n  /**\n   * 🔧 BUG FIX: 确保标注点具有多方向支持的必要属性\n   */\n  ensureMultiDirectionSupport(keypoint) {\n    if (!keypoint) return;\n    \n    // 确保directions数组存在\n    if (!keypoint.directions) {\n      keypoint.directions = [];\n      \n      // 如果有旧的单方向数据，迁移到新格式\n      if (keypoint.direction !== null && keypoint.direction !== undefined) {\n        if (typeof keypoint.direction === 'number') {\n          keypoint.directions.push({ angle: keypoint.direction, type: 'angle' });\n        } else if (keypoint.direction === 'left') {\n          keypoint.directions.push({ angle: 180, type: 'angle' });\n        } else if (keypoint.direction === 'right') {\n          keypoint.directions.push({ angle: 0, type: 'angle' });\n        }\n        console.log('[多方向] 迁移单方向数据到新格式:', keypoint.direction, '→', keypoint.directions);\n      }\n    }\n    \n    // 确保maxDirections属性存在\n    if (!keypoint.maxDirections) {\n      keypoint.maxDirections = Math.max(1, keypoint.directions.length);\n      console.log('[多方向] 初始化maxDirections为', keypoint.maxDirections, 'for keypoint #' + keypoint.order);\n    }\n    \n    // 确保annotationType存在\n    if (!keypoint.annotationType) {\n      keypoint.annotationType = 'regular';\n    }\n  }\n\n  /**\n   * 渲染多个方向箭头\n   */\n  renderMultipleDirections(keypoint) {\n    // 🔧 BUG FIX: 确保标注点具有多方向支持\n    this.ensureMultiDirectionSupport(keypoint);\n    \n    // 如果没有方向数据，不渲染\n    if (keypoint.directions.length === 0) {\n      return;\n    }\n\n    const screenPos = this.imageToScreen(keypoint.x, keypoint.y);\n    \n    keypoint.directions.forEach((direction, index) => {\n      const angleDegrees = direction.angle;\n      const directionText = `${(index + 1)}/${keypoint.directions.length}`;\n      \n      // 渲染方向箭头，使用不同的颜色或样式来区分\n      this.renderDirectionArrow(screenPos.x, screenPos.y, angleDegrees, directionText, keypoint);\n    });\n  }\n\n  /**\n   * 渲染方向箭头（改进版 - 支持多方向显示）\n   */\n  renderDirectionArrow(x, y, angleDegrees, directionText, keypoint) {\n    const angleRadians = angleDegrees * Math.PI / 180;\n    const arrowLength = this.options.directionArrowLength;\n\n    // 计算箭头终点\n    const endX = x + Math.cos(angleRadians) * arrowLength;\n    const endY = y + Math.sin(angleRadians) * arrowLength;\n\n    // 绘制虚线主线\n    this.ctx.strokeStyle = '#10b981'; // 绿色\n    this.ctx.lineWidth = 3;\n    this.ctx.setLineDash([8, 4]); // 虚线样式\n    this.ctx.lineCap = 'round';\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(x, y);\n    this.ctx.lineTo(endX, endY);\n    this.ctx.stroke();\n\n    // 重置虚线样式\n    this.ctx.setLineDash([]);\n\n    // 绘制箭头头部（实线）\n    const headAngle1 = angleRadians + Math.PI * 0.8;\n    const headAngle2 = angleRadians - Math.PI * 0.8;\n    const headLength = 15;\n\n    this.ctx.strokeStyle = '#10b981';\n    this.ctx.lineWidth = 3;\n    this.ctx.lineCap = 'round';\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(endX, endY);\n    this.ctx.lineTo(endX + Math.cos(headAngle1) * headLength, endY + Math.sin(headAngle1) * headLength);\n    this.ctx.moveTo(endX, endY);\n    this.ctx.lineTo(endX + Math.cos(headAngle2) * headLength, endY + Math.sin(headAngle2) * headLength);\n    this.ctx.stroke();\n\n    // 绘制方向文本（带背景）\n    const textOffset = 20;\n    const textX = endX + Math.cos(angleRadians) * textOffset;\n    const textY = endY + Math.sin(angleRadians) * textOffset;\n\n    // 测量文本尺寸\n    this.ctx.font = 'bold 11px Arial';\n    const textMetrics = this.ctx.measureText(directionText);\n    const textWidth = textMetrics.width;\n    const textHeight = 11;\n\n    // 绘制文本背景\n    this.ctx.fillStyle = 'rgba(16, 185, 129, 0.9)';\n    this.ctx.fillRect(textX - textWidth/2 - 3, textY - textHeight/2 - 2, textWidth + 6, textHeight + 4);\n\n    // 绘制文本\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(directionText, textX, textY);\n  }\n\n  /**\n   * 🔧 NEW: Enhanced direction data structure with click coordinates\n   */\n  enhanceDirectionData(keypoint, clickData) {\n    return {\n      ...keypoint,\n      directionClick: {\n        x: clickData.clickX,\n        y: clickData.clickY,\n        screenX: clickData.screenX,\n        screenY: clickData.screenY,\n        timestamp: clickData.timestamp\n      }\n    };\n  }\n\n  /**\n   * 🔧 NEW: Enhanced multi-direction data structure with click coordinates\n   */\n  enhanceMultiDirectionData(keypoint, clickDataArray) {\n    const enhancedDirections = keypoint.directions.map((direction, index) => {\n      const clickData = clickDataArray[index];\n      return {\n        ...direction,\n        clickPosition: clickData ? {\n          x: clickData.clickX,\n          y: clickData.clickY,\n          screenX: clickData.screenX,\n          screenY: clickData.screenY,\n          timestamp: clickData.timestamp\n        } : null\n      };\n    });\n\n    return {\n      ...keypoint,\n      directions: enhancedDirections\n    };\n  }\n\n  /**\n   * 🔧 NEW: Handle direction selection click with coordinate recording\n   */\n  handleDirectionSelectionClick(event) {\n    if (!this.state.selectedKeypoint || !this.state.isDirectionSelectionMode) {\n      return;\n    }\n\n    const screenCoords = this.getEventCoordinates(event);\n    const imageCoords = this.screenToImage(screenCoords.x, screenCoords.y);\n    \n    // Validate click coordinates\n    if (!this.validateDirectionClick(this.state.selectedKeypoint, {\n      clickX: imageCoords.x,\n      clickY: imageCoords.y,\n      screenX: screenCoords.x,\n      screenY: screenCoords.y\n    })) {\n      return;\n    }\n\n    // Calculate angle from keypoint to click position\n    const angle = this.calculateAngleFromClick(this.state.selectedKeypoint, imageCoords);\n    \n    // Record click data\n    const clickData = {\n      x: imageCoords.x,\n      y: imageCoords.y,\n      screenX: screenCoords.x,\n      screenY: screenCoords.y,\n      timestamp: Date.now()\n    };\n\n    // Update keypoint with direction and click data\n    this.state.selectedKeypoint.direction = angle;\n    this.state.selectedKeypoint.directionType = 'angle';\n    this.state.selectedKeypoint.directionClick = clickData;\n\n    // Trigger UI update\n    this.render();\n    \n    // Exit direction selection mode\n    this.state.isDirectionSelectionMode = false;\n    this.state.selectedKeypoint = null;\n  }\n\n  /**\n   * 🔧 NEW: Validate direction click coordinates\n   */\n  validateDirectionClick(keypoint, clickData) {\n    // Check if click is within image bounds\n    if (!this.isClickWithinImageBounds(clickData)) {\n      return false;\n    }\n\n    // Check if click is within canvas bounds\n    if (!this.isClickWithinCanvasBounds(clickData)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 🔧 NEW: Calculate angle from keypoint to click position\n   */\n  calculateAngleFromClick(keypoint, clickPosition) {\n    const deltaX = clickPosition.x - keypoint.x;\n    const deltaY = clickPosition.y - keypoint.y;\n    const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n    return (angle + 360) % 360;\n  }\n\n  /**\n   * 🔧 NEW: Check if click is within canvas bounds\n   */\n  isClickWithinCanvasBounds(clickData) {\n    return clickData.screenX >= 0 && clickData.screenX <= this.canvas.width &&\n           clickData.screenY >= 0 && clickData.screenY <= this.canvas.height;\n  }\n\n  /**\n   * 🔧 NEW: Check if click is within image bounds\n   */\n  isClickWithinImageBounds(clickData) {\n    if (!this.currentImage) return false;\n    \n    return clickData.x >= 0 && clickData.x <= this.currentImage.width &&\n           clickData.y >= 0 && clickData.y <= this.currentImage.height;\n  }\n\n  /**\n   * 🔧 NEW: Convert screen coordinates to image coordinates\n   */\n  screenToImage(screenX, screenY) {\n    const imageX = (screenX - this.state.translateX) / this.state.scale;\n    const imageY = (screenY - this.state.translateY) / this.state.scale;\n    return { x: imageX, y: imageY };\n  }\n\n  /**\n   * 🔧 NEW: Handle multi-direction click with coordinate recording\n   */\n  handleMultiDirectionClick(event) {\n    if (!this.state.selectedKeypoint || !this.state.selectedKeypoint.maxDirections) {\n      return false;\n    }\n\n    const keypoint = this.state.selectedKeypoint;\n    if (keypoint.directions.length >= keypoint.maxDirections) {\n      return false;\n    }\n\n    const screenCoords = this.getEventCoordinates(event);\n    const imageCoords = this.screenToImage(screenCoords.x, screenCoords.y);\n    \n    // Calculate angle and add new direction\n    const angle = this.calculateAngleFromClick(keypoint, imageCoords);\n    \n    keypoint.directions.push({\n      angle: angle,\n      type: 'angle',\n      clickPosition: {\n        x: imageCoords.x,\n        y: imageCoords.y,\n        screenX: screenCoords.x,\n        screenY: screenCoords.y,\n        timestamp: Date.now()\n      }\n    });\n\n    return true;\n  }\n\n  /**\n   * 🔧 NEW: Get annotation data with click coordinates\n   */\n  getAnnotationData() {\n    return {\n      keypoints: this.keypoints.map(kp => ({\n        ...kp,\n        directionClick: kp.directionClick || null\n      }))\n    };\n  }\n\n  /**\n   * 🔧 NEW: Serialize annotation data with click coordinates\n   */\n  serializeAnnotationData(keypoints) {\n    return JSON.stringify(keypoints.map(kp => ({\n      ...kp,\n      directionClick: kp.directionClick || null\n    })));\n  }\n\n  /**\n   * 🔧 NEW: Deserialize annotation data with click coordinates\n   */\n  deserializeAnnotationData(data) {\n    const keypoints = JSON.parse(data);\n    return keypoints.map(kp => ({\n      ...kp,\n      directionClick: kp.directionClick || null\n    }));\n  }\n\n  /**\n   * 🔧 NEW: Get event coordinates from mouse/touch event\n   */\n  getEventCoordinates(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    };\n  }\n\n  /**\n   * 🔧 NEW: SIFT匹配功能 - 基于上一帧调整当前帧标注\n   */\n  async performSiftMatching() {\n    console.log('[SIFT] 开始执行SIFT匹配');\n    \n    try {\n      // 验证前置条件\n      const validation = await this.validateMatchingPreconditions();\n      if (!validation.isValid) {\n        console.error('[SIFT] 前置条件验证失败:', validation.errors);\n        this.showSiftError('SIFT匹配前置条件不满足', validation.errors.join('\\n'));\n        return;\n      }\n\n      // 获取当前和上一帧的标注数据\n      const currentAnnotations = [...this.keypoints];\n      const previousAnnotations = await this.getPreviousFrameAnnotations();\n      \n      if (!previousAnnotations || previousAnnotations.length === 0) {\n        this.showSiftError('无法获取上一帧标注数据', '请确保上一帧存在标注点');\n        return;\n      }\n\n      // 获取图像数据\n      const currentImageData = this.getCurrentImageData();\n      const previousImageData = await this.getPreviousImageData();\n\n      // 执行SIFT匹配\n      const { SiftMatcher } = await import('./SiftMatcher.js');\n      const siftMatcher = new SiftMatcher();\n      \n      const calibratedAnnotations = await siftMatcher.calibrateAnnotations(\n        previousAnnotations,\n        currentAnnotations,\n        previousImageData,\n        currentImageData\n      );\n\n      // 计算匹配质量\n      const quality = siftMatcher.calculateMatchingQuality(calibratedAnnotations);\n      \n      console.log('[SIFT] 匹配完成:', {\n        原始标注: currentAnnotations.length,\n        校准标注: calibratedAnnotations.length,\n        平均置信度: `${(quality.averageConfidence * 100).toFixed(1)}%`,\n        平均偏移: `${quality.averageOffset.toFixed(2)}px`,\n        成功匹配: quality.successfulMatches\n      });\n\n      // 显示确认对话框\n      this.showCalibrationPreview(currentAnnotations, calibratedAnnotations, quality);\n\n    } catch (error) {\n      console.error('[SIFT] 匹配过程出错:', error);\n      this.showSiftError('SIFT匹配失败', error.message);\n    }\n  }\n\n  /**\n   * 🔧 NEW: 验证SIFT匹配前置条件\n   */\n  async validateMatchingPreconditions() {\n    const errors = [];\n    \n    // 检查当前图像\n    if (!this.currentImage || !this.imageElement) {\n      errors.push('当前图像未加载');\n    }\n    \n    // 检查当前标注\n    if (!this.keypoints || this.keypoints.length === 0) {\n      errors.push('当前图像没有标注点');\n    }\n    \n    // 检查是否有上一帧\n    if (!(await this.hasPreviousFrame())) {\n      errors.push('没有上一帧图像可用作参考');\n    }\n    \n    return {\n      hasCurrentImage: !!this.currentImage,\n      hasPreviousImage: await this.hasPreviousFrame(),\n      hasCurrentAnnotations: this.keypoints && this.keypoints.length > 0,\n      hasPreviousAnnotations: await this.hasPreviousFrameAnnotations(),\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * 🔧 NEW: 检查是否有上一帧\n   */\n  async hasPreviousFrame() {\n    if (!window.PlantAnnotationTool?.plantDataManager) {\n      return false;\n    }\n    \n    const currentPlant = window.PlantAnnotationTool.appState.currentPlant;\n    if (!currentPlant || !currentPlant.selectedViewAngle) {\n      return false;\n    }\n    \n    return await this.getPreviousFrameId() !== null;\n  }\n\n  /**\n   * 🔧 NEW: 检查是否有上一帧标注\n   */\n  async hasPreviousFrameAnnotations() {\n    const previousAnnotations = await this.getPreviousFrameAnnotations();\n    return previousAnnotations && previousAnnotations.length > 0;\n  }\n\n  /**\n   * 🔧 NEW: 获取上一帧ID\n   */\n  async getPreviousFrameId() {\n    if (!window.PlantAnnotationTool?.plantDataManager) {\n      return null;\n    }\n    \n    const currentPlant = window.PlantAnnotationTool.appState.currentPlant;\n    if (!currentPlant || !currentPlant.selectedViewAngle || !currentPlant.selectedImage) {\n      return null;\n    }\n    \n    // 获取当前视角的所有图像\n    const images = await window.PlantAnnotationTool.plantDataManager.getPlantImages(\n      currentPlant.id, \n      currentPlant.selectedViewAngle\n    );\n    \n    if (!images || images.length === 0) {\n      return null;\n    }\n    \n    // 找到当前图像的索引\n    const currentIndex = images.findIndex(img => img.id === currentPlant.selectedImage.id);\n    \n    if (currentIndex <= 0) {\n      return null; // 没有上一帧\n    }\n    \n    return images[currentIndex - 1].id;\n  }\n\n  /**\n   * 🔧 NEW: 获取上一帧标注数据\n   */\n  async getPreviousFrameAnnotations() {\n    const previousFrameId = await this.getPreviousFrameId();\n    if (!previousFrameId) {\n      return null;\n    }\n    \n    // 从数据管理器获取上一帧的标注\n    const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n    if (!plantDataManager) {\n      return null;\n    }\n    \n    try {\n      const annotations = plantDataManager.getImageAnnotations(previousFrameId);\n      return annotations || [];\n    } catch (error) {\n      console.warn('[SIFT] 获取上一帧标注失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 🔧 NEW: 获取当前图像数据\n   */\n  getCurrentImageData() {\n    if (!this.imageElement) {\n      throw new Error('当前图像未加载');\n    }\n    \n    // 🔧 FIX: If image is already loaded but might be tainted, reload with CORS\n    if (this.imageElement.complete && !this.imageElement.crossOrigin) {\n      console.warn('[SIFT] 图像已加载但未设置CORS，需要重新加载');\n      throw new Error('图像需要重新加载以支持CORS访问，请重新选择图像');\n    }\n    \n    // 创建临时canvas来获取图像数据\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = this.imageElement.width;\n    tempCanvas.height = this.imageElement.height;\n    const tempCtx = tempCanvas.getContext('2d');\n    \n    try {\n      tempCtx.drawImage(this.imageElement, 0, 0);\n      return tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);\n    } catch (error) {\n      console.error('[SIFT] 获取图像数据失败:', error);\n      throw new Error('无法获取图像数据，可能是跨域问题。请重新选择图像。');\n    }\n  }\n\n  /**\n   * 🔧 NEW: 获取上一帧图像数据\n   */\n  async getPreviousImageData() {\n    const previousFrameId = await this.getPreviousFrameId();\n    if (!previousFrameId) {\n      throw new Error('无法获取上一帧图像ID');\n    }\n    \n    // 获取上一帧图像的路径\n    const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n    if (!plantDataManager) {\n      throw new Error('植物数据管理器不可用');\n    }\n    \n    const currentPlant = window.PlantAnnotationTool.appState.currentPlant;\n    const images = await plantDataManager.getPlantImages(currentPlant.id, currentPlant.selectedViewAngle);\n    const previousImage = images.find(img => img.id === previousFrameId);\n    \n    if (!previousImage) {\n      throw new Error('找不到上一帧图像');\n    }\n    \n    // 🔧 FIX: 创建正确的图像URL（使用与主图像相同的方法）\n    const imageURL = await plantDataManager.fileSystemManager.createImageURL(previousImage);\n    \n    // 加载上一帧图像\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    \n    return new Promise((resolve, reject) => {\n      img.onload = () => {\n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.width = img.width;\n        tempCanvas.height = img.height;\n        const tempCtx = tempCanvas.getContext('2d');\n        \n        try {\n          tempCtx.drawImage(img, 0, 0);\n          const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);\n          resolve(imageData);\n        } catch (error) {\n          console.error('[SIFT] 获取上一帧图像数据失败:', error);\n          reject(new Error('无法获取上一帧图像数据，可能是跨域问题'));\n        }\n      };\n      \n      img.onerror = () => {\n        console.error('[SIFT] 上一帧图像加载失败:', imageURL);\n        reject(new Error('加载上一帧图像失败'));\n      };\n      \n      img.src = imageURL;\n    });\n  }\n\n  /**\n   * 🔧 NEW: 显示非阻塞式校准预览和确认提示\n   */\n  showCalibrationPreview(originalAnnotations, calibratedAnnotations, quality) {\n    // 创建预览模式状态\n    this.calibrationPreviewState = {\n      originalAnnotations: [...originalAnnotations],\n      calibratedAnnotations: [...calibratedAnnotations],\n      quality,\n      isActive: true,\n      showOriginal: true,\n      showCalibrated: true,\n      showArrows: true\n    };\n    \n    // 显示非阻塞式提示\n    this.showNonBlockingNotification(quality);\n    \n    // 绑定键盘事件\n    this.bindCalibrationKeyboardEvents();\n    \n    // 重新渲染以显示预览\n    this.render();\n    \n    console.log('[SIFT] 校准预览已显示');\n  }\n\n  /**\n   * 🔧 NEW: 显示非阻塞式通知\n   */\n  showNonBlockingNotification(quality) {\n    // 创建通知元素\n    const notification = document.createElement('div');\n    notification.className = 'sift-notification';\n    notification.innerHTML = `\n      <div class=\"notification-content\">\n        <div class=\"notification-header\">\n          <h3>🔍 SIFT Match Result</h3>\n          <button class=\"close-btn\" onclick=\"this.parentElement.parentElement.parentElement.remove()\">×</button>\n        </div>\n        <div class=\"quality-info\">\n          <p><strong>Match Quality:</strong> ${(quality.qualityScore * 100).toFixed(1)}%</p>\n          <p><strong>Average Confidence:</strong> ${(quality.averageConfidence * 100).toFixed(1)}%</p>\n          <p><strong>Average Offset:</strong> ${quality.averageOffset.toFixed(2)}px</p>\n          <p><strong>Successful Matches:</strong> ${quality.successfulMatches}/${quality.totalAnnotations}</p>\n        </div>\n        \n        <div class=\"notification-actions\">\n          <button class=\"btn-accept\" title=\"Accept Adjustment (Shortcut: A)\">✓ Accept Adjustment (A)</button>\n          <button class=\"btn-reject\" title=\"Reject Adjustment (Shortcut: R)\">✗ Reject Adjustment (R)</button>\n        </div>\n        \n        <div class=\"notification-help\">\n          <small>Shortcuts: A=Accept, R=Reject, ESC=Cancel</small>\n        </div>\n      </div>\n    `;\n    \n    // 添加样式\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      max-width: 350px;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 10000;\n      font-family: Arial, sans-serif;\n      animation: slideIn 0.3s ease-out;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('sift-notification-style')) {\n      const style = document.createElement('style');\n      style.id = 'sift-notification-style';\n      style.textContent = `\n        @keyframes slideIn {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n        .sift-notification .notification-content {\n          padding: 15px;\n        }\n        .sift-notification .notification-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 10px;\n        }\n        .sift-notification .notification-header h3 {\n          margin: 0;\n          font-size: 16px;\n          color: #333;\n        }\n        .sift-notification .close-btn {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #666;\n          padding: 0;\n          width: 20px;\n          height: 20px;\n        }\n        .sift-notification .close-btn:hover {\n          color: #000;\n        }\n        .sift-notification .quality-info {\n          margin-bottom: 15px;\n          font-size: 13px;\n          color: #666;\n        }\n        .sift-notification .quality-info p {\n          margin: 3px 0;\n        }\n        .sift-notification .notification-actions {\n          display: flex;\n          gap: 10px;\n          margin-bottom: 10px;\n        }\n        .sift-notification .btn-accept,\n        .sift-notification .btn-reject {\n          flex: 1;\n          padding: 8px 12px;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n          font-weight: 500;\n        }\n        .sift-notification .btn-accept {\n          background: #10b981;\n          color: white;\n        }\n        .sift-notification .btn-accept:hover {\n          background: #059669;\n        }\n        .sift-notification .btn-reject {\n          background: #ef4444;\n          color: white;\n        }\n        .sift-notification .btn-reject:hover {\n          background: #dc2626;\n        }\n        .sift-notification .notification-help {\n          text-align: center;\n          color: #999;\n          border-top: 1px solid #eee;\n          padding-top: 8px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    // 绑定按钮事件\n    const acceptBtn = notification.querySelector('.btn-accept');\n    const rejectBtn = notification.querySelector('.btn-reject');\n    \n    acceptBtn.addEventListener('click', () => {\n      this.applyCalibrationResults();\n    });\n    \n    rejectBtn.addEventListener('click', () => {\n      this.cancelCalibration();\n    });\n    \n    // 添加到页面\n    document.body.appendChild(notification);\n    \n    // 存储引用以便后续清理\n    this.calibrationNotification = notification;\n    \n    // 自动隐藏时间（30秒）\n    this.notificationTimeout = setTimeout(() => {\n      this.cancelCalibration();\n    }, 30000);\n  }\n\n  /**\n   * 🔧 NEW: 绑定校准键盘事件\n   */\n  bindCalibrationKeyboardEvents() {\n    this.calibrationKeyboardHandler = (event) => {\n      if (!this.calibrationPreviewState?.isActive) return;\n      \n      switch (event.key.toLowerCase()) {\n        case 'a':\n          event.preventDefault();\n          this.applyCalibrationResults();\n          break;\n        case 'r':\n          event.preventDefault();\n          this.cancelCalibration();\n          break;\n        case 'p':\n          event.preventDefault();\n          this.toggleCalibrationPreview();\n          break;\n        case 'escape':\n          event.preventDefault();\n          this.cancelCalibration();\n          break;\n      }\n    };\n    \n    document.addEventListener('keydown', this.calibrationKeyboardHandler);\n  }\n\n  /**\n   * 🔧 NEW: 切换校准预览\n   */\n  toggleCalibrationPreview() {\n    if (!this.calibrationPreviewState) return;\n    \n    this.calibrationPreviewState.showOriginal = !this.calibrationPreviewState.showOriginal;\n    this.calibrationPreviewState.showCalibrated = !this.calibrationPreviewState.showCalibrated;\n    this.calibrationPreviewState.showArrows = !this.calibrationPreviewState.showArrows;\n    \n    this.render();\n  }\n\n  /**\n   * 🔧 NEW: 应用校准结果\n   */\n  async applyCalibrationResults() {\n    if (!this.calibrationPreviewState) return;\n    \n    try {\n      console.log('[SIFT] 应用校准结果');\n      \n      // 保存历史记录\n      this.saveState();\n      \n      // 应用校准后的标注\n      this.keypoints = [...this.calibrationPreviewState.calibratedAnnotations];\n      \n      // 清理预览状态\n      this.cleanupCalibrationPreview();\n      \n      // 重新渲染\n      this.render();\n      \n      // 触发自动保存\n      if (window.PlantAnnotationTool?.autoSave) {\n        await window.PlantAnnotationTool.autoSave();\n      }\n      \n      // 显示成功提示\n      this.showSiftSuccess('SIFT匹配成功应用', `已调整 ${this.keypoints.length} 个标注点`);\n      \n    } catch (error) {\n      console.error('[SIFT] 应用校准结果失败:', error);\n      this.showSiftError('应用校准结果失败', error.message);\n    }\n  }\n\n  /**\n   * 🔧 NEW: 取消校准\n   */\n  cancelCalibration() {\n    console.log('[SIFT] 取消校准');\n    \n    // 清理预览状态\n    this.cleanupCalibrationPreview();\n    \n    // 重新渲染\n    this.render();\n    \n    this.showSiftInfo('已取消SIFT匹配', '标注点保持原始位置');\n  }\n\n  /**\n   * 🔧 NEW: 清理校准预览\n   */\n  cleanupCalibrationPreview() {\n    // 移除通知\n    if (this.calibrationNotification) {\n      this.calibrationNotification.remove();\n      this.calibrationNotification = null;\n    }\n    \n    // 清除自动隐藏定时器\n    if (this.notificationTimeout) {\n      clearTimeout(this.notificationTimeout);\n      this.notificationTimeout = null;\n    }\n    \n    // 移除键盘事件监听\n    if (this.calibrationKeyboardHandler) {\n      document.removeEventListener('keydown', this.calibrationKeyboardHandler);\n      this.calibrationKeyboardHandler = null;\n    }\n    \n    // 清理状态\n    this.calibrationPreviewState = null;\n  }\n\n  /**\n   * 🔧 NEW: 显示SIFT错误消息\n   */\n  showSiftError(title, message) {\n    console.error(`[SIFT] ${title}: ${message}`);\n    if (window.PlantAnnotationTool?.showError) {\n      window.PlantAnnotationTool.showError(title, message);\n    } else {\n      alert(`${title}\\n${message}`);\n    }\n  }\n\n  /**\n   * 🔧 NEW: 显示SIFT成功消息\n   */\n  showSiftSuccess(title, message) {\n    console.log(`[SIFT] ${title}: ${message}`);\n    if (window.PlantAnnotationTool?.showSuccess) {\n      window.PlantAnnotationTool.showSuccess(title, message);\n    } else {\n      alert(`${title}\\n${message}`);\n    }\n  }\n\n  /**\n   * 🔧 NEW: 显示SIFT信息消息\n   */\n  showSiftInfo(title, message) {\n    console.log(`[SIFT] ${title}: ${message}`);\n    if (window.PlantAnnotationTool?.showInfo) {\n      window.PlantAnnotationTool.showInfo(title, message);\n    } else {\n      alert(`${title}\\n${message}`);\n    }\n  }\n\n  /**\n   * 🔧 NEW: 创建匹配可视化\n   */\n  createMatchingVisualizations(data, type) {\n    const visualizations = [];\n    \n    if (type === 'original') {\n      data.forEach((annotation, index) => {\n        visualizations.push({\n          type: 'original',\n          x: annotation.x,\n          y: annotation.y,\n          color: '#ff4444',\n          size: 8,\n          label: annotation.order?.toString() || (index + 1).toString()\n        });\n      });\n    } else if (type === 'adjusted') {\n      data.forEach((annotation, index) => {\n        visualizations.push({\n          type: 'adjusted',\n          x: annotation.x,\n          y: annotation.y,\n          color: '#44ff44',\n          size: 8,\n          label: annotation.order?.toString() || (index + 1).toString()\n        });\n      });\n    } else if (type === 'arrows') {\n      data.forEach((annotation, index) => {\n        if (annotation.calibrationData) {\n          visualizations.push({\n            type: 'arrow',\n            from: { x: annotation.calibrationData.originalX, y: annotation.calibrationData.originalY },\n            to: { x: annotation.x, y: annotation.y },\n            color: '#ffaa00',\n            width: 2,\n            label: `${annotation.calibrationData.offset.toFixed(1)}px`\n          });\n        }\n      });\n    }\n    \n    return visualizations;\n  }\n\n  /**\n   * 🔧 NEW: 渲染校准预览\n   */\n  renderCalibrationPreview() {\n    if (!this.calibrationPreviewState) return;\n    \n    const { originalAnnotations, calibratedAnnotations, showOriginal, showCalibrated, showArrows } = this.calibrationPreviewState;\n    \n    // Render original positions (red)\n    if (showOriginal) {\n      originalAnnotations.forEach((annotation, index) => {\n        const screenPos = this.imageToScreen(annotation.x, annotation.y);\n        this.renderCalibrationPoint(screenPos.x, screenPos.y, '#ff4444', annotation.order || (index + 1), 'Original');\n      });\n    }\n    \n    // Render calibrated positions (green)\n    if (showCalibrated) {\n      calibratedAnnotations.forEach((annotation, index) => {\n        const screenPos = this.imageToScreen(annotation.x, annotation.y);\n        this.renderCalibrationPoint(screenPos.x, screenPos.y, '#44ff44', annotation.order || (index + 1), 'Calibrated');\n      });\n    }\n    \n    // 渲染移动箭头（橙色）\n    if (showArrows) {\n      calibratedAnnotations.forEach((annotation, index) => {\n        if (annotation.calibrationData) {\n          const originalPos = this.imageToScreen(annotation.calibrationData.originalX, annotation.calibrationData.originalY);\n          const calibratedPos = this.imageToScreen(annotation.x, annotation.y);\n          \n          this.renderCalibrationArrow(\n            originalPos.x, originalPos.y,\n            calibratedPos.x, calibratedPos.y,\n            annotation.calibrationData.offset\n          );\n        }\n      });\n    }\n  }\n\n  /**\n   * 🔧 NEW: 渲染校准点\n   */\n  renderCalibrationPoint(x, y, color, order, type) {\n    const radius = 8;\n    \n    // 绘制圆形\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = color;\n    this.ctx.fill();\n    \n    // 绘制边框\n    this.ctx.strokeStyle = '#ffffff';\n    this.ctx.lineWidth = 2;\n    this.ctx.stroke();\n    \n    // 绘制序号\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.font = 'bold 12px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(order.toString(), x, y);\n    \n    // 绘制类型标签\n    this.ctx.fillStyle = color;\n    this.ctx.font = '10px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'top';\n    this.ctx.fillText(type, x, y + radius + 2);\n  }\n\n  /**\n   * 🔧 NEW: 渲染校准箭头\n   */\n  renderCalibrationArrow(x1, y1, x2, y2, offset) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance < 2) return; // 太小的偏移不显示箭头\n    \n    // 绘制箭头线\n    this.ctx.beginPath();\n    this.ctx.moveTo(x1, y1);\n    this.ctx.lineTo(x2, y2);\n    this.ctx.strokeStyle = '#ffaa00';\n    this.ctx.lineWidth = 3;\n    this.ctx.setLineDash([5, 3]);\n    this.ctx.stroke();\n    this.ctx.setLineDash([]); // 重置虚线\n    \n    // 绘制箭头头部\n    const angle = Math.atan2(dy, dx);\n    const headLength = 12;\n    const headAngle = Math.PI / 6;\n    \n    this.ctx.beginPath();\n    this.ctx.moveTo(x2, y2);\n    this.ctx.lineTo(\n      x2 - headLength * Math.cos(angle - headAngle),\n      y2 - headLength * Math.sin(angle - headAngle)\n    );\n    this.ctx.moveTo(x2, y2);\n    this.ctx.lineTo(\n      x2 - headLength * Math.cos(angle + headAngle),\n      y2 - headLength * Math.sin(angle + headAngle)\n    );\n    this.ctx.strokeStyle = '#ffaa00';\n    this.ctx.lineWidth = 3;\n    this.ctx.stroke();\n    \n    // 绘制偏移距离标签\n    const midX = (x1 + x2) / 2;\n    const midY = (y1 + y2) / 2;\n    \n    this.ctx.fillStyle = '#ffaa00';\n    this.ctx.font = 'bold 10px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(`${offset.toFixed(1)}px`, midX, midY - 8);\n  }\n}","/**\n * 分支点定位预览管理器\n * \n * 功能：\n * - 在工作区左上角显示预览窗口\n * - 显示上一张图像的对应分支点位置\n * - 帮助标注者快速定位当前应该标注的位置\n * - 基于分支点序号的一致性逻辑\n */\n\nexport class BranchPointPreviewManager {\n  constructor() {\n    this.previewWindow = null;\n    this.previewCanvas = null;\n    this.previewCtx = null;\n    this.previewTitle = null;\n    this.previewLoading = null;\n    this.noPreview = null;\n    this.zoomSlider = null;\n    this.zoomValue = null;\n    this.plantDataManager = null;\n    \n    // 状态管理\n    this.isVisible = false;\n    this.isDragging = false;\n    this.dragStartX = 0;\n    this.dragStartY = 0;\n    this.windowStartX = 0;\n    this.windowStartY = 0;\n    this.zoomLevel = 2; // 默认2倍放大\n    \n    // 特定预览模式状态\n    this.isShowingSpecificOrder = false; // 是否正在显示特定编号的预览\n    this.specificTargetOrder = null; // 当前显示的特定编号\n    \n    // 上下文信息\n    this.currentPlantId = null;\n    this.currentViewAngle = null;\n    this.currentImageIndex = -1;\n    this.currentKeypointCount = 0; // 当前图像的标注点数量\n    \n    // 缓存数据，用于实时更新\n    this.previousImageData = null;\n    this.previousAnnotations = [];\n    this.cachedImageElement = null; // 缓存加载的图像元素\n    \n    this.initializeElements();\n  }\n\n  /**\n   * 初始化DOM元素\n   */\n  initializeElements() {\n    this.previewWindow = document.getElementById('branch-point-preview');\n    this.previewCanvas = document.getElementById('preview-canvas');\n    this.previewTitle = document.getElementById('preview-title');\n    this.previewLoading = document.getElementById('preview-loading');\n    this.noPreview = document.getElementById('no-preview');\n    this.zoomSlider = document.getElementById('zoom-slider');\n    this.zoomValue = document.getElementById('zoom-value');\n    \n    if (this.previewCanvas) {\n      this.previewCtx = this.previewCanvas.getContext('2d');\n      // 初始canvas尺寸\n      this.updateCanvasSize();\n      \n      // 监听窗口大小变化\n      const resizeObserver = new ResizeObserver(() => {\n        this.updateCanvasSize();\n        if (this.isVisible && this.previousImageData && this.previousAnnotations) {\n          // 重新渲染预览\n          this.renderPreview(this.previousImageData, this.previousAnnotations);\n        }\n      });\n      \n      if (this.previewWindow) {\n        resizeObserver.observe(this.previewWindow);\n      }\n    }\n    \n    // 绑定缩放滑块事件\n    this.bindZoomControls();\n    \n    // 绑定拖拽事件\n    this.bindDragEvents();\n    \n    console.log('BranchPointPreviewManager 初始化完成');\n  }\n\n  /**\n   * 更新canvas尺寸\n   */\n  updateCanvasSize() {\n    if (!this.previewCanvas || !this.previewWindow) return;\n    \n    const container = this.previewCanvas.parentElement;\n    if (!container) return;\n    \n    const containerRect = container.getBoundingClientRect();\n    const width = Math.max(100, containerRect.width - 4); // 减去padding\n    const height = Math.max(80, containerRect.height - 4);\n    \n    // 只有在尺寸真正改变时才更新\n    if (this.previewCanvas.width !== width || this.previewCanvas.height !== height) {\n      this.previewCanvas.width = width;\n      this.previewCanvas.height = height;\n      this.previewCanvas.style.width = width + 'px';\n      this.previewCanvas.style.height = height + 'px';\n      \n      console.log('Canvas尺寸更新:', width, 'x', height);\n      \n      // 尺寸改变后立即使用缓存数据重新渲染，避免白屏\n      if (this.isVisible && this.cachedImageElement && this.previousAnnotations) {\n        this.renderCachedPreview();\n      } else if (this.isVisible && this.previousImageData && this.previousAnnotations) {\n        // 如果没有缓存的图像元素，使用原始数据重新渲染\n        setTimeout(() => {\n          this.renderPreview(this.previousImageData, this.previousAnnotations);\n        }, 50);\n      }\n    }\n  }\n\n  /**\n   * 使用缓存的图像数据立即重新渲染预览\n   */\n  renderCachedPreview() {\n    if (!this.cachedImageElement || !this.previousAnnotations || !this.previewCanvas || !this.previewCtx) {\n      return;\n    }\n    \n    // 获取下一个要标注的编号\n    const nextOrder = this.getNextOrderToAnnotate();\n    \n    // 在上一张图像的标注中查找对应编号的标注点\n    const targetAnnotation = this.previousAnnotations.find(annotation => annotation.order === nextOrder);\n    \n    // 如果没有对应编号的标注点，显示无预览\n    if (!targetAnnotation) {\n      this.showNoPreview(`上一张图像暂无第${nextOrder}个分支点`);\n      return;\n    }\n    \n    const img = this.cachedImageElement;\n    \n    try {\n      // 计算局部区域（围绕目标标注点，根据缩放级别调整）\n      const baseCropSize = 200; // 基础裁剪区域大小\n      const cropSize = Math.round(baseCropSize / this.zoomLevel); // 根据缩放级别调整裁剪区域\n      const centerX = targetAnnotation.x;\n      const centerY = targetAnnotation.y;\n      \n      // 计算裁剪区域，确保不超出图像边界\n      const cropX = Math.max(0, Math.min(img.width - cropSize, centerX - cropSize / 2));\n      const cropY = Math.max(0, Math.min(img.height - cropSize, centerY - cropSize / 2));\n      const actualCropWidth = Math.min(cropSize, img.width - cropX);\n      const actualCropHeight = Math.min(cropSize, img.height - cropY);\n      \n      // 设置canvas尺寸\n      const canvasWidth = this.previewCanvas.width;\n      const canvasHeight = this.previewCanvas.height;\n      \n      // 清空canvas\n      this.previewCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n      \n      // 绘制局部放大图\n      this.previewCtx.drawImage(\n        img,\n        cropX, cropY, actualCropWidth, actualCropHeight, // 源图裁剪区域\n        0, 0, canvasWidth, canvasHeight // 目标区域\n      );\n      \n      // 计算标注点在预览canvas中的位置\n      const scaleX = canvasWidth / actualCropWidth;\n      const scaleY = canvasHeight / actualCropHeight;\n      const pointX = (centerX - cropX) * scaleX;\n      const pointY = (centerY - cropY) * scaleY;\n      \n      // 绘制目标标注点（高亮）\n      this.renderLocalizedAnnotation(pointX, pointY, nextOrder, targetAnnotation.direction);\n      \n      // 绘制其他标注点（如果在视图范围内）\n      this.previousAnnotations.forEach((annotation) => {\n        if (annotation.order === nextOrder) return; // 跳过目标点，已经绘制\n        \n        // 检查是否在裁剪区域内\n        if (annotation.x >= cropX && annotation.x <= cropX + actualCropWidth &&\n            annotation.y >= cropY && annotation.y <= cropY + actualCropHeight) {\n          \n          const otherX = (annotation.x - cropX) * scaleX;\n          const otherY = (annotation.y - cropY) * scaleY;\n          this.renderLocalizedAnnotation(otherX, otherY, annotation.order || 0, annotation.direction, false);\n        }\n      });\n      \n      // 绘制放大倍数提示\n      this.renderZoomInfo(scaleX, scaleY);\n      \n      console.log('使用缓存数据快速重新渲染完成');\n      \n    } catch (error) {\n      console.error('缓存渲染失败:', error);\n      // 如果缓存渲染失败，回退到完整重新渲染\n      if (this.previousImageData && this.previousAnnotations) {\n        this.renderPreview(this.previousImageData, this.previousAnnotations);\n      }\n    }\n  }\n\n  /**\n   * 绑定拖拽事件\n   */\n  bindDragEvents() {\n    const header = document.querySelector('.preview-header');\n    if (!header || !this.previewWindow) return;\n    \n    header.addEventListener('mousedown', (e) => {\n      e.preventDefault();\n      this.startDrag(e);\n    });\n    \n    document.addEventListener('mousemove', (e) => {\n      if (this.isDragging) {\n        this.drag(e);\n      }\n    });\n    \n    document.addEventListener('mouseup', () => {\n      this.endDrag();\n    });\n  }\n\n  /**\n   * 开始拖拽\n   */\n  startDrag(e) {\n    this.isDragging = true;\n    this.dragStartX = e.clientX;\n    this.dragStartY = e.clientY;\n    \n    const rect = this.previewWindow.getBoundingClientRect();\n    this.windowStartX = rect.left;\n    this.windowStartY = rect.top;\n    \n    this.previewWindow.style.cursor = 'grabbing';\n    document.body.style.userSelect = 'none';\n  }\n\n  /**\n   * 拖拽中\n   */\n  drag(e) {\n    if (!this.isDragging) return;\n    \n    const deltaX = e.clientX - this.dragStartX;\n    const deltaY = e.clientY - this.dragStartY;\n    \n    const newX = this.windowStartX + deltaX;\n    const newY = this.windowStartY + deltaY;\n    \n    // 限制在窗口范围内\n    const maxX = window.innerWidth - this.previewWindow.offsetWidth;\n    const maxY = window.innerHeight - this.previewWindow.offsetHeight;\n    \n    const constrainedX = Math.max(0, Math.min(maxX, newX));\n    const constrainedY = Math.max(0, Math.min(maxY, newY));\n    \n    this.previewWindow.style.left = constrainedX + 'px';\n    this.previewWindow.style.top = constrainedY + 'px';\n  }\n\n  /**\n   * 结束拖拽\n   */\n  endDrag() {\n    if (!this.isDragging) return;\n    \n    this.isDragging = false;\n    this.previewWindow.style.cursor = '';\n    document.body.style.userSelect = '';\n  }\n\n  /**\n   * 设置植物数据管理器引用\n   */\n  setPlantDataManager(plantDataManager) {\n    this.plantDataManager = plantDataManager;\n  }\n\n  /**\n   * 显示/隐藏预览窗口\n   */\n  toggleVisibility(show = null) {\n    if (!this.previewWindow) return;\n    \n    this.isVisible = show !== null ? show : !this.isVisible;\n    \n    if (this.isVisible) {\n      this.previewWindow.classList.remove('hidden');\n      this.updatePreview();\n    } else {\n      this.previewWindow.classList.add('hidden');\n    }\n    \n    console.log(`分支点预览窗口: ${this.isVisible ? '显示' : '隐藏'}`);\n  }\n\n  /**\n   * 更新当前上下文\n   */\n  async updateContext(plantId, viewAngle, imageIndex, currentKeypointCount = 0) {\n    this.currentPlantId = plantId;\n    this.currentViewAngle = viewAngle;\n    this.currentImageIndex = imageIndex;\n    this.currentKeypointCount = currentKeypointCount; // 当前图像的标注点数量\n    \n    if (this.isVisible) {\n      await this.updatePreview();\n    }\n  }\n\n  /**\n   * 更新预览内容\n   */\n  async updatePreview() {\n    if (!this.isVisible || !this.plantDataManager || !this.currentPlantId) {\n      return;\n    }\n    \n    try {\n      this.showLoading(true);\n      \n      // 获取上一张图像\n      const previousImageData = await this.getPreviousImage();\n      \n      if (!previousImageData) {\n        this.showNoPreview('This is the first image');\n        return;\n      }\n      \n      // 获取上一张图像的标注数据\n      const previousAnnotations = await this.plantDataManager.getImageAnnotations(previousImageData.id);\n      \n      if (!previousAnnotations || previousAnnotations.length === 0) {\n        this.showNoPreview('This image has no annotations');\n        return;\n      }\n      \n      // 更新预览标题\n      this.updatePreviewTitle(previousImageData, previousAnnotations.length);\n      \n      // 渲染预览\n      await this.renderPreview(previousImageData, previousAnnotations);\n      \n      this.showLoading(false);\n      \n    } catch (error) {\n      console.error('Update branch point preview failed:', error);\n      this.showNoPreview('Preview loading failed');\n    }\n  }\n\n  /**\n   * 获取上一张图像\n   */\n  async getPreviousImage() {\n    if (!this.plantDataManager || this.currentImageIndex <= 0) {\n      return null;\n    }\n    \n    try {\n      const images = await this.plantDataManager.getPlantImages(\n        this.currentPlantId, \n        this.currentViewAngle\n      );\n      \n      const previousIndex = this.currentImageIndex - 1;\n      return images[previousIndex] || null;\n      \n    } catch (error) {\n      console.error('Get previous image failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 更新预览标题\n   */\n  updatePreviewTitle(imageData, annotationCount) {\n    if (this.previewTitle) {\n      const timeString = imageData.timeString || 'Unknown time';\n      \n      // 获取下一个要标注的编号（最小的缺失编号）\n      const nextOrder = this.getNextOrderToAnnotate();\n      \n      this.previewTitle.textContent = `Reference: ${nextOrder}th branch point`;\n      this.previewTitle.title = `${timeString} - Current need to annotate the position of the ${nextOrder}th branch point`;\n    }\n  }\n\n  /**\n   * 获取下一个要标注的编号（最小的缺失编号）- 支持自定义标注类型\n   */\n  getNextOrderToAnnotate() {\n    // 从AnnotationTool获取下一个可用编号\n    const annotationTool = window.PlantAnnotationTool?.annotationTool;\n    if (!annotationTool) {\n      console.warn('[Preview] AnnotationTool is not available, using fallback');\n      return this.currentKeypointCount + 1;\n    }\n\n    // 🔧 FIX: 检查是否处于自定义标注模式\n    const customAnnotationManager = annotationTool.getCustomAnnotationManager();\n    const isInCustomMode = customAnnotationManager?.isInCustomMode();\n    \n    if (isInCustomMode) {\n      // 自定义标注模式：获取当前自定义类型的下一个编号\n      const currentCustomType = customAnnotationManager.getCurrentCustomType();\n      if (currentCustomType && typeof annotationTool.findNextAvailableOrderForType === 'function') {\n        const nextOrder = annotationTool.findNextAvailableOrderForType(currentCustomType.id);\n        console.log(`[Preview] Custom mode - get next order for type ${currentCustomType.id}: ${nextOrder}, current keypoint count: ${this.currentKeypointCount}`);\n        return nextOrder;\n      }\n    } else {\n      // 常规标注模式：获取常规标注的下一个编号\n      if (typeof annotationTool.findNextAvailableOrder === 'function') {\n        const nextOrder = annotationTool.findNextAvailableOrder();\n        console.log(`[Preview] Regular mode - get next order: ${nextOrder}, current keypoint count: ${this.currentKeypointCount}`);\n        return nextOrder;\n      }\n    }\n\n    // 后备方案：简单计算\n    const fallbackOrder = this.currentKeypointCount + 1;\n    console.log(`[Preview] Using fallback to calculate next order: ${fallbackOrder}, current keypoint count: ${this.currentKeypointCount}`);\n    return fallbackOrder;\n  }\n\n  /**\n   * 渲染预览图像和标注\n   */\n  async renderPreview(imageData, annotations) {\n    if (!this.previewCanvas || !this.previewCtx) return;\n    \n    // 获取下一个要标注的编号\n    const nextOrder = this.getNextOrderToAnnotate();\n    \n    // 🔧 FIX: 根据当前标注模式进行不同的匹配逻辑\n    const annotationTool = window.PlantAnnotationTool?.annotationTool;\n    const customAnnotationManager = annotationTool?.getCustomAnnotationManager();\n    const isInCustomMode = customAnnotationManager?.isInCustomMode();\n    \n    let targetAnnotation;\n    let previewMessage;\n    \n    if (isInCustomMode) {\n      // 自定义标注模式：匹配编号和自定义类型\n      const currentCustomType = customAnnotationManager.getCurrentCustomType();\n      if (currentCustomType) {\n        targetAnnotation = annotations.find(annotation => \n          annotation.order === nextOrder && \n          annotation.annotationType === 'custom' && \n          annotation.customTypeId === currentCustomType.id\n        );\n        previewMessage = `This image has no ${nextOrder}th ${currentCustomType.name} annotation`;\n      } else {\n        previewMessage = `This image has no ${nextOrder}th custom annotation`;\n      }\n    } else {\n      // 迁移后常规标注视为内置类型\n      targetAnnotation = annotations.find(annotation => \n        annotation.order === nextOrder && \n        (\n          (annotation.annotationType === 'custom' && annotation.customTypeId === 'builtin-regular-keypoint') ||\n          (!annotation.annotationType && !annotation.customTypeId) // 兜底兼容旧数据\n        )\n      );\n      previewMessage = `This image has no ${nextOrder}th branch point`;\n    }\n    \n    // 如果没有对应的标注点，显示无预览\n    if (!targetAnnotation) {\n      this.showNoPreview(previewMessage);\n      return;\n    }\n    \n    this.hideLoading();\n    this.hideNoPreview();\n    \n    try {\n      console.log('Start loading preview image:', imageData);\n      \n      // 获取图像URL的多种方式\n      let imageURL;\n      \n      // 方式1：如果有file对象，直接使用\n      if (imageData.file && imageData.file instanceof File) {\n        imageURL = URL.createObjectURL(imageData.file);\n          console.log('Create URL using file object:', imageURL);\n      }\n      // 方式2：如果有现成的URL\n      else if (imageData.url) {\n        imageURL = imageData.url;\n        console.log('Use existing URL:', imageURL);\n      }\n      // 方式3：使用FileSystemManager (HTTP后端或传统文件系统)\n      else if (this.plantDataManager?.fileSystemManager) {\n        try {\n          imageURL = await this.plantDataManager.fileSystemManager.createImageURL(imageData);\n          console.log('Create URL using FileSystemManager:', imageURL);\n        } catch (error) {\n          console.warn('Create URL using FileSystemManager failed:', error);\n          \n          // 如果是传统文件系统，尝试直接从handle读取\n          if (imageData.handle) {\n            try {\n              const file = await imageData.handle.getFile();\n              imageURL = URL.createObjectURL(file);\n              console.log('Create URL directly from handle:', imageURL);\n            } catch (handleError) {\n              console.error('Create URL from handle also failed:', handleError);\n              throw new Error('无法获取图像数据：所有方法都失败');\n            }\n          } else {\n            throw error;\n          }\n        }\n      }\n      else {\n        throw new Error('无法获取图像数据：缺少必要的图像信息或文件系统管理器');\n      }\n      \n      // 加载图像\n      const img = new Image();\n      img.crossOrigin = 'anonymous'; // 🔧 FIX: Prevent canvas taint issues\n      await new Promise((resolve, reject) => {\n        img.onload = () => {\n          console.log('Image loaded successfully:', img.width, 'x', img.height);\n          resolve();\n        };\n        img.onerror = (error) => {\n          console.error('Image loading failed:', error);\n          reject(new Error('Image loading failed'));\n        };\n        img.src = imageURL;\n      });\n      \n      // 计算局部区域（围绕目标标注点，根据缩放级别调整）\n      const baseCropSize = 200; // 基础裁剪区域大小\n      const cropSize = Math.round(baseCropSize / this.zoomLevel); // 根据缩放级别调整裁剪区域\n      const centerX = targetAnnotation.x;\n      const centerY = targetAnnotation.y;\n      \n      // 计算裁剪区域，确保不超出图像边界\n      const cropX = Math.max(0, Math.min(img.width - cropSize, centerX - cropSize / 2));\n      const cropY = Math.max(0, Math.min(img.height - cropSize, centerY - cropSize / 2));\n      const actualCropWidth = Math.min(cropSize, img.width - cropX);\n      const actualCropHeight = Math.min(cropSize, img.height - cropY);\n      \n      // 设置canvas尺寸\n      const canvasWidth = this.previewCanvas.width;\n      const canvasHeight = this.previewCanvas.height;\n      \n      // 清空canvas\n      this.previewCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n      \n      // 绘制局部放大图\n      this.previewCtx.drawImage(\n        img,\n        cropX, cropY, actualCropWidth, actualCropHeight, // 源图裁剪区域\n        0, 0, canvasWidth, canvasHeight // 目标区域\n      );\n      \n      // 计算标注点在预览canvas中的位置\n      const scaleX = canvasWidth / actualCropWidth;\n      const scaleY = canvasHeight / actualCropHeight;\n      const pointX = (centerX - cropX) * scaleX;\n      const pointY = (centerY - cropY) * scaleY;\n      \n      // 绘制目标标注点（高亮）\n      this.renderLocalizedAnnotation(pointX, pointY, nextOrder, targetAnnotation.direction);\n      \n      // 绘制其他标注点（如果在视图范围内）\n      annotations.forEach((annotation) => {\n        if (annotation.order === nextOrder) return; // 跳过目标点，已经绘制\n        \n        // 检查是否在裁剪区域内\n        if (annotation.x >= cropX && annotation.x <= cropX + actualCropWidth &&\n            annotation.y >= cropY && annotation.y <= cropY + actualCropHeight) {\n          \n          const otherX = (annotation.x - cropX) * scaleX;\n          const otherY = (annotation.y - cropY) * scaleY;\n          this.renderLocalizedAnnotation(otherX, otherY, annotation.order || 0, annotation.direction, false);\n        }\n      });\n      \n      // 绘制放大倍数提示\n      this.renderZoomInfo(scaleX, scaleY);\n      \n      // 缓存成功渲染的数据，用于实时更新\n      this.previousImageData = imageData;\n      this.previousAnnotations = annotations;\n      this.cachedImageElement = img;\n      \n      // 清理临时URL\n      if (imageURL && imageURL.startsWith('blob:') && !imageData.url) {\n        setTimeout(() => URL.revokeObjectURL(imageURL), 5000);\n      }\n      \n      console.log('Preview rendering completed');\n      \n    } catch (error) {\n      console.error('Preview rendering failed:', error);\n      this.showNoPreview(`Preview loading failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * 渲染局部化的标注点\n   */\n  renderLocalizedAnnotation(x, y, label, direction, isTarget = true) {\n    // 根据是否为目标点设置样式\n    let fillColor, radius, borderWidth;\n\n    if (isTarget) {\n      fillColor = '#ffeb3b'; // 黄色高亮\n      radius = 5; // 缩小目标圆圈\n      borderWidth = 2;\n\n      // 绘制外圈提示（更小的虚线圆圈）\n      this.previewCtx.beginPath();\n      this.previewCtx.arc(x, y, radius + 3, 0, 2 * Math.PI);\n      this.previewCtx.strokeStyle = '#ff9800';\n      this.previewCtx.lineWidth = 1;\n      this.previewCtx.setLineDash([2, 2]);\n      this.previewCtx.stroke();\n      this.previewCtx.setLineDash([]);\n    } else {\n      // 根据方向类型设置颜色\n      if (typeof direction === 'number') {\n        fillColor = '#4CAF50'; // 绿色表示角度方向\n      } else {\n        fillColor = direction === 'left' ? '#ff6666' : '#6666ff'; // 传统颜色\n      }\n      radius = 3;\n      borderWidth = 1;\n    }\n\n    // 绘制标注点\n    this.previewCtx.beginPath();\n    this.previewCtx.arc(x, y, radius, 0, 2 * Math.PI);\n    this.previewCtx.fillStyle = fillColor;\n    this.previewCtx.fill();\n\n    // 绘制边框\n    this.previewCtx.strokeStyle = '#ffffff';\n    this.previewCtx.lineWidth = borderWidth;\n    this.previewCtx.stroke();\n\n    // 绘制方向箭头（如果有方向信息）\n    this.renderDirectionArrow(x, y, direction, isTarget);\n\n    // 绘制序号\n    this.previewCtx.fillStyle = isTarget ? '#000000' : '#ffffff';\n    this.previewCtx.font = `bold ${isTarget ? 8 : 6}px Arial`;\n    this.previewCtx.textAlign = 'center';\n    this.previewCtx.textBaseline = 'middle';\n    this.previewCtx.fillText(label.toString(), x, y);\n\n    // 如果是目标点，添加小箭头指示\n    if (isTarget) {\n      this.previewCtx.fillStyle = '#ff9800';\n      this.previewCtx.font = 'bold 8px Arial';\n      this.previewCtx.fillText('▼', x, y - radius - 8);\n\n      this.previewCtx.fillStyle = '#ff9800';\n      this.previewCtx.font = 'bold 6px Arial';\n      this.previewCtx.textAlign = 'center';\n      this.previewCtx.fillText('Target', x, y + radius + 8);\n    }\n  }\n\n  /**\n   * 渲染方向箭头（与主标注区域样式一致）\n   */\n  renderDirectionArrow(x, y, direction, isTarget = false) {\n    if (!direction) return;\n\n    let angleDegrees;\n\n    // 统一转换为角度\n    if (typeof direction === 'number') {\n      angleDegrees = direction;\n    } else if (direction === 'left') {\n      angleDegrees = 180;\n    } else if (direction === 'right') {\n      angleDegrees = 0;\n    } else {\n      return; // 无效方向\n    }\n\n    const angleRadians = angleDegrees * Math.PI / 180;\n\n    // 🔧 FIX: 增加箭头尺寸以提高可见性\n    const arrowLength = isTarget ? 25 : 18;  // 增加箭头长度 (原来: 15/10)\n    const headLength = isTarget ? 7 : 5;     // 增加箭头头部尺寸 (原来: 4/3)\n    const lineWidth = isTarget ? 3 : 2;      // 增加线条宽度 (原来: 2/1)\n\n    // 计算箭头终点\n    const endX = x + Math.cos(angleRadians) * arrowLength;\n    const endY = y + Math.sin(angleRadians) * arrowLength;\n\n    this.previewCtx.save();\n\n    // 绘制虚线主线（绿色）\n    this.previewCtx.strokeStyle = '#10b981'; // 与主标注区域相同的绿色\n    this.previewCtx.lineWidth = lineWidth;\n    this.previewCtx.setLineDash([4, 2]); // 虚线样式\n    this.previewCtx.lineCap = 'round';\n\n    this.previewCtx.beginPath();\n    this.previewCtx.moveTo(x, y);\n    this.previewCtx.lineTo(endX, endY);\n    this.previewCtx.stroke();\n\n    // 绘制箭头头部（实线）\n    this.previewCtx.setLineDash([]);\n    this.previewCtx.strokeStyle = '#10b981';\n    this.previewCtx.lineWidth = lineWidth;\n    this.previewCtx.lineCap = 'round';\n\n    const headAngle1 = angleRadians + Math.PI * 0.8;\n    const headAngle2 = angleRadians - Math.PI * 0.8;\n\n    this.previewCtx.beginPath();\n    this.previewCtx.moveTo(endX, endY);\n    this.previewCtx.lineTo(endX + Math.cos(headAngle1) * headLength, endY + Math.sin(headAngle1) * headLength);\n    this.previewCtx.moveTo(endX, endY);\n    this.previewCtx.lineTo(endX + Math.cos(headAngle2) * headLength, endY + Math.sin(headAngle2) * headLength);\n    this.previewCtx.stroke();\n\n    this.previewCtx.restore();\n  }\n\n  /**\n   * 渲染放大倍数信息\n   */\n  renderZoomInfo(scaleX, scaleY) {\n    const actualScale = this.zoomLevel; // 使用用户设置的缩放级别\n    const zoomText = `${actualScale}x zoom`;\n    \n    this.previewCtx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    this.previewCtx.fillRect(5, 5, 60, 16);\n    \n    this.previewCtx.fillStyle = '#ffffff';\n    this.previewCtx.font = '8px Arial';\n    this.previewCtx.textAlign = 'left';\n    this.previewCtx.textBaseline = 'middle';\n    this.previewCtx.fillText(zoomText, 8, 13);\n  }\n\n  /**\n   * 显示加载状态\n   */\n  showLoading(show) {\n    if (this.previewLoading) {\n      this.previewLoading.style.display = show ? 'block' : 'none';\n    }\n    if (this.noPreview) {\n      this.noPreview.style.display = 'none';\n    }\n  }\n\n  /**\n   * 显示无预览状态\n   */\n  showNoPreview(message) {\n    this.showLoading(false);\n    if (this.noPreview) {\n      this.noPreview.textContent = message;\n      this.noPreview.style.display = 'block';\n    }\n    \n    // 清空canvas\n    if (this.previewCanvas && this.previewCtx) {\n      this.previewCtx.clearRect(0, 0, this.previewCanvas.width, this.previewCanvas.height);\n    }\n  }\n\n  /**\n   * 当标注点变化时更新预览中的高亮\n   */\n  highlightCorrespondingPoints(currentAnnotations) {\n    if (!this.isVisible || !currentAnnotations) return;\n    \n    // 这里可以实现高亮逻辑，比如当前正在标注的点在预览中特殊显示\n    // 暂时简单重新渲染\n    this.updatePreview();\n  }\n\n  /**\n   * 获取指定编号的预期位置（用于自动切换功能）\n   */\n  async getExpectedPosition(targetOrder) {\n    try {\n      // 如果没有缓存的预览数据，先更新预览\n      if (!this.previousImageData || !this.previousAnnotations) {\n        console.log(`[Expected position] No cached preview data, trying to get previous image`);\n\n        // 获取上一张图像\n        const previousImageData = await this.getPreviousImage();\n        if (!previousImageData) {\n          console.log(`[Expected position] No previous image data`);\n          return null;\n        }\n\n        // 获取上一张图像的标注数据\n        const previousAnnotations = await this.plantDataManager.getImageAnnotations(previousImageData.id);\n        if (!previousAnnotations || previousAnnotations.length === 0) {\n          console.log(`[Expected position] Previous image has no annotations`);\n          return null;\n        }\n\n        // 更新缓存\n        this.previousImageData = previousImageData;\n        this.previousAnnotations = previousAnnotations;\n      }\n\n      // 在上一张图像的标注中查找对应编号的标注点\n      const targetAnnotation = this.previousAnnotations.find(annotation => annotation.order === targetOrder);\n\n      if (!targetAnnotation) {\n        console.log(`[Expected position] No annotation found for order ${targetOrder} in previous image`);\n        return null;\n      }\n\n      console.log(`[Expected position] Found reference position for order ${targetOrder}: (${targetAnnotation.x.toFixed(1)}, ${targetAnnotation.y.toFixed(1)})`);\n\n      return {\n        x: targetAnnotation.x,\n        y: targetAnnotation.y,\n        order: targetAnnotation.order,\n        sourceImage: this.previousImageData.timeString || 'Previous image'\n      };\n\n    } catch (error) {\n      console.error('[Expected position] Get expected position failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 重置预览状态\n   */\n  reset() {\n    this.currentPlantId = null;\n    this.currentViewAngle = null;\n    this.currentImageIndex = -1;\n    this.previousImageData = null;\n    this.previousAnnotations = [];\n    \n    if (this.isVisible) {\n      this.showNoPreview('Please choose an image');\n    }\n  }\n\n  /**\n   * 获取预览状态\n   */\n  getStatus() {\n    return {\n      isVisible: this.isVisible,\n      currentPlantId: this.currentPlantId,\n      currentViewAngle: this.currentViewAngle,\n      currentImageIndex: this.currentImageIndex,\n      hasPreviousData: this.previousImageData !== null\n    };\n  }\n\n  /**\n   * 隐藏加载状态\n   */\n  hideLoading() {\n    this.showLoading(false);\n  }\n\n  /**\n   * 隐藏无预览状态\n   */\n  hideNoPreview() {\n    if (this.noPreview) {\n      this.noPreview.style.display = 'none';\n    }\n  }\n\n  /**\n   * 绑定缩放控制事件\n   */\n  bindZoomControls() {\n    if (!this.zoomSlider || !this.zoomValue) return;\n    \n    this.zoomSlider.addEventListener('input', (e) => {\n      this.zoomLevel = parseFloat(e.target.value);\n      this.zoomValue.textContent = this.zoomLevel + 'x';\n      \n      // 立即使用缓存数据重新渲染，避免延迟\n      if (this.isVisible && this.cachedImageElement && this.previousAnnotations) {\n        this.renderCachedPreview();\n      } else if (this.isVisible && this.previousImageData && this.previousAnnotations) {\n        // 如果没有缓存，回退到完整重新渲染\n        this.renderPreview(this.previousImageData, this.previousAnnotations);\n      }\n    });\n    \n    // 设置初始值\n    this.zoomSlider.value = this.zoomLevel;\n    this.zoomValue.textContent = this.zoomLevel + 'x';\n  }\n\n  /**\n   * 显示特定编号的预览（拖动时使用）\n   */\n  async showSpecificOrderPreview(targetOrder) {\n    if (!this.isVisible || !this.plantDataManager || !this.currentPlantId) {\n      return;\n    }\n    \n    // 标记当前处于特定预览模式\n    this.isShowingSpecificOrder = true;\n    this.specificTargetOrder = targetOrder;\n    \n    try {\n      // 获取上一张图像\n      const previousImageData = await this.getPreviousImage();\n      \n      if (!previousImageData) {\n        this.showNoPreview('This is the first image');\n        return;\n      }\n      \n      // 获取上一张图像的标注数据\n      const previousAnnotations = await this.plantDataManager.getImageAnnotations(previousImageData.id);\n      \n      if (!previousAnnotations || previousAnnotations.length === 0) {\n        this.showNoPreview('This image has no annotations');\n        return;\n      }\n      \n      // 查找对应编号的标注点\n      const targetAnnotation = previousAnnotations.find(annotation => annotation.order === targetOrder);\n      \n      if (!targetAnnotation) {\n        this.showNoPreview(`This image has no ${targetOrder}th branch point`);\n        return;\n      }\n      \n      // 更新预览标题\n      this.updateSpecificPreviewTitle(previousImageData, targetOrder);\n      \n      // 渲染特定编号的预览\n      await this.renderSpecificOrderPreview(previousImageData, previousAnnotations, targetOrder);\n      \n    } catch (error) {\n      console.error('Show specific order preview failed:', error);\n      this.showNoPreview('Preview loading failed');\n    }\n  }\n\n  /**\n   * 恢复正常预览显示\n   */\n  async restoreNormalPreview() {\n    // 清除特定预览模式标记\n    this.isShowingSpecificOrder = false;\n    this.specificTargetOrder = null;\n    \n    // 恢复到正常的预览更新\n    await this.updatePreview();\n  }\n\n  /**\n   * 更新特定预览的标题\n   */\n  updateSpecificPreviewTitle(imageData, targetOrder) {\n    if (this.previewTitle) {\n      const timeString = imageData.timeString || 'Unknown time';\n      this.previewTitle.textContent = `Dragging: ${targetOrder}th branch point`;\n      this.previewTitle.title = `${timeString} - Dragging ${targetOrder}th branch point, reference position from previous image`;\n    }\n  }\n\n  /**\n   * 渲染特定编号的预览\n   */\n  async renderSpecificOrderPreview(imageData, annotations, targetOrder) {\n    if (!this.previewCanvas || !this.previewCtx) return;\n    \n    // 查找目标标注点\n    const targetAnnotation = annotations.find(annotation => annotation.order === targetOrder);\n    \n    if (!targetAnnotation) {\n      this.showNoPreview(`This image has no ${targetOrder}th branch point`);\n      return;\n    }\n    \n    this.hideLoading();\n    this.hideNoPreview();\n    \n    try {\n      console.log('Render specific order preview:', targetOrder);\n      \n      // 获取图像URL的多种方式（与renderPreview保持一致）\n      let imageURL;\n      \n      // 方式1：如果有file对象，直接使用\n      if (imageData.file && imageData.file instanceof File) {\n        imageURL = URL.createObjectURL(imageData.file);\n      }\n      // 方式2：如果有现成的URL\n      else if (imageData.url) {\n        imageURL = imageData.url;\n      }\n      // 方式3：使用FileSystemManager (HTTP后端或传统文件系统)\n      else if (this.plantDataManager?.fileSystemManager) {\n        try {\n          imageURL = await this.plantDataManager.fileSystemManager.createImageURL(imageData);\n        } catch (error) {\n          console.warn('Create URL using FileSystemManager failed:', error);\n          \n          // 如果是传统文件系统，尝试直接从handle读取\n          if (imageData.handle) {\n            try {\n              const file = await imageData.handle.getFile();\n              imageURL = URL.createObjectURL(file);\n            } catch (handleError) {\n              console.error('Create URL from handle also failed:', handleError);\n              throw new Error('Failed to get image data: all methods failed');\n            }\n          } else {\n            throw error;\n          }\n        }\n      }\n      else {\n        throw new Error('Failed to get image data: missing necessary image information or file system manager');\n      }\n      \n      // 加载图像\n      const img = new Image();\n      img.crossOrigin = 'anonymous'; // 🔧 FIX: Prevent canvas taint issues\n      await new Promise((resolve, reject) => {\n        img.onload = () => resolve();\n        img.onerror = () => reject(new Error('Image loading failed'));\n        img.src = imageURL;\n      });\n      \n      // 计算局部区域\n      const baseCropSize = 200;\n      const cropSize = Math.round(baseCropSize / this.zoomLevel);\n      const centerX = targetAnnotation.x;\n      const centerY = targetAnnotation.y;\n      \n      const cropX = Math.max(0, Math.min(img.width - cropSize, centerX - cropSize / 2));\n      const cropY = Math.max(0, Math.min(img.height - cropSize, centerY - cropSize / 2));\n      const actualCropWidth = Math.min(cropSize, img.width - cropX);\n      const actualCropHeight = Math.min(cropSize, img.height - cropY);\n      \n      const canvasWidth = this.previewCanvas.width;\n      const canvasHeight = this.previewCanvas.height;\n      \n      // 清空canvas\n      this.previewCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n      \n      // 绘制局部放大图\n      this.previewCtx.drawImage(\n        img,\n        cropX, cropY, actualCropWidth, actualCropHeight,\n        0, 0, canvasWidth, canvasHeight\n      );\n      \n      // 计算标注点位置\n      const scaleX = canvasWidth / actualCropWidth;\n      const scaleY = canvasHeight / actualCropHeight;\n      const pointX = (centerX - cropX) * scaleX;\n      const pointY = (centerY - cropY) * scaleY;\n      \n      // 绘制目标标注点（特殊高亮）\n      this.renderDraggedAnnotation(pointX, pointY, targetOrder, targetAnnotation.direction);\n      \n      // 绘制其他标注点\n      annotations.forEach((annotation) => {\n        if (annotation.order === targetOrder) return;\n        \n        if (annotation.x >= cropX && annotation.x <= cropX + actualCropWidth &&\n            annotation.y >= cropY && annotation.y <= cropY + actualCropHeight) {\n          \n          const otherX = (annotation.x - cropX) * scaleX;\n          const otherY = (annotation.y - cropY) * scaleY;\n          this.renderLocalizedAnnotation(otherX, otherY, annotation.order || 0, annotation.direction, false);\n        }\n      });\n      \n      // 绘制放大倍数提示\n      this.renderZoomInfo(scaleX, scaleY);\n      \n      // 清理临时URL\n      if (imageURL && imageURL.startsWith('blob:') && !imageData.url) {\n        setTimeout(() => URL.revokeObjectURL(imageURL), 5000);\n      }\n      \n      console.log('Specific order preview rendering completed');\n      \n    } catch (error) {\n      console.error('Specific order preview rendering failed:', error);\n      this.showNoPreview(`Preview loading failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * 渲染被拖动的标注点（特殊样式）\n   */\n  renderDraggedAnnotation(x, y, label, direction) {\n    // 使用特殊的颜色和样式表示正在拖动\n    const fillColor = '#ff9800'; // 橙色表示拖动状态\n    const radius = 6;\n    const borderWidth = 3;\n    \n    // 绘制脉冲效果的外圈\n    this.previewCtx.beginPath();\n    this.previewCtx.arc(x, y, radius + 5, 0, 2 * Math.PI);\n    this.previewCtx.strokeStyle = '#ff9800';\n    this.previewCtx.lineWidth = 2;\n    this.previewCtx.setLineDash([3, 3]);\n    this.previewCtx.stroke();\n    this.previewCtx.setLineDash([]);\n    \n    // 绘制主标注点\n    this.previewCtx.beginPath();\n    this.previewCtx.arc(x, y, radius, 0, 2 * Math.PI);\n    this.previewCtx.fillStyle = fillColor;\n    this.previewCtx.fill();\n    \n    // 绘制边框\n    this.previewCtx.strokeStyle = '#ffffff';\n    this.previewCtx.lineWidth = borderWidth;\n    this.previewCtx.stroke();\n\n    // 绘制方向箭头（如果有方向信息）\n    this.renderDirectionArrow(x, y, direction, true);\n\n    // 绘制序号\n    this.previewCtx.fillStyle = '#000000';\n    this.previewCtx.font = 'bold 9px Arial';\n    this.previewCtx.textAlign = 'center';\n    this.previewCtx.textBaseline = 'middle';\n    this.previewCtx.fillText(label.toString(), x, y);\n    \n    // 添加拖动指示\n    this.previewCtx.fillStyle = '#ff9800';\n    this.previewCtx.font = 'bold 7px Arial';\n    this.previewCtx.fillText('Dragging', x, y + radius + 12);\n  }\n} ","/**\n * 笔记管理器\n * \n * 功能：\n * - 管理植物级和图像级笔记\n * - 与HttpFileSystemManager集成\n * - 独立于跳过功能的笔记系统\n * - 支持搜索、过滤和统计\n */\n\nexport class NoteManager {\n  constructor(httpFileSystemManager) {\n    this.httpManager = httpFileSystemManager;\n    this.notes = new Map(); // 笔记缓存\n    this.cacheTimestamps = new Map(); // 缓存时间戳\n    this.isInitialized = false;\n    this.cacheExpiration = 5 * 60 * 1000; // 5分钟缓存过期\n    this.requestQueue = new Map(); // 请求队列防止重复请求\n    this.noteCounts = new Map(); // 笔记数量缓存\n    \n    // Performance optimizations\n    this.bulkNoteData = null; // 批量笔记数据缓存\n    this.bulkDataTimestamp = 0; // 批量数据时间戳\n    this.performanceMetrics = {\n      requestCount: 0,\n      bulkRequestCount: 0,\n      cacheHits: 0,\n      networkTime: 0\n    };\n  }\n\n  /**\n   * 获取基础URL (用于NoteUI兼容性)\n   */\n  get baseUrl() {\n    return this.httpManager.baseUrl;\n  }\n\n  /**\n   * 初始化笔记管理器\n   */\n  async initialize() {\n    try {\n      await this.httpManager.ensureConnection();\n      this.isInitialized = true;\n      console.log('NoteManager 初始化成功');\n      return true;\n    } catch (error) {\n      console.error('NoteManager 初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 确保连接可用\n   */\n  async ensureConnection() {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    await this.httpManager.ensureConnection();\n  }\n\n  /**\n   * 添加植物笔记\n   */\n  async addPlantNote(plantId, noteData) {\n    if (!plantId) {\n      throw new Error('植物ID不能为空');\n    }\n    if (!noteData.title || !noteData.content) {\n      throw new Error('笔记标题和内容不能为空');\n    }\n\n    await this.ensureConnection();\n\n    return this.httpManager.withRetry(async () => {\n      const response = await fetch(`${this.httpManager.baseUrl}/notes/plant/${encodeURIComponent(plantId)}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(noteData)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // 🔧 FIX: Force complete cache clear for immediate visibility of new note\n        this.clearCache();\n        console.log(`植物笔记创建成功: ${result.data.noteId} - 缓存已完全清除`);\n        return result.data.noteId;\n      }\n\n      throw new Error(result.error || '创建植物笔记失败');\n    }, `创建植物 ${plantId} 笔记`);\n  }\n\n  /**\n   * 添加图像笔记\n   */\n  async addImageNote(plantId, imageId, noteData) {\n    if (!plantId) {\n      throw new Error('植物ID不能为空');\n    }\n    if (!imageId) {\n      throw new Error('图像ID不能为空');\n    }\n    if (!noteData.title || !noteData.content) {\n      throw new Error('笔记标题和内容不能为空');\n    }\n\n    await this.ensureConnection();\n\n    return this.httpManager.withRetry(async () => {\n      const response = await fetch(`${this.httpManager.baseUrl}/notes/image/${encodeURIComponent(plantId)}/${encodeURIComponent(imageId)}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(noteData)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // 🔧 FIX: Force complete cache clear for immediate visibility of new note\n        this.clearCache();\n        console.log(`图像笔记创建成功: ${result.data.noteId} - 缓存已完全清除`);\n        return result.data.noteId;\n      }\n\n      throw new Error(result.error || '创建图像笔记失败');\n    }, `创建图像 ${imageId} 笔记`);\n  }\n\n  /**\n   * 获取植物笔记 (优化版本，优先使用批量数据)\n   */\n  async getPlantNotes(plantId) {\n    if (!plantId) {\n      throw new Error('植物ID不能为空');\n    }\n\n    await this.ensureConnection();\n\n    const cacheKey = `plant_${plantId}`;\n    \n    // 首先检查是否有批量数据缓存\n    if (this.bulkNoteData && !this.isBulkDataExpired()) {\n      const plantNotes = this.bulkNoteData.plantNotes[plantId] || [];\n      this.notes.set(cacheKey, plantNotes);\n      this.performanceMetrics.cacheHits++;\n      return plantNotes;\n    }\n    \n    // 检查独立缓存\n    if (this.notes.has(cacheKey) && !this.isCacheExpired(cacheKey)) {\n      this.performanceMetrics.cacheHits++;\n      return this.notes.get(cacheKey);\n    }\n\n    return this.httpManager.withRetry(async () => {\n      const startTime = performance.now();\n      const url = `${this.httpManager.baseUrl}/notes/plant/${encodeURIComponent(plantId)}`;\n      console.log(`[NoteManager] 请求植物笔记 URL: ${url}`);\n      \n      try {\n        const response = await fetch(url);\n        this.performanceMetrics.requestCount++;\n\n        if (!response.ok) {\n          console.error(`[NoteManager] 请求失败: ${response.status} ${response.statusText}`);\n          \n          // 提供更详细的错误信息\n          if (response.status === 404) {\n            // 404 可能表示该植物没有笔记，返回空数组而不是抛出错误\n            const emptyResult = [];\n            this.setCache(cacheKey, emptyResult);\n            return emptyResult;\n          } else if (response.status === 500) {\n            throw new Error(`服务器内部错误 (500): 请检查后端服务状态`);\n          } else if (response.status === 403) {\n            throw new Error(`访问被拒绝 (403): 请检查权限设置`);\n          } else {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n          }\n        }\n\n        const result = await response.json();\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n\n        if (result.success) {\n          // 缓存结果\n          this.setCache(cacheKey, result.data);\n          console.log(`[NoteManager] 成功获取植物 ${plantId} 的 ${result.data.length} 条笔记`);\n          return result.data;\n        }\n\n        throw new Error(result.error || '获取植物笔记失败');\n      } catch (fetchError) {\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n        // 网络错误处理\n        if (fetchError.name === 'TypeError' && fetchError.message.includes('fetch')) {\n          throw new Error(`网络连接失败: 无法连接到后端服务 (${url})`);\n        }\n        throw fetchError;\n      }\n    }, `获取植物 ${plantId} 笔记`);\n  }\n\n  /**\n   * 获取图像笔记 (优化版本，优先使用批量数据)\n   */\n  async getImageNotes(plantId, imageId) {\n    if (!plantId) {\n      throw new Error('植物ID不能为空');\n    }\n    if (!imageId) {\n      throw new Error('图像ID不能为空');\n    }\n\n    await this.ensureConnection();\n\n    const cacheKey = `image_${plantId}_${imageId}`;\n    \n    // 首先检查是否有批量数据缓存\n    if (this.bulkNoteData && !this.isBulkDataExpired()) {\n      const imageNotes = this.bulkNoteData.imageNotes[imageId] || [];\n      this.notes.set(cacheKey, imageNotes);\n      this.performanceMetrics.cacheHits++;\n      return imageNotes;\n    }\n    \n    // 检查独立缓存\n    if (this.notes.has(cacheKey) && !this.isCacheExpired(cacheKey)) {\n      this.performanceMetrics.cacheHits++;\n      return this.notes.get(cacheKey);\n    }\n\n    return this.httpManager.withRetry(async () => {\n      const startTime = performance.now();\n      const url = `${this.httpManager.baseUrl}/notes/image/${encodeURIComponent(plantId)}/${encodeURIComponent(imageId)}`;\n      console.log(`[NoteManager] 请求图像笔记 URL: ${url}`);\n      \n      try {\n        const response = await fetch(url);\n        this.performanceMetrics.requestCount++;\n\n        if (!response.ok) {\n          console.error(`[NoteManager] 请求失败: ${response.status} ${response.statusText}`);\n          \n          // 提供更详细的错误信息\n          if (response.status === 404) {\n            // 404 可能表示该图像没有笔记，返回空数组而不是抛出错误\n            const emptyResult = [];\n            this.setCache(cacheKey, emptyResult);\n            return emptyResult;\n          } else if (response.status === 500) {\n            throw new Error(`服务器内部错误 (500): 请检查后端服务状态`);\n          } else if (response.status === 403) {\n            throw new Error(`访问被拒绝 (403): 请检查权限设置`);\n          } else {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n          }\n        }\n\n        const result = await response.json();\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n\n        if (result.success) {\n          // 缓存结果\n          this.setCache(cacheKey, result.data);\n          console.log(`[NoteManager] 成功获取图像 ${imageId} 的 ${result.data.length} 条笔记`);\n          return result.data;\n        }\n\n        throw new Error(result.error || '获取图像笔记失败');\n      } catch (fetchError) {\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n        // 网络错误处理\n        if (fetchError.name === 'TypeError' && fetchError.message.includes('fetch')) {\n          throw new Error(`网络连接失败: 无法连接到后端服务 (${url})`);\n        }\n        throw fetchError;\n      }\n    }, `获取图像 ${imageId} 笔记`);\n  }\n\n  /**\n   * 更新笔记\n   */\n  async updateNote(noteId, updates) {\n    if (!noteId) {\n      throw new Error('笔记ID不能为空');\n    }\n\n    await this.ensureConnection();\n\n    return this.httpManager.withRetry(async () => {\n      const response = await fetch(`${this.httpManager.baseUrl}/notes/${encodeURIComponent(noteId)}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // 清除相关缓存\n        this.clearCache();\n        console.log(`笔记更新成功: ${noteId}`);\n        return result.data;\n      }\n\n      throw new Error(result.error || '更新笔记失败');\n    }, `更新笔记 ${noteId}`);\n  }\n\n  /**\n   * 删除笔记\n   */\n  async deleteNote(noteId) {\n    if (!noteId) {\n      throw new Error('笔记ID不能为空');\n    }\n\n    await this.ensureConnection();\n\n    return this.httpManager.withRetry(async () => {\n      const response = await fetch(`${this.httpManager.baseUrl}/notes/${encodeURIComponent(noteId)}`, {\n        method: 'DELETE'\n      });\n\n      if (!response.ok) {\n        // 🔧 FIX: Handle 404 gracefully - note may already be deleted\n        if (response.status === 404) {\n          console.warn(`笔记 ${noteId} 不存在或已被删除`);\n          // Clear cache and return success since the goal (note not existing) is achieved\n          this.clearCache();\n          return true;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // 清除相关缓存\n        this.clearCache();\n        console.log(`笔记删除成功: ${noteId}`);\n        return true;\n      }\n\n      throw new Error(result.error || '删除笔记失败');\n    }, `删除笔记 ${noteId}`);\n  }\n\n  /**\n   * 获取单个笔记\n   */\n  async getNote(noteId) {\n    if (!noteId) {\n      throw new Error('笔记ID不能为空');\n    }\n\n    await this.ensureConnection();\n\n    return this.httpManager.withRetry(async () => {\n      const response = await fetch(`${this.httpManager.baseUrl}/notes/${encodeURIComponent(noteId)}`);\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        return result.data;\n      }\n\n      throw new Error(result.error || '获取笔记失败');\n    }, `获取笔记 ${noteId}`);\n  }\n\n  /**\n   * 搜索笔记\n   */\n  async searchNotes(query, filters = {}) {\n    await this.ensureConnection();\n\n    return this.httpManager.withRetry(async () => {\n      const searchParams = new URLSearchParams();\n      \n      if (query) {\n        searchParams.append('query', query);\n      }\n      \n      if (filters.plantId) {\n        searchParams.append('plantId', filters.plantId);\n      }\n      \n      if (filters.noteType) {\n        searchParams.append('noteType', filters.noteType);\n      }\n      \n      if (filters.author) {\n        searchParams.append('author', filters.author);\n      }\n\n      const searchUrl = `${this.httpManager.baseUrl}/notes/search?${searchParams}`;\n      console.log('[NoteManager] Making search request to:', searchUrl);\n      \n      const response = await fetch(searchUrl);\n\n      if (!response.ok) {\n        const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n        error.url = searchUrl;\n        error.status = response.status;\n        console.error('[NoteManager] Search request failed:', error);\n        throw error;\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        return result.data;\n      }\n\n      throw new Error(result.error || '搜索笔记失败');\n    }, '搜索笔记');\n  }\n\n  /**\n   * 获取笔记统计\n   */\n  async getStats() {\n    await this.ensureConnection();\n\n    return this.httpManager.withRetry(async () => {\n      const response = await fetch(`${this.httpManager.baseUrl}/notes/stats`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        return result.data;\n      }\n\n      throw new Error(result.error || '获取笔记统计失败');\n    }, '获取笔记统计');\n  }\n\n  /**\n   * 清除缓存\n   */\n  clearCache() {\n    this.notes.clear();\n    this.cacheTimestamps.clear();\n    this.noteCounts.clear();\n    \n    // 🔧 FIX: Clear bulk data cache to prevent stale data issues\n    this.bulkNoteData = null;\n    this.bulkDataTimestamp = 0;\n    \n    console.log('笔记缓存已完全清除 (包括批量数据缓存)');\n  }\n\n  /**\n   * 使特定缓存失效\n   */\n  invalidateCache(plantId, imageId = null) {\n    const plantKey = `plant_${plantId}`;\n    this.notes.delete(plantKey);\n    \n    if (imageId) {\n      const imageKey = `image_${plantId}_${imageId}`;\n      this.notes.delete(imageKey);\n    }\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  getCacheStats() {\n    return {\n      cacheSize: this.notes.size,\n      isInitialized: this.isInitialized,\n      cacheKeys: Array.from(this.notes.keys())\n    };\n  }\n\n  /**\n   * 验证笔记数据格式\n   */\n  validateNoteData(noteData) {\n    const errors = [];\n\n    if (!noteData.title || noteData.title.trim() === '') {\n      errors.push('标题不能为空');\n    }\n\n    if (!noteData.content || noteData.content.trim() === '') {\n      errors.push('内容不能为空');\n    }\n\n    if (noteData.title && noteData.title.length > 100) {\n      errors.push('标题长度不能超过100字符');\n    }\n\n    if (noteData.content && noteData.content.length > 5000) {\n      errors.push('内容长度不能超过5000字符');\n    }\n\n    if (noteData.noteType && !['general', 'observation', 'annotation'].includes(noteData.noteType)) {\n      errors.push('笔记类型必须是 general、observation 或 annotation');\n    }\n\n    if (noteData.tags && !Array.isArray(noteData.tags)) {\n      errors.push('标签必须是数组');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * 格式化笔记数据用于显示\n   */\n  formatNoteForDisplay(note) {\n    return {\n      ...note,\n      formattedTimestamp: new Date(note.timestamp).toLocaleString('zh-CN'),\n      formattedLastModified: new Date(note.lastModified).toLocaleString('zh-CN'),\n      shortContent: note.content.length > 100 ? \n        note.content.substring(0, 100) + '...' : \n        note.content,\n      tagsText: note.tags.join(', ')\n    };\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    this.clearCache();\n    this.isInitialized = false;\n    \n    // 清理定时器（如果有）\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n    \n    console.log('NoteManager 清理完成');\n  }\n\n  /**\n   * 启动自动清理\n   */\n  startAutoCleanup() {\n    // 每10分钟清理一次过期缓存\n    this.cleanupTimer = setInterval(() => {\n      this.cleanupExpiredCache();\n    }, 10 * 60 * 1000);\n  }\n\n  /**\n   * 检查缓存是否过期\n   */\n  isCacheExpired(key) {\n    const timestamp = this.cacheTimestamps.get(key);\n    if (!timestamp) return true;\n    return Date.now() - timestamp > this.cacheExpiration;\n  }\n\n  /**\n   * 设置缓存\n   */\n  setCache(key, data) {\n    this.notes.set(key, data);\n    this.cacheTimestamps.set(key, Date.now());\n  }\n\n  /**\n   * 防重复请求装饰器\n   */\n  async withRequestDeduplication(key, requestFn) {\n    // 如果已有相同请求在进行，返回该请求\n    if (this.requestQueue.has(key)) {\n      return this.requestQueue.get(key);\n    }\n\n    // 创建新请求\n    const requestPromise = requestFn();\n    this.requestQueue.set(key, requestPromise);\n\n    try {\n      const result = await requestPromise;\n      this.requestQueue.delete(key);\n      return result;\n    } catch (error) {\n      this.requestQueue.delete(key);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取笔记数量（快速检查）\n   */\n  async getNoteCount(plantId, imageId = null) {\n    const countKey = imageId ? `image_${plantId}_${imageId}` : `plant_${plantId}`;\n    \n    // 如果有缓存的数量，直接返回\n    if (this.noteCounts.has(countKey)) {\n      return this.noteCounts.get(countKey);\n    }\n\n    // 如果有完整的笔记缓存，计算数量\n    const cacheKey = imageId ? `image_${plantId}_${imageId}` : `plant_${plantId}`;\n    if (this.notes.has(cacheKey) && !this.isCacheExpired(cacheKey)) {\n      const notes = this.notes.get(cacheKey);\n      const count = notes.length;\n      this.noteCounts.set(countKey, count);\n      return count;\n    }\n\n    // 异步获取笔记（不阻塞UI）\n    this.loadNotesAsync(plantId, imageId);\n    return 0; // 返回默认值\n  }\n\n  /**\n   * 异步加载笔记（后台加载）\n   */\n  async loadNotesAsync(plantId, imageId = null) {\n    try {\n      if (imageId) {\n        await this.getImageNotes(plantId, imageId);\n      } else {\n        await this.getPlantNotes(plantId);\n      }\n    } catch (error) {\n      console.warn('后台加载笔记失败:', error);\n    }\n  }\n\n  /**\n   * 预加载笔记（性能优化）\n   */\n  async preloadNotes(plantId, imageIds = []) {\n    const promises = [];\n    \n    // 预加载植物笔记\n    promises.push(this.loadNotesAsync(plantId));\n    \n    // 预加载图像笔记\n    imageIds.forEach(imageId => {\n      promises.push(this.loadNotesAsync(plantId, imageId));\n    });\n    \n    try {\n      await Promise.allSettled(promises);\n      console.log(`预加载完成: 植物 ${plantId} 和 ${imageIds.length} 个图像的笔记`);\n    } catch (error) {\n      console.warn('预加载笔记失败:', error);\n    }\n  }\n\n  /**\n   * 批量获取所有笔记数据 (性能优化的核心方法)\n   */\n  async getAllNotesInBulk() {\n    console.log('[NoteManager] 开始批量获取所有笔记数据...');\n    \n    await this.ensureConnection();\n    \n    // 检查批量数据缓存\n    if (this.bulkNoteData && !this.isBulkDataExpired()) {\n      console.log('[NoteManager] 使用缓存的批量笔记数据');\n      this.performanceMetrics.cacheHits++;\n      return this.bulkNoteData;\n    }\n\n    return this.httpManager.withRetry(async () => {\n      const startTime = performance.now();\n      const url = `${this.httpManager.baseUrl}/notes/bulk`;\n      console.log(`[NoteManager] 请求批量笔记数据 URL: ${url}`);\n      \n      try {\n        const response = await fetch(url, {\n          headers: {\n            'Cache-Control': 'no-cache'\n          }\n        });\n        this.performanceMetrics.bulkRequestCount++;\n\n        if (!response.ok) {\n          if (response.status === 404) {\n            console.warn('[NoteManager] 批量笔记端点不存在，将回退到单独请求模式');\n            return null; // 表示不支持批量API\n          }\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n\n        if (result.success) {\n          // 缓存批量数据\n          this.bulkNoteData = {\n            plantNotes: result.data.plantNotes || {},\n            imageNotes: result.data.imageNotes || {},\n            statistics: result.data.statistics || {}\n          };\n          this.bulkDataTimestamp = Date.now();\n          \n          // 同时更新个别缓存以保持一致性\n          this.updateIndividualCacheFromBulk();\n          \n          const plantCount = Object.keys(this.bulkNoteData.plantNotes).length;\n          const imageCount = Object.keys(this.bulkNoteData.imageNotes).length;\n          console.log(`[NoteManager] 成功获取批量笔记数据: ${plantCount} 个植物, ${imageCount} 个图像`);\n          \n          return this.bulkNoteData;\n        }\n\n        throw new Error(result.error || '获取批量笔记数据失败');\n      } catch (fetchError) {\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n        \n        if (fetchError.name === 'TypeError' && fetchError.message.includes('fetch')) {\n          throw new Error(`网络连接失败: 无法连接到后端服务 (${url})`);\n        }\n        throw fetchError;\n      }\n    }, '批量获取笔记数据');\n  }\n\n  /**\n   * 检查批量数据是否过期\n   */\n  isBulkDataExpired() {\n    if (!this.bulkDataTimestamp) return true;\n    return Date.now() - this.bulkDataTimestamp > this.cacheExpiration;\n  }\n\n  /**\n   * 从批量数据更新个别缓存\n   */\n  updateIndividualCacheFromBulk() {\n    if (!this.bulkNoteData) return;\n    \n    // 更新植物笔记缓存\n    for (const [plantId, notes] of Object.entries(this.bulkNoteData.plantNotes)) {\n      const cacheKey = `plant_${plantId}`;\n      this.setCache(cacheKey, notes);\n    }\n    \n    // 更新图像笔记缓存\n    for (const [imageId, notes] of Object.entries(this.bulkNoteData.imageNotes)) {\n      // 从imageId推断plantId (格式: plantId_viewAngle_imageName)\n      const plantId = imageId.split('_')[0];\n      const cacheKey = `image_${plantId}_${imageId}`;\n      this.setCache(cacheKey, notes);\n    }\n  }\n\n  /**\n   * 获取快速笔记统计（用于Badge更新）\n   */\n  async getQuickNoteStats() {\n    console.log('[NoteManager] 获取快速笔记统计...');\n    \n    try {\n      const bulkData = await this.getAllNotesInBulk();\n      \n      if (!bulkData) {\n        console.warn('[NoteManager] 批量API不可用，回退到传统模式');\n        return null;\n      }\n      \n      const stats = {};\n      \n      // 计算每个植物的笔记总数\n      for (const [plantId, plantNotes] of Object.entries(bulkData.plantNotes)) {\n        const plantNotesCount = plantNotes.length;\n        let imageNotesCount = 0;\n        \n        // 统计该植物所有图像的笔记数\n        for (const [imageId, imageNotes] of Object.entries(bulkData.imageNotes)) {\n          if (imageId.startsWith(plantId + '_')) {\n            imageNotesCount += imageNotes.length;\n          }\n        }\n        \n        stats[plantId] = {\n          plantNotes: plantNotesCount,\n          imageNotes: imageNotesCount,\n          total: plantNotesCount + imageNotesCount\n        };\n      }\n      \n      console.log(`[NoteManager] 快速统计完成: ${Object.keys(stats).length} 个植物`);\n      return stats;\n    } catch (error) {\n      console.error('[NoteManager] 获取快速笔记统计失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 获取性能指标\n   */\n  getPerformanceMetrics() {\n    return {\n      ...this.performanceMetrics,\n      cacheSize: this.notes.size,\n      hasBulkData: !!this.bulkNoteData,\n      bulkDataAge: this.bulkDataTimestamp ? Date.now() - this.bulkDataTimestamp : null,\n      averageRequestTime: this.performanceMetrics.requestCount > 0 \n        ? this.performanceMetrics.networkTime / this.performanceMetrics.requestCount \n        : 0\n    };\n  }\n\n  /**\n   * 重置性能指标\n   */\n  resetPerformanceMetrics() {\n    this.performanceMetrics = {\n      requestCount: 0,\n      bulkRequestCount: 0,\n      cacheHits: 0,\n      networkTime: 0\n    };\n  }\n\n  /**\n   * 强制刷新批量数据\n   */\n  async refreshBulkData() {\n    console.log('[NoteManager] 强制刷新批量数据...');\n    this.bulkNoteData = null;\n    this.bulkDataTimestamp = 0;\n    return await this.getAllNotesInBulk();\n  }\n\n  /**\n   * 清理过期缓存\n   */\n  cleanupExpiredCache() {\n    const now = Date.now();\n    const expiredKeys = [];\n    \n    for (const [key, timestamp] of this.cacheTimestamps) {\n      if (now - timestamp > this.cacheExpiration) {\n        expiredKeys.push(key);\n      }\n    }\n    \n    expiredKeys.forEach(key => {\n      this.notes.delete(key);\n      this.cacheTimestamps.delete(key);\n    });\n    \n    // 清理过期的批量数据\n    if (this.isBulkDataExpired()) {\n      this.bulkNoteData = null;\n      this.bulkDataTimestamp = 0;\n    }\n    \n    if (expiredKeys.length > 0) {\n      console.log(`清理了 ${expiredKeys.length} 个过期缓存`);\n    }\n  }\n}","/**\n * Note System UI Component\n * \n * Features:\n * - Note modal dialogs\n * - Note list display\n * - Note editor\n * - Note search\n */\n\nexport class NoteUI {\n  constructor(noteManager) {\n    this.noteManager = noteManager;\n    this.currentPlantId = null;\n    this.currentImageId = null;\n    this.currentNote = null;\n    this.isEditMode = false;\n    \n    this.initializeUI();\n  }\n\n  /**\n   * Initialize UI components\n   */\n  initializeUI() {\n    // Delay initialization of all UI components to ensure DOM is fully loaded\n    setTimeout(() => {\n      this.createNoteModal();\n      this.createNoteListModal();\n      this.setupEventListeners();\n      this.createNoteButtons();\n      this.injectNoteStyles(); // 🔧 FIX: Add styles for separated note display\n      console.log('[NoteUI] UI initialization completed with note separation styles');\n      \n      // Initialize plant note badges after a short delay\n      setTimeout(() => {\n        this.updateAllPlantNoteBadges();\n      }, 500);\n      \n      // ADDITIONAL SAFETY: Update badges again after a longer delay to catch any timing issues\n      setTimeout(() => {\n        console.log('[NoteUI] Running additional badge update for safety');\n        this.updateAllPlantNoteBadges();\n      }, 2000);\n    }, 200);\n  }\n\n  /**\n   * Create note modal with improved styling\n   */\n  createNoteModal() {\n    console.log('[NoteUI] Creating note modal');\n    const modal = document.createElement('div');\n    modal.id = 'note-modal';\n    modal.className = 'modal';\n    modal.style.display = 'none'; // Ensure initial state is hidden\n    modal.innerHTML = `\n      <div class=\"modal-content note-modal-content\">\n        <div class=\"modal-header\">\n          <h2 id=\"note-modal-title\">Add Note</h2>\n          <button class=\"close-button\" id=\"note-modal-close\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"note-form\">\n            <div class=\"form-group\">\n              <label for=\"note-title\">Title <span class=\"required\">*</span></label>\n              <input type=\"text\" id=\"note-title\" maxlength=\"100\" required placeholder=\"Enter note title...\">\n              <div class=\"char-counter\">\n                <span id=\"note-title-count\">0</span>/100\n              </div>\n            </div>\n            \n            <div class=\"form-group\">\n              <label for=\"note-type\">Type</label>\n              <select id=\"note-type\">\n                <option value=\"general\">General Note</option>\n                <option value=\"observation\">Observation Record</option>\n                <option value=\"annotation\">Annotation Description</option>\n              </select>\n            </div>\n            \n            <div class=\"form-group\">\n              <label for=\"note-content\">Content <span class=\"required\">*</span></label>\n              <textarea id=\"note-content\" rows=\"6\" maxlength=\"5000\" required placeholder=\"Enter note content...\"></textarea>\n              <div class=\"char-counter\">\n                <span id=\"note-content-count\">0</span>/5000\n              </div>\n            </div>\n            \n            <div class=\"form-group\">\n              <label for=\"note-tags\">Tags</label>\n              <input type=\"text\" id=\"note-tags\" placeholder=\"Separate multiple tags with commas\">\n              <div class=\"form-help\">Example: observation, growth, issue</div>\n            </div>\n            \n            <div class=\"form-group\">\n              <label for=\"note-author\">Author</label>\n              <input type=\"text\" id=\"note-author\" value=\"User\" placeholder=\"Enter author name\">\n            </div>\n            \n            <!-- 🔧 NEW: Backward Propagation Option -->\n            <div class=\"form-group\" id=\"backward-propagation-group\" style=\"display: none;\">\n              <div class=\"checkbox-wrapper\">\n                <label class=\"checkbox-label\">\n                  <input type=\"checkbox\" id=\"note-backward-propagation\">\n                  <span class=\"checkbox-text\">Backward Propagation</span>\n                </label>\n                <div class=\"form-help\">Apply this note to all later-dated images of the current plant</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"btn btn-secondary\" id=\"note-cancel-btn\">Cancel</button>\n          <button class=\"btn btn-primary\" id=\"note-save-btn\">Save</button>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(modal);\n    console.log('[NoteUI] Note modal created and set to hidden');\n  }\n\n  /**\n   * Create note list modal with improved styling\n   */\n  createNoteListModal() {\n    console.log('[NoteUI] Creating note list modal');\n    const modal = document.createElement('div');\n    modal.id = 'note-list-modal';\n    modal.className = 'modal';\n    modal.style.display = 'none'; // Ensure initial state is hidden\n    modal.innerHTML = `\n      <div class=\"modal-content note-list-modal-content\">\n        <div class=\"modal-header\">\n          <h2 id=\"note-list-modal-title\">Note List</h2>\n          <button class=\"close-button\" id=\"note-list-modal-close\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"note-list-controls\">\n            <div class=\"search-group\">\n              <input type=\"text\" id=\"note-search\" placeholder=\"Search notes...\">\n              <button class=\"btn btn-sm btn-secondary\" id=\"note-search-btn\">Search</button>\n            </div>\n            <div class=\"filter-group\">\n              <select id=\"note-type-filter\">\n                <option value=\"\">All Types</option>\n                <option value=\"general\">General Note</option>\n                <option value=\"observation\">Observation Record</option>\n                <option value=\"annotation\">Annotation Description</option>\n              </select>\n              <button class=\"btn btn-sm btn-primary\" id=\"add-note-btn\">Add Note</button>\n            </div>\n          </div>\n          <div class=\"note-list-container\">\n            <div id=\"note-list-content\">\n              <div class=\"loading-message\">Loading...</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(modal);\n    console.log('[NoteUI] Note list modal created and set to hidden');\n  }\n\n  /**\n   * Create note buttons\n   */\n  createNoteButtons() {\n    this.createPlantNoteButton();\n    this.createImageNoteButton();\n    // 🔧 REMOVED: Note display areas no longer needed - counts shown in buttons\n  }\n\n  /**\n   * Create plant notes button in toolbar\n   */\n  createPlantNoteButton() {\n    // Find toolbar section\n    const toolbarSection = document.querySelector('.toolbar-section');\n    if (!toolbarSection) {\n      console.warn('[NoteUI] Toolbar section not found, creating fallback container');\n      this.createFallbackPlantNoteContainer();\n      return;\n    }\n    \n    // Remove existing button\n    const existingBtn = document.getElementById('plant-note-btn');\n    if (existingBtn) {\n      existingBtn.remove();\n    }\n    \n    // Create button container within toolbar\n    let noteContainer = toolbarSection.querySelector('.plant-notes-section');\n    if (!noteContainer) {\n      noteContainer = document.createElement('div');\n      noteContainer.className = 'plant-notes-section';\n      noteContainer.style.cssText = `\n        margin-top: 10px;\n        padding-top: 10px;\n        border-top: 1px solid var(--border-color);\n      `;\n      toolbarSection.appendChild(noteContainer);\n    }\n    \n    // Create the button with note count display\n    const noteBtn = document.createElement('button');\n    noteBtn.id = 'plant-note-btn';\n    noteBtn.className = 'btn btn-small btn-secondary';\n    noteBtn.innerHTML = '📝 Plant Notes <span id=\"plant-note-count\" class=\"note-count-display\"></span>';\n    noteBtn.title = 'View or add plant notes';\n    noteBtn.style.cssText = `\n      display: none;\n      width: 100%;\n      margin-bottom: 5px;\n      position: relative;\n    `;\n    noteContainer.appendChild(noteBtn);\n    \n    console.log('[NoteUI] Plant notes button created in toolbar with count display');\n  }\n  \n  /**\n   * Create fallback container if toolbar not found\n   */\n  createFallbackPlantNoteContainer() {\n    const container = document.createElement('div');\n    container.className = 'plant-note-container';\n    container.style.cssText = `\n      position: fixed;\n      top: 80px;\n      right: 20px;\n      z-index: 1000;\n      background: rgba(255, 255, 255, 0.9);\n      padding: 10px;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      display: none;\n    `;\n    document.body.appendChild(container);\n    \n    const noteBtn = document.createElement('button');\n    noteBtn.id = 'plant-note-btn';\n    noteBtn.className = 'btn btn-info btn-sm note-btn';\n    noteBtn.innerHTML = '📝 Plant Notes';\n    noteBtn.title = 'View or add plant notes';\n    noteBtn.style.display = 'none';\n    container.appendChild(noteBtn);\n  }\n\n  /**\n   * Create image notes button in annotation controls\n   */\n  createImageNoteButton() {\n    console.log('[NoteUI] Creating image notes button');\n    \n    // Find annotation controls container\n    const annotationControls = document.querySelector('.annotation-controls');\n    if (!annotationControls) {\n      console.warn('[NoteUI] Annotation controls not found, creating fallback container');\n      this.createFallbackImageNoteContainer();\n      return;\n    }\n    \n    // Remove existing button\n    const existingBtn = document.getElementById('image-note-btn');\n    if (existingBtn) {\n      existingBtn.remove();\n    }\n    \n    // Create the icon button to match annotation controls style with count display\n    const noteBtn = document.createElement('button');\n    noteBtn.id = 'image-note-btn';\n    noteBtn.className = 'btn btn-icon';\n    noteBtn.innerHTML = '📝<span id=\"image-note-count\" class=\"note-count-overlay\"></span>';\n    noteBtn.title = 'View or add image notes';\n    noteBtn.style.cssText = `\n      display: none;\n      width: 32px;\n      height: 32px;\n      padding: 0;\n      font-size: 16px;\n      background-color: rgba(0, 0, 0, 0.7);\n      color: white;\n      border: none;\n      pointer-events: auto;\n      cursor: pointer;\n      border-radius: 0.375rem;\n      position: relative;\n    `;\n    \n    // Add to annotation controls\n    annotationControls.appendChild(noteBtn);\n    \n    console.log('[NoteUI] Image notes button created in annotation controls with count display');\n  }\n  \n  /**\n   * Create fallback container if annotation controls not found\n   */\n  createFallbackImageNoteContainer() {\n    const container = document.createElement('div');\n    container.className = 'image-note-container';\n    container.style.cssText = `\n      position: fixed;\n      top: 120px;\n      right: 20px;\n      z-index: 1000;\n      background: rgba(255, 255, 255, 0.9);\n      padding: 10px;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      display: none;\n    `;\n    document.body.appendChild(container);\n    \n    const noteBtn = document.createElement('button');\n    noteBtn.id = 'image-note-btn';\n    noteBtn.className = 'btn btn-info btn-sm note-btn';\n    noteBtn.innerHTML = '📝';\n    noteBtn.title = 'View or add image notes';\n    noteBtn.style.cssText = `\n      display: none;\n      pointer-events: auto;\n      cursor: pointer;\n    `;\n    container.appendChild(noteBtn);\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    // Delay event listener setup to ensure DOM elements are created\n    setTimeout(() => {\n      this.setupModalEventListeners();\n      this.setupButtonEventListeners();\n      this.setupInputEventListeners();\n      // 🔧 REMOVED: Note display event listeners no longer needed\n    }, 200);\n  }\n\n  /**\n   * Setup modal event listeners\n   */\n  setupModalEventListeners() {\n    // Note modal events\n    const noteModalClose = document.getElementById('note-modal-close');\n    if (noteModalClose) {\n      noteModalClose.addEventListener('click', () => {\n        this.closeNoteModal();\n      });\n    }\n\n    const noteCancelBtn = document.getElementById('note-cancel-btn');\n    if (noteCancelBtn) {\n      noteCancelBtn.addEventListener('click', () => {\n        this.closeNoteModal();\n      });\n    }\n\n    const noteSaveBtn = document.getElementById('note-save-btn');\n    if (noteSaveBtn) {\n      noteSaveBtn.addEventListener('click', () => {\n        this.saveNote();\n      });\n    }\n\n    // Note list modal events\n    const noteListModalClose = document.getElementById('note-list-modal-close');\n    if (noteListModalClose) {\n      noteListModalClose.addEventListener('click', () => {\n        this.closeNoteListModal();\n      });\n    }\n\n    const addNoteBtn = document.getElementById('add-note-btn');\n    if (addNoteBtn) {\n      addNoteBtn.addEventListener('click', () => {\n        this.closeNoteListModal();\n        this.showNoteModal();\n      });\n    }\n\n    const noteSearchBtn = document.getElementById('note-search-btn');\n    if (noteSearchBtn) {\n      noteSearchBtn.addEventListener('click', () => {\n        this.searchNotes();\n      });\n    }\n\n    const noteSearch = document.getElementById('note-search');\n    if (noteSearch) {\n      noteSearch.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          this.searchNotes();\n        }\n      });\n    }\n\n    // Close modal when clicking outside\n    document.addEventListener('click', (e) => {\n      if (e.target.id === 'note-modal') {\n        this.closeNoteModal();\n      }\n      if (e.target.id === 'note-list-modal') {\n        this.closeNoteListModal();\n      }\n    });\n  }\n\n  /**\n   * Setup button event listeners\n   */\n  setupButtonEventListeners() {\n    // Plant notes button\n    const plantNoteBtn = document.getElementById('plant-note-btn');\n    if (plantNoteBtn) {\n      console.log('[NoteUI] Plant notes button found, binding events');\n      plantNoteBtn.addEventListener('click', (event) => {\n        console.log('[NoteUI] Plant notes button clicked');\n        event.preventDefault();\n        this.showPlantNotes();\n      });\n    } else {\n      console.warn('[NoteUI] Plant notes button not found');\n    }\n\n    // Image notes button\n    const imageNoteBtn = document.getElementById('image-note-btn');\n    if (imageNoteBtn) {\n      console.log('[NoteUI] Image notes button found, binding events');\n      imageNoteBtn.addEventListener('click', (event) => {\n        console.log('[NoteUI] Image notes button clicked');\n        event.preventDefault();\n        this.showImageNotes();\n      });\n    } else {\n      console.warn('[NoteUI] Image notes button not found');\n    }\n  }\n\n  /**\n   * Setup input field event listeners\n   */\n  setupInputEventListeners() {\n    // Character counter\n    const noteTitle = document.getElementById('note-title');\n    if (noteTitle) {\n      noteTitle.addEventListener('input', () => {\n        this.updateCharCounter('note-title', 'note-title-count', 100);\n      });\n    }\n\n    const noteContent = document.getElementById('note-content');\n    if (noteContent) {\n      noteContent.addEventListener('input', () => {\n        this.updateCharCounter('note-content', 'note-content-count', 5000);\n      });\n    }\n  }\n\n  /**\n   * Show plant notes\n   */\n  async showPlantNotes() {\n    console.log('[NoteUI] showPlantNotes called');\n    if (!this.currentPlantId) {\n      console.warn('[NoteUI] No plant selected, cannot show plant notes');\n      this.showUserError('Please select a plant', 'You need to select a plant to view notes');\n      return;\n    }\n\n    // 🔧 FIX: 确保在显示植物笔记时清除图像ID，防止误创建图像笔记\n    this.currentImageId = null;\n    console.log('[NoteUI] Cleared currentImageId to ensure plant notes creation');\n    \n    document.getElementById('note-list-modal-title').textContent = `Plant Notes - ${this.currentPlantId}`;\n    \n    const modal = document.getElementById('note-list-modal');\n    if (modal) {\n      console.log('[NoteUI] Showing plant notes modal');\n      modal.style.display = 'flex';\n    }\n    \n    try {\n      await this.loadNoteList();\n    } catch (error) {\n      console.error('[NoteUI] Failed to load plant notes:', error);\n      this.showUserError('Failed to load notes', error.message);\n    }\n  }\n\n  /**\n   * Show image notes\n   */\n  async showImageNotes() {\n    console.log('[NoteUI] showImageNotes called');\n    console.log(`[NoteUI] Current state - plantId: ${this.currentPlantId}, imageId: ${this.currentImageId}`);\n    \n    // Also check the global app state as a fallback\n    const globalAppState = window.PlantAnnotationTool?.appState;\n    const fallbackPlantId = globalAppState?.currentPlant?.id;\n    const fallbackImageId = globalAppState?.currentImage?.id;\n    \n    console.log(`[NoteUI] Fallback state - plantId: ${fallbackPlantId}, imageId: ${fallbackImageId}`);\n    \n    const effectivePlantId = this.currentPlantId || fallbackPlantId;\n    const effectiveImageId = this.currentImageId || fallbackImageId;\n    \n    if (!effectivePlantId || !effectiveImageId) {\n      console.warn('[NoteUI] No plant or image selected, cannot show image notes');\n      this.showUserError('Please select plant and image', 'You need to select both plant and image to view image notes');\n      return;\n    }\n    \n    // Update current state if we used fallback values\n    if (!this.currentPlantId && fallbackPlantId) {\n      this.currentPlantId = fallbackPlantId;\n    }\n    if (!this.currentImageId && fallbackImageId) {\n      this.currentImageId = fallbackImageId;\n    }\n\n    document.getElementById('note-list-modal-title').textContent = `Image Notes - ${effectiveImageId}`;\n    \n    const modal = document.getElementById('note-list-modal');\n    if (modal) {\n      console.log('[NoteUI] Showing image notes modal');\n      modal.style.display = 'flex';\n    }\n    \n    try {\n      await this.loadNoteList();\n    } catch (error) {\n      console.error('[NoteUI] Failed to load image notes:', error);\n      this.showUserError('Failed to load notes', error.message);\n    }\n  }\n\n  /**\n   * Load note list (unified to show ALL notes for plant, consistent with search)\n   */\n  async loadNoteList() {\n    const listContainer = document.getElementById('note-list-content');\n    listContainer.innerHTML = '<div class=\"loading-message\">Loading...</div>';\n\n    try {\n      let notes;\n      if (this.currentImageId) {\n        // For image notes, get specific image notes\n        notes = await this.noteManager.getImageNotes(this.currentPlantId, this.currentImageId);\n        console.log(`[NoteUI] Loaded ${notes.length} image notes for ${this.currentImageId}`);\n      } else {\n        // 🔧 FIX: For plant modal initial load, show ONLY plant-level notes\n        // Search function will show all notes when user explicitly searches\n        console.log(`[NoteUI] Loading plant-level notes only for ${this.currentPlantId}`);\n        notes = await this.noteManager.getPlantNotes(this.currentPlantId);\n        console.log(`[NoteUI] Plant API loaded ${notes.length} plant-only notes for ${this.currentPlantId}`);\n      }\n\n      this.renderNoteList(notes);\n      console.log(`[NoteUI] Modal refreshed with ${notes.length} notes`);\n    } catch (error) {\n      console.error('Failed to load note list:', error);\n      listContainer.innerHTML = `<div class=\"error-message\">Loading failed: ${error.message}</div>`;\n    }\n  }\n\n  /**\n   * Render note list with proper plant/image note separation\n   */\n  renderNoteList(notes) {\n    const listContainer = document.getElementById('note-list-content');\n    \n    if (!notes || notes.length === 0) {\n      listContainer.innerHTML = '<div class=\"empty-message\">No notes available</div>';\n      return;\n    }\n\n    // 🔧 FIX: Separate plant-level notes from image-level notes\n    const plantNotes = notes.filter(note => !note.imageId);\n    const imageNotes = notes.filter(note => note.imageId);\n    \n    console.log(`[NoteUI] Rendering ${plantNotes.length} plant notes and ${imageNotes.length} image notes`);\n\n    let html = '';\n    \n    // Render plant-level notes section\n    if (plantNotes.length > 0) {\n      html += `\n        <div class=\"notes-section\">\n          <div class=\"section-header\">\n            <h3 class=\"section-title\">\n              <span class=\"section-icon\">📝</span>\n              Plant Notes (${plantNotes.length})\n            </h3>\n          </div>\n          <div class=\"notes-list\">\n            ${this.renderNoteItems(plantNotes, 'plant')}\n          </div>\n        </div>\n      `;\n    }\n    \n    // Render image-level notes section\n    if (imageNotes.length > 0) {\n      html += `\n        <div class=\"notes-section\">\n          <div class=\"section-header\">\n            <h3 class=\"section-title\">\n              <span class=\"section-icon\">🖼️</span>\n              Image Notes (${imageNotes.length})\n            </h3>\n          </div>\n          <div class=\"notes-list\">\n            ${this.renderNoteItems(imageNotes, 'image')}\n          </div>\n        </div>\n      `;\n    }\n\n    listContainer.innerHTML = html;\n\n    // Bind edit and delete events\n    this.bindNoteActionEvents(listContainer);\n  }\n\n  /**\n   * Helper method to render note items with proper type indicators\n   */\n  renderNoteItems(notes, noteScope) {\n    return notes.map(note => {\n      const formattedNote = this.noteManager.formatNoteForDisplay(note);\n      \n      // 🔧 FIX: Add visual indicators and image info for different note types\n      let scopeIndicator = '';\n      let imageInfo = '';\n      \n      if (noteScope === 'plant') {\n        scopeIndicator = '<span class=\"note-scope plant-scope\">📝 Plant</span>';\n      } else if (noteScope === 'image') {\n        scopeIndicator = '<span class=\"note-scope image-scope\">🖼️ Image</span>';\n        // Extract image name from imageId for display\n        const imageName = note.imageId ? note.imageId.split('_').slice(-1)[0] : 'Unknown';\n        imageInfo = `<div class=\"image-info\">📷 Image: ${this.escapeHtml(imageName)}</div>`;\n      }\n      \n      return `\n        <div class=\"note-item ${noteScope}-note\" data-note-id=\"${note.noteId}\">\n          <div class=\"note-item-header\">\n            <h4 class=\"note-title\">${this.escapeHtml(formattedNote.title)}</h4>\n            <div class=\"note-actions\">\n              <button class=\"btn btn-sm btn-secondary edit-note-btn\" data-note-id=\"${note.noteId}\">Edit</button>\n              <button class=\"btn btn-sm btn-danger delete-note-btn\" data-note-id=\"${note.noteId}\">Delete</button>\n            </div>\n          </div>\n          <div class=\"note-item-meta\">\n            ${scopeIndicator}\n            <span class=\"note-type note-type-${note.noteType}\">${this.getNoteTypeText(note.noteType)}</span>\n            <span class=\"note-timestamp\">${formattedNote.formattedTimestamp}</span>\n            <span class=\"note-author\">Author: ${this.escapeHtml(note.author)}</span>\n          </div>\n          ${imageInfo}\n          <div class=\"note-content\">\n            ${this.escapeHtml(formattedNote.shortContent)}\n          </div>\n          ${note.tags.length > 0 ? `\n            <div class=\"note-tags\">\n              ${note.tags.map(tag => `<span class=\"tag\">${this.escapeHtml(tag)}</span>`).join('')}\n            </div>\n          ` : ''}\n        </div>\n      `;\n    }).join('');\n  }\n\n  /**\n   * Helper method to bind note action events\n   */\n  bindNoteActionEvents(container) {\n    container.querySelectorAll('.edit-note-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const noteId = e.target.dataset.noteId;\n        this.editNote(noteId);\n      });\n    });\n\n    container.querySelectorAll('.delete-note-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const noteId = e.target.dataset.noteId;\n        this.deleteNote(noteId);\n      });\n    });\n  }\n\n  /**\n   * Inject CSS styles for separated note display\n   */\n  injectNoteStyles() {\n    const styleId = 'note-separation-styles';\n    if (document.getElementById(styleId)) return; // Already injected\n\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `\n      /* Note section separation styles */\n      .notes-section {\n        margin-bottom: 20px;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        overflow: hidden;\n      }\n      \n      .section-header {\n        background: #f9fafb;\n        padding: 12px 16px;\n        border-bottom: 1px solid #e5e7eb;\n      }\n      \n      .section-title {\n        margin: 0;\n        font-size: 16px;\n        font-weight: 600;\n        color: #374151;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n      \n      .section-icon {\n        font-size: 18px;\n      }\n      \n      .notes-list {\n        background: white;\n      }\n      \n      /* Note scope indicators */\n      .note-scope {\n        display: inline-flex;\n        align-items: center;\n        gap: 4px;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-size: 12px;\n        font-weight: 500;\n        margin-right: 8px;\n      }\n      \n      .plant-scope {\n        background: #dcfce7;\n        color: #166534;\n      }\n      \n      .image-scope {\n        background: #dbeafe;\n        color: #1d4ed8;\n      }\n      \n      /* Image info display */\n      .image-info {\n        background: #f0f9ff;\n        border: 1px solid #bae6fd;\n        border-radius: 4px;\n        padding: 6px 10px;\n        margin: 8px 0;\n        font-size: 13px;\n        color: #0c4a6e;\n      }\n      \n      /* Note item styling for different types */\n      .plant-note {\n        border-left: 4px solid #22c55e;\n      }\n      \n      .image-note {\n        border-left: 4px solid #3b82f6;\n      }\n      \n      /* Enhance existing note item spacing */\n      .note-item {\n        margin-bottom: 0;\n        border-bottom: 1px solid #f3f4f6;\n      }\n      \n      .note-item:last-child {\n        border-bottom: none;\n      }\n      \n      /* Backward propagation checkbox styling */\n      .checkbox-wrapper {\n        margin: 15px 0;\n      }\n      \n      .checkbox-label {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        cursor: pointer;\n        font-weight: 500;\n        color: #374151;\n      }\n      \n      .checkbox-label input[type=\"checkbox\"] {\n        margin: 0;\n        padding: 0;\n        transform: scale(1.1);\n        accent-color: #3b82f6;\n      }\n      \n      .checkbox-text {\n        user-select: none;\n      }\n      \n      #backward-propagation-group .form-help {\n        margin-top: 5px;\n        font-size: 12px;\n        color: #6b7280;\n        font-style: italic;\n      }\n    `;\n    \n    document.head.appendChild(style);\n    console.log('[NoteUI] Injected separation styles for plant/image notes');\n  }\n\n  /**\n   * Display note edit modal\n   */\n  showNoteModal(note = null) {\n    console.log('[NoteUI] showNoteModal called, note:', note);\n    this.currentNote = note;\n    this.isEditMode = !!note;\n\n    const modal = document.getElementById('note-modal');\n    const title = document.getElementById('note-modal-title');\n    const backwardPropagationGroup = document.getElementById('backward-propagation-group');\n    \n    if (!modal || !title) {\n      console.error('[NoteUI] Note modal elements not found');\n      return;\n    }\n    \n    title.textContent = this.isEditMode ? 'Edit Note' : 'Add Note';\n    \n    // 🔧 NEW: Show backward propagation option only for new image notes\n    const isNewImageNote = !this.isEditMode && this.currentImageId;\n    if (backwardPropagationGroup) {\n      backwardPropagationGroup.style.display = isNewImageNote ? 'block' : 'none';\n      // Reset checkbox when showing modal\n      const checkbox = document.getElementById('note-backward-propagation');\n      if (checkbox) {\n        checkbox.checked = false;\n      }\n    }\n    \n    if (note) {\n      document.getElementById('note-title').value = note.title;\n      document.getElementById('note-type').value = note.noteType;\n      document.getElementById('note-content').value = note.content;\n      document.getElementById('note-tags').value = note.tags.join(', ');\n      document.getElementById('note-author').value = note.author;\n    } else {\n      document.getElementById('note-title').value = '';\n      document.getElementById('note-type').value = 'general';\n      document.getElementById('note-content').value = '';\n      document.getElementById('note-tags').value = '';\n      document.getElementById('note-author').value = 'User';\n    }\n\n    this.updateCharCounter('note-title', 'note-title-count', 100);\n    this.updateCharCounter('note-content', 'note-content-count', 5000);\n\n    console.log('[NoteUI] Showing note edit modal');\n    modal.style.display = 'flex';\n    \n    const titleInput = document.getElementById('note-title');\n    if (titleInput) {\n      titleInput.focus();\n    }\n  }\n\n  /**\n   * Close note modal\n   */\n  closeNoteModal() {\n    document.getElementById('note-modal').style.display = 'none';\n    this.currentNote = null;\n    this.isEditMode = false;\n  }\n\n  /**\n   * Close note list modal\n   */\n  closeNoteListModal() {\n    document.getElementById('note-list-modal').style.display = 'none';\n  }\n\n  /**\n   * Get later-dated images for backward propagation\n   */\n  async getLaterDatedImages(plantId, currentImageId) {\n    try {\n      console.log(`[NoteUI] Finding later-dated images for ${plantId}, current: ${currentImageId}`);\n      \n      // Get all images for the current plant and view angle\n      const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n      if (!plantDataManager) {\n        throw new Error('PlantDataManager not available');\n      }\n      \n      // Get current plant information\n      const currentPlant = plantDataManager.plants?.get(plantId);\n      if (!currentPlant || !currentPlant.selectedViewAngle) {\n        throw new Error('Current plant or view angle not found');\n      }\n      \n      // Get all images for the current view angle\n      const images = await plantDataManager.getPlantImages(plantId, currentPlant.selectedViewAngle);\n      if (!images || images.length === 0) {\n        return [];\n      }\n      \n      // Find the current image index\n      const currentImageIndex = images.findIndex(img => img.id === currentImageId);\n      if (currentImageIndex === -1) {\n        throw new Error('Current image not found in plant images');\n      }\n      \n      // Get all images after the current one (later in time)\n      const laterImages = images.slice(currentImageIndex + 1);\n      \n      console.log(`[NoteUI] Found ${laterImages.length} later-dated images for backward propagation`);\n      return laterImages;\n      \n    } catch (error) {\n      console.error('[NoteUI] Error finding later-dated images:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Apply note to multiple images (backward propagation)\n   */\n  async applyNoteToMultipleImages(plantId, noteData, targetImages) {\n    const results = {\n      success: [],\n      failed: []\n    };\n    \n    console.log(`[NoteUI] Applying note to ${targetImages.length} images via backward propagation`);\n    \n    for (const image of targetImages) {\n      try {\n        await this.noteManager.addImageNote(plantId, image.id, noteData);\n        results.success.push(image.id);\n        console.log(`[NoteUI] Note successfully applied to ${image.id}`);\n      } catch (error) {\n        console.error(`[NoteUI] Failed to apply note to ${image.id}:`, error);\n        results.failed.push({ imageId: image.id, error: error.message });\n      }\n    }\n    \n    console.log(`[NoteUI] Backward propagation completed: ${results.success.length} success, ${results.failed.length} failed`);\n    return results;\n  }\n\n  /**\n   * Save note\n   */\n  async saveNote() {\n    const title = document.getElementById('note-title').value.trim();\n    const content = document.getElementById('note-content').value.trim();\n    const noteType = document.getElementById('note-type').value;\n    const tags = document.getElementById('note-tags').value.split(',').map(tag => tag.trim()).filter(tag => tag);\n    const author = document.getElementById('note-author').value.trim();\n    \n    // 🔧 NEW: Check backward propagation setting\n    const backwardPropagationCheckbox = document.getElementById('note-backward-propagation');\n    const enableBackwardPropagation = backwardPropagationCheckbox && backwardPropagationCheckbox.checked;\n\n    const noteData = {\n      title,\n      content,\n      noteType,\n      tags,\n      author\n    };\n\n    const validation = this.noteManager.validateNoteData(noteData);\n    if (!validation.isValid) {\n      alert('Input error:\\\\n' + validation.errors.join('\\\\n'));\n      return;\n    }\n\n    try {\n      if (this.isEditMode && this.currentNote) {\n        console.log(`[NoteUI] Updating note: ${this.currentNote.noteId}`);\n        await this.noteManager.updateNote(this.currentNote.noteId, noteData);\n        console.log('[NoteUI] Note updated successfully');\n      } else {\n        console.log('[NoteUI] Creating new note...');\n        if (this.currentImageId) {\n          console.log(`[NoteUI] Creating image note for ${this.currentPlantId}/${this.currentImageId}`);\n          \n          // Add note to current image\n          await this.noteManager.addImageNote(this.currentPlantId, this.currentImageId, noteData);\n          \n          // 🔧 NEW: Handle backward propagation\n          if (enableBackwardPropagation) {\n            console.log('[NoteUI] Backward propagation enabled, finding later-dated images...');\n            \n            const laterImages = await this.getLaterDatedImages(this.currentPlantId, this.currentImageId);\n            if (laterImages.length > 0) {\n              console.log(`[NoteUI] Applying note to ${laterImages.length} later-dated images`);\n              const propagationResults = await this.applyNoteToMultipleImages(this.currentPlantId, noteData, laterImages);\n              \n              // Show propagation results\n              if (propagationResults.success.length > 0) {\n                console.log(`[NoteUI] Backward propagation successful: ${propagationResults.success.length} images updated`);\n              }\n              if (propagationResults.failed.length > 0) {\n                console.warn(`[NoteUI] Backward propagation partial failure: ${propagationResults.failed.length} images failed`);\n              }\n            } else {\n              console.log('[NoteUI] No later-dated images found for backward propagation');\n            }\n          }\n          \n        } else {\n          console.log(`[NoteUI] Creating plant note for ${this.currentPlantId}`);\n          await this.noteManager.addPlantNote(this.currentPlantId, noteData);\n        }\n        console.log('[NoteUI] Note created successfully');\n      }\n\n      this.closeNoteModal();\n      \n      // 🔧 FIX: Add small delay to ensure backend processing completes\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // 🔧 FIX: Force immediate cache clear to ensure fresh data\n      console.log('[NoteUI] Note saved, forcing complete cache clear for fresh data...');\n      if (this.noteManager.clearCache) {\n        this.noteManager.clearCache();\n        console.log('[NoteUI] Note manager cache completely cleared');\n      }\n      \n      // 🔧 FIX: Force refresh bulk data to ensure real-time accuracy\n      if (this.noteManager.refreshBulkData) {\n        try {\n          await this.noteManager.refreshBulkData();\n          console.log('[NoteUI] Bulk data forcefully refreshed for immediate sync');\n        } catch (refreshError) {\n          console.warn('[NoteUI] Bulk data refresh failed, cache cleared anyway:', refreshError);\n        }\n      }\n      \n      // 🔧 FIX: Always refresh the note list modal regardless of visibility to show new note\n      const listModal = document.getElementById('note-list-modal');\n      if (listModal && listModal.style.display !== 'none') {\n        console.log('[NoteUI] Refreshing note list to show new/updated note');\n        await this.loadNoteList();\n        console.log('[NoteUI] Note list refreshed with fresh data');\n      }\n\n      // 🔧 FIX: 立即刷新植物笔记徽章和图像笔记徽章，以及按钮计数\n      if (this.currentPlantId) {\n        console.log('[NoteUI] 笔记保存完成，立即刷新徽章和按钮...');\n        \n        // 🔧 FIX: Force real-time badge updates with fresh data (bypassing stale cache)\n        console.log('[NoteUI] Forcing immediate badge refresh with fresh data...');\n        \n        // Wait a bit longer for backend sync\n        await new Promise(resolve => setTimeout(resolve, 200));\n        \n        // 立即刷新植物笔记徽章和按钮\n        await this.updatePlantNoteBadge(this.currentPlantId);\n        await this.updatePlantNoteButton(this.currentPlantId);\n        \n        // 如果是图像笔记，使用直接API调用刷新徽章避免缓存冲突\n        if (this.currentImageId) {\n          // ✅ CONSISTENCY: Use direct API call for save operations too\n          await this.directUpdateThumbnailBadge(this.currentPlantId, this.currentImageId);\n          // 🔧 FIX: Also update the image note button count overlay\n          await this.updateImageNoteButton(this.currentPlantId, this.currentImageId);\n          console.log('[NoteUI] ✅ 图像笔记徽章和按钮计数通过直接API刷新完成');\n          \n          // 🔧 NEW: Update badges for all affected images if backward propagation was used\n          if (enableBackwardPropagation) {\n            console.log('[NoteUI] Refreshing badges for all images affected by backward propagation...');\n            const laterImages = await this.getLaterDatedImages(this.currentPlantId, this.currentImageId);\n            for (const image of laterImages) {\n              await this.directUpdateThumbnailBadge(this.currentPlantId, image.id);\n            }\n            console.log(`[NoteUI] Updated badges for ${laterImages.length} propagated images`);\n          }\n        }\n        \n        console.log('[NoteUI] 笔记徽章和按钮刷新完成');\n      }\n\n    } catch (error) {\n      console.error('Save note failed:', error);\n      alert('Save failed: ' + error.message);\n    }\n  }\n\n  /**\n   * Edit note\n   */\n  async editNote(noteId) {\n    try {\n      const note = await this.noteManager.getNote(noteId);\n      if (note) {\n        this.closeNoteListModal();\n        this.showNoteModal(note);\n      }\n    } catch (error) {\n      console.error('Failed to get note:', error);\n      alert('Failed to get note: ' + error.message);\n    }\n  }\n\n  /**\n   * Delete note\n   */\n  async deleteNote(noteId) {\n    if (!confirm('Are you sure you want to delete this note?')) {\n      return;\n    }\n\n    try {\n      console.log(`[NoteUI] Attempting to delete note: ${noteId}`);\n      await this.noteManager.deleteNote(noteId);\n      console.log('[NoteUI] Note deletion successful');\n      \n      // 🔧 FIX: Add small delay to ensure cache clearing completes\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // 🔧 FIX: Force immediate cache clear and refresh for deletion\n      console.log('[NoteUI] Note deleted, forcing complete cache clear and refresh...');\n      \n      // Double-ensure cache is cleared\n      if (this.noteManager.clearCache) {\n        this.noteManager.clearCache();\n        console.log('[NoteUI] Note manager cache cleared after deletion');\n      }\n      \n      // 🔧 FIX: Force refresh bulk data to ensure deletion is reflected immediately\n      if (this.noteManager.refreshBulkData) {\n        try {\n          await this.noteManager.refreshBulkData();\n          console.log('[NoteUI] Bulk data forcefully refreshed after deletion');\n        } catch (refreshError) {\n          console.warn('[NoteUI] Bulk data refresh failed after deletion, cache cleared anyway:', refreshError);\n        }\n      }\n      \n      // Immediately refresh note list in modal with fresh data\n      await this.loadNoteList();\n      console.log('[NoteUI] Note list refreshed after deletion');\n      \n      // 🔧 FIX: Streamlined badge refresh after deletion - direct API only\n      if (this.currentPlantId) {\n        console.log('[NoteUI] Refreshing badges after note deletion using direct API calls...');\n        \n        // Force refresh plant note badge and button with bypassed cache\n        await this.updatePlantNoteBadge(this.currentPlantId);\n        await this.updatePlantNoteButton(this.currentPlantId);\n        \n        // If there's a current image, use ONLY direct API call to avoid cache conflicts\n        if (this.currentImageId) {\n          // ✅ SOLUTION: Skip cache-dependent methods, use direct API call exclusively\n          await this.directUpdateThumbnailBadge(this.currentPlantId, this.currentImageId);\n          // 🔧 FIX: Also update the image note button count overlay\n          await this.updateImageNoteButton(this.currentPlantId, this.currentImageId);\n          console.log('[NoteUI] ✅ Image note badge and button updated via direct API after deletion');\n        }\n        \n        console.log('[NoteUI] All badges refreshed after deletion');\n      }\n    } catch (error) {\n      console.error('Delete note failed:', error);\n      \n      // 🔧 FIX: Improved error handling for different error types\n      let errorMessage = 'Delete failed: ';\n      if (error.message.includes('404') || error.message.includes('不存在')) {\n        errorMessage += 'Note was already deleted or does not exist.';\n        // Still refresh the modal to show current state\n        console.log('[NoteUI] Note already deleted, refreshing modal to show current state...');\n        if (this.noteManager.clearCache) {\n          this.noteManager.clearCache();\n        }\n        await this.loadNoteList();\n        if (this.currentPlantId) {\n          await this.updatePlantNoteBadge(this.currentPlantId);\n          // 🔧 FIX: Also use direct API for error recovery to maintain consistency\n          if (this.currentImageId) {\n            await this.directUpdateThumbnailBadge(this.currentPlantId, this.currentImageId);\n            // 🔧 FIX: Also update the image note button count overlay in error recovery\n            await this.updateImageNoteButton(this.currentPlantId, this.currentImageId);\n          }\n        }\n      } else {\n        errorMessage += error.message;\n      }\n      \n      alert(errorMessage);\n    }\n  }\n\n  /**\n   * Search notes with proper scope based on current modal context\n   */\n  async searchNotes() {\n    const query = document.getElementById('note-search').value.trim();\n    const typeFilter = document.getElementById('note-type-filter').value;\n    \n    try {\n      let notes;\n      \n      if (this.currentImageId) {\n        // 🔧 FIX: In Image Notes modal - search only image notes for this specific image\n        console.log(`[NoteUI] Searching image notes for ${this.currentImageId} with query:`, query);\n        const allImageNotes = await this.noteManager.getImageNotes(this.currentPlantId, this.currentImageId);\n        \n        // Filter by query and type if provided\n        notes = allImageNotes.filter(note => {\n          const matchesQuery = !query || \n            note.title.toLowerCase().includes(query.toLowerCase()) ||\n            note.content.toLowerCase().includes(query.toLowerCase()) ||\n            note.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()));\n          \n          const matchesType = !typeFilter || note.noteType === typeFilter;\n          \n          return matchesQuery && matchesType;\n        });\n        \n        console.log(`[NoteUI] Image note search completed: found ${notes.length} notes`);\n        \n      } else {\n        // 🔧 FIX: In Plant Notes modal - search ONLY plant-level notes for consistency\n        console.log(`[NoteUI] Searching plant-level notes only for ${this.currentPlantId} with query:`, query);\n        const allPlantNotes = await this.noteManager.getPlantNotes(this.currentPlantId);\n        \n        // Filter by query and type if provided  \n        notes = allPlantNotes.filter(note => {\n          const matchesQuery = !query || \n            note.title.toLowerCase().includes(query.toLowerCase()) ||\n            note.content.toLowerCase().includes(query.toLowerCase()) ||\n            note.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()));\n          \n          const matchesType = !typeFilter || note.noteType === typeFilter;\n          \n          return matchesQuery && matchesType;\n        });\n        \n        console.log(`[NoteUI] Plant note search completed: found ${notes.length} plant-level notes (image notes excluded for consistency)`);\n      }\n      \n      this.renderNoteList(notes);\n      \n    } catch (error) {\n      console.error('Search notes failed:', error);\n      \n      let errorMessage = 'Search failed: ';\n      if (error.message.includes('404')) {\n        errorMessage += 'Notes not found or backend server unavailable.';\n      } else if (error.message.includes('500')) {\n        errorMessage += 'Server error occurred during search. Please try again.';\n      } else {\n        errorMessage += error.message;\n      }\n      \n      document.getElementById('note-list-content').innerHTML = `<div class=\"error-message\">${errorMessage}</div>`;\n    }\n  }\n\n  /**\n   * Update character counter\n   */\n  updateCharCounter(inputId, counterId, maxLength) {\n    const input = document.getElementById(inputId);\n    const counter = document.getElementById(counterId);\n    const currentLength = input.value.length;\n    \n    counter.textContent = currentLength;\n    \n    if (currentLength > maxLength * 0.9) {\n      counter.style.color = '#ff6b6b';\n    } else if (currentLength > maxLength * 0.8) {\n      counter.style.color = '#feca57';\n    } else {\n      counter.style.color = '#666';\n    }\n  }\n\n  /**\n   * Set current plant ID\n   */\n  setCurrentPlant(plantId) {\n    this.currentPlantId = plantId;\n    \n    // Show plant notes button and container\n    const plantNoteBtn = document.getElementById('plant-note-btn');\n    const plantNoteContainer = document.querySelector('.plant-notes-section, .plant-note-container');\n    \n    if (plantNoteBtn) {\n      plantNoteBtn.style.display = plantId ? 'block' : 'none';\n    }\n    \n    if (plantNoteContainer) {\n      plantNoteContainer.style.display = plantId ? 'block' : 'none';\n    }\n    \n    // Update plant note button count and badge\n    if (plantId) {\n      this.updatePlantNoteButton(plantId);\n      this.updatePlantNoteBadge(plantId);\n    } else {\n      this.updatePlantNoteButton(null);\n    }\n  }\n\n  /**\n   * Set current image ID\n   */\n  setCurrentImage(imageId) {\n    console.log(`[NoteUI] Setting current image ID: ${imageId}, current plant ID: ${this.currentPlantId}`);\n    this.currentImageId = imageId;\n    \n    // 🔧 FIX: Always update image note button regardless of state\n    if (imageId && this.currentPlantId) {\n      // Ensure we have the current plant ID as well\n      if (!this.currentPlantId && window.PlantAnnotationTool?.appState?.currentPlant?.id) {\n        this.currentPlantId = window.PlantAnnotationTool.appState.currentPlant.id;\n        console.log(`[NoteUI] Auto-updated plant ID from global state: ${this.currentPlantId}`);\n      }\n      \n      // Update image note button and thumbnail badge\n      this.updateImageNoteButton(this.currentPlantId, imageId);\n      this.refreshThumbnailNoteBadge(this.currentPlantId, imageId);\n    } else {\n      // 🔧 FIX: Clear image note button when no image is selected\n      this.updateImageNoteButton(null, null);\n      console.log('[NoteUI] Image note button cleared - no image selected');\n    }\n    \n    // Show image notes button and container\n    const imageNoteBtn = document.getElementById('image-note-btn');\n    const imageNoteContainer = document.querySelector('.annotation-controls, .image-note-container');\n    \n    console.log(`[NoteUI] Image note button exists: ${!!imageNoteBtn}, container exists: ${!!imageNoteContainer}`);\n    \n    if (imageNoteBtn) {\n      const shouldShow = this.currentPlantId && imageId;\n      console.log(`[NoteUI] Image note button should show: ${shouldShow}`);\n      imageNoteBtn.style.display = shouldShow ? 'block' : 'none';\n    }\n    \n    if (imageNoteContainer && imageNoteContainer.classList.contains('image-note-container')) {\n      const shouldShow = this.currentPlantId && imageId;\n      console.log(`[NoteUI] Image note container should show: ${shouldShow}`);\n      imageNoteContainer.style.display = shouldShow ? 'block' : 'none';\n    }\n  }\n\n  /**\n   * Update plant note button count display (ALL notes for this plant)\n   */\n  async updatePlantNoteButton(plantId) {\n    const plantNoteCountElement = document.getElementById('plant-note-count');\n    if (!plantNoteCountElement) return;\n    \n    if (!plantId) {\n      plantNoteCountElement.textContent = '';\n      return;\n    }\n    \n    try {\n      // 🔧 FIX: Use bulk stats first for performance, then fallback to search API for accuracy\n      let totalCount = 0;\n      \n      // Try bulk stats first (fast)\n      const bulkStats = await this.noteManager.getQuickNoteStats();\n      if (bulkStats && bulkStats[plantId]) {\n        // 🔧 FIX: Plant Notes button should ONLY show plant-level notes, not image notes\n        totalCount = bulkStats[plantId].plantNotes; // Only plant notes, not .total\n        console.log(`[NoteUI] Plant note button using bulk data: ${totalCount} plant-only notes`);\n        \n        // 🔧 FIX: Validate plant-only count with plant API (not search API)\n        if (Math.random() < 0.1) { // 10% spot-check for validation\n          try {\n            const plantNotes = await this.noteManager.getPlantNotes(plantId);\n            const actualCount = plantNotes ? plantNotes.length : 0;\n            if (actualCount !== totalCount) {\n              console.warn(`[NoteUI] Plant button bulk data inconsistency! Bulk: ${totalCount}, Actual: ${actualCount}. Using actual...`);\n              totalCount = actualCount;\n            }\n          } catch (validationError) {\n            console.debug('[NoteUI] Plant button validation failed, continuing with bulk data:', validationError);\n          }\n        }\n      } else {\n        // Fallback to plant API (only plant-level notes, consistent with button purpose)\n        console.log(`[NoteUI] Plant note button fallback to plant API for ${plantId}`);\n        try {\n          const plantNotes = await this.noteManager.getPlantNotes(plantId);\n          totalCount = plantNotes ? plantNotes.length : 0;\n          console.log(`[NoteUI] Plant note button plant API found: ${totalCount} plant-only notes`);\n        } catch (plantError) {\n          console.warn(`[NoteUI] Plant API failed, final fallback to 0:`, plantError);\n          totalCount = 0;\n        }\n      }\n      \n      if (totalCount > 0) {\n        plantNoteCountElement.textContent = `(${totalCount})`;\n        plantNoteCountElement.style.cssText = `\n          color: #059669;\n          font-weight: bold;\n          margin-left: 5px;\n        `;\n      } else {\n        plantNoteCountElement.textContent = '';\n      }\n      \n      console.log(`[NoteUI] Plant note button updated: ${totalCount} total notes (plant + image)`);\n    } catch (error) {\n      console.error('Failed to update plant note button:', error);\n      plantNoteCountElement.textContent = '';\n    }\n  }\n\n  /**\n   * Update image note button count display\n   */\n  async updateImageNoteButton(plantId, imageId) {\n    const imageNoteCountElement = document.getElementById('image-note-count');\n    if (!imageNoteCountElement) return;\n    \n    if (!plantId || !imageId) {\n      imageNoteCountElement.textContent = '';\n      imageNoteCountElement.style.display = 'none';\n      return;\n    }\n    \n    try {\n      const notes = await this.noteManager.getImageNotes(plantId, imageId);\n      const count = notes ? notes.length : 0;\n      \n      if (count > 0) {\n        imageNoteCountElement.textContent = count;\n        imageNoteCountElement.style.cssText = `\n          position: absolute;\n          top: -5px;\n          right: -5px;\n          background: #dc2626;\n          color: white;\n          border-radius: 50%;\n          width: 16px;\n          height: 16px;\n          font-size: 10px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-weight: bold;\n        `;\n      } else {\n        imageNoteCountElement.textContent = '';\n        imageNoteCountElement.style.display = 'none';\n      }\n      \n      console.log(`[NoteUI] Image note button updated: ${count} notes`);\n    } catch (error) {\n      console.error('Failed to update image note button:', error);\n      imageNoteCountElement.textContent = '';\n      imageNoteCountElement.style.display = 'none';\n    }\n  }\n\n  /**\n   * Refresh thumbnail note badge for specific image\n   */\n  async refreshThumbnailNoteBadge(plantId, imageId) {\n    try {\n      // 🔧 FIX: Force cache invalidation for this specific image before refresh\n      const cacheKey = `image_${plantId}_${imageId}`;\n      if (this.noteManager.notes && this.noteManager.notes.has(cacheKey)) {\n        this.noteManager.notes.delete(cacheKey);\n        console.log(`[NoteUI] Force cleared cache for ${cacheKey}`);\n      }\n      \n      // 🔧 FIX: Also clear bulk data to ensure fresh load\n      if (this.noteManager.bulkNoteData) {\n        this.noteManager.bulkNoteData = null;\n        this.noteManager.bulkDataTimestamp = 0;\n        console.log(`[NoteUI] Force cleared bulk cache for thumbnail refresh`);\n      }\n      \n      // Call the global function to refresh thumbnail badge\n      if (typeof loadImageNoteCount === 'function') {\n        await loadImageNoteCount(plantId, imageId);\n        console.log(`[NoteUI] Thumbnail note badge refreshed for ${imageId}`);\n      } else {\n        console.warn('[NoteUI] loadImageNoteCount function not available');\n      }\n    } catch (error) {\n      console.error('Failed to refresh thumbnail note badge:', error);\n    }\n  }\n  async updatePlantNoteBadge(plantId) {\n    if (!plantId) return;\n    \n    console.log(`[NoteUI] updatePlantNoteBadge called for plant: ${plantId}`);\n    \n    try {\n      // Use bulk note stats for better performance\n      const bulkStats = await this.noteManager.getQuickNoteStats();\n      \n      if (bulkStats && bulkStats[plantId]) {\n        const stats = bulkStats[plantId];\n        const totalNotes = stats.total;\n        \n        console.log(`[NoteUI] Plant ${plantId} bulk stats: ${stats.plantNotes} plant + ${stats.imageNotes} image = ${totalNotes} total`);\n        \n        // 🔧 FIX: Occasional validation to detect stale bulk data\n        if (Math.random() < 0.15) { // 15% validation rate for badges\n          try {\n            const validationResults = await this.noteManager.searchNotes('', { plantId: plantId });\n            const actualTotal = validationResults ? validationResults.length : 0;\n            if (actualTotal !== totalNotes) {\n              console.warn(`[NoteUI] Badge bulk data stale! Bulk: ${totalNotes}, Actual: ${actualTotal}. Using accurate data...`);\n              // Force refresh and use accurate data\n              if (this.noteManager.refreshBulkData) {\n                await this.noteManager.refreshBulkData();\n              }\n              // Fall through to individual method below\n            } else {\n              // Bulk data is accurate, proceed with badge update\n              this.updateBadgeWithStats(plantId, stats);\n              return;\n            }\n          } catch (validationError) {\n            console.debug('[NoteUI] Badge validation failed, using bulk data:', validationError);\n            // Continue with bulk data despite validation failure\n            this.updateBadgeWithStats(plantId, stats);\n            return;\n          }\n        } else {\n          // No validation this time, trust bulk data\n          this.updateBadgeWithStats(plantId, stats);\n          return;\n        }\n      }\n      \n      console.log(`[NoteUI] Bulk stats not available for ${plantId}, falling back to individual requests`);\n      \n      // Fallback to individual requests if bulk API is not available\n      const plantNotes = await this.noteManager.getPlantNotes(plantId);\n      console.log(`[NoteUI] Plant ${plantId} has ${plantNotes?.length || 0} plant notes`);\n      \n      let totalImageNotes = 0;\n      \n      // Get plant images using the correct API\n      let plantImages = null;\n      if (window.PlantAnnotationTool?.plantDataManager) {\n        try {\n          plantImages = await window.PlantAnnotationTool.plantDataManager.getPlantImages(plantId);\n        } catch (error) {\n          console.debug(`Could not load plant images for ${plantId}:`, error.message);\n          // Fallback: try to get images by view angles if available\n          const plant = window.PlantAnnotationTool.plantDataManager.plants?.find(p => p.id === plantId);\n          if (plant?.viewAngles) {\n            const imagesByView = {};\n            for (const viewAngle of plant.viewAngles) {\n              try {\n                const images = await window.PlantAnnotationTool.plantDataManager.getPlantImages(plantId, viewAngle);\n                if (images && images.length > 0) {\n                  imagesByView[viewAngle] = images;\n                }\n              } catch (viewError) {\n                console.debug(`Could not load images for ${plantId}/${viewAngle}:`, viewError.message);\n              }\n            }\n            plantImages = imagesByView;\n          }\n        }\n      }\n      \n      // Count notes for all images of this plant\n      if (plantImages) {\n        const imagePromises = [];\n        \n        if (Array.isArray(plantImages)) {\n          // Single view angle array\n          for (const image of plantImages) {\n            imagePromises.push(this.noteManager.getImageNotes(plantId, image.id));\n          }\n        } else {\n          // Multi-view angle object\n          for (const viewAngle in plantImages) {\n            for (const image of plantImages[viewAngle]) {\n              imagePromises.push(this.noteManager.getImageNotes(plantId, image.id));\n            }\n          }\n        }\n        \n        // Get all image notes in parallel with proper error handling\n        const imageNotesResults = await Promise.allSettled(imagePromises);\n        totalImageNotes = imageNotesResults.reduce((total, result) => {\n          if (result.status === 'fulfilled' && result.value && result.value.length > 0) {\n            return total + result.value.length;\n          }\n          return total;\n        }, 0);\n      }\n      \n      const totalNotes = (plantNotes?.length || 0) + totalImageNotes;\n      console.log(`[NoteUI] Plant ${plantId} total notes: ${totalNotes} (${plantNotes?.length || 0} plant + ${totalImageNotes} image)`);\n      \n      const badge = document.getElementById(`note-badge-${plantId}`);\n      console.log(`[NoteUI] Badge element found for ${plantId}:`, !!badge);\n      \n      if (badge) {\n        if (totalNotes > 0) {\n          // 🔧 FIX: 分离显示植株笔记和图片笔记（降级处理）\n          const plantNotesCount = plantNotes?.length || 0;\n          let badgeText = '';\n          let title = '';\n          \n          if (plantNotesCount > 0 && totalImageNotes > 0) {\n            // 两种笔记都有\n            badgeText = `📝 ${plantNotesCount} | 🖼️ ${totalImageNotes}`;\n            title = `${plantNotesCount} plant notes, ${totalImageNotes} image notes`;\n          } else if (plantNotesCount > 0) {\n            // 只有植株笔记\n            badgeText = `📝 ${plantNotesCount}`;\n            title = `${plantNotesCount} plant notes`;\n          } else if (totalImageNotes > 0) {\n            // 只有图片笔记\n            badgeText = `🖼️ ${totalImageNotes}`;\n            title = `${totalImageNotes} image notes`;\n          }\n          \n          badge.innerHTML = `<span class=\"note-count\">${badgeText}</span>`;\n          badge.style.display = 'inline-flex';\n          badge.style.visibility = 'visible';\n          badge.style.opacity = '1';\n          badge.title = title;\n          console.log(`[NoteUI] Badge updated for ${plantId}: ${badgeText} (INDIVIDUAL)`);\n        } else {\n          badge.style.display = 'none';\n          badge.style.visibility = 'hidden';\n          badge.style.opacity = '0';\n          console.log(`[NoteUI] Badge hidden for ${plantId}: no notes found`);\n        }\n      } else {\n        console.error(`[NoteUI] Badge element not found for plant ${plantId}`);\n      }\n    } catch (error) {\n      console.error(`Failed to update note badge for plant ${plantId}:`, error);\n    }\n  }\n\n  /**\n   * Helper method to update badge with provided stats\n   */\n  updateBadgeWithStats(plantId, stats) {\n    const badge = document.getElementById(`note-badge-${plantId}`);\n    console.log(`[NoteUI] Badge element found for ${plantId}:`, !!badge);\n    \n    if (badge) {\n      const totalNotes = stats.total;\n      if (totalNotes > 0) {\n        // 🔧 FIX: 分离显示植株笔记和图片笔记\n        let badgeText = '';\n        let title = '';\n        \n        if (stats.plantNotes > 0 && stats.imageNotes > 0) {\n          // 两种笔记都有\n          badgeText = `📝 ${stats.plantNotes} | 🖼️ ${stats.imageNotes}`;\n          title = `${stats.plantNotes} plant notes, ${stats.imageNotes} image notes`;\n        } else if (stats.plantNotes > 0) {\n          // 只有植株笔记\n          badgeText = `📝 ${stats.plantNotes}`;\n          title = `${stats.plantNotes} plant notes`;\n        } else if (stats.imageNotes > 0) {\n          // 只有图片笔记\n          badgeText = `🖼️ ${stats.imageNotes}`;\n          title = `${stats.imageNotes} image notes`;\n        }\n        \n        badge.innerHTML = `<span class=\"note-count\">${badgeText}</span>`;\n        badge.style.display = 'inline-flex';\n        badge.style.visibility = 'visible';\n        badge.style.opacity = '1';\n        badge.title = title;\n        console.log(`[NoteUI] Badge updated for ${plantId}: ${badgeText} (VALIDATED)`);\n      } else {\n        badge.style.display = 'none';\n        badge.style.visibility = 'hidden';\n        badge.style.opacity = '0';\n        console.log(`[NoteUI] Badge hidden for ${plantId}: no notes found (VALIDATED)`);\n      }\n    } else {\n      console.error(`[NoteUI] Badge element not found for plant ${plantId}`);\n    }\n  }\n\n  /**\n   * Update all plant note badges using bulk data (INSTANT - no individual requests)\n   */\n  async updateAllPlantNoteBadgesFromBulk(bulkData) {\n    console.log('[NoteUI] updateAllPlantNoteBadgesFromBulk() called with bulk data');\n    const plantItems = document.querySelectorAll('.plant-item');\n    console.log(`[NoteUI] Found ${plantItems.length} plant items to update`);\n    \n    if (!bulkData || !bulkData.plantNotes || !bulkData.imageNotes) {\n      console.error('[NoteUI] Invalid bulk data provided');\n      return;\n    }\n    \n    const startTime = performance.now();\n    \n    // Create quick stats lookup from bulk data\n    const quickStats = {};\n    \n    // Process plant notes\n    for (const [plantId, notes] of Object.entries(bulkData.plantNotes)) {\n      if (!quickStats[plantId]) {\n        quickStats[plantId] = { plantNotes: 0, imageNotes: 0, total: 0 };\n      }\n      quickStats[plantId].plantNotes = notes.length;\n      quickStats[plantId].total += notes.length;\n    }\n    \n    // Process image notes (group by plant)\n    for (const [imageId, notes] of Object.entries(bulkData.imageNotes)) {\n      // Extract plant ID from image ID (format: BR017-028111_sv-000_...)\n      const plantId = imageId.split('_')[0];\n      if (plantId) {\n        if (!quickStats[plantId]) {\n          quickStats[plantId] = { plantNotes: 0, imageNotes: 0, total: 0 };\n        }\n        quickStats[plantId].imageNotes += notes.length;\n        quickStats[plantId].total += notes.length;\n      }\n    }\n    \n    console.log(`[NoteUI] Generated quick stats for ${Object.keys(quickStats).length} plants`);\n    \n    // Update all badges instantly using pre-calculated stats\n    for (const item of plantItems) {\n      const plantId = item.dataset.plantId;\n      if (plantId && quickStats[plantId]) {\n        const stats = quickStats[plantId];\n        const totalNotes = stats.total;\n        \n        const badge = document.getElementById(`note-badge-${plantId}`);\n        if (badge) {\n          if (totalNotes > 0) {\n            // 🔧 FIX: Use consistent separated display format for instant bulk updates\n            let badgeText = '';\n            let title = '';\n            \n            if (stats.plantNotes > 0 && stats.imageNotes > 0) {\n              // 两种笔记都有\n              badgeText = `📝 ${stats.plantNotes} | 🖼️ ${stats.imageNotes}`;\n              title = `${stats.plantNotes} plant notes, ${stats.imageNotes} image notes`;\n            } else if (stats.plantNotes > 0) {\n              // 只有植株笔记\n              badgeText = `📝 ${stats.plantNotes}`;\n              title = `${stats.plantNotes} plant notes`;\n            } else if (stats.imageNotes > 0) {\n              // 只有图片笔记\n              badgeText = `🖼️ ${stats.imageNotes}`;\n              title = `${stats.imageNotes} image notes`;\n            }\n            \n            badge.innerHTML = `<span class=\"note-count\">${badgeText}</span>`;\n            badge.style.display = 'inline-flex';\n            badge.style.visibility = 'visible';\n            badge.style.opacity = '1';\n            badge.title = title;\n          } else {\n            badge.style.display = 'none';\n            badge.style.visibility = 'hidden';\n            badge.style.opacity = '0';\n          }\n        }\n      }\n    }\n    \n    const endTime = performance.now();\n    console.log(`[NoteUI] BULK UPDATE COMPLETE: ${plantItems.length} badges updated in ${(endTime - startTime).toFixed(2)}ms using bulk data`);\n    console.log(`[NoteUI] Performance: INSTANT UPDATE - no individual HTTP requests`);\n  }\n\n  /**\n   * Update all plant note badges (OPTIMIZED with bulk API)\n   */\n  async updateAllPlantNoteBadges() {\n    console.log('[NoteUI] updateAllPlantNoteBadges() called');\n    const plantItems = document.querySelectorAll('.plant-item');\n    console.log(`[NoteUI] Found ${plantItems.length} plant items to update`);\n    \n    const startTime = performance.now();\n    \n    try {\n      // Try bulk API first for maximum performance\n      const bulkStats = await this.noteManager.getQuickNoteStats();\n      \n      if (bulkStats) {\n        console.log('[NoteUI] Using bulk note stats for optimal performance');\n        \n        // Update all badges using bulk data in a single pass\n        for (const item of plantItems) {\n          const plantId = item.dataset.plantId;\n          if (plantId && bulkStats[plantId]) {\n            const stats = bulkStats[plantId];\n            const totalNotes = stats.total;\n            \n            const badge = document.getElementById(`note-badge-${plantId}`);\n            if (badge) {\n              if (totalNotes > 0) {\n                // 🔧 FIX: Use consistent separated display format like updatePlantNoteBadge()\n                let badgeText = '';\n                let title = '';\n                \n                if (stats.plantNotes > 0 && stats.imageNotes > 0) {\n                  // 两种笔记都有\n                  badgeText = `📝 ${stats.plantNotes} | 🖼️ ${stats.imageNotes}`;\n                  title = `${stats.plantNotes} plant notes, ${stats.imageNotes} image notes`;\n                } else if (stats.plantNotes > 0) {\n                  // 只有植株笔记\n                  badgeText = `📝 ${stats.plantNotes}`;\n                  title = `${stats.plantNotes} plant notes`;\n                } else if (stats.imageNotes > 0) {\n                  // 只有图片笔记\n                  badgeText = `🖼️ ${stats.imageNotes}`;\n                  title = `${stats.imageNotes} image notes`;\n                }\n                \n                badge.innerHTML = `<span class=\"note-count\">${badgeText}</span>`;\n                badge.style.display = 'inline-flex';\n                badge.style.visibility = 'visible';\n                badge.style.opacity = '1';\n                badge.title = title;\n              } else {\n                badge.style.display = 'none';\n                badge.style.visibility = 'hidden';\n                badge.style.opacity = '0';\n              }\n            }\n          }\n        }\n        \n        const endTime = performance.now();\n        const metrics = this.noteManager.getPerformanceMetrics();\n        console.log(`[NoteUI] BULK UPDATE COMPLETE: ${plantItems.length} badges updated in ${(endTime - startTime).toFixed(2)}ms`);\n        console.log(`[NoteUI] Performance: ${metrics.bulkRequestCount} bulk requests, ${metrics.cacheHits} cache hits`);\n        \n        return; // Exit early with optimal performance\n      }\n      \n      console.log('[NoteUI] Bulk API not available, falling back to individual requests');\n    } catch (error) {\n      console.error('[NoteUI] Bulk badge update failed, falling back to individual requests:', error);\n    }\n    \n    // Fallback to individual updates if bulk API fails\n    console.log('[NoteUI] Using individual badge updates (slower)');\n    for (const item of plantItems) {\n      const plantId = item.dataset.plantId;\n      if (plantId) {\n        console.log(`[NoteUI] Updating badge for plant: ${plantId}`);\n        await this.updatePlantNoteBadge(plantId);\n      } else {\n        console.warn('[NoteUI] Plant item found without plantId dataset');\n      }\n    }\n    \n    const endTime = performance.now();\n    const metrics = this.noteManager.getPerformanceMetrics();\n    console.log(`[NoteUI] INDIVIDUAL UPDATE COMPLETE: ${plantItems.length} badges updated in ${(endTime - startTime).toFixed(2)}ms`);\n    console.log(`[NoteUI] Performance: ${metrics.requestCount} individual requests, ${metrics.cacheHits} cache hits`);\n  }\n\n  /**\n   * Get note type text in English\n   */\n  getNoteTypeText(noteType) {\n    const typeMap = {\n      'general': 'General Note',\n      'observation': 'Observation Record',\n      'annotation': 'Annotation Description'\n    };\n    return typeMap[noteType] || noteType;\n  }\n\n  /**\n   * HTML escape\n   */\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  /**\n   * Show user-friendly error message\n   */\n  showUserError(title, message) {\n    // Try to use global error display function\n    if (window.PlantAnnotationTool && window.PlantAnnotationTool.showError) {\n      window.PlantAnnotationTool.showError(title, message);\n    } else {\n      // Fall back to alert\n      alert(`${title}: ${message}`);\n    }\n  }\n\n  /**\n   * Direct thumbnail badge update (bypass all cache issues) - OPTIMIZED\n   */\n  async directUpdateThumbnailBadge(plantId, imageId) {\n    try {\n      console.log(`[NoteUI] 🔄 Direct thumbnail badge update for ${imageId}`);\n      \n      // 🔧 INCREASED DELAY: Allow backend processing to complete fully\n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      // Force fresh data by making direct API call\n      const response = await fetch(`${this.noteManager.baseUrl}/notes/image/${plantId}/${imageId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      const noteCount = result.success ? (result.data?.length || 0) : 0;\n      \n      // Update badge directly\n      const badge = document.getElementById(`image-note-badge-${imageId}`);\n      if (badge) {\n        if (noteCount > 0) {\n          badge.innerHTML = `<span class=\"image-note-count\">📝 ${noteCount}</span>`;\n          badge.style.display = 'inline-block';\n          badge.className = 'image-note-badge';\n          console.log(`[NoteUI] ✅ Badge updated: ${noteCount} notes for ${imageId} (DIRECT API)`);\n        } else {\n          badge.innerHTML = '';\n          badge.style.display = 'none';\n          console.log(`[NoteUI] ✅ Badge cleared for ${imageId} - no notes (DIRECT API)`);\n        }\n      } else {\n        console.error(`[NoteUI] Badge element not found for ${imageId}`);\n      }\n    } catch (error) {\n      console.error(`[NoteUI] ❌ Direct thumbnail badge update failed for ${imageId}:`, error);\n      \n      // 🔧 FALLBACK: Try global function as last resort\n      try {\n        console.log(`[NoteUI] 🔄 Attempting fallback via global loadImageNoteCount for ${imageId}`);\n        if (typeof loadImageNoteCount === 'function') {\n          await loadImageNoteCount(plantId, imageId);\n          console.log(`[NoteUI] ✅ Fallback badge update successful for ${imageId}`);\n        } else {\n          console.warn(`[NoteUI] ⚠️ Global loadImageNoteCount not available for fallback`);\n        }\n      } catch (fallbackError) {\n        console.error(`[NoteUI] ❌ Fallback badge update also failed for ${imageId}:`, fallbackError);\n      }\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  cleanup() {\n    // Remove event listeners and DOM elements\n    const elementsToRemove = [\n      'note-modal',\n      'note-list-modal',\n      'plant-note-btn',\n      'image-note-btn'\n      // 🔧 REMOVED: Note display elements no longer exist\n    ];\n\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element) {\n        element.remove();\n      }\n    });\n\n    // Remove created containers\n    const containers = document.querySelectorAll('.plant-note-container, .image-note-container');\n    containers.forEach(container => container.remove());\n\n    console.log('NoteUI cleanup completed');\n  }\n}","/**\n * 标注管理器 - 批量加载优化版本\n * \n * 功能：\n * - 批量获取所有植物和图像的标注数据\n * - 智能缓存和性能优化\n * - 与现有系统集成\n * - 避免单独的网络请求\n */\n\nexport class AnnotationManager {\n  constructor(httpFileSystemManager) {\n    this.httpManager = httpFileSystemManager;\n    this.annotations = new Map(); // 标注缓存\n    this.cacheTimestamps = new Map(); // 缓存时间戳\n    this.isInitialized = false;\n    this.cacheExpiration = 10 * 60 * 1000; // 10分钟缓存过期\n    \n    // 批量数据缓存\n    this.bulkAnnotationData = null;\n    this.bulkDataTimestamp = 0;\n    \n    // 性能指标\n    this.performanceMetrics = {\n      requestCount: 0,\n      bulkRequestCount: 0,\n      cacheHits: 0,\n      networkTime: 0,\n      totalAnnotations: 0\n    };\n  }\n\n  /**\n   * 初始化标注管理器\n   */\n  async initialize() {\n    try {\n      await this.httpManager.ensureConnection();\n      this.isInitialized = true;\n      console.log('[AnnotationManager] 初始化成功');\n      return true;\n    } catch (error) {\n      console.error('[AnnotationManager] 初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 确保连接可用\n   */\n  async ensureConnection() {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    await this.httpManager.ensureConnection();\n  }\n\n  /**\n   * 批量获取所有标注数据 (核心性能优化方法)\n   */\n  async getAllAnnotationsInBulk() {\n    console.log('[AnnotationManager] 开始批量获取所有标注数据...');\n    \n    await this.ensureConnection();\n    \n    // 检查批量数据缓存\n    if (this.bulkAnnotationData && !this.isBulkDataExpired()) {\n      console.log('[AnnotationManager] 使用缓存的批量标注数据');\n      this.performanceMetrics.cacheHits++;\n      return this.bulkAnnotationData;\n    }\n\n    return this.httpManager.withRetry(async () => {\n      const startTime = performance.now();\n      // 🔧 FIX: Correct URL construction to avoid double /api/\n      const baseUrl = this.httpManager.baseUrl.replace(/\\/api$/, ''); // Remove trailing /api if present\n      const url = `${baseUrl}/api/annotations/bulk`;\n      console.log(`[AnnotationManager] 请求批量标注数据 URL: ${url}`);\n      \n      try {\n        const response = await fetch(url, {\n          headers: {\n            'Cache-Control': 'no-cache'\n          }\n        });\n        this.performanceMetrics.bulkRequestCount++;\n\n        if (!response.ok) {\n          if (response.status === 404) {\n            console.warn('[AnnotationManager] 批量标注端点不存在，将回退到传统模式');\n            return null; // 表示不支持批量API\n          }\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n\n        if (result.success) {\n          // 缓存批量数据\n          this.bulkAnnotationData = {\n            plantAnnotations: result.data.plantAnnotations || {},\n            imageAnnotations: result.data.imageAnnotations || {},\n            statistics: result.data.statistics || {}\n          };\n          this.bulkDataTimestamp = Date.now();\n          \n          // 更新个别缓存以保持一致性\n          this.updateIndividualCacheFromBulk();\n          \n          // 统计数据\n          const plantCount = Object.keys(this.bulkAnnotationData.plantAnnotations).length;\n          const imageCount = Object.keys(this.bulkAnnotationData.imageAnnotations).length;\n          this.performanceMetrics.totalAnnotations = this.calculateTotalAnnotations();\n          \n          console.log(`[AnnotationManager] 成功获取批量标注数据: ${plantCount} 个植物, ${imageCount} 个图像, ${this.performanceMetrics.totalAnnotations} 个标注点`);\n          \n          return this.bulkAnnotationData;\n        }\n\n        throw new Error(result.error || '获取批量标注数据失败');\n      } catch (fetchError) {\n        this.performanceMetrics.networkTime += performance.now() - startTime;\n        \n        if (fetchError.name === 'TypeError' && fetchError.message.includes('fetch')) {\n          throw new Error(`网络连接失败: 无法连接到后端服务 (${url})`);\n        }\n        throw fetchError;\n      }\n    }, '批量获取标注数据');\n  }\n\n  /**\n   * 获取植物标注数据 (优化版本，优先使用批量数据)\n   */\n  async getPlantAnnotations(plantId) {\n    if (!plantId) {\n      throw new Error('植物ID不能为空');\n    }\n\n    await this.ensureConnection();\n    \n    const cacheKey = `plant_${plantId}`;\n    \n    // 首先检查是否有批量数据缓存\n    if (this.bulkAnnotationData && !this.isBulkDataExpired()) {\n      const plantAnnotations = this.bulkAnnotationData.plantAnnotations[plantId] || [];\n      this.annotations.set(cacheKey, plantAnnotations);\n      this.performanceMetrics.cacheHits++;\n      return plantAnnotations;\n    }\n    \n    // 检查独立缓存\n    if (this.annotations.has(cacheKey) && !this.isCacheExpired(cacheKey)) {\n      this.performanceMetrics.cacheHits++;\n      return this.annotations.get(cacheKey);\n    }\n\n    // 回退到单独请求\n    return this.getSinglePlantAnnotations(plantId);\n  }\n\n  /**\n   * 获取图像标注数据 (优化版本，优先使用批量数据)\n   */\n  async getImageAnnotations(imageId) {\n    if (!imageId) {\n      throw new Error('图像ID不能为空');\n    }\n\n    await this.ensureConnection();\n    \n    const cacheKey = `image_${imageId}`;\n    \n    // 首先检查是否有批量数据缓存\n    if (this.bulkAnnotationData && !this.isBulkDataExpired()) {\n      const imageAnnotations = this.bulkAnnotationData.imageAnnotations[imageId] || [];\n      this.annotations.set(cacheKey, imageAnnotations);\n      this.performanceMetrics.cacheHits++;\n      return imageAnnotations;\n    }\n    \n    // 检查独立缓存\n    if (this.annotations.has(cacheKey) && !this.isCacheExpired(cacheKey)) {\n      this.performanceMetrics.cacheHits++;\n      return this.annotations.get(cacheKey);\n    }\n\n    // 回退到单独请求\n    return this.getSingleImageAnnotations(imageId);\n  }\n\n  /**\n   * 获取快速标注统计（用于Badge更新）\n   */\n  async getQuickAnnotationStats() {\n    console.log('[AnnotationManager] 获取快速标注统计...');\n    \n    try {\n      const bulkData = await this.getAllAnnotationsInBulk();\n      \n      if (!bulkData) {\n        console.warn('[AnnotationManager] 批量API不可用，回退到传统模式');\n        return null;\n      }\n      \n      const stats = {};\n      \n      // 计算每个植物的标注统计\n      for (const [plantId, plantAnnotations] of Object.entries(bulkData.plantAnnotations)) {\n        let imageAnnotationCount = 0;\n        \n        // 统计该植物所有图像的标注数\n        for (const [imageId, imageAnnotations] of Object.entries(bulkData.imageAnnotations)) {\n          if (imageId.startsWith(plantId + '_')) {\n            imageAnnotationCount += imageAnnotations.length;\n          }\n        }\n        \n        stats[plantId] = {\n          plantAnnotations: plantAnnotations.length,\n          imageAnnotations: imageAnnotationCount,\n          total: plantAnnotations.length + imageAnnotationCount\n        };\n      }\n      \n      console.log(`[AnnotationManager] 快速统计完成: ${Object.keys(stats).length} 个植物`);\n      return stats;\n    } catch (error) {\n      console.error('[AnnotationManager] 获取快速标注统计失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 单独获取植物标注（回退方案）\n   */\n  async getSinglePlantAnnotations(plantId) {\n    const startTime = performance.now();\n    \n    try {\n      // 🔧 FIX: Consistent URL construction to avoid double /api/\n      const baseUrl = this.httpManager.baseUrl.replace(/\\/api$/, '');\n      const url = `${baseUrl}/api/plant-annotations/${encodeURIComponent(plantId)}`;\n      \n      const response = await fetch(url);\n      this.performanceMetrics.requestCount++;\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          const emptyResult = [];\n          this.setCache(`plant_${plantId}`, emptyResult);\n          return emptyResult;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      this.performanceMetrics.networkTime += performance.now() - startTime;\n\n      if (result.success) {\n        this.setCache(`plant_${plantId}`, result.data);\n        return result.data;\n      }\n\n      throw new Error(result.error || '获取植物标注失败');\n    } catch (fetchError) {\n      this.performanceMetrics.networkTime += performance.now() - startTime;\n      throw fetchError;\n    }\n  }\n\n  /**\n   * 单独获取图像标注（回退方案）\n   */\n  async getSingleImageAnnotations(imageId) {\n    const startTime = performance.now();\n    \n    try {\n      // 🔧 FIX: Consistent URL construction to avoid double /api/\n      const baseUrl = this.httpManager.baseUrl.replace(/\\/api$/, '');\n      const url = `${baseUrl}/api/image-annotations/${encodeURIComponent(imageId)}`;\n      \n      const response = await fetch(url);\n      this.performanceMetrics.requestCount++;\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          const emptyResult = [];\n          this.setCache(`image_${imageId}`, emptyResult);\n          return emptyResult;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      this.performanceMetrics.networkTime += performance.now() - startTime;\n\n      if (result.success) {\n        this.setCache(`image_${imageId}`, result.data);\n        return result.data;\n      }\n\n      throw new Error(result.error || '获取图像标注失败');\n    } catch (fetchError) {\n      this.performanceMetrics.networkTime += performance.now() - startTime;\n      throw fetchError;\n    }\n  }\n\n  /**\n   * 检查批量数据是否过期\n   */\n  isBulkDataExpired() {\n    if (!this.bulkDataTimestamp) return true;\n    return Date.now() - this.bulkDataTimestamp > this.cacheExpiration;\n  }\n\n  /**\n   * 从批量数据更新个别缓存\n   */\n  updateIndividualCacheFromBulk() {\n    if (!this.bulkAnnotationData) return;\n    \n    // 更新植物标注缓存\n    for (const [plantId, annotations] of Object.entries(this.bulkAnnotationData.plantAnnotations)) {\n      const cacheKey = `plant_${plantId}`;\n      this.setCache(cacheKey, annotations);\n    }\n    \n    // 更新图像标注缓存\n    for (const [imageId, annotations] of Object.entries(this.bulkAnnotationData.imageAnnotations)) {\n      const cacheKey = `image_${imageId}`;\n      this.setCache(cacheKey, annotations);\n    }\n  }\n\n  /**\n   * 计算总标注数量\n   */\n  calculateTotalAnnotations() {\n    if (!this.bulkAnnotationData) return 0;\n    \n    let total = 0;\n    \n    // 植物标注\n    for (const annotations of Object.values(this.bulkAnnotationData.plantAnnotations)) {\n      total += annotations.length;\n    }\n    \n    // 图像标注\n    for (const annotations of Object.values(this.bulkAnnotationData.imageAnnotations)) {\n      total += annotations.length;\n    }\n    \n    return total;\n  }\n\n  /**\n   * 清除缓存\n   */\n  clearCache() {\n    this.annotations.clear();\n    this.cacheTimestamps.clear();\n    this.bulkAnnotationData = null;\n    this.bulkDataTimestamp = 0;\n    console.log('[AnnotationManager] 标注缓存已完全清除');\n  }\n\n  /**\n   * 设置缓存\n   */\n  setCache(key, data) {\n    this.annotations.set(key, data);\n    this.cacheTimestamps.set(key, Date.now());\n  }\n\n  /**\n   * 检查缓存是否过期\n   */\n  isCacheExpired(key) {\n    const timestamp = this.cacheTimestamps.get(key);\n    if (!timestamp) return true;\n    return Date.now() - timestamp > this.cacheExpiration;\n  }\n\n  /**\n   * 获取性能指标\n   */\n  getPerformanceMetrics() {\n    return {\n      ...this.performanceMetrics,\n      cacheSize: this.annotations.size,\n      hasBulkData: !!this.bulkAnnotationData,\n      bulkDataAge: this.bulkDataTimestamp ? Date.now() - this.bulkDataTimestamp : null,\n      averageRequestTime: this.performanceMetrics.requestCount > 0 \n        ? this.performanceMetrics.networkTime / this.performanceMetrics.requestCount \n        : 0\n    };\n  }\n\n  /**\n   * 强制刷新批量数据\n   */\n  async refreshBulkData() {\n    console.log('[AnnotationManager] 强制刷新批量标注数据...');\n    this.bulkAnnotationData = null;\n    this.bulkDataTimestamp = 0;\n    return await this.getAllAnnotationsInBulk();\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    this.clearCache();\n    this.isInitialized = false;\n    console.log('[AnnotationManager] 清理完成');\n  }\n}","/**\n * Bulk Loading Performance Monitor\n * \n * 功能：\n * - 监控批量加载性能\n * - 跟踪缓存效果\n * - 性能指标收集和报告\n * - 自动优化建议\n */\n\nexport class BulkLoadingPerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      // 加载性能\n      loadingStartTime: null,\n      loadingEndTime: null,\n      totalLoadingTime: 0,\n      \n      // 数据统计\n      plantsLoaded: 0,\n      annotationsLoaded: 0,\n      notesLoaded: 0,\n      \n      // 网络性能\n      networkRequests: 0,\n      bulkRequests: 0,\n      individualRequests: 0,\n      totalDataTransferred: 0,\n      \n      // 缓存性能\n      cacheHits: 0,\n      cacheMisses: 0,\n      cacheSize: 0,\n      \n      // 错误统计\n      errors: [],\n      fallbacksUsed: 0,\n      \n      // 用户体验\n      timeToFirstInteraction: 0,\n      timeToFullyLoaded: 0\n    };\n    \n    this.isMonitoring = false;\n    this.startTime = null;\n    this.checkpoints = [];\n  }\n\n  /**\n   * 开始监控加载过程\n   */\n  startMonitoring() {\n    this.isMonitoring = true;\n    this.startTime = performance.now();\n    this.metrics.loadingStartTime = Date.now();\n    this.checkpoints = [];\n    \n    console.log('[性能监控] 开始监控批量加载过程');\n  }\n\n  /**\n   * 添加检查点\n   */\n  addCheckpoint(name, details = {}) {\n    if (!this.isMonitoring) return;\n    \n    const checkpoint = {\n      name,\n      timestamp: performance.now(),\n      relativeTime: performance.now() - this.startTime,\n      details\n    };\n    \n    this.checkpoints.push(checkpoint);\n    console.log(`[性能监控] ${name}: ${checkpoint.relativeTime.toFixed(2)}ms`, details);\n  }\n\n  /**\n   * 记录数据加载完成\n   */\n  recordDataLoaded(type, count, dataSize = 0) {\n    switch (type) {\n      case 'plants':\n        this.metrics.plantsLoaded = count;\n        break;\n      case 'annotations':\n        this.metrics.annotationsLoaded = count;\n        break;\n      case 'notes':\n        this.metrics.notesLoaded = count;\n        break;\n    }\n    \n    this.metrics.totalDataTransferred += dataSize;\n    this.addCheckpoint(`${type} 数据加载完成`, { count, dataSize: `${(dataSize / 1024).toFixed(2)}KB` });\n  }\n\n  /**\n   * 记录网络请求\n   */\n  recordNetworkRequest(type, isBulk = false) {\n    this.metrics.networkRequests++;\n    \n    if (isBulk) {\n      this.metrics.bulkRequests++;\n    } else {\n      this.metrics.individualRequests++;\n    }\n    \n    this.addCheckpoint(`网络请求: ${type}`, { isBulk, total: this.metrics.networkRequests });\n  }\n\n  /**\n   * 记录缓存命中\n   */\n  recordCacheHit(type, cacheSize = 0) {\n    this.metrics.cacheHits++;\n    this.metrics.cacheSize = cacheSize;\n    \n    console.log(`[缓存命中] ${type} - 总命中: ${this.metrics.cacheHits}`);\n  }\n\n  /**\n   * 记录缓存未命中\n   */\n  recordCacheMiss(type) {\n    this.metrics.cacheMisses++;\n    \n    console.log(`[缓存未命中] ${type} - 总未命中: ${this.metrics.cacheMisses}`);\n  }\n\n  /**\n   * 记录错误\n   */\n  recordError(error, context = '') {\n    this.metrics.errors.push({\n      error: error.message,\n      context,\n      timestamp: Date.now()\n    });\n    \n    console.error(`[性能监控] 错误记录: ${context}`, error);\n  }\n\n  /**\n   * 记录回退使用\n   */\n  recordFallback(reason) {\n    this.metrics.fallbacksUsed++;\n    \n    this.addCheckpoint('使用回退方案', { reason, totalFallbacks: this.metrics.fallbacksUsed });\n  }\n\n  /**\n   * 结束监控并生成报告\n   */\n  endMonitoring() {\n    if (!this.isMonitoring) return null;\n    \n    this.isMonitoring = false;\n    this.metrics.loadingEndTime = Date.now();\n    this.metrics.totalLoadingTime = performance.now() - this.startTime;\n    \n    const report = this.generatePerformanceReport();\n    console.log('[性能监控] 加载完成，生成性能报告:', report);\n    \n    return report;\n  }\n\n  /**\n   * 生成性能报告\n   */\n  generatePerformanceReport() {\n    const cacheHitRate = this.metrics.cacheHits + this.metrics.cacheMisses > 0 \n      ? (this.metrics.cacheHits / (this.metrics.cacheHits + this.metrics.cacheMisses) * 100).toFixed(1)\n      : 0;\n\n    const bulkRequestRatio = this.metrics.networkRequests > 0\n      ? (this.metrics.bulkRequests / this.metrics.networkRequests * 100).toFixed(1)\n      : 0;\n\n    const report = {\n      // 总体性能\n      summary: {\n        totalLoadingTime: `${this.metrics.totalLoadingTime.toFixed(2)}ms`,\n        dataLoaded: {\n          plants: this.metrics.plantsLoaded,\n          annotations: this.metrics.annotationsLoaded,\n          notes: this.metrics.notesLoaded\n        },\n        networkRequests: this.metrics.networkRequests,\n        dataTransferred: `${(this.metrics.totalDataTransferred / 1024).toFixed(2)}KB`\n      },\n      \n      // 网络性能\n      networkPerformance: {\n        totalRequests: this.metrics.networkRequests,\n        bulkRequests: this.metrics.bulkRequests,\n        individualRequests: this.metrics.individualRequests,\n        bulkRequestRatio: `${bulkRequestRatio}%`,\n        averageRequestSize: this.metrics.networkRequests > 0 \n          ? `${(this.metrics.totalDataTransferred / this.metrics.networkRequests / 1024).toFixed(2)}KB`\n          : '0KB'\n      },\n      \n      // 缓存性能\n      cachePerformance: {\n        hits: this.metrics.cacheHits,\n        misses: this.metrics.cacheMisses,\n        hitRate: `${cacheHitRate}%`,\n        cacheSize: `${(this.metrics.cacheSize / 1024).toFixed(2)}KB`\n      },\n      \n      // 错误和回退\n      reliability: {\n        errors: this.metrics.errors.length,\n        fallbacksUsed: this.metrics.fallbacksUsed,\n        errorDetails: this.metrics.errors\n      },\n      \n      // 检查点时间线\n      timeline: this.checkpoints,\n      \n      // 性能评级\n      performanceGrade: this.calculatePerformanceGrade(),\n      \n      // 优化建议\n      optimizationSuggestions: this.generateOptimizationSuggestions()\n    };\n\n    return report;\n  }\n\n  /**\n   * 计算性能评级\n   */\n  calculatePerformanceGrade() {\n    let score = 100;\n    \n    // 加载时间评分\n    if (this.metrics.totalLoadingTime > 5000) {\n      score -= 30; // 超过5秒扣30分\n    } else if (this.metrics.totalLoadingTime > 2000) {\n      score -= 15; // 超过2秒扣15分\n    } else if (this.metrics.totalLoadingTime > 1000) {\n      score -= 5; // 超过1秒扣5分\n    }\n    \n    // 网络请求评分\n    const requestEfficiency = this.metrics.bulkRequests / (this.metrics.networkRequests || 1);\n    if (requestEfficiency < 0.5) {\n      score -= 20; // 批量请求比例低于50%扣20分\n    } else if (requestEfficiency < 0.8) {\n      score -= 10; // 批量请求比例低于80%扣10分\n    }\n    \n    // 缓存效率评分\n    const cacheHitRate = this.metrics.cacheHits / ((this.metrics.cacheHits + this.metrics.cacheMisses) || 1);\n    if (cacheHitRate < 0.6) {\n      score -= 15; // 缓存命中率低于60%扣15分\n    } else if (cacheHitRate < 0.8) {\n      score -= 8; // 缓存命中率低于80%扣8分\n    }\n    \n    // 错误和回退评分\n    score -= this.metrics.errors.length * 5; // 每个错误扣5分\n    score -= this.metrics.fallbacksUsed * 3; // 每次回退扣3分\n    \n    // 确保分数在0-100之间\n    score = Math.max(0, Math.min(100, score));\n    \n    if (score >= 90) return 'A+';\n    if (score >= 80) return 'A';\n    if (score >= 70) return 'B';\n    if (score >= 60) return 'C';\n    if (score >= 50) return 'D';\n    return 'F';\n  }\n\n  /**\n   * 生成优化建议\n   */\n  generateOptimizationSuggestions() {\n    const suggestions = [];\n    \n    // 加载时间建议\n    if (this.metrics.totalLoadingTime > 2000) {\n      suggestions.push({\n        category: '加载性能',\n        suggestion: '考虑实现数据分页或增量加载',\n        priority: 'high',\n        impact: '减少初始加载时间50%+'\n      });\n    }\n    \n    // 网络请求建议\n    const bulkRatio = this.metrics.bulkRequests / (this.metrics.networkRequests || 1);\n    if (bulkRatio < 0.8) {\n      suggestions.push({\n        category: '网络优化',\n        suggestion: '增加批量API的使用，减少单独请求',\n        priority: 'high',\n        impact: '减少网络请求80%+'\n      });\n    }\n    \n    // 缓存建议\n    const cacheHitRate = this.metrics.cacheHits / ((this.metrics.cacheHits + this.metrics.cacheMisses) || 1);\n    if (cacheHitRate < 0.7) {\n      suggestions.push({\n        category: '缓存优化',\n        suggestion: '优化缓存策略，增加缓存时间或改进缓存键设计',\n        priority: 'medium',\n        impact: '提高响应速度30%+'\n      });\n    }\n    \n    // 错误处理建议\n    if (this.metrics.errors.length > 0) {\n      suggestions.push({\n        category: '错误处理',\n        suggestion: '改进错误处理和重试机制',\n        priority: 'medium',\n        impact: '提高系统稳定性'\n      });\n    }\n    \n    // 回退建议\n    if (this.metrics.fallbacksUsed > 0) {\n      suggestions.push({\n        category: '兼容性',\n        suggestion: '确保批量API的可用性，减少回退方案的使用',\n        priority: 'low',\n        impact: '提高性能一致性'\n      });\n    }\n    \n    return suggestions;\n  }\n\n  /**\n   * 导出性能数据\n   */\n  exportMetrics() {\n    return {\n      metrics: this.metrics,\n      report: this.generatePerformanceReport(),\n      exportTime: new Date().toISOString()\n    };\n  }\n\n  /**\n   * 重置所有指标\n   */\n  reset() {\n    this.metrics = {\n      loadingStartTime: null,\n      loadingEndTime: null,\n      totalLoadingTime: 0,\n      plantsLoaded: 0,\n      annotationsLoaded: 0,\n      notesLoaded: 0,\n      networkRequests: 0,\n      bulkRequests: 0,\n      individualRequests: 0,\n      totalDataTransferred: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      cacheSize: 0,\n      errors: [],\n      fallbacksUsed: 0,\n      timeToFirstInteraction: 0,\n      timeToFullyLoaded: 0\n    };\n    \n    this.isMonitoring = false;\n    this.startTime = null;\n    this.checkpoints = [];\n    \n    console.log('[性能监控] 指标已重置');\n  }\n}","/**\n * RealTimeSyncManager - Manages real-time synchronization of annotation operations\n * across future images within the same plant and view angle.\n * \n * Features:\n * - Toggle-able real-time synchronization\n * - Sync keypoint operations (add, move, delete) to future images\n * - Compatible with existing save logic\n * - Sequential processing to avoid race conditions\n */\nclass RealTimeSyncManager {\n  constructor(plantDataManager, annotationStorageManager) {\n    this.plantDataManager = plantDataManager;\n    this.annotationStorageManager = annotationStorageManager;\n    \n    // Sync state\n    this.isEnabled = false;\n    this.isSyncing = false;\n    this.syncQueue = [];\n    \n    // Operation types\n    this.OPERATION_TYPES = {\n      ADD_KEYPOINT: 'ADD_KEYPOINT',\n      MOVE_KEYPOINT: 'MOVE_KEYPOINT',\n      DELETE_KEYPOINT: 'DELETE_KEYPOINT',\n      EDIT_DIRECTION: 'EDIT_DIRECTION', // 🔧 NEW: Direction-specific operation\n      CUSTOM_ANNOTATION_CREATE: 'CUSTOM_ANNOTATION_CREATE',\n      CUSTOM_ANNOTATION_UPDATE: 'CUSTOM_ANNOTATION_UPDATE',\n      CUSTOM_ANNOTATION_DELETE: 'CUSTOM_ANNOTATION_DELETE',\n      CUSTOM_TYPE_CREATE: 'CUSTOM_TYPE_CREATE'\n    };\n    \n    // Event listeners for UI feedback\n    this.eventListeners = new Map();\n    \n    console.log('🔄 RealTimeSyncManager initialized');\n  }\n\n  /**\n   * Enable or disable real-time synchronization\n   * @param {boolean} enabled - Whether to enable sync\n   */\n  setEnabled(enabled) {\n    this.isEnabled = Boolean(enabled);\n    console.log(`🔄 Real-time sync ${this.isEnabled ? 'enabled' : 'disabled'}`);\n    \n    // Emit event for UI updates\n    this.emit('syncToggled', { enabled: this.isEnabled });\n  }\n\n  /**\n   * Check if real-time sync is currently enabled\n   * @returns {boolean} True if sync is enabled\n   */\n  isRealTimeSyncEnabled() {\n    return this.isEnabled;\n  }\n\n  /**\n   * Check if sync operation is currently in progress\n   * @returns {boolean} True if syncing\n   */\n  isSyncInProgress() {\n    return this.isSyncing;\n  }\n\n  /**\n   * Add event listener for sync events\n   * @param {string} event - Event name\n   * @param {Function} listener - Event listener function\n   */\n  on(event, listener) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(listener);\n  }\n\n  /**\n   * Remove event listener\n   * @param {string} event - Event name\n   * @param {Function} listener - Event listener function\n   */\n  off(event, listener) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emit event to listeners\n   * @param {string} event - Event name\n   * @param {any} data - Event data\n   */\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error(`Error in sync event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Get future images for the current plant and view angle\n   * @param {object} currentImage - Current image object\n   * @param {object} currentPlant - Current plant object\n   * @returns {Promise<Array>} Array of future images\n   */\n  async getFutureImages(currentImage, currentPlant) {\n    if (!currentImage || !currentPlant) {\n      console.warn('🔄 Cannot get future images: missing current image or plant');\n      return [];\n    }\n\n    try {\n      // Get all images for current plant and view angle\n      const allImages = await this.plantDataManager.getPlantImages(\n        currentPlant.id,\n        currentPlant.selectedViewAngle\n      );\n\n      if (!allImages || allImages.length === 0) {\n        return [];\n      }\n\n      // Get current image date for comparison\n      const currentDate = new Date(currentImage.dateTime);\n      const currentImageIndex = allImages.findIndex(img => img.id === currentImage.id);\n\n      // 🔧 FIX: Context-aware sync logic to prevent wrong annotations\n      // Instead of syncing to all later dates, only sync to images that come \n      // after the current image in sequence AND have later dates\n      \n      const futureImages = [];\n      \n      // Only consider images after current image in the sequence\n      for (let i = currentImageIndex + 1; i < allImages.length; i++) {\n        const image = allImages[i];\n        const imgDate = new Date(image.dateTime);\n        \n        // Only include if it's actually a later date (maintain chronological requirement)\n        if (imgDate > currentDate) {\n          futureImages.push(image);\n        }\n      }\n\n      // Sort by date to ensure chronological order\n      futureImages.sort((a, b) => new Date(a.dateTime) - new Date(b.dateTime));\n\n      console.log(`🔄 Found ${futureImages.length} future images for sync (from index ${currentImageIndex + 1})`);\n      return futureImages;\n\n    } catch (error) {\n      console.error('🔄 Error getting future images:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Sync keypoint addition to future images\n   * @param {object} keypoint - The keypoint that was added\n   * @param {object} currentImage - Current image context\n   * @param {object} currentPlant - Current plant context\n   * @returns {Promise<object>} Sync result\n   */\n  async syncKeypointAddition(keypoint, currentImage, currentPlant) {\n    if (!this.isEnabled) {\n      return { success: true, message: 'Sync disabled', synced: 0 };\n    }\n\n    console.log(`🔄 Starting keypoint addition sync for keypoint ${keypoint.id}`);\n    console.log(`🔄 Current image: ${currentImage.id}, Plant: ${currentPlant.id}, View: ${currentPlant.selectedViewAngle}`);\n\n    try {\n      const futureImages = await this.getFutureImages(currentImage, currentPlant);\n      \n      if (futureImages.length === 0) {\n        console.log(`🔄 No future images found for sync`);\n        return { success: true, message: 'No future images to sync', synced: 0 };\n      }\n\n      console.log(`🔄 Found ${futureImages.length} future images:`, futureImages.map(img => img.id));\n\n      let syncedCount = 0;\n      const errors = [];\n\n      // Process each future image sequentially to avoid conflicts\n      for (const image of futureImages) {\n        try {\n          console.log(`🔄 Syncing keypoint ${keypoint.id} to image ${image.id}...`);\n          await this.addKeypointToImage(keypoint, image);\n          syncedCount++;\n          console.log(`🔄 Successfully synced to image ${image.id}`);\n        } catch (error) {\n          console.error(`🔄 Error syncing to image ${image.id}:`, error);\n          errors.push({ imageId: image.id, error: error.message });\n        }\n      }\n\n      const result = {\n        success: errors.length === 0,\n        message: `Synced to ${syncedCount} future images`,\n        synced: syncedCount,\n        errors: errors.length > 0 ? errors : undefined\n      };\n\n      console.log(`🔄 Keypoint addition sync completed:`, result);\n      return result;\n\n    } catch (error) {\n      console.error('🔄 Error in keypoint addition sync:', error);\n      return { success: false, message: error.message, synced: 0 };\n    }\n  }\n\n  /**\n   * Sync keypoint movement to future images\n   * @param {object} keypoint - The keypoint that was moved\n   * @param {object} previousPosition - Previous position {x, y}\n   * @param {object} currentImage - Current image context\n   * @param {object} currentPlant - Current plant context\n   * @returns {Promise<object>} Sync result\n   */\n  async syncKeypointMovement(keypoint, previousPosition, currentImage, currentPlant) {\n    if (!this.isEnabled) {\n      return { success: true, message: 'Sync disabled', synced: 0 };\n    }\n\n    console.log(`🔄 Starting keypoint movement sync for keypoint ${keypoint.id}`);\n\n    try {\n      const futureImages = await this.getFutureImages(currentImage, currentPlant);\n      \n      if (futureImages.length === 0) {\n        return { success: true, message: 'No future images to sync', synced: 0 };\n      }\n\n      let syncedCount = 0;\n      const errors = [];\n\n      // Process each future image sequentially\n      for (const image of futureImages) {\n        try {\n          await this.moveKeypointInImage(keypoint, image);\n          syncedCount++;\n        } catch (error) {\n          console.error(`🔄 Error syncing movement to image ${image.id}:`, error);\n          errors.push({ imageId: image.id, error: error.message });\n        }\n      }\n\n      const result = {\n        success: errors.length === 0,\n        message: `Synced movement to ${syncedCount} future images`,\n        synced: syncedCount,\n        errors: errors.length > 0 ? errors : undefined\n      };\n\n      console.log(`🔄 Keypoint movement sync completed:`, result);\n      return result;\n\n    } catch (error) {\n      console.error('🔄 Error in keypoint movement sync:', error);\n      return { success: false, message: error.message, synced: 0 };\n    }\n  }\n\n  /**\n   * Sync keypoint deletion to future images\n   * @param {object} payload - Deletion payload containing keypoint and context\n   * @returns {Promise<object>} Sync result\n   */\n  async syncKeypointDeletion(payload) {\n    if (!this.isEnabled) {\n      return { success: true, message: 'Sync disabled', synced: 0 };\n    }\n\n    const { keypoint, currentImage, currentPlant } = payload;\n\n    console.log(`🔄 Starting keypoint deletion sync for keypoint ${keypoint.id}`);\n    console.log(`🔄 Current image: ${currentImage.id}, Plant: ${currentPlant.id}, View: ${currentPlant.selectedViewAngle}`);\n\n    try {\n      const futureImages = await this.getFutureImages(currentImage, currentPlant);\n      \n      if (futureImages.length === 0) {\n        console.log(`🔄 No future images found for deletion sync`);\n        return { success: true, message: 'No future images to sync', synced: 0 };\n      }\n\n      console.log(`🔄 Found ${futureImages.length} future images:`, futureImages.map(img => img.id));\n\n      let syncedCount = 0;\n      const errors = [];\n\n      // Process each future image sequentially to avoid conflicts\n      for (const image of futureImages) {\n        try {\n          console.log(`🔄 Syncing keypoint deletion to image ${image.id}...`);\n          await this.deleteKeypointFromImage(keypoint, image);\n          syncedCount++;\n          console.log(`🔄 Successfully synced deletion to image ${image.id}`);\n        } catch (error) {\n          console.error(`🔄 Error syncing deletion to image ${image.id}:`, error);\n          errors.push({ imageId: image.id, error: error.message });\n        }\n      }\n\n      const result = {\n        success: errors.length === 0,\n        message: `Synced deletion to ${syncedCount} future images`,\n        synced: syncedCount,\n        errors: errors.length > 0 ? errors : undefined\n      };\n\n      console.log(`🔄 Keypoint deletion sync completed:`, result);\n      return result;\n\n    } catch (error) {\n      console.error('🔄 Error in keypoint deletion sync:', error);\n      return { success: false, message: error.message, synced: 0 };\n    }\n  }\n\n  /**\n   * Add keypoint to a specific image\n   * @param {object} keypoint - Keypoint to add\n   * @param {object} targetImage - Target image\n   * @returns {Promise<void>}\n   */\n  async addKeypointToImage(keypoint, targetImage) {\n    // Get existing annotations for the target image\n    const existingData = await this.annotationStorageManager.getImageAnnotation(targetImage.id);\n    const existingAnnotations = existingData ? existingData.annotations : [];\n    \n    // 🔧 FIX: Use order-based matching for consistent sync behavior\n    // This is crucial for real-time sync: sync by order + type, not by ID\n    const existingKeypoint = existingAnnotations.find(ann => {\n      const orderMatch = ann.order === keypoint.order;\n      const typeMatch = ann.annotationType === keypoint.annotationType;\n      \n      // For custom annotations, customTypeId must also match\n      const customTypeMatch = keypoint.annotationType === 'custom' \n        ? ann.customTypeId === keypoint.customTypeId\n        : true;\n      \n      return orderMatch && typeMatch && customTypeMatch;\n    });\n    \n    if (existingKeypoint) {\n      // Update existing keypoint position and all properties\n      existingKeypoint.x = keypoint.x;\n      existingKeypoint.y = keypoint.y;\n      existingKeypoint.direction = keypoint.direction;\n      existingKeypoint.directionType = keypoint.directionType;\n      existingKeypoint.directions = keypoint.directions; // 🔧 NEW: Support multi-direction\n      existingKeypoint.maxDirections = keypoint.maxDirections; // 🔧 NEW: Support multi-direction\n      existingKeypoint.timestamp = new Date().toISOString();\n      \n      // 🔧 Enhanced Debug: Log annotation details\n      const typeDesc = keypoint.annotationType === 'custom' ? \n        `custom(${keypoint.customTypeId})` : 'regular';\n      console.log(`🔄 Updated existing ${typeDesc} keypoint order ${keypoint.order} in image ${targetImage.id}`);\n    } else {\n      // Add new keypoint\n      const newKeypoint = {\n        ...keypoint,\n        timestamp: new Date().toISOString() // Update timestamp for sync\n      };\n      existingAnnotations.push(newKeypoint);\n      \n      // 🔧 Enhanced Debug: Log annotation details\n      const typeDesc = keypoint.annotationType === 'custom' ? \n        `custom(${keypoint.customTypeId})` : 'regular';\n      console.log(`🔄 Added new ${typeDesc} keypoint order ${keypoint.order} to image ${targetImage.id}`);\n    }\n\n    // Prepare complete annotation data object\n    const annotationData = {\n      imageId: targetImage.id,\n      annotations: existingAnnotations,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save updated annotations\n    await this.annotationStorageManager.saveImageAnnotation(targetImage.id, annotationData);\n  }\n\n  /**\n   * Move keypoint in a specific image\n   * @param {object} keypoint - Keypoint with new position\n   * @param {object} targetImage - Target image\n   * @returns {Promise<void>}\n   */\n  async moveKeypointInImage(keypoint, targetImage) {\n    // Get existing annotations for the target image\n    const existingData = await this.annotationStorageManager.getImageAnnotation(targetImage.id);\n    const existingAnnotations = existingData ? existingData.annotations : [];\n    \n    // 🔧 FIX: Use order-based matching for consistent sync behavior\n    // This is crucial for real-time sync: sync by order + type, not by ID\n    const existingKeypoint = existingAnnotations.find(ann => {\n      const orderMatch = ann.order === keypoint.order;\n      const typeMatch = ann.annotationType === keypoint.annotationType;\n      \n      // For custom annotations, customTypeId must also match\n      const customTypeMatch = keypoint.annotationType === 'custom' \n        ? ann.customTypeId === keypoint.customTypeId\n        : true;\n      \n      return orderMatch && typeMatch && customTypeMatch;\n    });\n    \n    if (existingKeypoint) {\n      // Update position and all properties\n      existingKeypoint.x = keypoint.x;\n      existingKeypoint.y = keypoint.y;\n      existingKeypoint.direction = keypoint.direction;\n      existingKeypoint.directionType = keypoint.directionType;\n      existingKeypoint.directions = keypoint.directions; // 🔧 NEW: Support multi-direction\n      existingKeypoint.maxDirections = keypoint.maxDirections; // 🔧 NEW: Support multi-direction\n      existingKeypoint.timestamp = new Date().toISOString();\n      \n      // 🔧 Enhanced Debug: Log annotation details\n      const typeDesc = keypoint.annotationType === 'custom' ? \n        `custom(${keypoint.customTypeId})` : 'regular';\n      console.log(`🔄 Moved ${typeDesc} keypoint order ${keypoint.order} in image ${targetImage.id}`);\n    } else {\n      // Add new keypoint if it doesn't exist (order-based sync)\n      const newKeypoint = {\n        ...keypoint,\n        timestamp: new Date().toISOString()\n      };\n      existingAnnotations.push(newKeypoint);\n      \n      // 🔧 Enhanced Debug: Log annotation details\n      const typeDesc = keypoint.annotationType === 'custom' ? \n        `custom(${keypoint.customTypeId})` : 'regular';\n      console.log(`🔄 Added new ${typeDesc} keypoint order ${keypoint.order} to image ${targetImage.id} (move operation)`);\n    }\n\n    // Prepare complete annotation data object\n    const annotationData = {\n      imageId: targetImage.id,\n      annotations: existingAnnotations,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save updated annotations\n    await this.annotationStorageManager.saveImageAnnotation(targetImage.id, annotationData);\n  }\n\n  /**\n   * Delete keypoint from a specific image with strict matching criteria\n   * @param {object} keypoint - Keypoint to delete\n   * @param {object} targetImage - Target image\n   * @returns {Promise<void>}\n   */\n  async deleteKeypointFromImage(keypoint, targetImage) {\n    // Get existing annotations for the target image\n    const existingData = await this.annotationStorageManager.getImageAnnotation(targetImage.id);\n    const existingAnnotations = existingData ? existingData.annotations : [];\n    \n    if (existingAnnotations.length === 0) {\n      console.log(`🔄 No annotations found in image ${targetImage.id} - skipping deletion`);\n      return;\n    }\n\n    // Find matching keypoint using strict criteria:\n    // 1. order must match\n    // 2. annotationType must match\n    // 3. customTypeId must match (for custom annotations)\n    const matchingIndex = existingAnnotations.findIndex(ann => {\n      const orderMatch = ann.order === keypoint.order;\n      const typeMatch = ann.annotationType === keypoint.annotationType;\n      \n      // For custom annotations, customTypeId must also match\n      const customTypeMatch = keypoint.annotationType === 'custom' \n        ? ann.customTypeId === keypoint.customTypeId\n        : true;\n      \n      return orderMatch && typeMatch && customTypeMatch;\n    });\n    \n    if (matchingIndex !== -1) {\n      const removedKeypoint = existingAnnotations[matchingIndex];\n      existingAnnotations.splice(matchingIndex, 1);\n      \n      console.log(`🔄 Deleted keypoint from image ${targetImage.id}:`);\n      console.log(`  - Order: ${removedKeypoint.order}`);\n      console.log(`  - Type: ${removedKeypoint.annotationType}`);\n      console.log(`  - Custom Type ID: ${removedKeypoint.customTypeId || 'N/A'}`);\n      console.log(`  - ID: ${removedKeypoint.id}`);\n    } else {\n      console.log(`🔄 No matching keypoint found in image ${targetImage.id} for deletion:`);\n      console.log(`  - Looking for order: ${keypoint.order}`);\n      console.log(`  - Looking for type: ${keypoint.annotationType}`);\n      console.log(`  - Looking for custom type ID: ${keypoint.customTypeId || 'N/A'}`);\n      console.log(`  - Available annotations:`, existingAnnotations.map(ann => ({\n        order: ann.order,\n        type: ann.annotationType,\n        customTypeId: ann.customTypeId,\n        id: ann.id\n      })));\n      return;\n    }\n\n    // Prepare complete annotation data object\n    const annotationData = {\n      imageId: targetImage.id,\n      annotations: existingAnnotations,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save updated annotations\n    await this.annotationStorageManager.saveImageAnnotation(targetImage.id, annotationData);\n  }\n\n  /**\n   * Queue a sync operation for processing\n   * @param {object} operation - Sync operation details\n   * @returns {Promise<void>}\n   */\n  async queueSyncOperation(operation) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this.syncQueue.push(operation);\n    \n    // Process queue if not already processing\n    if (!this.isSyncing) {\n      await this.processSyncQueue();\n    }\n  }\n\n  /**\n   * Process queued sync operations sequentially\n   * @returns {Promise<void>}\n   */\n  async processSyncQueue() {\n    if (this.isSyncing || this.syncQueue.length === 0) {\n      return;\n    }\n\n    this.isSyncing = true;\n    this.emit('syncStarted', { queueLength: this.syncQueue.length });\n\n    try {\n      while (this.syncQueue.length > 0) {\n        const operation = this.syncQueue.shift();\n        \n        try {\n          await this.executeOperation(operation);\n        } catch (error) {\n          console.error('🔄 Error executing sync operation:', error);\n          this.emit('syncError', { operation, error });\n        }\n      }\n    } finally {\n      this.isSyncing = false;\n      this.emit('syncCompleted', {});\n    }\n  }\n\n  /**\n   * Execute a specific sync operation\n   * @param {object} operation - Operation to execute\n   * @returns {Promise<void>}\n   */\n  async executeOperation(operation) {\n    const { type, keypoint, currentImage, currentPlant, previousPosition, syncData } = operation;\n\n    switch (type) {\n      case this.OPERATION_TYPES.ADD_KEYPOINT:\n        return await this.syncKeypointAddition(keypoint, currentImage, currentPlant);\n      \n      case this.OPERATION_TYPES.MOVE_KEYPOINT:\n        return await this.syncKeypointMovement(keypoint, previousPosition, currentImage, currentPlant);\n      \n      case this.OPERATION_TYPES.DELETE_KEYPOINT:\n        // 🔧 FIX: Properly handle keypoint deletion sync\n        return await this.syncKeypointDeletion(operation);\n      \n      case this.OPERATION_TYPES.EDIT_DIRECTION:\n        // 🔧 NEW: Direction-specific sync operation\n        return await this.syncDirectionEdit(operation);\n      \n      case this.OPERATION_TYPES.CUSTOM_ANNOTATION_CREATE:\n        return await this.syncCustomAnnotationCreate(syncData);\n      \n      case this.OPERATION_TYPES.CUSTOM_ANNOTATION_UPDATE:\n        return await this.syncCustomAnnotationUpdate(syncData);\n      \n      case this.OPERATION_TYPES.CUSTOM_ANNOTATION_DELETE:\n        return await this.syncCustomAnnotationDelete(syncData);\n      \n      case this.OPERATION_TYPES.CUSTOM_TYPE_CREATE:\n        return await this.syncCustomTypeCreate(syncData);\n      \n      default:\n        console.warn(`🔄 Unknown sync operation type: ${type}`);\n    }\n  }\n\n  /**\n   * Sync direction edit to future images\n   * @param {object} operation - Direction edit operation\n   * @returns {Promise<object>} Sync result\n   */\n  async syncDirectionEdit(operation) {\n    if (!this.isEnabled) {\n      return { success: true, message: 'Sync disabled', synced: 0 };\n    }\n\n    const { keypoint, currentImage, currentPlant } = operation;\n\n    console.log(`🔄 Starting direction edit sync for keypoint order ${keypoint.order}`);\n    console.log(`🔄 Current image: ${currentImage.id}, Plant: ${currentPlant.id}, View: ${currentPlant.selectedViewAngle}`);\n\n    try {\n      const futureImages = await this.getFutureImages(currentImage, currentPlant);\n      \n      if (futureImages.length === 0) {\n        console.log(`🔄 No future images found for direction edit sync`);\n        return { success: true, message: 'No future images to sync', synced: 0 };\n      }\n\n      console.log(`🔄 Found ${futureImages.length} future images:`, futureImages.map(img => img.id));\n\n      let syncedCount = 0;\n      const errors = [];\n\n      // Process each future image sequentially to avoid conflicts\n      for (const image of futureImages) {\n        try {\n          console.log(`🔄 Syncing direction edit to image ${image.id}...`);\n          await this.editDirectionInImage(keypoint, image);\n          syncedCount++;\n          console.log(`🔄 Successfully synced direction edit to image ${image.id}`);\n        } catch (error) {\n          console.error(`🔄 Error syncing direction edit to image ${image.id}:`, error);\n          errors.push({ imageId: image.id, error: error.message });\n        }\n      }\n\n      const result = {\n        success: errors.length === 0,\n        message: `Synced direction edit to ${syncedCount} future images`,\n        synced: syncedCount,\n        errors: errors.length > 0 ? errors : undefined\n      };\n\n      console.log(`🔄 Direction edit sync completed:`, result);\n      return result;\n\n    } catch (error) {\n      console.error('🔄 Error in direction edit sync:', error);\n      return { success: false, message: error.message, synced: 0 };\n    }\n  }\n\n  /**\n   * Edit direction in a specific image\n   * @param {object} keypoint - Keypoint with updated direction\n   * @param {object} targetImage - Target image\n   * @returns {Promise<void>}\n   */\n  async editDirectionInImage(keypoint, targetImage) {\n    // Get existing annotations for the target image\n    const existingData = await this.annotationStorageManager.getImageAnnotation(targetImage.id);\n    const existingAnnotations = existingData ? existingData.annotations : [];\n    \n    // 🔧 FIX: Use order-based matching for direction edits\n    const existingKeypoint = existingAnnotations.find(ann => {\n      const orderMatch = ann.order === keypoint.order;\n      const typeMatch = ann.annotationType === keypoint.annotationType;\n      \n      // For custom annotations, customTypeId must also match\n      const customTypeMatch = keypoint.annotationType === 'custom' \n        ? ann.customTypeId === keypoint.customTypeId\n        : true;\n      \n      return orderMatch && typeMatch && customTypeMatch;\n    });\n    \n    if (existingKeypoint) {\n      // Update only direction-related properties\n      existingKeypoint.direction = keypoint.direction;\n      existingKeypoint.directionType = keypoint.directionType;\n      existingKeypoint.directions = keypoint.directions; // 🔧 NEW: Support multi-direction\n      existingKeypoint.maxDirections = keypoint.maxDirections; // 🔧 NEW: Support multi-direction\n      existingKeypoint.timestamp = new Date().toISOString();\n      \n      // 🔧 Enhanced Debug: Log direction edit details\n      const typeDesc = keypoint.annotationType === 'custom' ? \n        `custom(${keypoint.customTypeId})` : 'regular';\n      console.log(`🔄 Updated direction for ${typeDesc} keypoint order ${keypoint.order} in image ${targetImage.id}`);\n    } else {\n      // Add new keypoint if it doesn't exist (order-based sync)\n      const newKeypoint = {\n        ...keypoint,\n        timestamp: new Date().toISOString()\n      };\n      existingAnnotations.push(newKeypoint);\n      \n      // 🔧 Enhanced Debug: Log annotation details\n      const typeDesc = keypoint.annotationType === 'custom' ? \n        `custom(${keypoint.customTypeId})` : 'regular';\n      console.log(`🔄 Added new ${typeDesc} keypoint order ${keypoint.order} to image ${targetImage.id} (direction edit operation)`);\n    }\n\n    // Prepare complete annotation data object\n    const annotationData = {\n      imageId: targetImage.id,\n      annotations: existingAnnotations,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save updated annotations\n    await this.annotationStorageManager.saveImageAnnotation(targetImage.id, annotationData);\n  }\n  /**\n   * Sync custom annotation creation to future images\n   * @param {object} syncData - Custom annotation sync data\n   * @returns {Promise<object>} Sync result\n   */\n  async syncCustomAnnotationCreate(syncData) {\n    console.log('🔄 Starting custom annotation creation sync:', syncData);\n    \n    try {\n      // Extract context information\n      const { annotation, context } = syncData;\n      const { appState } = context;\n      \n      if (!appState?.currentImage || !appState?.currentPlant) {\n        console.warn('🔄 Missing app state for custom annotation sync');\n        return { success: false, message: 'Missing app state', synced: 0 };\n      }\n      \n      const futureImages = await this.getFutureImages(appState.currentImage, appState.currentPlant);\n      \n      if (futureImages.length === 0) {\n        console.log('🔄 No future images found for custom annotation sync');\n        return { success: true, message: 'No future images to sync', synced: 0 };\n      }\n      \n      let syncedCount = 0;\n      const errors = [];\n      \n      // Process each future image sequentially\n      for (const image of futureImages) {\n        try {\n          console.log(`🔄 Syncing custom annotation to image ${image.id}...`);\n          await this.addCustomAnnotationToImage(annotation, image);\n          syncedCount++;\n          console.log(`🔄 Successfully synced custom annotation to image ${image.id}`);\n        } catch (error) {\n          console.error(`🔄 Error syncing custom annotation to image ${image.id}:`, error);\n          errors.push({ imageId: image.id, error: error.message });\n        }\n      }\n      \n      const result = {\n        success: errors.length === 0,\n        message: `Synced custom annotation to ${syncedCount} future images`,\n        synced: syncedCount,\n        errors: errors.length > 0 ? errors : undefined\n      };\n      \n      console.log('🔄 Custom annotation creation sync completed:', result);\n      return result;\n      \n    } catch (error) {\n      console.error('🔄 Error in custom annotation creation sync:', error);\n      return { success: false, message: error.message, synced: 0 };\n    }\n  }\n\n  /**\n   * Sync custom annotation update to future images\n   * @param {object} syncData - Custom annotation sync data\n   * @returns {Promise<object>} Sync result\n   */\n  async syncCustomAnnotationUpdate(syncData) {\n    console.log('🔄 Starting custom annotation update sync:', syncData);\n    \n    try {\n      // Extract context information\n      const { annotation, context } = syncData;\n      const { appState } = context;\n      \n      if (!appState?.currentImage || !appState?.currentPlant) {\n        console.warn('🔄 Missing app state for custom annotation update sync');\n        return { success: false, message: 'Missing app state', synced: 0 };\n      }\n      \n      const futureImages = await this.getFutureImages(appState.currentImage, appState.currentPlant);\n      \n      if (futureImages.length === 0) {\n        return { success: true, message: 'No future images to sync', synced: 0 };\n      }\n      \n      let syncedCount = 0;\n      const errors = [];\n      \n      // Process each future image sequentially\n      for (const image of futureImages) {\n        try {\n          await this.updateCustomAnnotationInImage(annotation, image);\n          syncedCount++;\n        } catch (error) {\n          console.error(`🔄 Error updating custom annotation in image ${image.id}:`, error);\n          errors.push({ imageId: image.id, error: error.message });\n        }\n      }\n      \n      const result = {\n        success: errors.length === 0,\n        message: `Updated custom annotation in ${syncedCount} future images`,\n        synced: syncedCount,\n        errors: errors.length > 0 ? errors : undefined\n      };\n      \n      console.log('🔄 Custom annotation update sync completed:', result);\n      return result;\n      \n    } catch (error) {\n      console.error('🔄 Error in custom annotation update sync:', error);\n      return { success: false, message: error.message, synced: 0 };\n    }\n  }\n\n  /**\n   * Sync custom annotation deletion to future images\n   * @param {object} syncData - Custom annotation sync data\n   * @returns {Promise<object>} Sync result\n   */\n  async syncCustomAnnotationDelete(syncData) {\n    console.log('🔄 Starting custom annotation deletion sync:', syncData);\n    \n    try {\n      // Extract context information\n      const { annotation, context } = syncData;\n      const { appState } = context;\n      \n      if (!appState?.currentImage || !appState?.currentPlant) {\n        console.warn('🔄 Missing app state for custom annotation deletion sync');\n        return { success: false, message: 'Missing app state', synced: 0 };\n      }\n      \n      const futureImages = await this.getFutureImages(appState.currentImage, appState.currentPlant);\n      \n      if (futureImages.length === 0) {\n        return { success: true, message: 'No future images to sync', synced: 0 };\n      }\n      \n      let syncedCount = 0;\n      const errors = [];\n      \n      // Process each future image sequentially\n      for (const image of futureImages) {\n        try {\n          await this.deleteCustomAnnotationFromImage(annotation, image);\n          syncedCount++;\n        } catch (error) {\n          console.error(`🔄 Error deleting custom annotation from image ${image.id}:`, error);\n          errors.push({ imageId: image.id, error: error.message });\n        }\n      }\n      \n      const result = {\n        success: errors.length === 0,\n        message: `Deleted custom annotation from ${syncedCount} future images`,\n        synced: syncedCount,\n        errors: errors.length > 0 ? errors : undefined\n      };\n      \n      console.log('🔄 Custom annotation deletion sync completed:', result);\n      return result;\n      \n    } catch (error) {\n      console.error('🔄 Error in custom annotation deletion sync:', error);\n      return { success: false, message: error.message, synced: 0 };\n    }\n  }\n\n  /**\n   * Sync custom type creation to future images\n   * @param {object} syncData - Custom type sync data\n   * @returns {Promise<object>} Sync result\n   */\n  async syncCustomTypeCreate(syncData) {\n    console.log('🔄 Starting custom type creation sync:', syncData);\n    \n    // For custom type creation, we typically don't need to sync to future images\n    // since types are global and don't belong to specific images\n    // This is more of a metadata sync that could be handled separately\n    \n    console.log('🔄 Custom type creation sync - no image sync needed');\n    return { success: true, message: 'Custom type created (no image sync required)', synced: 0 };\n  }\n\n  /**\n   * Add custom annotation to a specific image\n   * @param {object} annotation - Custom annotation to add\n   * @param {object} targetImage - Target image\n   * @returns {Promise<void>}\n   */\n  async addCustomAnnotationToImage(annotation, targetImage) {\n    // Get existing annotations for the target image\n    const existingData = await this.annotationStorageManager.getImageAnnotation(targetImage.id);\n    const existingAnnotations = existingData ? existingData.annotations : [];\n    \n    // 🔧 FIX: Use order-based matching for custom annotations (not ID-based)\n    // This is the core of real-time sync: sync by order + custom type, not by ID\n    const existingCustomAnnotation = existingAnnotations.find(ann => \n      ann.annotationType === 'custom' && \n      ann.customTypeId === annotation.customTypeId &&\n      ann.order === annotation.order\n    );\n    \n    if (existingCustomAnnotation) {\n      // Update existing custom annotation with same order and type\n      Object.assign(existingCustomAnnotation, annotation);\n      existingCustomAnnotation.timestamp = new Date().toISOString();\n      \n      console.log(`🔄 Updated existing custom annotation order ${annotation.order} type ${annotation.customTypeId} in image ${targetImage.id}`);\n    } else {\n      // 🔧 FIX: Remove conflict detection - order-based sync is the intended behavior\n      // The previous conflict detection was preventing legitimate sync operations\n      // Real-time sync SHOULD create annotations with same order on future frames\n      \n      // Add new custom annotation\n      const newAnnotation = {\n        ...annotation,\n        timestamp: new Date().toISOString()\n      };\n      existingAnnotations.push(newAnnotation);\n      \n      console.log(`🔄 Added new custom annotation order ${annotation.order} type ${annotation.customTypeId} to image ${targetImage.id}`);\n    }\n\n    // Prepare complete annotation data object\n    const annotationData = {\n      imageId: targetImage.id,\n      annotations: existingAnnotations,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save updated annotations\n    await this.annotationStorageManager.saveImageAnnotation(targetImage.id, annotationData);\n  }\n\n  /**\n   * Update custom annotation in a specific image\n   * @param {object} annotation - Custom annotation with updates\n   * @param {object} targetImage - Target image\n   * @returns {Promise<void>}\n   */\n  async updateCustomAnnotationInImage(annotation, targetImage) {\n    // Get existing annotations for the target image\n    const existingData = await this.annotationStorageManager.getImageAnnotation(targetImage.id);\n    const existingAnnotations = existingData ? existingData.annotations : [];\n    \n    // 🔧 FIX: Use order-based matching for custom annotations (not ID-based)\n    // This is crucial for move operations - we need to match by order + type, not ID\n    const existingCustomAnnotation = existingAnnotations.find(ann => \n      ann.annotationType === 'custom' && \n      ann.customTypeId === annotation.customTypeId &&\n      ann.order === annotation.order\n    );\n    \n    if (existingCustomAnnotation) {\n      // Update existing custom annotation with same order and type\n      Object.assign(existingCustomAnnotation, annotation);\n      existingCustomAnnotation.timestamp = new Date().toISOString();\n      \n      console.log(`🔄 Updated custom annotation order ${annotation.order} type ${annotation.customTypeId} in image ${targetImage.id}`);\n    } else {\n      // Add new custom annotation if it doesn't exist (order-based sync)\n      const newAnnotation = {\n        ...annotation,\n        timestamp: new Date().toISOString()\n      };\n      existingAnnotations.push(newAnnotation);\n      \n      console.log(`🔄 Added new custom annotation order ${annotation.order} type ${annotation.customTypeId} to image ${targetImage.id} (update operation)`);\n    }\n\n    // Prepare complete annotation data object\n    const annotationData = {\n      imageId: targetImage.id,\n      annotations: existingAnnotations,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save updated annotations\n    await this.annotationStorageManager.saveImageAnnotation(targetImage.id, annotationData);\n  }\n\n  /**\n   * Delete custom annotation from a specific image\n   * @param {object} annotation - Custom annotation to delete\n   * @param {object} targetImage - Target image\n   * @returns {Promise<void>}\n   */\n  async deleteCustomAnnotationFromImage(annotation, targetImage) {\n    // Get existing annotations for the target image\n    const existingData = await this.annotationStorageManager.getImageAnnotation(targetImage.id);\n    const existingAnnotations = existingData ? existingData.annotations : [];\n    \n    if (existingAnnotations.length === 0) {\n      console.log(`🔄 No annotations found in image ${targetImage.id} - skipping custom annotation deletion`);\n      return;\n    }\n\n    // 🔧 FIX: Use order-based matching for custom annotations (not ID-based)\n    // This is crucial for delete operations - we need to match by order + type, not ID\n    const matchingIndex = existingAnnotations.findIndex(ann => \n      ann.annotationType === 'custom' && \n      ann.customTypeId === annotation.customTypeId &&\n      ann.order === annotation.order\n    );\n    \n    if (matchingIndex !== -1) {\n      const removedAnnotation = existingAnnotations[matchingIndex];\n      existingAnnotations.splice(matchingIndex, 1);\n      \n      console.log(`🔄 Deleted custom annotation order ${removedAnnotation.order} type ${removedAnnotation.customTypeId} from image ${targetImage.id}`);\n    } else {\n      console.log(`🔄 No matching custom annotation order ${annotation.order} type ${annotation.customTypeId} found in image ${targetImage.id} for deletion`);\n      return;\n    }\n\n    // Prepare complete annotation data object\n    const annotationData = {\n      imageId: targetImage.id,\n      annotations: existingAnnotations,\n      lastModified: new Date().toISOString()\n    };\n\n    // Save updated annotations\n    await this.annotationStorageManager.saveImageAnnotation(targetImage.id, annotationData);\n  }\n\n  /**\n   * Trigger sync for keypoint addition\n   * @param {object} keypoint - Added keypoint\n   * @param {object} currentImage - Current image context\n   * @param {object} currentPlant - Current plant context\n   * @returns {Promise<void>}\n   */\n  async triggerKeypointAddSync(keypoint, currentImage, currentPlant) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const operation = {\n      type: this.OPERATION_TYPES.ADD_KEYPOINT,\n      keypoint,\n      currentImage,\n      currentPlant,\n      timestamp: new Date().toISOString()\n    };\n\n    await this.queueSyncOperation(operation);\n  }\n\n  /**\n   * Trigger sync for keypoint movement\n   * @param {object} keypoint - Moved keypoint\n   * @param {object} previousPosition - Previous position\n   * @param {object} currentImage - Current image context\n   * @param {object} currentPlant - Current plant context\n   * @returns {Promise<void>}\n   */\n  async triggerKeypointMoveSync(keypoint, previousPosition, currentImage, currentPlant) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const operation = {\n      type: this.OPERATION_TYPES.MOVE_KEYPOINT,\n      keypoint,\n      previousPosition,\n      currentImage,\n      currentPlant,\n      timestamp: new Date().toISOString()\n    };\n\n    await this.queueSyncOperation(operation);\n  }\n\n  /**\n   * Trigger sync for keypoint deletion\n   * @param {object} keypoint - Deleted keypoint\n   * @param {object} currentImage - Current image context\n   * @param {object} currentPlant - Current plant context\n   * @returns {Promise<void>}\n   */\n  async triggerKeypointDeleteSync(keypoint, currentImage, currentPlant) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const operation = {\n      type: this.OPERATION_TYPES.DELETE_KEYPOINT,\n      keypoint,\n      currentImage,\n      currentPlant,\n      timestamp: new Date().toISOString()\n    };\n\n    await this.queueSyncOperation(operation);\n  }\n\n  /**\n   * Trigger sync for direction edit\n   * @param {object} keypoint - Keypoint with updated direction\n   * @param {object} currentImage - Current image context\n   * @param {object} currentPlant - Current plant context\n   * @returns {Promise<void>}\n   */\n  async triggerDirectionEditSync(keypoint, currentImage, currentPlant) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const operation = {\n      type: this.OPERATION_TYPES.EDIT_DIRECTION,\n      keypoint,\n      currentImage,\n      currentPlant,\n      timestamp: new Date().toISOString()\n    };\n\n    await this.queueSyncOperation(operation);\n  }\n\n  /**\n   * Trigger sync for custom annotation operations\n   * @param {object} syncData - Custom annotation sync data\n   * @returns {Promise<void>}\n   */\n  async triggerCustomAnnotationSync(syncData) {\n    if (!this.isEnabled) {\n      console.log('🔄 Custom annotation sync disabled, skipping');\n      return;\n    }\n\n    console.log('🔄 Processing custom annotation sync:', syncData);\n\n    const operation = {\n      type: syncData.type,\n      syncData,\n      timestamp: new Date().toISOString()\n    };\n\n    await this.queueSyncOperation(operation);\n  }\n\n  /**\n   * Get sync statistics\n   * @returns {object} Sync statistics\n   */\n  getSyncStats() {\n    return {\n      isEnabled: this.isEnabled,\n      isSyncing: this.isSyncing,\n      queueLength: this.syncQueue.length\n    };\n  }\n\n  /**\n   * Clear sync queue\n   */\n  clearSyncQueue() {\n    this.syncQueue = [];\n    console.log('🔄 Sync queue cleared');\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy() {\n    this.clearSyncQueue();\n    this.eventListeners.clear();\n    this.isEnabled = false;\n    this.isSyncing = false;\n    console.log('🔄 RealTimeSyncManager destroyed');\n  }\n}\n\nexport default RealTimeSyncManager;","/**\n * 自定义标注工具栏控制器\n * \n * 功能：\n * - 管理工具栏中的自定义标注控件\n * - 提供快速模式切换功能\n * - 显示当前模式和类型状态\n * - 与CustomAnnotationManager集成\n */\n\nexport class CustomAnnotationToolbarController {\n  constructor(customAnnotationManager, settingsController) {\n    this.customAnnotationManager = customAnnotationManager;\n    this.settingsController = settingsController;\n    \n    this.initializeElements();\n    this.bindEvents();\n    this.updateDisplay();\n    \n    console.log('CustomAnnotationToolbarController initialized');\n  }\n\n  /**\n   * 初始化DOM元素引用\n   */\n  initializeElements() {\n    // Mode status indicators\n    this.customModeIndicator = document.getElementById('custom-mode-indicator');\n    this.customTypeIndicator = document.getElementById('custom-type-indicator');\n    \n    // Controls\n    this.toolbarCustomTypeSelect = document.getElementById('toolbar-custom-type-select');\n    // Removed mode buttons (selection-driven)\n    this.switchCustomModeBtn = null;\n    this.normalModeBtn = null;\n    this.customSettingsBtn = document.getElementById('custom-settings-btn');\n  }\n\n  /**\n   * 绑定事件监听器\n   */\n  bindEvents() {\n    // Custom type selector\n    this.toolbarCustomTypeSelect.addEventListener('change', () => {\n      this.onCustomTypeSelected();\n      const selectedTypeId = this.toolbarCustomTypeSelect.value;\n      if (selectedTypeId) {\n        try {\n          this.customAnnotationManager.setCustomAnnotationMode(selectedTypeId);\n          this.showModeChangeNotification('custom', selectedTypeId);\n        } catch (error) {\n          alert(`Error switching type: ${error.message}`);\n        }\n      } else {\n        this.customAnnotationManager.setNormalMode();\n        this.showModeChangeNotification('normal');\n      }\n    });\n    \n    // Selection-driven: selecting a type immediately activates it\n    \n    // Settings button\n    this.customSettingsBtn.addEventListener('click', () => {\n      this.openSettings();\n    });\n    \n    // Listen to CustomAnnotationManager events\n    this.customAnnotationManager.addEventListener('onModeChange', () => {\n      this.updateDisplay();\n    });\n    \n    // Listen to type creation/deletion events\n    this.customAnnotationManager.addEventListener('onTypeCreate', (data) => {\n      console.log('Toolbar controller received onTypeCreate event:', data);\n      this.refreshCustomTypeSelector();\n    });\n    \n    this.customAnnotationManager.addEventListener('onTypeUpdate', (data) => {\n      console.log('Toolbar controller received onTypeUpdate event:', data);\n      this.refreshCustomTypeSelector();\n    });\n    \n    this.customAnnotationManager.addEventListener('onTypeDelete', (data) => {\n      console.log('Toolbar controller received onTypeDelete event:', data);\n      this.refreshCustomTypeSelector();\n    });\n  }\n\n  /**\n   * 刷新自定义类型选择器\n   */\n  refreshCustomTypeSelector() {\n    console.log('Refreshing custom type selector...');\n    \n    const customTypes = this.customAnnotationManager.getAllCustomTypes();\n    console.log('Retrieved custom types:', customTypes);\n    \n    const currentSelection = this.toolbarCustomTypeSelect.value;\n    \n    // Clear existing options\n    this.toolbarCustomTypeSelect.innerHTML = '<option value=\"\">Select custom type...</option>';\n    \n    // Add custom types\n    customTypes.forEach(type => {\n      console.log('Adding type to selector:', type);\n      const option = document.createElement('option');\n      option.value = type.id;\n      option.textContent = `${type.name} (${type.type})`;\n      option.style.color = type.color;\n      this.toolbarCustomTypeSelect.appendChild(option);\n    });\n    \n    // Restore selection if still valid\n    if (currentSelection && customTypes.find(t => t.id === currentSelection)) {\n      this.toolbarCustomTypeSelect.value = currentSelection;\n    }\n    \n    console.log('Custom type selector updated. Total options:', this.toolbarCustomTypeSelect.options.length);\n    \n    this.updateButtonStates();\n  }\n\n  /**\n   * 处理自定义类型选择\n   */\n  onCustomTypeSelected() {\n    this.updateButtonStates();\n  }\n\n  /**\n   * 切换到自定义模式\n   */\n  switchToCustomMode() {\n    const selectedTypeId = this.toolbarCustomTypeSelect.value;\n    if (!selectedTypeId) {\n      alert('Please select an annotation type first.');\n      return;\n    }\n    \n    try {\n      this.customAnnotationManager.setCustomAnnotationMode(selectedTypeId);\n      this.updateDisplay();\n      this.showModeChangeNotification('custom', selectedTypeId);\n    } catch (error) {\n      alert(`Error switching to custom mode: ${error.message}`);\n    }\n  }\n\n  /**\n   * 切换到正常模式\n   */\n  switchToNormalMode() {\n    this.customAnnotationManager.setNormalMode();\n    this.updateDisplay();\n    this.showModeChangeNotification('normal');\n  }\n\n  /**\n   * 打开设置窗口\n   */\n  openSettings() {\n    this.settingsController.show();\n  }\n\n  /**\n   * 更新显示状态\n   */\n  updateDisplay() {\n    this.updateModeIndicators();\n    this.updateButtonStates();\n  }\n\n  /**\n   * 更新模式指示器\n   */\n  updateModeIndicators() {\n    const currentMode = this.customAnnotationManager.currentMode;\n    const selectedType = this.customAnnotationManager.getCurrentCustomType();\n    \n    // Update mode indicator\n    if (currentMode === 'custom') {\n      this.customModeIndicator.textContent = 'Type';\n      this.customModeIndicator.style.color = '#059669';\n      this.customModeIndicator.style.fontWeight = '600';\n    } else {\n      this.customModeIndicator.textContent = 'Off';\n      this.customModeIndicator.style.color = 'var(--text-primary)';\n      this.customModeIndicator.style.fontWeight = '500';\n    }\n    \n    // Update type indicator\n    if (selectedType) {\n      this.customTypeIndicator.textContent = selectedType.name;\n      this.customTypeIndicator.style.color = selectedType.color;\n      this.customTypeIndicator.style.fontWeight = '600';\n      \n      // Add type badge\n      const typeBadge = selectedType.type === 'point' ? '●' : '▭';\n      this.customTypeIndicator.textContent = `${typeBadge} ${selectedType.name}`;\n    } else {\n      this.customTypeIndicator.textContent = 'None';\n      this.customTypeIndicator.style.color = 'var(--text-secondary)';\n      this.customTypeIndicator.style.fontWeight = '500';\n    }\n  }\n\n  /**\n   * 更新按钮状态\n   */\n  updateButtonStates() {\n    const currentMode = this.customAnnotationManager.currentMode;\n    const selectedTypeId = this.toolbarCustomTypeSelect.value;\n    const hasCustomTypes = this.customAnnotationManager.getAllCustomTypes().length > 0;\n    \n    // Always enable selector; selection applies immediately\n    this.toolbarCustomTypeSelect.disabled = false;\n\n    // Show/hide message based on availability\n    if (!hasCustomTypes) {\n      this.toolbarCustomTypeSelect.style.display = 'none';\n      // buttons removed\n      \n      // Show message to create types\n      this.showNoTypesMessage();\n    } else {\n      this.toolbarCustomTypeSelect.style.display = 'block';\n      this.hideNoTypesMessage();\n    }\n  }\n\n  /**\n   * 显示无类型消息\n   */\n  showNoTypesMessage() {\n    let message = document.getElementById('no-custom-types-message');\n    if (!message) {\n      message = document.createElement('div');\n      message.id = 'no-custom-types-message';\n      message.style.cssText = `\n        padding: 8px;\n        background: var(--bg-secondary);\n        border: 1px dashed var(--border-color);\n        border-radius: 4px;\n        text-align: center;\n        font-size: 0.75rem;\n        color: var(--text-secondary);\n        margin-bottom: 10px;\n      `;\n      message.innerHTML = `\n        <div style=\"margin-bottom: 4px;\">No annotation types created</div>\n        <div style=\"font-size: 0.7rem;\">Click Annotation Type Setting to create types</div>\n      `;\n      \n      this.toolbarCustomTypeSelect.parentNode.appendChild(message);\n    }\n    message.style.display = 'block';\n  }\n\n  /**\n   * 隐藏无类型消息\n   */\n  hideNoTypesMessage() {\n    const message = document.getElementById('no-custom-types-message');\n    if (message) {\n      message.style.display = 'none';\n    }\n  }\n\n  /**\n   * 显示模式切换通知\n   */\n  showModeChangeNotification(mode, typeId = null) {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n      position: fixed;\n      top: 80px;\n      right: 20px;\n      background: var(--bg-primary);\n      border: 1px solid var(--border-color);\n      border-radius: 6px;\n      padding: 12px 16px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      font-size: 0.875rem;\n      max-width: 300px;\n      animation: slideInRight 0.3s ease-out;\n    `;\n    \n    if (mode === 'custom') {\n      const customType = this.customAnnotationManager.getCustomType(typeId);\n      const typeIcon = customType.type === 'point' ? '●' : '▭';\n      notification.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 4px;\">\n          <span style=\"color: #059669; font-size: 1.2em;\">🎯</span>\n          <strong style=\"color: #059669;\">Custom Mode Active</strong>\n        </div>\n        <div style=\"color: var(--text-secondary); font-size: 0.8rem;\">\n          Type: <span style=\"color: ${customType.color}; font-weight: 600;\">${typeIcon} ${customType.name}</span>\n        </div>\n        <div style=\"color: var(--text-secondary); font-size: 0.75rem; margin-top: 4px;\">\n          ${customType.type === 'point' ? 'Click to place points' : 'Drag to draw regions'}\n        </div>\n      `;\n    } else {\n      notification.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: 8px;\">\n          <span style=\"color: var(--text-primary); font-size: 1.2em;\">⚪</span>\n          <strong style=\"color: var(--text-primary);\">Normal Mode</strong>\n        </div>\n        <div style=\"color: var(--text-secondary); font-size: 0.8rem;\">\n          Standard keypoint annotation\n        </div>\n      `;\n    }\n    \n    // Add animation styles if not already present\n    if (!document.getElementById('notification-animation-style')) {\n      const style = document.createElement('style');\n      style.id = 'notification-animation-style';\n      style.textContent = `\n        @keyframes slideInRight {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n        @keyframes slideOutRight {\n          from {\n            transform: translateX(0);\n            opacity: 1;\n          }\n          to {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    document.body.appendChild(notification);\n    \n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      notification.style.animation = 'slideOutRight 0.3s ease-in';\n      setTimeout(() => {\n        if (notification.parentElement) {\n          notification.remove();\n        }\n      }, 300);\n    }, 3000);\n  }\n\n  /**\n   * 初始化工具栏（在应用启动时调用）\n   */\n  initialize() {\n    console.log('Initializing custom annotation toolbar controller...');\n    this.refreshCustomTypeSelector();\n    this.updateDisplay();\n  }\n\n  /**\n   * 强制刷新工具栏状态（用于调试或手动同步）\n   */\n  forceRefresh() {\n    console.log('Force refreshing toolbar controller...');\n    this.refreshCustomTypeSelector();\n    this.updateDisplay();\n  }\n\n  /**\n   * 获取当前选中的自定义类型ID\n   */\n  getSelectedCustomTypeId() {\n    return this.toolbarCustomTypeSelect.value;\n  }\n\n  /**\n   * 设置选中的自定义类型\n   */\n  setSelectedCustomType(typeId) {\n    this.toolbarCustomTypeSelect.value = typeId;\n    this.updateButtonStates();\n  }\n\n  /**\n   * 检查是否有可用的自定义类型\n   */\n  hasCustomTypes() {\n    return this.customAnnotationManager.getAllCustomTypes().length > 0;\n  }\n\n  /**\n   * 获取工具栏状态摘要\n   */\n  getStatusSummary() {\n    const currentMode = this.customAnnotationManager.currentMode;\n    const selectedType = this.customAnnotationManager.getCurrentCustomType();\n    const totalTypes = this.customAnnotationManager.getAllCustomTypes().length;\n    \n    return {\n      mode: currentMode,\n      selectedType: selectedType ? {\n        id: selectedType.id,\n        name: selectedType.name,\n        type: selectedType.type,\n        color: selectedType.color\n      } : null,\n      totalCustomTypes: totalTypes,\n      hasCustomTypes: totalTypes > 0\n    };\n  }\n}","/**\n * 自定义标注设置窗口控制器\n * \n * 功能：\n * - 管理自定义标注类型的创建、编辑、删除\n * - 提供模式切换界面\n * - 处理导入导出功能\n * - 与CustomAnnotationManager集成\n */\n\nexport class CustomAnnotationSettingsController {\n  constructor(customAnnotationManager) {\n    this.customAnnotationManager = customAnnotationManager;\n    this.modal = null;\n    this.currentEditingTypeId = null;\n    this.currentTab = 'manage-types';\n    \n    this.initializeElements();\n    this.bindEvents();\n    \n    console.log('CustomAnnotationSettingsController initialized');\n  }\n\n  /**\n   * 初始化DOM元素引用\n   */\n  initializeElements() {\n    this.modal = document.getElementById('custom-annotation-settings-modal');\n    this.closeBtn = document.getElementById('custom-annotation-settings-close');\n    \n    // Tab elements\n    this.tabButtons = document.querySelectorAll('.tab-button');\n    this.tabContents = document.querySelectorAll('.tab-content');\n    \n    // Manage Types tab elements\n    this.customTypesList = document.getElementById('custom-types-list');\n    this.noCustomTypesMessage = document.getElementById('no-custom-types');\n    this.addTypeBtn = document.getElementById('add-custom-type-btn');\n    this.typeFormSection = document.getElementById('type-form-section');\n    this.typeForm = document.getElementById('custom-type-form');\n    this.formTitle = document.getElementById('form-title');\n    this.formSubmitText = document.getElementById('form-submit-text');\n    this.cancelFormBtn = document.getElementById('cancel-form-btn');\n    \n    // Form inputs\n    this.typeNameInput = document.getElementById('type-name');\n    this.typeIdInput = document.getElementById('type-id');\n    this.typeTypeSelect = document.getElementById('type-type');\n    this.typeColorInput = document.getElementById('type-color');\n    this.typeColorTextInput = document.getElementById('type-color-text');\n    this.typeDescriptionInput = document.getElementById('type-description');\n    this.typeCategoryInput = document.getElementById('type-category');\n    // Default angle for keypoint types\n    this.typeDefaultAngleGroup = document.getElementById('type-default-angle-group');\n    this.typeDefaultAngleInput = document.getElementById('type-default-angle');\n    this.typeIsDirectionalInput = document.getElementById('type-is-directional');\n    \n    // Current Mode tab elements\n    this.currentModeValue = document.getElementById('current-mode-value');\n    this.currentTypeValue = document.getElementById('current-type-value');\n    this.switchToNormalBtn = document.getElementById('switch-to-normal-btn');\n    this.selectCustomTypeSelect = document.getElementById('select-custom-type');\n    this.switchToCustomBtn = document.getElementById('switch-to-custom-btn');\n    \n    // Export/Import tab elements\n    this.exportTypesCount = document.getElementById('export-types-count');\n    this.exportAnnotationsCount = document.getElementById('export-annotations-count');\n    this.exportCustomDataBtn = document.getElementById('export-custom-data-btn');\n    this.selectImportFileBtn = document.getElementById('select-import-file-btn');\n    this.importFileInput = document.getElementById('import-file-input');\n    this.importFileInfo = document.getElementById('import-file-info');\n    this.importFileName = document.getElementById('import-file-name');\n    this.importExecuteBtn = document.getElementById('import-execute-btn');\n    this.importResults = document.getElementById('import-results');\n    this.importResultsContent = document.getElementById('import-results-content');\n  }\n\n  /**\n   * 绑定事件监听器\n   */\n  bindEvents() {\n    // Modal close\n    this.closeBtn.addEventListener('click', () => this.hide());\n    this.modal.addEventListener('click', (e) => {\n      if (e.target === this.modal) this.hide();\n    });\n    \n    // Tab switching\n    this.tabButtons.forEach(button => {\n      button.addEventListener('click', () => {\n        const tabName = button.dataset.tab;\n        this.switchTab(tabName);\n      });\n    });\n    \n    // Manage Types tab events\n    this.addTypeBtn.addEventListener('click', () => this.showAddTypeForm());\n    this.cancelFormBtn.addEventListener('click', () => this.hideTypeForm());\n    this.typeForm.addEventListener('submit', (e) => this.handleFormSubmit(e));\n    \n    // Color input synchronization\n    this.typeColorInput.addEventListener('input', () => {\n      this.typeColorTextInput.value = this.typeColorInput.value;\n    });\n    this.typeColorTextInput.addEventListener('input', () => {\n      if (/^#[0-9A-Fa-f]{6}$/.test(this.typeColorTextInput.value)) {\n        this.typeColorInput.value = this.typeColorTextInput.value;\n      }\n    });\n    \n    // Type name to ID auto-generation\n    this.typeNameInput.addEventListener('input', () => {\n      if (!this.currentEditingTypeId) {\n        const id = this.generateIdFromName(this.typeNameInput.value);\n        this.typeIdInput.value = id;\n      }\n    });\n\n    // Show/hide default angle field when type changes\n    this.typeTypeSelect.addEventListener('change', () => this.updateAngleVisibility());\n    \n    // Current Type events: selection-driven, no buttons\n    if (this.switchToNormalBtn) {\n      this.switchToNormalBtn.style.display = 'none';\n    }\n    if (this.switchToCustomBtn) {\n      this.switchToCustomBtn.style.display = 'none';\n    }\n    this.selectCustomTypeSelect.addEventListener('change', () => {\n      const typeId = this.selectCustomTypeSelect.value;\n      if (typeId) {\n        this.customAnnotationManager.setCustomAnnotationMode(typeId);\n      } else {\n        this.customAnnotationManager.setNormalMode();\n      }\n      this.updateModeDisplay();\n    });\n    \n    // Export/Import tab events\n    this.exportCustomDataBtn.addEventListener('click', () => this.exportCustomData());\n    this.selectImportFileBtn.addEventListener('click', () => this.importFileInput.click());\n    this.importFileInput.addEventListener('change', () => this.handleFileSelection());\n    this.importExecuteBtn.addEventListener('click', () => this.executeImport());\n    \n    // Listen to CustomAnnotationManager events\n    this.customAnnotationManager.addEventListener('onModeChange', (data) => {\n      this.updateModeDisplay();\n    });\n  }\n\n  /**\n   * 显示设置窗口\n   */\n  show() {\n    this.refreshAllData();\n    this.modal.style.display = 'flex';\n  }\n\n  /**\n   * 隐藏设置窗口\n   */\n  hide() {\n    this.modal.style.display = 'none';\n    this.hideTypeForm();\n  }\n\n  /**\n   * 切换选项卡\n   */\n  switchTab(tabName) {\n    this.currentTab = tabName;\n    \n    // Update tab buttons\n    this.tabButtons.forEach(button => {\n      if (button.dataset.tab === tabName) {\n        button.classList.add('active');\n      } else {\n        button.classList.remove('active');\n      }\n    });\n    \n    // Update tab contents\n    this.tabContents.forEach(content => {\n      if (content.id === `${tabName}-tab`) {\n        content.classList.add('active');\n      } else {\n        content.classList.remove('active');\n      }\n    });\n    \n    // Refresh data for the active tab\n    this.refreshTabData(tabName);\n  }\n\n  /**\n   * 刷新指定选项卡的数据\n   */\n  refreshTabData(tabName) {\n    switch (tabName) {\n      case 'manage-types':\n        this.refreshCustomTypesList();\n        break;\n      case 'current-mode':\n        this.updateModeDisplay();\n        this.refreshCustomTypeSelector();\n        break;\n      case 'export-import':\n        this.updateExportStats();\n        break;\n    }\n  }\n\n  /**\n   * 刷新所有数据\n   */\n  refreshAllData() {\n    this.refreshCustomTypesList();\n    this.updateModeDisplay();\n    this.refreshCustomTypeSelector();\n    this.updateExportStats();\n  }\n\n  /**\n   * 刷新自定义类型列表\n   */\n  refreshCustomTypesList() {\n    const customTypes = this.customAnnotationManager.getAllCustomTypes();\n    \n    if (customTypes.length === 0) {\n      this.customTypesList.innerHTML = `\n        <div id=\"no-custom-types\" class=\"placeholder-message\" style=\"text-align: center; color: #6b7280; padding: 40px;\">\n          <div style=\"font-size: 48px; margin-bottom: 16px;\">🎯</div>\n          <h4 style=\"margin: 0 0 8px 0;\">No Custom Types Created</h4>\n          <p style=\"margin: 0;\">Create custom annotation types for special keypoints and regions</p>\n        </div>\n      `;\n    } else {\n      const typesList = customTypes.map(type => this.createTypeItemHTML(type)).join('');\n      this.customTypesList.innerHTML = typesList;\n      \n      // Bind action buttons\n      this.bindTypeActionButtons();\n    }\n  }\n\n  /**\n   * 创建类型项HTML\n   */\n  createTypeItemHTML(type) {\n    const typeLabel = type.type === 'point' ? 'keypoint' : (type.type === 'region' ? 'rectangle' : type.type);\n    return `\n      <div class=\"custom-type-item\" data-type-id=\"${type.id}\">\n        <div class=\"custom-type-info\">\n          <div class=\"type-color-preview\" style=\"background-color: ${type.color};\"></div>\n          <div class=\"type-details\">\n            <div class=\"type-name\">${type.name}</div>\n            <div class=\"type-meta\">\n              <span class=\"type-badge ${type.type}\">${typeLabel}</span>\n              <span>ID: ${type.id}</span>\n              ${type.metadata?.category ? `<span>Category: ${type.metadata.category}</span>` : ''}\n            </div>\n          </div>\n        </div>\n        <div class=\"type-actions\">\n          <button class=\"type-action-btn edit\" data-action=\"edit\" data-type-id=\"${type.id}\">Edit</button>\n          <button class=\"type-action-btn delete\" data-action=\"delete\" data-type-id=\"${type.id}\">Delete</button>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * 绑定类型操作按钮事件\n   */\n  bindTypeActionButtons() {\n    const actionButtons = this.customTypesList.querySelectorAll('.type-action-btn');\n    actionButtons.forEach(button => {\n      button.addEventListener('click', () => {\n        const action = button.dataset.action;\n        const typeId = button.dataset.typeId;\n        \n        if (action === 'edit') {\n          this.editCustomType(typeId);\n        } else if (action === 'delete') {\n          this.deleteCustomType(typeId);\n        }\n      });\n    });\n  }\n\n  /**\n   * 显示添加类型表单\n   */\n  showAddTypeForm() {\n    this.currentEditingTypeId = null;\n    this.formTitle.textContent = 'Add New Type';\n    this.formSubmitText.textContent = 'Create Type';\n    this.typeForm.reset();\n    this.typeColorInput.value = '#ff6b35';\n    this.typeColorTextInput.value = '#ff6b35';\n    if (this.typeDefaultAngleInput) {\n      this.typeDefaultAngleInput.value = '';\n    }\n    this.typeFormSection.style.display = 'block';\n    this.updateAngleVisibility();\n  }\n\n  /**\n   * 编辑自定义类型\n   */\n  editCustomType(typeId) {\n    const type = this.customAnnotationManager.getCustomType(typeId);\n    if (!type) return;\n    \n    this.currentEditingTypeId = typeId;\n    this.formTitle.textContent = 'Edit Type';\n    this.formSubmitText.textContent = 'Update Type';\n    \n    // Fill form with existing data\n    this.typeNameInput.value = type.name;\n    this.typeIdInput.value = type.id;\n    this.typeTypeSelect.value = type.type;\n    this.typeColorInput.value = type.color;\n    this.typeColorTextInput.value = type.color;\n    this.typeDescriptionInput.value = type.description || '';\n    this.typeCategoryInput.value = type.metadata?.category || '';\n    if (this.typeDefaultAngleInput) {\n      const angle = type.metadata?.defaultAngle;\n      this.typeDefaultAngleInput.value = (angle ?? '').toString();\n    }\n    if (this.typeIsDirectionalInput) {\n      this.typeIsDirectionalInput.checked = !!type.metadata?.isDirectional;\n    }\n    \n    // Disable ID field for editing\n    this.typeIdInput.disabled = true;\n    \n    this.typeFormSection.style.display = 'block';\n    this.updateAngleVisibility();\n  }\n\n  /**\n   * 删除自定义类型\n   */\n  deleteCustomType(typeId) {\n    const type = this.customAnnotationManager.getCustomType(typeId);\n    if (!type) return;\n    \n    if (confirm(`Are you sure you want to delete the custom type \"${type.name}\"? This will also delete all annotations of this type.`)) {\n      this.customAnnotationManager.deleteCustomType(typeId);\n      this.refreshCustomTypesList();\n      this.refreshCustomTypeSelector();\n    }\n  }\n\n  /**\n   * 隐藏类型表单\n   */\n  hideTypeForm() {\n    this.typeFormSection.style.display = 'none';\n    this.currentEditingTypeId = null;\n    this.typeIdInput.disabled = false;\n  }\n\n  /**\n   * 处理表单提交\n   */\n  handleFormSubmit(e) {\n    e.preventDefault();\n    \n    const formData = new FormData(this.typeForm);\n    const typeData = {\n      id: formData.get('id'),\n      name: formData.get('name'),\n      type: formData.get('type'),\n      color: formData.get('color'),\n      description: formData.get('description'),\n      metadata: {\n        category: formData.get('category')\n      }\n    };\n\n    // Directional toggle\n    if (this.typeIsDirectionalInput && this.typeIsDirectionalInput.checked) {\n      typeData.metadata.isDirectional = true;\n    } else {\n      typeData.metadata.isDirectional = false;\n    }\n\n    // Attach default angle for keypoint types\n    if (typeData.type === 'point') {\n      const rawAngle = (this.typeDefaultAngleInput?.value || '').trim();\n      if (rawAngle !== '') {\n        const parsed = parseFloat(rawAngle);\n        if (!Number.isNaN(parsed)) {\n          typeData.metadata.defaultAngle = parsed;\n        }\n      }\n    }\n    \n    try {\n      if (this.currentEditingTypeId) {\n        // Update existing type\n        this.customAnnotationManager.updateCustomType(this.currentEditingTypeId, typeData);\n      } else {\n        // Create new type\n        this.customAnnotationManager.createCustomType(typeData);\n      }\n      \n      this.hideTypeForm();\n      this.refreshCustomTypesList();\n      this.refreshCustomTypeSelector();\n      \n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  }\n\n  /**\n   * 从名称生成ID\n   */\n  generateIdFromName(name) {\n    return name\n      .toLowerCase()\n      .replace(/[^a-z0-9\\u4e00-\\u9fff]/g, '-')\n      .replace(/-+/g, '-')\n      .replace(/^-|-$/g, '')\n      .substring(0, 50);\n  }\n\n  /**\n   * 更新模式显示\n   */\n  updateModeDisplay() {\n    const currentMode = this.customAnnotationManager.currentMode;\n    const selectedType = this.customAnnotationManager.getCurrentCustomType();\n    \n    this.currentModeValue.textContent = currentMode === 'custom' ? 'Type' : 'Off';\n    this.currentTypeValue.textContent = selectedType ? selectedType.name : 'None';\n    \n    // Update button states\n    if (this.switchToNormalBtn) {\n      this.switchToNormalBtn.disabled = currentMode === 'normal';\n    }\n  }\n\n  /**\n   * 刷新自定义类型选择器\n   */\n  refreshCustomTypeSelector() {\n    const customTypes = this.customAnnotationManager.getAllCustomTypes();\n    \n    this.selectCustomTypeSelect.innerHTML = '<option value=\"\">Choose a type...</option>';\n    \n    customTypes.forEach(type => {\n      // 将内置类型放到列表顶部\n      const option = document.createElement('option');\n      option.value = type.id;\n      const typeLabel = type.type === 'point' ? 'keypoint' : (type.type === 'region' ? 'rectangle' : type.type);\n      const prefix = type.metadata?.builtin ? '★ ' : '';\n      option.textContent = `${prefix}${type.name} (${typeLabel})`;\n      this.selectCustomTypeSelect.appendChild(option);\n    });\n\n    // 如果列表存在内置类型，将其移到第一项之后\n    const options = Array.from(this.selectCustomTypeSelect.options);\n    const builtinIdx = options.findIndex(opt => opt.value === 'builtin-regular-keypoint');\n    if (builtinIdx > 1) {\n      const opt = options[builtinIdx];\n      this.selectCustomTypeSelect.remove(builtinIdx);\n      this.selectCustomTypeSelect.add(opt, 1);\n    }\n    \n    if (this.switchToCustomBtn) {\n      this.switchToCustomBtn.disabled = true;\n    }\n  }\n\n  /**\n   * 切换到正常模式\n   */\n  switchToNormalMode() {\n    this.customAnnotationManager.setNormalMode();\n    this.updateModeDisplay();\n  }\n\n  /**\n   * 切换到自定义模式\n   */\n  switchToCustomMode() {\n    const selectedTypeId = this.selectCustomTypeSelect.value;\n    if (!selectedTypeId) return;\n    \n    try {\n      this.customAnnotationManager.setCustomAnnotationMode(selectedTypeId);\n      this.updateModeDisplay();\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  }\n\n  /**\n   * 根据选择的类型显示/隐藏默认角度字段\n   */\n  updateAngleVisibility() {\n    if (!this.typeDefaultAngleGroup) return;\n    const isPoint = this.typeTypeSelect.value === 'point';\n    this.typeDefaultAngleGroup.style.display = isPoint ? 'flex' : 'none';\n  }\n\n  /**\n   * 更新导出统计\n   */\n  updateExportStats() {\n    const customTypes = this.customAnnotationManager.getAllCustomTypes();\n    const stats = this.customAnnotationManager.getStats();\n    \n    this.exportTypesCount.textContent = customTypes.length;\n    this.exportAnnotationsCount.textContent = stats.totalAnnotations;\n    \n    // 🔧 NEW: 添加当前图像的标注统计\n    const appState = window.PlantAnnotationTool?.appState;\n    const currentImageId = appState?.currentImage?.id;\n    \n    if (currentImageId) {\n      const imageStats = this.customAnnotationManager.getAnnotationStats(currentImageId);\n      this.updateCurrentImageStats(imageStats);\n    }\n  }\n\n  /**\n   * 更新当前图像的标注统计显示\n   * @param {Object} imageStats - 图像统计信息\n   */\n  updateCurrentImageStats(imageStats) {\n    // 检查是否存在当前图像统计显示区域\n    let currentImageStatsDiv = document.getElementById('current-image-stats');\n    if (!currentImageStatsDiv) {\n      // 创建统计显示区域\n      currentImageStatsDiv = document.createElement('div');\n      currentImageStatsDiv.id = 'current-image-stats';\n      currentImageStatsDiv.style.cssText = `\n        margin-top: 16px;\n        padding: 12px;\n        background: #f8f9fa;\n        border-radius: 6px;\n        border: 1px solid #e5e7eb;\n      `;\n      \n      // 将其添加到导出统计后面\n      const exportSection = document.querySelector('.export-stats');\n      if (exportSection) {\n        exportSection.appendChild(currentImageStatsDiv);\n      }\n    }\n    \n    // 更新统计内容\n    let statsHtml = `\n      <div style=\"font-weight: 600; margin-bottom: 8px; color: #374151;\">\n        📊 Current Image Statistics\n      </div>\n      <div style=\"margin-bottom: 8px;\">\n        Total Annotations: <span style=\"font-weight: 600;\">${imageStats.total}</span>\n      </div>\n    `;\n    \n    if (imageStats.total > 0) {\n      statsHtml += `\n        <div style=\"margin-bottom: 8px;\">\n          Order Range: #${imageStats.orderRange.min} - #${imageStats.orderRange.max}\n        </div>\n      `;\n      \n      if (imageStats.gaps.length > 0) {\n        statsHtml += `\n          <div style=\"margin-bottom: 8px; color: #f59e0b;\">\n            ⚠️ Missing Numbers: ${imageStats.gaps.join(', ')}\n          </div>\n        `;\n      }\n      \n      // 按类型统计\n      const typeStats = Object.entries(imageStats.byType).map(([typeId, info]) => {\n        return `\n          <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 4px;\">\n            <div style=\"width: 12px; height: 12px; background: ${info.typeColor}; border-radius: 50%;\"></div>\n            <span>${info.typeName}: ${info.count}</span>\n          </div>\n        `;\n      }).join('');\n      \n      if (typeStats) {\n        statsHtml += `\n          <div style=\"margin-top: 12px;\">\n            <div style=\"font-weight: 600; margin-bottom: 6px; color: #374151;\">By Type:</div>\n            ${typeStats}\n          </div>\n        `;\n      }\n    }\n    \n    currentImageStatsDiv.innerHTML = statsHtml;\n  }\n\n  /**\n   * 导出自定义数据\n   */\n  exportCustomData() {\n    const exportData = this.customAnnotationManager.exportData();\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `custom_annotations_${new Date().toISOString().split('T')[0]}.json`;\n    \n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    \n    URL.revokeObjectURL(url);\n    \n    console.log('Custom annotation data exported');\n  }\n\n  /**\n   * 处理文件选择\n   */\n  handleFileSelection() {\n    const file = this.importFileInput.files[0];\n    if (file) {\n      this.importFileName.textContent = file.name;\n      this.importFileInfo.style.display = 'flex';\n      this.importResults.style.display = 'none';\n    } else {\n      this.importFileInfo.style.display = 'none';\n    }\n  }\n\n  /**\n   * 执行导入\n   */\n  async executeImport() {\n    const file = this.importFileInput.files[0];\n    if (!file) return;\n    \n    try {\n      const text = await file.text();\n      const importData = JSON.parse(text);\n      \n      const result = this.customAnnotationManager.importData(importData);\n      \n      if (result.success) {\n        this.importResultsContent.innerHTML = `\n          <div style=\"color: #059669;\">\n            ✅ Import successful!<br>\n            Imported ${importData.customTypes?.length || 0} custom types and ${importData.customAnnotations?.length || 0} annotations.\n          </div>\n        `;\n        \n        // Refresh all data\n        this.refreshAllData();\n      } else {\n        this.importResultsContent.innerHTML = `\n          <div style=\"color: #dc2626;\">\n            ❌ Import failed: ${result.error}\n          </div>\n        `;\n      }\n      \n      this.importResults.style.display = 'block';\n      \n    } catch (error) {\n      this.importResultsContent.innerHTML = `\n        <div style=\"color: #dc2626;\">\n          ❌ Error reading file: ${error.message}\n        </div>\n      `;\n      this.importResults.style.display = 'block';\n    }\n  }\n}","/**\n * 植物图像关键点标注工具 - 主应用入口\n * \n * 功能：\n * - 应用初始化和加载\n * - File System Access API 支持检测\n * - 基础UI交互绑定\n * - 浏览器兼容性检查\n */\n\nimport { FileSystemManager } from './core/FileSystemManager.js';\nimport { PlantDataManager } from './core/PlantDataManager.js';\nimport { AnnotationTool } from './core/AnnotationTool.js';\nimport { BranchPointPreviewManager } from './core/BranchPointPreviewManager.js';\nimport { NoteManager } from './core/NoteManager.js';\nimport { NoteUI } from './core/NoteUI.js';\nimport { AnnotationManager } from './core/AnnotationManager.js';\nimport { BulkLoadingPerformanceMonitor } from './utils/BulkLoadingPerformanceMonitor.js';\nimport RealTimeSyncManager from './core/RealTimeSyncManager.js';\nimport { CustomAnnotationToolbarController } from './core/CustomAnnotationToolbarController.js';\nimport { CustomAnnotationSettingsController } from './core/CustomAnnotationSettingsController.js';\n\n// 🔧 FIX: Global error handling to prevent uncaught promise errors\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('🚨 Unhandled Promise Rejection:', event.reason);\n  \n  // Check if it's the common Chrome extension message channel error\n  if (event.reason && typeof event.reason === 'object' && \n      event.reason.message && event.reason.message.includes('message channel closed')) {\n    console.warn('Chrome extension message channel error detected - this is usually harmless');\n    event.preventDefault(); // Prevent the error from being logged to console\n    return;\n  }\n  \n  // Log other unhandled rejections but don't prevent them\n  console.error('Unhandled promise rejection details:', {\n    reason: event.reason,\n    promise: event.promise,\n    stack: event.reason?.stack\n  });\n});\n\n// 🔧 FIX: Global error handler for uncaught exceptions\nwindow.addEventListener('error', (event) => {\n  console.error('🚨 Uncaught Error:', event.error);\n  \n  // Check for async listener errors specifically\n  if (event.error && event.error.message && \n      event.error.message.includes('asynchronous response')) {\n    console.warn('Async response listener error detected - likely Chrome extension related');\n    return;\n  }\n  \n  console.error('Global error details:', {\n    message: event.message,\n    filename: event.filename,\n    lineno: event.lineno,\n    colno: event.colno,\n    error: event.error\n  });\n});\n\n// DOM元素引用\nlet app = null;\nlet loadingScreen = null;\nlet mainApp = null;\nlet errorModal = null;\n\n// 管理器实例\nlet plantDataManager = null;\nlet annotationTool = null;\nlet branchPointPreviewManager = null;\nlet noteManager = null;\nlet noteUI = null;\nlet annotationManager = null;\nlet realTimeSyncManager = null;\nlet performanceMonitor = null;\nlet currentDataset = null;\nlet customAnnotationToolbarController = null;\nlet customAnnotationSettingsController = null;\n\n// 应用状态\nconst appState = {\n  isInitialized: false,\n  hasBackendAccess: false,\n  currentDatasetPath: null,\n  plants: [],\n  currentPlant: null,\n  currentImage: null,\n  annotations: new Map(),\n  // 🔧 NEW: Navigation state management to prevent race conditions\n  navigation: {\n    isNavigating: false,\n    lastNavigationTime: 0,\n    throttleDelay: 150 // Minimum time between navigation attempts (ms)\n  }\n};\n\n/**\n * 初始化自定义标注控制器\n */\nfunction initializeCustomAnnotationControllers() {\n  // 防止重复初始化\n  if (customAnnotationSettingsController || customAnnotationToolbarController) {\n    console.log('Custom annotation controllers already initialized, skipping...');\n    return;\n  }\n  \n  if (!annotationTool || !annotationTool.customAnnotationManager) {\n    console.warn('CustomAnnotationManager not ready, retrying...');\n    setTimeout(() => {\n      initializeCustomAnnotationControllers();\n    }, 200);\n    return;\n  }\n  \n  try {\n    // 创建设置控制器 - 传入正确的参数\n    customAnnotationSettingsController = new CustomAnnotationSettingsController(annotationTool.customAnnotationManager);\n    \n    // 创建工具栏控制器，传入正确的参数\n    customAnnotationToolbarController = new CustomAnnotationToolbarController(\n      annotationTool.customAnnotationManager,\n      customAnnotationSettingsController\n    );\n    \n    // 初始化工具栏控制器\n    customAnnotationToolbarController.initialize();\n    \n    // 全局引用\n    window.PlantAnnotationTool.customAnnotationToolbarController = customAnnotationToolbarController;\n    window.PlantAnnotationTool.customAnnotationSettingsController = customAnnotationSettingsController;\n    \n    console.log('自定义标注控制器初始化成功');\n  } catch (error) {\n    console.error('自定义标注控制器初始化失败:', error);\n  }\n}\n\n// 设置回调函数\nwindow.onCustomAnnotationSystemReady = initializeCustomAnnotationControllers;\n\n/**\n * 应用初始化\n */\nasync function initializeApp() {\n  console.log('初始化植物图像关键点标注工具...');\n  \n  try {\n    // 全屏加载进度管理\n    updateFullscreenLoading(10, 'Initializing managers...', 'Setting up core components');\n    \n    // 获取DOM元素引用\n    app = document.getElementById('app');\n    loadingScreen = document.getElementById('loading-screen');\n    mainApp = document.getElementById('main-app');\n    errorModal = document.getElementById('error-modal');\n    \n    updateFullscreenLoading(20, 'Creating data managers...', 'Initializing plant data manager');\n    \n    // 初始化管理器\n    plantDataManager = new PlantDataManager();\n\n    // 注意：不在这里初始化annotationStorage，等到选择数据集时再初始化\n    \n    updateFullscreenLoading(30, 'Setting up window objects...', 'Making managers globally available');\n    \n    // 立即设置window对象，确保其他模块可以访问\n    window.PlantAnnotationTool = {\n      appState,\n      plantDataManager,\n      annotationTool: null, // 稍后设置\n      showError,\n      hideError,\n      updateProgressInfo\n    };\n    \n    updateFullscreenLoading(40, 'Initializing annotation tool...', 'Setting up the annotation interface');\n    \n    // 初始化标注工具\n    try {\n      console.log('[调试] 在initializeApp开始时初始化AnnotationTool');\n      annotationTool = new AnnotationTool('annotation-canvas');\n      window.PlantAnnotationTool.annotationTool = annotationTool;\n    } catch (error) {\n      console.warn('AnnotationTool初始化延迟:', error.message);\n      // Canvas可能还没有准备好，稍后再试\n    }\n    \n    updateFullscreenLoading(50, 'Setting up preview manager...', 'Initializing branch point preview functionality');\n    \n    // 初始化分支点预览管理器\n    try {\n      branchPointPreviewManager = new BranchPointPreviewManager();\n      branchPointPreviewManager.setPlantDataManager(plantDataManager);\n      window.PlantAnnotationTool.branchPointPreviewManager = branchPointPreviewManager;\n    } catch (error) {\n      console.warn('BranchPointPreviewManager初始化延迟:', error.message);\n    }\n    \n    updateFullscreenLoading(52, 'Setting up custom annotation system...', 'Initializing custom annotation controllers');\n    \n    // 初始化自定义标注系统 - 需要等待异步加载完成\n    try {\n      // 等待annotation tool的自定义标注系统异步加载完成\n      setTimeout(() => {\n        initializeCustomAnnotationControllers();\n      }, 500); // 给动态导入一些时间来完成\n      \n      console.log('自定义标注系统初始化已启动');\n    } catch (error) {\n      console.warn('自定义标注系统初始化延迟:', error.message);\n    }\n    \n    updateFullscreenLoading(55, 'Setting up note system...', 'Initializing note management functionality');\n    \n    // 初始化笔记系统\n    try {\n      noteManager = new NoteManager(plantDataManager.fileSystemManager);\n      noteUI = new NoteUI(noteManager);\n      \n      // 启动自动清理\n      noteManager.startAutoCleanup();\n      \n      window.PlantAnnotationTool.noteManager = noteManager;\n      window.PlantAnnotationTool.noteUI = noteUI;\n      console.log('笔记系统初始化成功');\n    } catch (error) {\n      console.warn('NoteManager初始化延迟:', error.message);\n    }\n    \n    updateFullscreenLoading(60, 'Setting up annotation manager...', 'Initializing bulk annotation loading system');\n    \n    // 初始化标注管理器\n    try {\n      annotationManager = new AnnotationManager(plantDataManager.fileSystemManager);\n      \n      window.PlantAnnotationTool.annotationManager = annotationManager;\n      console.log('标注管理器初始化成功');\n    } catch (error) {\n      console.warn('AnnotationManager初始化延迟:', error.message);\n    }\n    \n    updateFullscreenLoading(63, 'Setting up real-time sync...', 'Initializing real-time synchronization manager');\n    \n    // 初始化实时同步管理器\n    try {\n      realTimeSyncManager = new RealTimeSyncManager(plantDataManager, plantDataManager.annotationStorage);\n      \n      window.PlantAnnotationTool.realTimeSyncManager = realTimeSyncManager;\n      console.log('🔄 实时同步管理器初始化成功');\n    } catch (error) {\n      console.warn('🔄 RealTimeSyncManager初始化延迟:', error.message);\n    }\n    \n    updateFullscreenLoading(65, 'Setting up performance monitoring...', 'Initializing bulk loading performance tracking');\n    \n    // 初始化性能监控器\n    try {\n      performanceMonitor = new BulkLoadingPerformanceMonitor();\n      \n      window.PlantAnnotationTool.performanceMonitor = performanceMonitor;\n      console.log('性能监控器初始化成功');\n    } catch (error) {\n      console.warn('性能监控器初始化延迟:', error.message);\n    }\n    \n    updateFullscreenLoading(70, 'Checking compatibility...', 'Verifying browser support and backend connection');\n    \n    // 检查浏览器兼容性\n    await checkBrowserCompatibility();\n    \n    updateFullscreenLoading(70, 'Setting up interface...', 'Binding event listeners and UI components');\n    \n    // 绑定基础事件监听器\n    bindEventListeners();\n    \n    updateFullscreenLoading(80, 'Finalizing setup...', 'Completing initialization process');\n    \n    // 模拟加载过程\n    await simulateLoading();\n    \n    // 显示主应用界面\n    showMainApp();\n    \n    // 确保标注工具已初始化（避免重复初始化）\n    if (!annotationTool) {\n      try {\n        console.log('[调试] 在initializeApp中初始化AnnotationTool');\n        annotationTool = new AnnotationTool('annotation-canvas');\n        window.PlantAnnotationTool.annotationTool = annotationTool;\n      } catch (error) {\n        console.error('无法初始化AnnotationTool:', error);\n      }\n    } else {\n      console.log('[调试] AnnotationTool已存在，跳过初始化');\n    }\n    \n    updateFullscreenLoading(90, 'Connecting to dataset...', 'Automatically connecting to plant dataset');\n    \n    // 自动连接数据集\n    setTimeout(async () => {\n      try {\n        await autoConnectDataset();\n      } catch (error) {\n        console.error('自动连接数据集失败:', error);\n        hideFullscreenLoading();\n        showError('自动连接数据集失败', error.message);\n      }\n    }, 500); // 给用户看到最后的加载进度\n    \n    appState.isInitialized = true;\n    console.log('应用初始化完成');\n    \n  } catch (error) {\n    console.error('应用初始化失败:', error);\n    hideFullscreenLoading();\n    showError('应用初始化失败', error.message);\n  }\n}\n\n/**\n * 检查浏览器兼容性\n */\nasync function checkBrowserCompatibility() {\n  console.log('检查浏览器兼容性...');\n  \n  // 检查后端服务连接\n  try {\n    const isConnected = await plantDataManager.fileSystemManager.checkConnection();\n    if (isConnected) {\n      await plantDataManager.fileSystemManager.initialize();\n      appState.hasBackendAccess = true;\n      console.log('✅ 后端服务连接成功');\n    } else {\n      throw new Error('后端服务不可用');\n    }\n  } catch (error) {\n    appState.hasBackendAccess = false;\n    const errorMessage = error.message.includes('fetch') || error.message.includes('ERR_CONNECTION_REFUSED') ?\n      '后端服务未启动，请运行 ./start-backend.sh 启动服务器' :\n      error.message;\n    console.warn('❌ 后端服务连接失败:', errorMessage);\n  }\n  \n  // 检查其他必要的API\n  const requiredAPIs = [\n    { name: 'Canvas API', check: () => !!document.createElement('canvas').getContext },\n    { name: 'IndexedDB', check: () => !!window.indexedDB },\n    { name: 'Web Workers', check: () => !!window.Worker },\n    { name: 'Intersection Observer', check: () => !!window.IntersectionObserver }\n  ];\n  \n  const unsupportedAPIs = requiredAPIs.filter(api => !api.check());\n  \n  if (unsupportedAPIs.length > 0) {\n    const missingAPIs = unsupportedAPIs.map(api => api.name).join(', ');\n    throw new Error(`浏览器不支持以下必要API: ${missingAPIs}`);\n  }\n  \n  console.log('✅ 浏览器兼容性检查通过');\n}\n\n/**\n * 绑定事件监听器\n */\nfunction bindEventListeners() {\n  console.log('绑定事件监听器...');\n  \n  // 选择数据集按钮\n  const selectDatasetBtn = document.getElementById('select-dataset-btn');\n  if (selectDatasetBtn) {\n    selectDatasetBtn.addEventListener('click', handleSelectDataset);\n  }\n  \n  // 错误模态框关闭按钮\n  const errorCloseBtn = document.getElementById('error-close-btn');\n  if (errorCloseBtn) {\n    errorCloseBtn.addEventListener('click', hideError);\n  }\n  \n  // 视图控制按钮\n  const resetZoomBtn = document.getElementById('reset-zoom-btn');\n  if (resetZoomBtn) {\n    resetZoomBtn.addEventListener('click', () => {\n      if (annotationTool) {\n        annotationTool.resetView();\n      }\n    });\n  }\n  \n  const fitScreenBtn = document.getElementById('fit-screen-btn');\n  if (fitScreenBtn) {\n    fitScreenBtn.addEventListener('click', () => {\n      if (annotationTool) {\n        annotationTool.fitToScreen();\n      }\n    });\n  }\n  \n  // 视角选择按钮事件委托\n  document.addEventListener('click', (event) => {\n    if (event.target.classList.contains('btn-view-angle')) {\n      const viewAngle = event.target.dataset.viewAngle;\n      handleViewAngleSelect(viewAngle);\n    }\n  });\n  \n  // 标注控制按钮\n  const undoBtn = document.getElementById('undo-btn');\n  if (undoBtn) {\n    undoBtn.addEventListener('click', () => {\n      if (annotationTool) {\n        annotationTool.undo();\n      }\n    });\n  }\n  \n  const redoBtn = document.getElementById('redo-btn');\n  if (redoBtn) {\n    redoBtn.addEventListener('click', () => {\n      if (annotationTool) {\n        annotationTool.redo();\n      }\n    });\n  }\n  \n  const clearAllBtn = document.getElementById('clear-all-btn');\n  if (clearAllBtn) {\n    clearAllBtn.addEventListener('click', handleClearAllAnnotations);\n  }\n  \n  // 🔧 NEW: SIFT匹配按钮\n  const siftMatchBtn = document.getElementById('sift-match-btn');\n  if (siftMatchBtn) {\n    siftMatchBtn.addEventListener('click', handleSiftMatch);\n  }\n  \n  // 分支点预览切换按钮\n  const togglePreviewBtn = document.getElementById('toggle-preview-btn');\n  if (togglePreviewBtn) {\n    togglePreviewBtn.addEventListener('click', () => {\n      if (branchPointPreviewManager) {\n        branchPointPreviewManager.toggleVisibility();\n      }\n    });\n  }\n\n\n  \n  // 自动化方向选择按钮\n  const autoDirectionBtn = document.getElementById('auto-direction-btn');\n  if (autoDirectionBtn) {\n    autoDirectionBtn.addEventListener('click', handleAutoDirectionSelection);\n  }\n\n  // 🔧 NEW: Auto Direction Mode Selector (Longitudinal vs Cross-Sectional)\n  const autoDirectionModeSelector = document.getElementById('auto-direction-mode-selector');\n  if (autoDirectionModeSelector) {\n    autoDirectionModeSelector.addEventListener('change', handleAutoDirectionModeChange);\n  }\n\n  // 锁定倍数控件\n  const zoomLockCheckbox = document.getElementById('zoom-lock-checkbox');\n  const zoomLockValue = document.getElementById('zoom-lock-value');\n  if (zoomLockCheckbox && zoomLockValue) {\n    zoomLockCheckbox.addEventListener('change', handleZoomLockChange);\n    zoomLockValue.addEventListener('change', handleZoomLockValueChange);\n  }\n\n  // 自动切换到预期位置控件\n  const autoMoveCheckbox = document.getElementById('auto-move-checkbox');\n  if (autoMoveCheckbox) {\n    autoMoveCheckbox.addEventListener('change', handleAutoMoveChange);\n  }\n\n  // 🔄 实时变更同步控件\n  const realTimeChangeCheckbox = document.getElementById('real-time-change-checkbox');\n  if (realTimeChangeCheckbox) {\n    realTimeChangeCheckbox.addEventListener('change', handleRealTimeChangeChange);\n  }\n\n  // 跳过植株模态框事件\n  const skipModalClose = document.getElementById('skip-modal-close');\n  const skipCancelBtn = document.getElementById('skip-cancel-btn');\n  const skipConfirmBtn = document.getElementById('skip-confirm-btn');\n\n  if (skipModalClose) {\n    skipModalClose.addEventListener('click', hideSkipPlantModal);\n  }\n\n  if (skipCancelBtn) {\n    skipCancelBtn.addEventListener('click', hideSkipPlantModal);\n  }\n\n  if (skipConfirmBtn) {\n    skipConfirmBtn.addEventListener('click', confirmSkipPlant);\n  }\n\n  // 模态框背景点击关闭\n  const skipModal = document.getElementById('skip-plant-modal');\n  if (skipModal) {\n    skipModal.addEventListener('click', (e) => {\n      if (e.target === skipModal) {\n        hideSkipPlantModal();\n      }\n    });\n  }\n\n  // 状态过滤器\n  const statusFilter = document.getElementById('status-filter');\n  if (statusFilter) {\n    statusFilter.addEventListener('change', handleStatusFilterChange);\n  }\n\n  // 植株搜索\n  const plantSearch = document.getElementById('plant-search');\n  if (plantSearch) {\n    plantSearch.addEventListener('input', handlePlantSearchInput);\n  }\n  \n  // 标注操作按钮\n  const saveAnnotationBtn = document.getElementById('save-annotation-btn');\n  if (saveAnnotationBtn) {\n    saveAnnotationBtn.addEventListener('click', handleSaveAnnotation);\n  }\n  \n  // 保存标注模态框事件\n  const saveAnnotationCancelBtn = document.getElementById('save-annotation-cancel-btn');\n  if (saveAnnotationCancelBtn) {\n    saveAnnotationCancelBtn.addEventListener('click', hideSaveAnnotationModal);\n  }\n  \n  const saveAnnotationConfirmBtn = document.getElementById('save-annotation-confirm-btn');\n  if (saveAnnotationConfirmBtn) {\n    saveAnnotationConfirmBtn.addEventListener('click', () => {\n      const selectedMode = document.querySelector('input[name=\"save-mode\"]:checked');\n      if (selectedMode) {\n        const isManualAdjustment = selectedMode.value === 'current-only';\n        performSaveAnnotation(isManualAdjustment);\n      }\n    });\n  }\n  \n  const completePlantBtn = document.getElementById('complete-plant-btn');\n  if (completePlantBtn) {\n    completePlantBtn.addEventListener('click', handleCompletePlant);\n  }\n  \n  const exportDataBtn = document.getElementById('export-data-btn');\n  if (exportDataBtn) {\n    exportDataBtn.addEventListener('click', handleExportData);\n  }\n  \n  // 🔧 NEW: Delete Plant Annotations button\n  const deletePlantAnnotationsBtn = document.getElementById('delete-plant-annotations-btn');\n  if (deletePlantAnnotationsBtn) {\n    deletePlantAnnotationsBtn.addEventListener('click', handleDeletePlantAnnotations);\n  }\n  \n  // 🔧 NEW: Delete Plant Annotations modal events\n  const deleteModalClose = document.getElementById('delete-modal-close');\n  const deleteCancelBtn = document.getElementById('delete-cancel-btn');\n  const deleteConfirmBtn = document.getElementById('delete-confirm-btn');\n  const deleteConfirmationCheckbox = document.getElementById('delete-confirmation-checkbox');\n  \n  if (deleteModalClose) {\n    deleteModalClose.addEventListener('click', hideDeletePlantAnnotationsModal);\n  }\n  \n  if (deleteCancelBtn) {\n    deleteCancelBtn.addEventListener('click', hideDeletePlantAnnotationsModal);\n  }\n  \n  if (deleteConfirmBtn) {\n    deleteConfirmBtn.addEventListener('click', confirmDeletePlantAnnotations);\n  }\n  \n  if (deleteConfirmationCheckbox) {\n    deleteConfirmationCheckbox.addEventListener('change', handleDeleteConfirmationChange);\n  }\n  \n  // 🔧 NEW: Delete modal background click close\n  const deleteModal = document.getElementById('delete-plant-annotations-modal');\n  if (deleteModal) {\n    deleteModal.addEventListener('click', (e) => {\n      if (e.target === deleteModal) {\n        hideDeletePlantAnnotationsModal();\n      }\n    });\n  }\n  \n  // 键盘快捷键\n  document.addEventListener('keydown', handleKeyboardShortcuts);\n  \n  // 防止右键菜单（在标注区域）\n  const canvasContainer = document.getElementById('canvas-container');\n  if (canvasContainer) {\n    canvasContainer.addEventListener('contextmenu', (e) => e.preventDefault());\n  }\n  \n  // 植物更新事件监听\n  document.addEventListener('plantUpdated', handlePlantUpdated);\n  \n  // 模态框背景点击关闭事件\n  const errorModal = document.getElementById('error-modal');\n  if (errorModal) {\n    errorModal.addEventListener('click', (e) => {\n      if (e.target === errorModal) {\n        hideError();\n      }\n    });\n  }\n  \n  const saveAnnotationModal = document.getElementById('save-annotation-modal');\n  if (saveAnnotationModal) {\n    saveAnnotationModal.addEventListener('click', (e) => {\n      if (e.target === saveAnnotationModal) {\n        hideSaveAnnotationModal();\n      }\n    });\n  }\n  \n  // 🔧 NEW: Unskip Plant Modal Events\n  const unskipModalClose = document.getElementById('unskip-modal-close');\n  const unskipCancelBtn = document.getElementById('unskip-cancel-btn');\n  const unskipConfirmBtn = document.getElementById('unskip-confirm-btn');\n  \n  if (unskipModalClose) {\n    unskipModalClose.addEventListener('click', hideUnskipPlantModal);\n  }\n  \n  if (unskipCancelBtn) {\n    unskipCancelBtn.addEventListener('click', hideUnskipPlantModal);\n  }\n  \n  if (unskipConfirmBtn) {\n    unskipConfirmBtn.addEventListener('click', confirmUnskipPlant);\n  }\n  \n  // 🔧 NEW: Uncomplete Plant Modal Events\n  const uncompleteModalClose = document.getElementById('uncomplete-modal-close');\n  const uncompleteCancelBtn = document.getElementById('uncomplete-cancel-btn');\n  const uncompleteConfirmBtn = document.getElementById('uncomplete-confirm-btn');\n  \n  if (uncompleteModalClose) {\n    uncompleteModalClose.addEventListener('click', hideUncompletePlantModal);\n  }\n  \n  if (uncompleteCancelBtn) {\n    uncompleteCancelBtn.addEventListener('click', hideUncompletePlantModal);\n  }\n  \n  if (uncompleteConfirmBtn) {\n    uncompleteConfirmBtn.addEventListener('click', confirmUncompletePlant);\n  }\n  \n  // 🔧 NEW: Modal background click close events\n  const unskipModal = document.getElementById('unskip-plant-modal');\n  if (unskipModal) {\n    unskipModal.addEventListener('click', (e) => {\n      if (e.target === unskipModal) {\n        hideUnskipPlantModal();\n      }\n    });\n  }\n  \n  const uncompleteModal = document.getElementById('uncomplete-plant-modal');\n  if (uncompleteModal) {\n    uncompleteModal.addEventListener('click', (e) => {\n      if (e.target === uncompleteModal) {\n        hideUncompletePlantModal();\n      }\n    });\n  }\n  \n  console.log('✅ 事件监听器绑定完成');\n}\n\n/**\n * 处理数据集选择\n */\nasync function handleSelectDataset() {\n  console.log('开始连接数据集...');\n  \n  // 确保plantDataManager已初始化\n  if (!plantDataManager) {\n    console.error('PlantDataManager未初始化');\n    showError('系统错误', '数据管理器未正确初始化，请刷新页面重试');\n    return;\n  }\n  \n  try {\n    // 显示加载状态\n    const selectBtn = document.getElementById('select-dataset-btn');\n    const originalText = selectBtn.textContent;\n    selectBtn.textContent = 'Connecting...';\n    selectBtn.disabled = true;\n    \n    // 检查后端连接\n    updateProgressInfo('Connecting to backend...');\n    const datasetInfo = await plantDataManager.fileSystemManager.getDatasetInfo();\n    \n    if (!datasetInfo) {\n      throw new Error('无法连接到后端服务，请确保后端服务已启动');\n    }\n\n    console.log('连接的数据集:', datasetInfo.datasetPath);\n\n    // 验证目录结构\n    await validateDatasetStructure();\n\n    // 使用PlantDataManager加载数据集\n    updateProgressInfo('Loading plants...');\n    const plants = await plantDataManager.loadDataset();\n    \n    // 更新应用状态\n    appState.currentDatasetPath = datasetInfo.datasetPath;\n    appState.plants = plants;\n    currentDataset = {\n      path: datasetInfo.datasetPath,\n      name: 'Brassica napus dataset',\n      plantCount: plants.length\n    };\n    \n    // 更新UI\n    updateProgressInfo(`Loaded ${plants.length} plants`);\n    selectBtn.textContent = 'Reconnect Dataset';\n    \n    // 显示植物列表\n    renderPlantList(plants);\n    \n    // 初始更新统计显示\n    updateProgressStats();\n    \n    console.log(`成功加载数据集: ${plants.length} 个植物`);\n    \n  } catch (error) {\n    console.error('选择数据集失败:', error);\n    \n    showError('连接数据集失败', error.message);\n  } finally {\n    // 恢复按钮状态\n    const selectBtn = document.getElementById('select-dataset-btn');\n    selectBtn.textContent = appState.currentDatasetPath ? '重新连接数据集' : '连接数据集';\n    selectBtn.disabled = false;\n  }\n}\n\n/**\n * 验证数据集目录结构\n */\nasync function validateDatasetStructure() {\n  console.log('验证数据集结构...');\n  \n  try {\n    // 通过HTTP后端获取植物文件夹列表\n    const plantDirectories = await plantDataManager.fileSystemManager.traversePlantDirectories();\n    \n    if (!plantDirectories || plantDirectories.length === 0) {\n      throw new Error('数据集中未找到植物文件夹（以BR开头的文件夹）');\n    }\n    \n    // 验证至少一个植物文件夹的结构\n    const firstPlant = plantDirectories[0];\n    const imagesByView = await plantDataManager.fileSystemManager.readPlantImages(firstPlant.id);\n    \n    if (!imagesByView || Object.keys(imagesByView).length === 0) {\n      throw new Error(`植物文件夹 ${firstPlant.id} 中未找到有效的视角目录`);\n    }\n    \n    // 检查是否有sv-000视角\n    if (!imagesByView['sv-000'] || imagesByView['sv-000'].length === 0) {\n      throw new Error(`植物文件夹 ${firstPlant.id} 中未找到 sv-000 视角图像`);\n    }\n    \n    console.log(`✅ 数据集结构验证通过，发现 ${plantDirectories.length} 个植物文件夹`);\n    \n  } catch (error) {\n    console.error('数据集结构验证失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 更新统计进度条显示 - 🔧 ENHANCED: Plant-based progress instead of image-based\n */\nfunction updateProgressStats() {\n  if (!plantDataManager) {\n    hideProgressStats();\n    return;\n  }\n\n  const progressStats = plantDataManager.getProgress();\n\n  // 获取DOM元素\n  const progressStatsElement = document.getElementById('progress-stats');\n  const completedImagesCount = document.getElementById('completed-images-count');\n  const totalImagesCount = document.getElementById('total-images-count');\n  const completionPercentage = document.getElementById('completion-percentage');\n  const completedPlantsCount = document.getElementById('completed-plants-count');\n  const totalPlantsCount = document.getElementById('total-plants-count');\n  const progressBarFill = document.getElementById('progress-bar-fill');\n\n  if (!progressStatsElement) return;\n\n  // 显示统计区域\n  progressStatsElement.style.display = 'block';\n\n  // 🔧 FIX: Change from image count to plant count display\n  // Update completed plants count in the main progress display\n  if (completedImagesCount) {\n    const totalCompleted = progressStats.totalCompleted || (progressStats.completed + progressStats.skipped);\n    completedImagesCount.textContent = totalCompleted; // Now shows completed plants instead of images\n  }\n  \n  if (totalImagesCount) {\n    totalImagesCount.textContent = progressStats.total; // Now shows total plants instead of images\n  }\n\n  // 更新完成百分比（基于植株完成率）\n  if (completionPercentage) {\n    completionPercentage.textContent = progressStats.completionRate + '%';\n  }\n\n  // 更新植株数量详细信息（显示总完成数，包括跳过的）\n  if (completedPlantsCount) {\n    const totalCompleted = progressStats.totalCompleted || (progressStats.completed + progressStats.skipped);\n    const skippedText = progressStats.skipped > 0 ? ` (${progressStats.skipped} skipped)` : '';\n    completedPlantsCount.textContent = `${totalCompleted} plants finished ${skippedText}`;\n  }\n\n  if (totalPlantsCount) {\n    totalPlantsCount.textContent = `Total ${progressStats.total} plants`;\n  }\n\n  // 更新进度条（使用植株完成率，包含跳过的植株）\n  if (progressBarFill) {\n    const percentage = parseFloat(progressStats.completionRate) || 0;\n    progressBarFill.style.width = percentage + '%';\n    \n    // 根据完成度改变进度条颜色\n    if (percentage >= 100) {\n      progressBarFill.style.background = 'linear-gradient(90deg, #059669 0%, #047857 100%)';\n    } else if (percentage >= 75) {\n      progressBarFill.style.background = 'linear-gradient(90deg, #10b981 0%, #059669 100%)';\n    } else if (percentage >= 50) {\n      progressBarFill.style.background = 'linear-gradient(90deg, #34d399 0%, #10b981 100%)';\n    } else if (percentage >= 25) {\n      progressBarFill.style.background = 'linear-gradient(90deg, #fbbf24 0%, #f59e0b 100%)';\n    } else {\n      progressBarFill.style.background = 'linear-gradient(90deg, #f87171 0%, #ef4444 100%)';\n    }\n  }\n\n  // 🔧 FIX: Update console log to show plant-based progress\n  const totalCompleted = progressStats.totalCompleted || (progressStats.completed + progressStats.skipped);\n  console.log(`统计更新: ${totalCompleted}/${progressStats.total} 植株 (${progressStats.completionRate}%)`);\n}\n\n/**\n * 隐藏统计进度条\n */\nfunction hideProgressStats() {\n  const progressStatsElement = document.getElementById('progress-stats');\n  if (progressStatsElement) {\n    progressStatsElement.style.display = 'none';\n  }\n}\n\n/**\n * 渲染植物列表\n */\nfunction renderPlantList(plants) {\n  const container = document.getElementById('plant-list-container');\n  if (!container) return;\n  \n  // 清空现有内容\n  container.innerHTML = '';\n  \n  if (plants.length === 0) {\n    container.innerHTML = '<div class=\"no-data\">no data</div>';\n    return;\n  }\n  \n  // 创建植物列表项\n  plants.forEach(plant => {\n    const plantItem = createPlantListItem(plant);\n    container.appendChild(plantItem);\n  });\n  \n  // 更新统计显示\n  updateProgressStats();\n  \n  // 🔧 OPTIMIZED: Auto-load note badges immediately upon plant list render\n  const updateBadgesInstantly = async () => {\n    console.log('[Badge Update] Starting automatic badge loading for all plants');\n    \n    // Wait for note system with more aggressive retry for better UX\n    let retryCount = 0;\n    const maxRetries = 15; // Increased retries\n    const retryDelay = 300; // Reduced delay for faster startup\n    \n    while (retryCount < maxRetries) {\n      if (window.PlantAnnotationTool?.noteManager && window.PlantAnnotationTool?.noteUI) {\n        try {\n          console.log('[Badge Update] Note system available, starting bulk badge update');\n          const startTime = performance.now();\n          \n          // Try to use pre-cached bulk data first (fastest option)\n          let bulkData = window.PlantAnnotationTool.noteManager.bulkNoteData;\n          \n          if (!bulkData) {\n            console.log('[Badge Update] No pre-cached data, fetching bulk notes for instant display...');\n            try {\n              bulkData = await window.PlantAnnotationTool.noteManager.getAllNotesInBulk();\n              console.log('[Badge Update] Bulk data fetched successfully');\n            } catch (bulkError) {\n              console.warn('[Badge Update] Bulk API failed, using optimized individual requests:', bulkError.message);\n              // Fall back to individual badge updates but with optimized approach\n              await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges();\n              const endTime = performance.now();\n              console.log(`[Badge Update] Individual badge update completed in ${(endTime - startTime).toFixed(2)}ms`);\n              return;\n            }\n          }\n          \n          if (bulkData) {\n            // Use instant bulk badge update\n            await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadgesFromBulk(bulkData);\n            const endTime = performance.now();\n            console.log(`[Badge Update] INSTANT bulk badge update completed in ${(endTime - startTime).toFixed(2)}ms`);\n            console.log('[Badge Update] ✅ All plant note badges are now visible immediately');\n          } else {\n            // Ultimate fallback to individual updates\n            console.log('[Badge Update] Using fallback individual badge updates');\n            await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges();\n            const endTime = performance.now();\n            console.log(`[Badge Update] Fallback badge update completed in ${(endTime - startTime).toFixed(2)}ms`);\n          }\n          \n          return; // Success, exit retry loop\n        } catch (error) {\n          console.error('[Badge Update] Badge update failed:', error);\n          retryCount++;\n          if (retryCount >= maxRetries) {\n            console.error('[Badge Update] Max retries reached, badge update failed permanently');\n            return;\n          }\n        }\n      } else {\n        console.log(`[Badge Update] Note system not ready, retry ${retryCount + 1}/${maxRetries}`);\n        retryCount++;\n      }\n      \n      // Wait before next retry\n      await new Promise(resolve => setTimeout(resolve, retryDelay));\n    }\n    \n    console.warn('[Badge Update] ❌ Note system initialization timeout, badges will load later');\n  };\n  \n  // Start badge update immediately, but don't block plant list rendering\n  setTimeout(updateBadgesInstantly, 100);\n  \n  console.log(`渲染了 ${plants.length} 个植物列表项`);\n}\n\n/**\n * Create plant list item with note indicators\n */\nfunction createPlantListItem(plant) {\n  const item = document.createElement('div');\n  item.className = 'plant-item';\n  item.dataset.plantId = plant.id;\n  \n  // Status icon\n  const statusIcon = getStatusIcon(plant.status);\n  \n  // Image count info\n  const imageCountText = plant.imageCount > 0 ? \n    `${plant.imageCount} images` : \n    (plant.hasImages ? 'loading...' : 'no image');\n  \n  // View angle info\n  const viewAnglesText = plant.viewAngles.length > 0 ? \n    `view: ${plant.viewAngles.join(', ')}` :\n    'view: checking...';\n    \n  // Selected view info\n  const selectedViewText = plant.selectedViewAngle ? \n    `Chosen: ${plant.selectedViewAngle}` : '';\n  \n  // 🔧 NEW: State-based button system for skip/unskip and complete/uncomplete\n  const isSkipped = plant.status === 'skipped';\n  const isCompleted = plant.status === 'completed';\n  \n  // 🔧 FIX: Ensure CSS classes reflect current state\n  if (isSkipped) {\n    item.classList.add('skipped');\n  } else {\n    item.classList.remove('skipped');\n  }\n\n  // Skip reason display\n  const skipReasonHtml = isSkipped && plant.skipReason ?\n    `<div class=\"skip-reason\">skip reason: ${plant.skipReason}</div>` : '';\n\n  // 🔧 NEW: Dynamic button generation based on plant state\n  let stateButtonsHtml = '';\n  \n  // Only Skip/Unskip button - Complete functionality is handled by main interface\n  if (isSkipped) {\n    stateButtonsHtml += `<button class=\"skip-button unskip-variant\" onclick=\"handleUnskipPlant('${plant.id}', event)\">Unskip</button>`;\n  } else {\n    stateButtonsHtml += `<button class=\"skip-button\" onclick=\"showSkipPlantModal('${plant.id}', event)\">Skip</button>`;\n  }\n\n  item.innerHTML = `\n    <div class=\"plant-item-content\">\n      <div class=\"plant-header\">\n        <div class=\"plant-status\">${statusIcon}</div>\n        <div class=\"plant-id\">${plant.id}</div>\n        <div class=\"right-box\">\n          <div class=\"plant-note-badge\" id=\"note-badge-${plant.id}\" style=\"display: none;\"></div>\n          <div class=\"state-buttons\">${stateButtonsHtml}</div>\n        </div>\n      </div>\n      <div class=\"plant-info\">\n        <div class=\"image-count\">${imageCountText}</div>\n        <div class=\"status-text\">${getStatusText(plant.status)}</div>\n      </div>\n      <div class=\"plant-view-info\">\n        <div class=\"view-angles\">${viewAnglesText}</div>\n        ${selectedViewText ? `<div class=\"selected-view\">${selectedViewText}</div>` : ''}\n      </div>\n      ${skipReasonHtml}\n    </div>\n  `;\n  \n  // Click event\n  item.addEventListener('click', () => handlePlantSelect(plant));\n  \n  // Note: Badge updates are handled by NoteUI.updateAllPlantNoteBadges()\n  // No individual loading needed here to avoid race conditions\n  \n  return item;\n}\n\n/**\n * Load and display image note count with refresh detection\n */\nasync function loadImageNoteCount(plantId, imageId) {\n  try {\n    // Check if note system is available\n    if (!window.PlantAnnotationTool || !window.PlantAnnotationTool.noteManager) {\n      console.warn(`[Thumbnail] Note system not available for ${imageId}`);\n      return;\n    }\n    \n    const noteManager = window.PlantAnnotationTool.noteManager;\n    console.log(`[Thumbnail] Loading note count for ${plantId}/${imageId}`);\n    \n    // 🔧 FIX: Check if this is a forced refresh (no cache) scenario\n    const isDirectRefresh = arguments[2]; // Hidden parameter for direct refresh flag\n    let notes;\n    \n    if (isDirectRefresh) {\n      // Force direct API call without cache\n      console.log(`[Thumbnail] Using direct API for forced refresh of ${imageId}`);\n      try {\n        const response = await fetch(`${noteManager.baseUrl}/notes/image/${plantId}/${imageId}`);\n        if (response.ok) {\n          const result = await response.json();\n          notes = result.success ? (result.data || []) : [];\n        } else {\n          notes = [];\n        }\n      } catch (directError) {\n        console.warn(`[Thumbnail] Direct API failed, falling back to cache for ${imageId}:`, directError);\n        notes = await noteManager.getImageNotes(plantId, imageId);\n      }\n    } else {\n      // Normal cached operation\n      notes = await noteManager.getImageNotes(plantId, imageId);\n    }\n    \n    const noteCount = notes ? notes.length : 0;\n    console.log(`[Thumbnail] Found ${noteCount} notes for ${imageId}`);\n    \n    const badge = document.getElementById(`image-note-badge-${imageId}`);\n    if (badge) {\n      console.log(`[Thumbnail] Badge element found for ${imageId}`);\n      if (noteCount > 0) {\n        badge.innerHTML = `<span class=\"image-note-count\">📝 ${noteCount}</span>`;\n        badge.style.display = 'inline-block';\n        badge.className = 'image-note-badge';\n        console.log(`[Thumbnail] Badge updated with ${noteCount} notes for ${imageId}`);\n      } else {\n        // 🔧 FIX: Clear badge when no notes exist\n        badge.innerHTML = '';\n        badge.style.display = 'none';\n        console.log(`[Thumbnail] Badge cleared for ${imageId} (no notes)`);\n      }\n      console.log(`[Thumbnail] Badge updated for ${imageId}: ${noteCount} notes`);\n    } else {\n      console.error(`[Thumbnail] Badge element NOT FOUND for ${imageId} (ID: image-note-badge-${imageId})`);\n    }\n  } catch (error) {\n    // Silently handle errors - note loading is not critical for UI\n    console.error(`[Thumbnail] Note loading failed for image ${imageId}:`, error.message);\n    \n    // 🔧 FIX: Clear badge on error to prevent stale data\n    const badge = document.getElementById(`image-note-badge-${imageId}`);\n    if (badge) {\n      badge.innerHTML = '';\n      badge.style.display = 'none';\n      console.log(`[Thumbnail] Badge cleared on error for ${imageId}`);\n    }\n  }\n}\n\n// 🔧 FIX: 将加载图像笔记计数函数暴露到全局，供NoteUI调用\nwindow.loadImageNoteCount = loadImageNoteCount;\n\n/**\n * 获取状态图标\n */\nfunction getStatusIcon(status) {\n  switch (status) {\n    case 'completed':\n      return '✅';\n    case 'in-progress':\n      return '🔄';\n    case 'skipped':\n      return '⏭️';\n    case 'pending':\n    default:\n      return '⭕';\n  }\n}\n\n/**\n * 获取状态文本\n */\nfunction getStatusText(status) {\n  switch (status) {\n    case 'completed':\n      return 'Finished';\n    case 'in-progress':\n      return 'In progress';\n    case 'skipped':\n      return 'Skipped';\n    case 'pending':\n    default:\n      return 'Not started';\n  }\n}\n\n/**\n * 初始化工作区到空状态\n */\nfunction initializeEmptyWorkspace() {\n  console.log('初始化空工作区状态');\n  \n  // 清空应用状态\n  appState.currentPlant = null;\n  appState.currentImage = null;\n  \n  // 清空工作区\n  clearWorkspaceState();\n  \n  // 🔧 FIX: Ensure branch point preview is reset in empty workspace state  \n  if (branchPointPreviewManager) {\n    branchPointPreviewManager.reset();\n    console.log('[EmptyWorkspace] Branch point preview reset - entering empty state');\n  }\n  \n  // 隐藏视角选择区域\n  const viewAngleSection = document.getElementById('view-angle-section');\n  if (viewAngleSection) {\n    viewAngleSection.style.display = 'none';\n  }\n  \n  // 🔧 FIX: Clear image note button badge when initializing empty workspace\n  if (window.PlantAnnotationTool?.noteUI) {\n    window.PlantAnnotationTool.noteUI.updateImageNoteButton(null, null);\n    console.log('[EmptyWorkspace] Image note button badge cleared');\n  }\n  \n  // 更新进度信息\n  updateProgressInfo('Please connect to dataset and select a plant');\n  \n  // 🔧 NEW: Update delete button state when workspace is empty\n  updateDeletePlantAnnotationsButtonState();\n  \n  // 🔧 NEW: Update complete plant button state when workspace is empty\n  updateCompletePlantButtonState();\n}\n\n/**\n * 清空工作区状态\n */\nfunction clearWorkspaceState() {\n  console.log('清空工作区状态');\n  \n  // 清空标注工具 - 使用新的clearImage方法完全清空图像\n  if (annotationTool) {\n    annotationTool.clearImage(); // 🔧 FIX: 使用clearImage替代resetView，防止显示残留图像\n  }\n  \n  // 🔧 FIX: Reset branch point preview when clearing workspace (no previous image context)\n  if (branchPointPreviewManager) {\n    branchPointPreviewManager.reset();\n    console.log('[Workspace] Branch point preview reset - no previous image context');\n  }\n  \n  // 🔧 FIX: 在清空工作区后再设置 currentImage 为 null（防止自动保存引用错误）\n  appState.currentImage = null;\n  \n  // 隐藏状态显示\n  hideAnnotationStatusDisplay();\n  \n  // 清空缩略图容器\n  const thumbnailContainer = document.getElementById('thumbnail-container');\n  if (thumbnailContainer) {\n    thumbnailContainer.innerHTML = '<div class=\"no-images\">Please choose view</div>';\n  }\n  \n  // 重置视角按钮\n  const viewAngleButtons = document.querySelectorAll('.btn-view-angle');\n  viewAngleButtons.forEach(button => {\n    button.classList.remove('selected');\n    button.disabled = true;\n  });\n  \n  // 清空当前植物标题\n  const titleElement = document.getElementById('current-plant-title');\n  if (titleElement && !appState.currentPlant) {\n    titleElement.textContent = 'Plant: Please select';\n  }\n  \n  // 🔧 FIX: Clear image note button badge when no image is selected\n  if (window.PlantAnnotationTool?.noteUI) {\n    window.PlantAnnotationTool.noteUI.updateImageNoteButton(null, null);\n    console.log('[Workspace] Image note button badge cleared');\n  }\n}\n\n/**\n * 处理植物选择\n */\nasync function handlePlantSelect(plant) {\n  console.log('选择植物:', plant.id);\n  \n  // 确保plantDataManager已初始化\n  if (!plantDataManager) {\n    console.error('PlantDataManager未初始化');\n    showError('系统错误', '数据管理器未正确初始化，请刷新页面重试');\n    return;\n  }\n  \n  try {\n    // 🔧 FIX: 在切换植物前先保存当前图像的标注（防止标注丢失）\n    if (appState.currentImage && annotationTool) {\n      try {\n        const currentAnnotations = annotationTool.getAnnotationData();\n        if (currentAnnotations.keypoints.length > 0) {\n          console.log('植物切换前自动保存当前图像标注:', appState.currentImage.id);\n          await plantDataManager.saveImageAnnotations(\n            appState.currentImage.id,\n            currentAnnotations.keypoints\n          );\n          console.log('植物切换前标注保存成功');\n          \n          // 🔧 FIX: 植物切换前保存后立即刷新缩略图状态\n          await refreshThumbnailAnnotationStatus(appState.currentImage.id);\n          console.log('植物切换前缩略图状态已刷新');\n        }\n      } catch (error) {\n        console.warn('植物切换前自动保存标注失败:', error);\n        // 不阻断切换流程，但记录错误\n      }\n    }\n    \n    // 清空工作区状态 - 当切换植物时\n    clearWorkspaceState();\n    \n    // 更新当前植物\n    appState.currentPlant = plant;\n    \n    // 更新UI\n    updateCurrentPlantTitle(plant);\n    updatePlantItemSelection(plant.id);\n    \n    // 加载植物图像数据（所有视角）\n    updateProgressInfo(`Loading ${plant.id} image data...`);\n    const imagesByView = await plantDataManager.getPlantImages(plant.id);\n    \n    console.log(`植物 ${plant.id} 图像数据:`, imagesByView);\n    \n    // 更新笔记系统当前植物\n    if (window.PlantAnnotationTool?.noteUI) {\n      window.PlantAnnotationTool.noteUI.setCurrentPlant(plant.id);\n    }\n\n    // 预加载笔记（性能优化）\n    if (window.PlantAnnotationTool?.noteManager) {\n      // 获取植物的所有图像ID进行预加载\n      const allImageIds = Object.values(imagesByView).flat().map(img => img.id);\n      window.PlantAnnotationTool.noteManager.preloadNotes(plant.id, allImageIds.slice(0, 5)); // 只预加载前5个\n    }\n    \n    // 显示视角选择界面\n    await showViewAngleSelection(plant, imagesByView);\n    \n    updateProgressInfo(`Loaded ${plant.id} - Total ${plant.imageCount} images`);\n    \n    // 🔧 NEW: Update delete button state when plant is selected\n    updateDeletePlantAnnotationsButtonState();\n    \n    // 🔧 NEW: Update complete plant button state when plant is selected\n    updateCompletePlantButtonState();\n    \n  } catch (error) {\n    console.error('选择植物失败:', error);\n    showError('加载植物数据失败', error.message);\n  }\n}\n\n/**\n * 显示视角选择界面\n */\nasync function showViewAngleSelection(plant, imagesByView) {\n  const viewAngleSection = document.getElementById('view-angle-section');\n  const thumbnailContainer = document.getElementById('thumbnail-container');\n  const viewAngleInfo = document.getElementById('view-angle-info');\n  \n  if (!viewAngleSection || !thumbnailContainer || !viewAngleInfo) return;\n  \n  // 显示视角选择区域\n  viewAngleSection.style.display = 'block';\n  \n  // 清空缩略图\n  thumbnailContainer.innerHTML = '<div class=\"no-images\">Please choose view</div>';\n  \n  // 更新视角信息\n  const availableViews = Object.keys(imagesByView).filter(view => imagesByView[view].length > 0);\n  viewAngleInfo.textContent = `available view: ${availableViews.length}`;\n  \n  // 更新视角按钮状态\n  const viewAngleButtons = document.querySelectorAll('.btn-view-angle');\n  viewAngleButtons.forEach(button => {\n    const viewAngle = button.dataset.viewAngle;\n    const hasImages = imagesByView[viewAngle] && imagesByView[viewAngle].length > 0;\n    \n    button.disabled = !hasImages;\n    button.classList.remove('selected');\n    \n    // 更新按钮文本，显示图像数量\n    const imageCount = hasImages ? imagesByView[viewAngle].length : 0;\n    const buttonText = button.textContent.split('(')[0].trim();\n    button.textContent = `${buttonText} (${imageCount})`;\n    \n    if (hasImages) {\n      button.title = `${viewAngle}: ${imageCount} images`;\n    } else {\n      button.title = `${viewAngle}: no image`;\n    }\n  });\n  \n  // 如果已经选择了视角，自动选中\n  if (plant.selectedViewAngle) {\n    const selectedButton = document.querySelector(`[data-view-angle=\"${plant.selectedViewAngle}\"]`);\n    if (selectedButton && !selectedButton.disabled) {\n      selectedButton.classList.add('selected');\n      // 显示该视角的图像\n      await renderImageThumbnails(imagesByView[plant.selectedViewAngle] || []);\n    }\n  }\n}\n\n/**\n * 处理视角选择\n */\nasync function handleViewAngleSelect(viewAngle) {\n  console.log('选择视角:', viewAngle);\n  \n  if (!appState.currentPlant) {\n    showError('操作失败', '请先选择植物');\n    return;\n  }\n  \n  try {\n    // 更新视角按钮状态\n    const viewAngleButtons = document.querySelectorAll('.btn-view-angle');\n    viewAngleButtons.forEach(button => {\n      button.classList.remove('selected');\n      if (button.dataset.viewAngle === viewAngle) {\n        button.classList.add('selected');\n      }\n    });\n    \n    // 设置植物的选中视角\n    plantDataManager.setSelectedViewAngle(appState.currentPlant.id, viewAngle);\n    appState.currentPlant.selectedViewAngle = viewAngle;\n    \n    // 获取该视角的图像\n    updateProgressInfo(`Loading ${viewAngle} image view...`);\n    const images = await plantDataManager.getPlantImages(appState.currentPlant.id, viewAngle);\n    \n    console.log(`${viewAngle} 视角包含 ${images.length} 张图像`);\n\n    // 显示图像缩略图\n    await renderImageThumbnails(images);\n    \n    // 如果有图像，自动选择第一张（首次加载）\n    if (images.length > 0) {\n      await handleImageSelect(images[0], false);\n    }\n    \n    updateProgressInfo(`已选择 ${viewAngle} 视角 - ${images.length} 张图像`);\n    \n  } catch (error) {\n    console.error('选择视角失败:', error);\n    showError('加载视角数据失败', error.message);\n  }\n}\n\n/**\n * 更新当前植物标题\n */\nfunction updateCurrentPlantTitle(plant) {\n  const titleElement = document.getElementById('current-plant-title');\n  if (titleElement) {\n    titleElement.textContent = `Plant: ${plant.id}`;\n  }\n}\n\n/**\n * 更新植物列表项选中状态\n */\nfunction updatePlantItemSelection(selectedPlantId) {\n  // 清除所有选中状态\n  document.querySelectorAll('.plant-item').forEach(item => {\n    item.classList.remove('selected');\n  });\n  \n  // 设置新的选中状态\n  const selectedItem = document.querySelector(`[data-plant-id=\"${selectedPlantId}\"]`);\n  if (selectedItem) {\n    selectedItem.classList.add('selected');\n  }\n}\n\n/**\n * 渲染图像缩略图\n */\nasync function renderImageThumbnails(images) {\n  const container = document.getElementById('thumbnail-container');\n  if (!container) return;\n\n  // 清空现有内容\n  container.innerHTML = '';\n\n  if (images.length === 0) {\n    container.innerHTML = '<div class=\"no-images\">该植物暂无图像</div>';\n    return;\n  }\n\n  // 创建缩略图（异步检查标注状态）\n  for (let i = 0; i < images.length; i++) {\n    const image = images[i];\n    const thumbnail = await createImageThumbnail(image, i === 0);\n    container.appendChild(thumbnail);\n  }\n\n  console.log(`渲染了 ${images.length} 个图像缩略图`);\n}\n\n/**\n * Create image thumbnail with note indicators\n */\nasync function createImageThumbnail(image, isFirst = false) {\n  const thumbnail = document.createElement('div');\n  thumbnail.className = 'image-thumbnail';\n  thumbnail.dataset.imageId = image.id;\n\n  if (isFirst) {\n    thumbnail.classList.add('selected');\n  }\n\n  // Check for annotations\n  let hasAnnotations = false;\n  let annotationCount = 0;\n\n  try {\n    if (plantDataManager) {\n      const annotations = await plantDataManager.getImageAnnotations(image.id);\n      if (annotations && annotations.length > 0) {\n        hasAnnotations = true;\n        annotationCount = annotations.length;\n        thumbnail.classList.add('has-annotations');\n      }\n    }\n  } catch (error) {\n    // Ignore errors, continue rendering\n  }\n\n  thumbnail.innerHTML = `\n    <div class=\"thumbnail-image\">\n      <img src=\"\" alt=\"${image.name}\" data-src=\"${image.id}\" />\n      <div class=\"thumbnail-loading\">Loading...</div>\n      ${hasAnnotations ? `<div class=\"annotation-badge\">${annotationCount}</div>` : ''}\n      <div class=\"image-note-badge\" id=\"image-note-badge-${image.id}\" style=\"display: none;\"></div>\n    </div>\n    <div class=\"thumbnail-info\">\n      <div class=\"image-time\">${image.timeString}</div>\n      ${hasAnnotations ? '<div class=\"annotation-status\">✓ Annotated</div>' : ''}\n    </div>\n  `;\n\n  // Click event (image switching)\n\n/**\n * 刷新缩略图标注状态 - 用于自动保存后的UI同步\n */\nasync function refreshThumbnailAnnotationStatus(imageId) {\n  console.log(`[缩略图刷新] 开始刷新图像: ${imageId}`);\n  \n  const thumbnail = document.querySelector(`[data-image-id=\"${imageId}\"]`);\n  if (!thumbnail) {\n    console.warn(`[缩略图刷新] 找不到图像 ${imageId} 的缩略图元素`);\n    return;\n  }\n  \n  try {\n    console.log(`[缩略图刷新] 正在获取图像 ${imageId} 的标注数据...`);\n    const annotations = await plantDataManager.getImageAnnotations(imageId);\n    const hasAnnotations = annotations && annotations.length > 0;\n    const annotationCount = annotations ? annotations.length : 0;\n    \n    console.log(`[缩略图刷新] 图像 ${imageId} 标注数据: ${annotationCount} 个标注点`);\n    \n    // 更新缩略图类\n    if (hasAnnotations) {\n      thumbnail.classList.add('has-annotations');\n      console.log(`[缩略图刷新] 添加了 has-annotations 类`);\n    } else {\n      thumbnail.classList.remove('has-annotations');\n      console.log(`[缩略图刷新] 移除了 has-annotations 类`);\n    }\n    \n    // 更新标注徽章\n    let annotationBadge = thumbnail.querySelector('.annotation-badge');\n    if (hasAnnotations) {\n      if (!annotationBadge) {\n        annotationBadge = document.createElement('div');\n        annotationBadge.className = 'annotation-badge';\n        thumbnail.querySelector('.thumbnail-image').appendChild(annotationBadge);\n        console.log(`[缩略图刷新] 创建了新的标注徽章`);\n      }\n      annotationBadge.textContent = annotationCount;\n      console.log(`[缩略图刷新] 更新徽章数量: ${annotationCount}`);\n    } else if (annotationBadge) {\n      annotationBadge.remove();\n      console.log(`[缩略图刷新] 移除了标注徽章`);\n    }\n    \n    // 更新标注状态文本\n    let statusElement = thumbnail.querySelector('.annotation-status');\n    if (hasAnnotations) {\n      if (!statusElement) {\n        statusElement = document.createElement('div');\n        statusElement.className = 'annotation-status';\n        statusElement.textContent = '✓ Annotated';\n        thumbnail.querySelector('.thumbnail-info').appendChild(statusElement);\n        console.log(`[缩略图刷新] 创建了 '✓ Annotated' 状态`);\n      }\n    } else if (statusElement) {\n      statusElement.remove();\n      console.log(`[缩略图刷新] 移除了 '✓ Annotated' 状态`);\n    }\n    \n    console.log(`[缩略图刷新] 完成刷新图像 ${imageId}`);\n    \n  } catch (error) {\n    console.error(`[缩略图刷新] 刷新失败:`, error);\n  }\n}\n\n// 🔧 FIX: 将刷新函数暴露到全局，供AnnotationTool调用\nwindow.refreshThumbnailAnnotationStatus = refreshThumbnailAnnotationStatus;\n  thumbnail.addEventListener('click', () => handleImageSelect(image, true));\n\n  // Async load image\n  loadThumbnailImage(thumbnail, image);\n  \n  // Async load note count\n  if (appState.currentPlant) {\n    loadImageNoteCount(appState.currentPlant.id, image.id);\n  }\n\n  return thumbnail;\n}\n\n/**\n * 异步加载缩略图图像\n */\nasync function loadThumbnailImage(thumbnailElement, imageData) {\n  try {\n    const imgElement = thumbnailElement.querySelector('img');\n    const loadingElement = thumbnailElement.querySelector('.thumbnail-loading');\n    \n    // 检查plantDataManager是否已初始化\n    if (!plantDataManager || !plantDataManager.fileSystemManager) {\n      console.error('PlantDataManager或FileSystemManager未初始化');\n      loadingElement.textContent = '初始化错误';\n      loadingElement.style.color = '#dc2626';\n      return;\n    }\n    \n    // 创建图像URL\n    const imageURL = await plantDataManager.fileSystemManager.createImageURL(imageData);\n    \n    // 加载图像\n    imgElement.onload = () => {\n      loadingElement.style.display = 'none';\n      imgElement.style.display = 'block';\n    };\n    \n    imgElement.onerror = () => {\n      loadingElement.textContent = '加载失败';\n      loadingElement.style.color = '#dc2626';\n    };\n    \n    imgElement.src = imageURL;\n    \n  } catch (error) {\n    console.error('加载缩略图失败:', error);\n    const loadingElement = thumbnailElement.querySelector('.thumbnail-loading');\n    loadingElement.textContent = '加载失败';\n    loadingElement.style.color = '#dc2626';\n  }\n}\n\n/**\n * 处理图像选择\n */\nasync function handleImageSelect(image, isImageSwitch = true) {\n  // 🔧 FIX: Prevent race conditions during rapid navigation\n  if (appState.navigation.isNavigating) {\n    console.log(`[Navigation] Blocked concurrent navigation to ${image.name} - already navigating`);\n    return;\n  }\n\n  // 🔧 FIX: Throttle rapid navigation attempts with user feedback\n  const now = Date.now();\n  if (now - appState.navigation.lastNavigationTime < appState.navigation.throttleDelay) {\n    console.log(`[Navigation] Throttled navigation to ${image.name} - too fast (${now - appState.navigation.lastNavigationTime}ms since last)`);\n    // 🔧 NEW: Optional visual feedback for throttled navigation\n    if (window.updateProgressInfo) {\n      const remaining = appState.navigation.throttleDelay - (now - appState.navigation.lastNavigationTime);\n      window.updateProgressInfo(`Navigation throttled - please wait ${remaining}ms`);\n      // Clear the message after a short delay\n      setTimeout(() => {\n        if (window.updateProgressInfo) {\n          window.updateProgressInfo('Ready for navigation');\n        }\n      }, remaining + 100);\n    }\n    return;\n  }\n\n  // Lock navigation\n  appState.navigation.isNavigating = true;\n  appState.navigation.lastNavigationTime = now;\n\n  try {\n    console.log('选择图像:', image.name);\n    \n    // 保存当前图像的标注（如果有的话）\n    if (appState.currentImage && annotationTool) {\n      try {\n        // 🔧 FIX: Store the image ID to prevent race condition corruption\n        const imageToSave = appState.currentImage.id;\n        const currentAnnotations = annotationTool.getAnnotationData();\n        if (currentAnnotations.keypoints.length > 0) {\n          console.log(`[Auto-save] Saving ${currentAnnotations.keypoints.length} annotations for ${imageToSave}`);\n          await plantDataManager.saveImageAnnotations(\n            imageToSave,\n            currentAnnotations.keypoints\n          );\n          console.log(`[Auto-save] Successfully saved annotations for ${imageToSave}`);\n          \n          // 🔧 FIX: 自动保存后立即刷新缩略图状态\n          await refreshThumbnailAnnotationStatus(imageToSave);\n          console.log(`[Auto-save] Thumbnail status refreshed for ${imageToSave}`);\n        }\n      } catch (error) {\n        console.warn(`[Auto-save] Failed to save annotations for ${appState.currentImage?.id}:`, error);\n      }\n    }\n    \n    // 检测是否为该植物的首张图像加载\n    const isFirstImageForPlant = !appState.currentImage || \n                                (appState.currentPlant && appState.currentImage && \n                                 !appState.currentImage.id.startsWith(appState.currentPlant.id));\n    \n    // 更新应用状态\n    appState.currentImage = image;\n    \n    // 更新缩略图选中状态\n    updateImageThumbnailSelection(image.id);\n    \n    // 更新笔记系统当前图像\n    if (window.PlantAnnotationTool?.noteUI) {\n      window.PlantAnnotationTool.noteUI.setCurrentImage(image.id);\n    }\n    \n    // 设置植物的选中图像（重要：这里恢复了原来的逻辑）\n    if (appState.currentPlant) {\n      plantDataManager.setSelectedImage(appState.currentPlant.id, image);\n    }\n    \n    // 加载图像到标注工具\n    if (annotationTool) {\n      // 强制刷新Canvas尺寸，确保正确计算\n      annotationTool.resizeCanvas();\n\n      // 获取锁定倍数设置和自动切换设置\n      const zoomSettings = getZoomLockSettings();\n      const autoMoveSettings = getAutoMoveSettings();\n\n      // 决定是否保持视图状态：只有在非首张图像且是图像切换时才保持\n      const shouldPreserveView = isImageSwitch && !isFirstImageForPlant;\n      console.log(`[调试] isImageSwitch: ${isImageSwitch}, isFirstImageForPlant: ${isFirstImageForPlant}, shouldPreserveView: ${shouldPreserveView}`);\n      \n      await annotationTool.loadImage(image, shouldPreserveView);\n\n      // 应用锁定倍数设置或确保首张图像适合屏幕\n      if (isFirstImageForPlant) {\n        // 首张图像始终适合屏幕\n        console.log('首张图像：重置视图到适合屏幕');\n        setTimeout(() => {\n          annotationTool.fitToScreen();\n        }, 100); // 短暂延迟确保图像加载完成\n      } else if (isImageSwitch && zoomSettings.isLocked) {\n        // 图片切换且启用了锁定倍数\n        annotationTool.setZoom(zoomSettings.lockValue);\n        console.log(`图片切换：应用锁定倍数 ${zoomSettings.lockValue}x`);\n      } else if (isImageSwitch) {\n        console.log('图片切换：保持当前缩放和视图状态');\n      } else {\n        console.log('其他情况：重置视图到适合屏幕');\n        annotationTool.fitToScreen();\n      }\n      \n      // 加载已有的标注数据\n      try {\n        console.log(`[标注] 开始加载图像标注: ${image.id}`);\n        const existingAnnotations = await plantDataManager.getImageAnnotations(image.id);\n        if (existingAnnotations && existingAnnotations.length > 0) {\n          annotationTool.loadAnnotationData({ keypoints: existingAnnotations });\n          console.log(`[标注] 加载了 ${existingAnnotations.length} 个已有标注点`);\n          \n          // 🔧 FIX: 同步自定义标注到CustomAnnotationManager内部状态\n          if (annotationTool.customAnnotationManager) {\n            const customAnnotations = existingAnnotations.filter(ann => ann.annotationType === 'custom');\n            if (customAnnotations.length > 0) {\n              console.log(`[自定义标注] 发现 ${customAnnotations.length} 个自定义标注，同步到CustomAnnotationManager`);\n              annotationTool.customAnnotationManager.syncAnnotationsFromKeypoints(image.id, customAnnotations);\n            }\n          }\n\n          // 🔧 FIX: 只有在开启自动移动时才移动视角到最高标记点\n          if (annotationTool.state.autoMoveToExpectedPosition) {\n            setTimeout(() => {\n              annotationTool.moveToHighestKeypoint();\n              console.log('[自动移动] 移动视角到最高标记点（auto-move已开启）');\n            }, 100); // 稍微延迟确保渲染完成\n          } else {\n            console.log('[自动移动] 跳过移动到最高标记点（auto-move已关闭）');\n          }\n        } else {\n          // 如果没有已有标注，清空标注工具\n          annotationTool.clearKeypoints();\n          console.log(`[标注] 图像 ${image.id} 无标注数据`);\n        }\n      } catch (error) {\n        console.warn('[标注] 加载标注数据失败:', error);\n        annotationTool.clearKeypoints();\n      }\n    } else {\n      console.error('AnnotationTool未初始化');\n      showError('标注工具错误', '标注工具未正确初始化，请刷新页面重试');\n    }\n    \n    // 更新分支点预览\n    if (branchPointPreviewManager && appState.currentPlant) {\n      try {\n        const images = await plantDataManager.getPlantImages(\n          appState.currentPlant.id, \n          appState.currentPlant.selectedViewAngle\n        );\n        const imageIndex = images.findIndex(img => img.id === image.id);\n        const currentKeypointCount = annotationTool ? annotationTool.keypoints.length : 0;\n        \n        await branchPointPreviewManager.updateContext(\n          appState.currentPlant.id,\n          appState.currentPlant.selectedViewAngle,\n          imageIndex,\n          currentKeypointCount\n        );\n      } catch (error) {\n        console.warn('更新分支点预览失败:', error);\n      }\n    }\n    \n    // 更新标注状态显示\n    await updateAnnotationStatusDisplay();\n\n    // 自动切换到预期位置（如果开启）\n    if (annotationTool) {\n      setTimeout(() => {\n        annotationTool.moveToExpectedPosition(isImageSwitch);\n      }, 100); // 稍微延迟确保渲染完成\n    }\n\n    console.log('图像选择完成');\n    \n  } catch (error) {\n    console.error('图像选择失败:', error);\n    showError('图像加载失败', error.message);\n  } finally {\n    // 🔧 FIX: Always unlock navigation to prevent permanent locks\n    appState.navigation.isNavigating = false;\n    console.log(`[Navigation] Navigation unlocked after processing ${image.name}`);\n  }\n}\n\n/**\n * 更新缩略图选择状态并滚动到对应位置\n */\nfunction updateImageThumbnailSelection(selectedImageId) {\n  // 清除所有选中状态\n  document.querySelectorAll('.image-thumbnail').forEach(thumb => {\n    thumb.classList.remove('selected');\n  });\n  \n  // 设置新的选中状态\n  const selectedThumb = document.querySelector(`[data-image-id=\"${selectedImageId}\"]`);\n  if (selectedThumb) {\n    selectedThumb.classList.add('selected');\n    \n    // 滚动到选中的缩略图\n    scrollToThumbnail(selectedThumb);\n  }\n}\n\n/**\n * 滚动到指定的缩略图，使其在视图垂直中央\n */\nfunction scrollToThumbnail(thumbnailElement) {\n  const container = document.getElementById('thumbnail-container');\n  if (!container || !thumbnailElement) return;\n  \n  try {\n    // 获取容器和缩略图的尺寸信息\n    const containerRect = container.getBoundingClientRect();\n    const thumbnailRect = thumbnailElement.getBoundingClientRect();\n    \n    // 计算需要滚动的距离，使缩略图在容器垂直中央\n    const containerScrollTop = container.scrollTop;\n    const thumbnailOffsetTop = thumbnailElement.offsetTop;\n    const containerHeight = containerRect.height;\n    const thumbnailHeight = thumbnailRect.height;\n    \n    // 计算目标滚动位置：缩略图中心对齐到容器中心\n    const targetScrollTop = thumbnailOffsetTop - (containerHeight / 2) + (thumbnailHeight / 2);\n    \n    // 平滑滚动到目标位置\n    container.scrollTo({\n      top: targetScrollTop,\n      behavior: 'smooth'\n    });\n    \n    console.log(`滚动到缩略图: ${thumbnailElement.dataset.imageId}`);\n    \n  } catch (error) {\n    console.warn('滚动到缩略图失败:', error);\n  }\n}\n\n/**\n * 更新标注状态显示\n */\nasync function updateAnnotationStatusDisplay() {\n  if (!appState.currentPlant || !appState.currentImage) {\n    hideAnnotationStatusDisplay();\n    return;\n  }\n\n  const statusSection = document.getElementById('annotation-status-section');\n  const currentImageIndex = document.getElementById('current-image-index');\n  const annotationSource = document.getElementById('annotation-source');\n  const timeSeriesStats = document.getElementById('time-series-stats');\n  const manualAdjustmentNotice = document.getElementById('manual-adjustment-notice');\n\n  if (!statusSection) return;\n\n  // 显示状态区域\n  statusSection.style.display = 'block';\n\n  try {\n    // 获取当前视角的所有图像\n    const images = await plantDataManager.getPlantImages(\n      appState.currentPlant.id, \n      appState.currentPlant.selectedViewAngle\n    );\n    \n    const currentIndex = images.findIndex(img => img.id === appState.currentImage.id);\n    \n    // 更新当前图像索引\n    currentImageIndex.textContent = currentIndex >= 0 ? \n      `${currentIndex + 1} / ${images.length}` : \n      '- / -';\n\n    // 检查当前图像是否有标注\n    const savedAnnotations = await plantDataManager.getImageAnnotations(appState.currentImage.id);\n    const hasAnnotations = savedAnnotations && savedAnnotations.length > 0;\n\n    // 更新标注来源\n    if (hasAnnotations) {\n      annotationSource.textContent = 'Document';\n    } else {\n      annotationSource.textContent = 'No annotation';\n    }\n\n    // 计算视角统计\n    let annotatedCount = 0;\n    for (const image of images) {\n      const imageAnnotations = await plantDataManager.getImageAnnotations(image.id);\n      if (imageAnnotations && imageAnnotations.length > 0) {\n        annotatedCount++;\n      }\n    }\n    \n    const coverage = images.length > 0 ? Math.round((annotatedCount / images.length) * 100) : 0;\n    timeSeriesStats.textContent = `${annotatedCount}/${images.length} (${coverage}%)`;\n\n    // 隐藏微调模式通知（新方案不需要）\n    manualAdjustmentNotice.style.display = 'none';\n    \n  } catch (error) {\n    console.error('更新标注状态显示失败:', error);\n    hideAnnotationStatusDisplay();\n  }\n}\n\n/**\n * 隐藏标注状态显示\n */\nfunction hideAnnotationStatusDisplay() {\n  const statusSection = document.getElementById('annotation-status-section');\n  const manualAdjustmentNotice = document.getElementById('manual-adjustment-notice');\n\n  if (statusSection) statusSection.style.display = 'none';\n  if (manualAdjustmentNotice) manualAdjustmentNotice.style.display = 'none';\n}\n\n/**\n * 处理保存标注 - 显示模态框\n */\nasync function handleSaveAnnotation() {\n  if (!annotationTool || !appState.currentPlant) {\n    showError('保存失败', '请先选择植物和图像');\n    return;\n  }\n  \n  const annotationData = annotationTool.getAnnotationData();\n  \n  if (annotationData.keypoints.length === 0) {\n    showError('保存失败', '请先添加标注点');\n    return;\n  }\n  \n  // 显示保存确认模态框\n  showSaveAnnotationModal();\n}\n\n/**\n * 显示保存标注模态框\n */\nfunction showSaveAnnotationModal() {\n  const modal = document.getElementById('save-annotation-modal');\n  if (modal) {\n    modal.style.display = 'flex';\n  }\n}\n\n/**\n * 隐藏保存标注模态框\n */\nfunction hideSaveAnnotationModal() {\n  const modal = document.getElementById('save-annotation-modal');\n  if (modal) {\n    modal.style.display = 'none';\n  }\n}\n\n/**\n * 执行实际的保存操作\n */\nasync function performSaveAnnotation(isManualAdjustment) {\n  if (!annotationTool || !appState.currentPlant) {\n    showError('保存失败', '请先选择植物和图像');\n    return;\n  }\n  \n  try {\n    const annotationData = annotationTool.getAnnotationData();\n    \n    if (annotationData.keypoints.length === 0) {\n      showError('保存失败', '请先添加标注点');\n      return;\n    }\n    \n    // 获取方向保存模式\n    const directionSaveMode = document.querySelector('input[name=\"direction-save-mode\"]:checked');\n    const saveDirectionsOnly = directionSaveMode && directionSaveMode.value === 'directions-only';\n    \n    // 保存标注数据\n    const saveResult = await plantDataManager.savePlantAnnotations(\n      appState.currentPlant.id, \n      annotationData.keypoints, \n      isManualAdjustment,\n      { saveDirectionsOnly } // 传递方向保存选项\n    );\n    \n    updateProgressInfo(saveResult.message || `已保存 ${annotationData.keypoints.length} 个标注点`);\n    \n    // 更新状态显示\n    updateAnnotationStatusDisplay();\n    \n    // 更新统计显示\n    updateProgressStats();\n    \n    // 更新分支点预览（重新计算标注点数量）\n    if (branchPointPreviewManager && appState.currentPlant && appState.currentImage) {\n      const images = await plantDataManager.getPlantImages(\n        appState.currentPlant.id, \n        appState.currentPlant.selectedViewAngle\n      );\n      const imageIndex = images.findIndex(img => img.id === appState.currentImage.id);\n      const currentAnnotations = await plantDataManager.getImageAnnotations(appState.currentImage.id);\n      const currentKeypointCount = currentAnnotations ? currentAnnotations.length : 0;\n      \n      await branchPointPreviewManager.updateContext(\n        appState.currentPlant.id,\n        appState.currentPlant.selectedViewAngle,\n        imageIndex,\n        currentKeypointCount\n      );\n    }\n    \n    console.log('标注数据已保存到持久化存储');\n    \n    // 🔧 FIX: 立即刷新当前图像的缩略图标注状态\n    if (appState.currentImage) {\n      await refreshThumbnailAnnotationStatus(appState.currentImage.id);\n      console.log('缩略图标注状态已刷新');\n    }\n    \n    // 🔧 FIX: 如果是传播保存，刷新所有受影响的缩略图\n    if (!isManualAdjustment && saveResult.affectedImages && saveResult.affectedImages.length > 0) {\n      console.log(`刷新 ${saveResult.affectedImages.length} 个受影响图像的缩略图状态`);\n      for (const imageId of saveResult.affectedImages) {\n        await refreshThumbnailAnnotationStatus(imageId);\n      }\n    }\n    \n    // 🔧 FIX: 刷新植物笔记徽章（标注可能影响笔记统计）\n    if (window.PlantAnnotationTool?.noteUI && appState.currentPlant) {\n      await window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(appState.currentPlant.id);\n      console.log('植物笔记徽章已刷新');\n    }\n    \n    // 隐藏模态框\n    hideSaveAnnotationModal();\n    \n  } catch (error) {\n    console.error('保存标注失败:', error);\n    showError('保存失败', `保存标注数据时出错: ${error.message}`);\n  }\n}\n\n/**\n * 🔧 NEW: 处理完成/撤销完成植物 (统一处理函数)\n */\nfunction handleCompletePlant() {\n  if (!appState.currentPlant) {\n    showError('操作失败', '请先选择植物');\n    return;\n  }\n  \n  const plant = appState.currentPlant;\n  \n  // 根据当前状态决定操作\n  if (plant.status === 'completed') {\n    // 如果已完成，则撤销完成\n    showUncompletePlantModal(plant.id);\n  } else {\n    // 如果未完成，则完成植物\n    if (plant.status === 'skipped') {\n      showError('操作错误', '无法完成已跳过的植株，请先撤销跳过');\n      return;\n    }\n    \n    const confirmMessage = `确定要标记植株 \"${plant.id}\" 为已完成吗？`;\n    \n    if (!confirm(confirmMessage)) {\n      return;\n    }\n    \n    try {\n      // 标记植物为已完成\n      plantDataManager.updatePlantStatus(plant.id, 'completed');\n      plant.status = 'completed';\n      \n      // 重新渲染植株列表项\n      const plantItem = document.querySelector(`[data-plant-id=\"${plant.id}\"]`);\n      if (plantItem) {\n        const newItem = createPlantListItem(plant);\n        plantItem.parentNode.replaceChild(newItem, plantItem);\n        \n        // 🔧 FIX: Update note badge for the re-rendered plant item\n        if (window.PlantAnnotationTool?.noteUI) {\n          setTimeout(() => {\n            window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(plant.id);\n          }, 100);\n        }\n      }\n      \n      // 更新统计显示\n      updateProgressStats();\n      \n      // 更新按钮状态\n      updateCompletePlantButtonState();\n      \n      showSuccess('完成成功', `植株 ${plant.id} 已标记为完成`);\n      \n      // 查找下一个未完成的植物\n      const nextPlant = plantDataManager.getNextPendingPlant(plant.id);\n      \n      if (nextPlant) {\n        // 询问是否跳转到下一个植物\n        const shouldNavigate = confirm(`植株 ${plant.id} 已完成！\\n\\n是否跳转到下一个未完成的植株 ${nextPlant.id}？`);\n        if (shouldNavigate) {\n          handlePlantSelect(nextPlant);\n          updateProgressInfo(`已完成 ${plant.id}，跳转到 ${nextPlant.id}`);\n        }\n      } else {\n        updateProgressInfo('恭喜！所有植物都已完成标注');\n      }\n      \n    } catch (error) {\n      console.error('完成植物失败:', error);\n      showError('操作失败', error.message);\n    }\n  }\n}\n\n/**\n * 处理导出数据\n */\nasync function handleExportData() {\n  if (!plantDataManager) {\n    showError('导出失败', '请先加载数据集');\n    return;\n  }\n  \n  try {\n    // 显示导出格式选择\n    await showExportOptionsModal();\n    \n  } catch (error) {\n    console.error('导出数据失败:', error);\n    showError('导出失败', error.message);\n  }\n}\n\n/**\n * 显示导出选项模态框\n */\nasync function showExportOptionsModal() {\n  // Create modal HTML\n  const modalHTML = `\n    <div id=\"export-modal\" class=\"modal\" style=\"display: flex;\">\n      <div class=\"modal-content\" style=\"max-width: 600px; max-height: 90vh; overflow-y: auto;\">\n        <h3>Export Annotation Data</h3>\n\n        <!-- Statistics Area -->\n        <div id=\"export-stats\" style=\"background: #f9fafb; padding: 15px; border-radius: 8px; margin: 20px 0; font-size: 14px;\">\n          <div style=\"font-weight: 600; margin-bottom: 10px;\">Data Statistics:</div>\n          <div id=\"stats-content\">Loading...</div>\n        </div>\n\n        <!-- Preview Area -->\n        <div style=\"margin: 20px 0;\">\n          <div style=\"display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px;\">\n            <h4 style=\"margin: 0;\">Export Data Preview</h4>\n            <button id=\"refresh-preview-btn\" class=\"btn btn-secondary\" style=\"padding: 5px 15px; font-size: 14px;\">Refresh Preview</button>\n          </div>\n          <div id=\"export-preview\" style=\"background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; max-height: 400px; overflow-y: auto;\">\n            Generating preview...\n          </div>\n        </div>\n\n        <div style=\"display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;\">\n          <button id=\"export-cancel-btn\" class=\"btn btn-secondary\">Cancel</button>\n          <button id=\"export-confirm-btn\" class=\"btn btn-primary\">Confirm Export</button>\n        </div>\n      </div>\n    </div>\n  `;\n  \n  // 移除已存在的模态框\n  const existingModal = document.getElementById('export-modal');\n  if (existingModal) {\n    existingModal.remove();\n  }\n  \n  // 添加到body\n  document.body.insertAdjacentHTML('beforeend', modalHTML);\n  \n  // 获取统计信息并显示\n  await updateExportStats();\n\n  // 生成导出预览\n  await generateExportPreview();\n\n  // 绑定事件\n  document.getElementById('export-cancel-btn').addEventListener('click', () => {\n    document.getElementById('export-modal').remove();\n  });\n\n  document.getElementById('export-confirm-btn').addEventListener('click', async () => {\n    document.getElementById('export-modal').remove();\n    await performExport();\n  });\n\n  document.getElementById('refresh-preview-btn').addEventListener('click', async () => {\n    await generateExportPreview();\n  });\n}\n\n/**\n * 更新导出统计信息\n */\nasync function updateExportStats() {\n  const statsContent = document.getElementById('stats-content');\n  if (!statsContent) return;\n\n  try {\n    // 直接从文件系统获取标注数据统计\n    const exportData = await getDirectExportData();\n    const stats = calculateExportStats(exportData);\n\n    const html = `\n      <div>📊 Annotated Images: <strong>${stats.annotatedImages}</strong></div>\n      <div>🎯 Total Keypoints: <strong>${stats.totalKeypoints}</strong></div>\n      <div>📈 Average per Image: <strong>${stats.averageKeypointsPerImage}</strong> keypoints</div>\n      <div style=\"margin-top: 10px; color: #059669;\">✅ Pure annotation data, ready for data analysis</div>\n      <div style=\"color: #059669;\">✅ Includes all annotated images and skipped plant information</div>\n    `;\n\n    statsContent.innerHTML = html;\n  } catch (error) {\n    console.error('Failed to get export statistics:', error);\n    statsContent.innerHTML = '<div style=\"color: #dc2626;\">Failed to load statistics, please check console</div>';\n  }\n}\n\n/**\n * 执行导出\n */\nasync function performExport() {\n  try {\n    // 获取纯净的标注数据\n    const exportData = await getDirectExportData();\n    const stats = calculateExportStats(exportData);\n\n    if (stats.annotatedImages === 0) {\n      showError('Export Failed', 'No annotation data available for export');\n      return;\n    }\n\n    // 创建导出数据结构\n    const finalExportData = {\n      exportTime: new Date().toISOString(),\n      version: '3.0',\n      format: 'pure_annotations',\n      description: 'Pure annotation data, including image annotations and skipped plant information',\n      stats: {\n        annotatedImages: stats.annotatedImages,\n        totalKeypoints: stats.totalKeypoints,\n        averageKeypointsPerImage: stats.averageKeypointsPerImage,\n        skippedPlants: stats.skippedPlants\n      },\n      annotations: exportData.annotations,\n      skippedPlants: exportData.skippedPlants\n    };\n\n    // 下载文件\n    const blob = new Blob([JSON.stringify(finalExportData, null, 2)], {\n      type: 'application/json'\n    });\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `annotations_${new Date().toISOString().split('T')[0]}.json`;\n\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n\n    URL.revokeObjectURL(url);\n\n    const message = `Exported annotation data for ${stats.annotatedImages} images with ${stats.totalKeypoints} keypoints`;\n    updateProgressInfo(message);\n    console.log('Annotation data exported', finalExportData);\n\n  } catch (error) {\n    console.error('Failed to export data:', error);\n    showError('Export Failed', error.message);\n  }\n}\n\n/**\n * 直接从文件系统获取导出数据\n */\nasync function getDirectExportData() {\n  const exportData = {\n    annotations: {},\n    skippedPlants: {}\n  };\n\n  if (!plantDataManager || !plantDataManager.annotationStorage) {\n    throw new Error('数据管理器未初始化');\n  }\n\n  const annotationStorage = plantDataManager.annotationStorage;\n\n  // 获取所有标注文件\n  if (annotationStorage.useFileSystem && annotationStorage.fileSystemManager) {\n    const annotationsHandle = annotationStorage.fileSystemManager.getAnnotationsDirectory();\n    if (!annotationsHandle) {\n      throw new Error('无法访问标注目录');\n    }\n\n    // 扫描所有文件\n    for await (const [name, handle] of annotationsHandle.entries()) {\n      if (handle.kind === 'file' && name.endsWith('.json')) {\n        try {\n          const file = await handle.getFile();\n          const content = await file.text();\n          const data = JSON.parse(content);\n\n          if (name.endsWith('_skip_info.json')) {\n            // 跳过信息文件\n            const plantId = name.replace('_skip_info.json', '');\n            exportData.skippedPlants[plantId] = {\n              plantId: data.plantId,\n              skipReason: data.skipReason,\n              skipDate: data.skipDate,\n              status: data.status\n            };\n          } else {\n            // 标注文件\n            const imageId = name.replace('.json', '');\n            if (data.annotations && data.annotations.length > 0) {\n              // 如果没有plantId，尝试从imageId推断\n              const plantId = data.plantId || inferPlantIdFromImageId(imageId);\n\n              exportData.annotations[imageId] = {\n                imageId: data.imageId || imageId,\n                plantId: plantId,\n                annotations: data.annotations,\n                timestamp: data.timestamp,\n                version: data.version\n              };\n            }\n          }\n        } catch (error) {\n          console.warn(`读取文件失败 (${name}):`, error);\n        }\n      }\n    }\n  } else {\n    // 从内存中获取数据（兼容模式）\n    for (const [plantId, annotationData] of annotationStorage.annotations) {\n      if (annotationData.status === 'skipped') {\n        exportData.skippedPlants[plantId] = {\n          plantId,\n          skipReason: annotationData.skipReason,\n          skipDate: annotationData.skipDate,\n          status: annotationData.status\n        };\n      }\n    }\n\n    // 获取图像标注数据\n    for (const [imageId, annotationData] of annotationStorage.imageAnnotations) {\n      if (annotationData.annotations && annotationData.annotations.length > 0) {\n        exportData.annotations[imageId] = {\n          imageId,\n          plantId: annotationData.plantId,\n          annotations: annotationData.annotations,\n          timestamp: annotationData.timestamp,\n          version: annotationData.version\n        };\n      }\n    }\n  }\n\n  return exportData;\n}\n\n/**\n * 计算导出数据统计\n */\nfunction calculateExportStats(exportData) {\n  const annotatedImages = Object.keys(exportData.annotations).length;\n  const skippedPlants = Object.keys(exportData.skippedPlants).length;\n\n  let totalKeypoints = 0;\n  for (const imageData of Object.values(exportData.annotations)) {\n    totalKeypoints += imageData.annotations.length;\n  }\n\n  const averageKeypointsPerImage = annotatedImages > 0 ?\n    (totalKeypoints / annotatedImages).toFixed(1) : '0';\n\n  return {\n    annotatedImages,\n    totalKeypoints,\n    averageKeypointsPerImage,\n    skippedPlants\n  };\n}\n\n/**\n * 处理植物更新事件\n */\nfunction handlePlantUpdated(event) {\n  const { plant } = event.detail;\n  \n  // 更新列表中的植物项\n  const plantItem = document.querySelector(`[data-plant-id=\"${plant.id}\"]`);\n  if (plantItem) {\n    // 更新状态图标\n    const statusElement = plantItem.querySelector('.plant-status');\n    if (statusElement) {\n      statusElement.textContent = getStatusIcon(plant.status);\n    }\n    \n    // 更新状态文本\n    const statusTextElement = plantItem.querySelector('.status-text');\n    if (statusTextElement) {\n      statusTextElement.textContent = getStatusText(plant.status);\n    }\n    \n    // 更新图像数量\n    const imageCountElement = plantItem.querySelector('.image-count');\n    if (imageCountElement && plant.imageCount > 0) {\n      imageCountElement.textContent = `${plant.imageCount} images`;\n    }\n    \n    // 更新视角信息\n    const viewAnglesElement = plantItem.querySelector('.view-angles');\n    if (viewAnglesElement) {\n      const viewAnglesText = plant.viewAngles.length > 0 ? \n        `view: ${plant.viewAngles.join(', ')}` :\n        'view: detecting...';\n      viewAnglesElement.textContent = viewAnglesText;\n    }\n    \n    // 更新选中视角信息\n    const plantViewInfo = plantItem.querySelector('.plant-view-info');\n    if (plantViewInfo) {\n      let selectedViewElement = plantViewInfo.querySelector('.selected-view');\n      if (plant.selectedViewAngle) {\n        if (!selectedViewElement) {\n          selectedViewElement = document.createElement('div');\n          selectedViewElement.className = 'selected-view';\n          plantViewInfo.appendChild(selectedViewElement);\n        }\n        selectedViewElement.textContent = `Choosed: ${plant.selectedViewAngle}`;\n      } else if (selectedViewElement) {\n        selectedViewElement.remove();\n      }\n    }\n  }\n  \n  // 更新统计显示\n  updateProgressStats();\n  \n  // 更新旧的进度信息\n  const progress = plantDataManager.getProgress();\n  updateProgressInfo(`Progress: ${progress.completed}/${progress.total} (${progress.completionRate}%)`);\n}\n\n/**\n * 键盘快捷键处理\n */\nfunction handleKeyboardShortcuts(event) {\n  // 全局快捷键\n  if (event.ctrlKey || event.metaKey) {\n    switch (event.key) {\n      case 'o':\n        event.preventDefault();\n        handleSelectDataset();\n        break;\n      case 's':\n        event.preventDefault();\n        handleSaveAnnotation();\n        break;\n    }\n  }\n  \n  // 🔧 NEW: SIFT匹配快捷键 (Shift+S)\n  if (event.shiftKey && event.key.toLowerCase() === 's') {\n    event.preventDefault();\n    handleSiftMatch();\n    return;\n  }\n  \n  // 应用快捷键（仅在主应用显示时）\n  if (mainApp && mainApp.style.display !== 'none') {\n    switch (event.key) {\n      case 'Enter':\n        event.preventDefault();\n        handleCompletePlant();\n        break;\n      case 'ArrowLeft':\n        event.preventDefault();\n        // 🔧 FIX: Add navigation state feedback\n        if (appState.navigation.isNavigating) {\n          console.log('[Navigation] Previous image blocked - navigation in progress');\n        } else {\n          navigateToPreviousImage();\n        }\n        break;\n      case 'ArrowRight':\n        event.preventDefault();\n        // 🔧 FIX: Add navigation state feedback\n        if (appState.navigation.isNavigating) {\n          console.log('[Navigation] Next image blocked - navigation in progress');\n        } else {\n          navigateToNextImage();\n        }\n        break;\n    }\n  }\n}\n\n/**\n * 模拟加载过程\n */\nasync function simulateLoading() {\n  const loadingTexts = [\n    '正在初始化标注工具...',\n    '检查浏览器兼容性...',\n    '加载组件模块...',\n    '准备用户界面...'\n  ];\n  \n  const loadingP = loadingScreen.querySelector('p');\n  \n  for (const text of loadingTexts) {\n    loadingP.textContent = text;\n    await new Promise(resolve => setTimeout(resolve, 300));\n  }\n}\n\n/**\n * 显示主应用界面\n */\nfunction showMainApp() {\n  loadingScreen.style.display = 'none';\n  mainApp.style.display = 'flex';\n  \n  // 确保界面完全渲染后再检查和初始化AnnotationTool\n  setTimeout(() => {\n    if (!annotationTool) {\n      try {\n        console.log('[调试] 在showMainApp中延迟初始化AnnotationTool');\n        annotationTool = new AnnotationTool('annotation-canvas');\n        window.PlantAnnotationTool.annotationTool = annotationTool;\n        console.log('AnnotationTool延迟初始化完成');\n      } catch (error) {\n        console.error('延迟初始化AnnotationTool失败:', error);\n      }\n    } else {\n      console.log('[调试] AnnotationTool已存在，跳过延迟初始化，调整Canvas尺寸');\n      // 如果已经初始化，强制重新调整Canvas尺寸\n      annotationTool.resizeCanvas();\n    }\n    \n    // 确保分支点预览管理器已初始化\n    if (!branchPointPreviewManager) {\n      try {\n        branchPointPreviewManager = new BranchPointPreviewManager();\n        branchPointPreviewManager.setPlantDataManager(plantDataManager);\n        window.PlantAnnotationTool.branchPointPreviewManager = branchPointPreviewManager;\n        console.log('BranchPointPreviewManager延迟初始化完成');\n      } catch (error) {\n        console.error('延迟初始化BranchPointPreviewManager失败:', error);\n      }\n    }\n  }, 300);\n}\n\n/**\n * 更新进度信息\n */\nfunction updateProgressInfo(text) {\n  const progressText = document.getElementById('progress-text');\n  if (progressText) {\n    progressText.textContent = text;\n  }\n}\n\n/**\n * 显示错误信息\n */\nfunction showError(title, message) {\n  const errorMessage = document.getElementById('error-message');\n  if (errorMessage && errorModal) {\n    errorMessage.textContent = message;\n    errorModal.style.display = 'flex';\n  }\n  console.error(`${title}: ${message}`);\n}\n\n/**\n * 隐藏错误信息\n */\nfunction hideError() {\n  if (errorModal) {\n    errorModal.style.display = 'none';\n  }\n}\n\n/**\n * 显示成功信息\n */\nfunction showSuccess(title, message) {\n  // 使用updateProgressInfo显示成功消息\n  updateProgressInfo(`✅ ${title}: ${message}`);\n  console.log(`${title}: ${message}`);\n}\n\n/**\n * 应用入口点\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('DOM加载完成，开始初始化应用...');\n  initializeApp();\n});\n\n// 开发环境调试\nif (import.meta.env?.DEV) {\n  window.DEBUG_APP_STATE = appState;\n  window.DEBUG_PLANT_MANAGER = () => window.PlantAnnotationTool?.plantDataManager;\n  window.DEBUG_ANNOTATION_TOOL = () => window.PlantAnnotationTool?.annotationTool;\n  \n  // 添加时间序列导出调试功能\n  window.DEBUG_TIME_SERIES_EXPORT = async () => {\n    const plantManager = window.PlantAnnotationTool?.plantDataManager;\n    if (plantManager) {\n      return await plantManager.debugTimeSeriesExport();\n    } else {\n      console.error('PlantDataManager未初始化');\n      return null;\n    }\n  };\n  \n  // 添加立即导出纯净数据的调试功能\n  window.DEBUG_EXPORT_PURE = async () => {\n    const plantManager = window.PlantAnnotationTool?.plantDataManager;\n    if (plantManager) {\n      const pureData = await plantManager.exportPureImageAnnotations();\n      console.log('调试：纯净导出数据', pureData);\n      return pureData;\n    } else {\n      console.error('PlantDataManager未初始化');\n      return null;\n    }\n  };\n  \n  // 临时修复脚本：为传统标注数据添加序号字段\n  window.fixLegacyDataOrder = async function() {\n    console.log('=== 开始修复传统数据的序号字段 ===');\n    \n    try {\n      // 获取植物数据管理器和存储管理器\n      const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n      if (!plantDataManager) {\n        throw new Error('植物数据管理器未初始化，请先加载数据集');\n      }\n      \n      const annotationStorage = plantDataManager.annotationStorage;\n      if (!annotationStorage) {\n        throw new Error('标注存储管理器未找到');\n      }\n      \n      console.log('正在扫描图像标注数据...');\n      \n      let processedImages = 0;\n      let fixedAnnotations = 0;\n      let totalAnnotations = 0;\n      \n      // 处理imageAnnotations中的数据\n      for (const [imageId, annotationData] of annotationStorage.imageAnnotations) {\n        if (annotationData.annotations && annotationData.annotations.length > 0) {\n          processedImages++;\n          \n          let hasOrderIssues = false;\n          const annotations = annotationData.annotations;\n          totalAnnotations += annotations.length;\n          \n          // 检查是否有标注点没有序号\n          for (let i = 0; i < annotations.length; i++) {\n            if (typeof annotations[i].order !== 'number' || annotations[i].order <= 0) {\n              hasOrderIssues = true;\n              break;\n            }\n          }\n          \n          // 检查序号是否重复或不连续\n          if (!hasOrderIssues) {\n            const orders = annotations.map(kp => kp.order).sort((a, b) => a - b);\n            for (let i = 0; i < orders.length; i++) {\n              if (orders[i] !== i + 1) {\n                hasOrderIssues = true;\n                break;\n              }\n            }\n          }\n          \n          // 如果有问题，修复序号\n          if (hasOrderIssues) {\n            console.log(`修复图像 ${imageId} 的 ${annotations.length} 个标注点的序号...`);\n            \n            // 按照原有顺序分配序号（保持传统数据的顺序不变）\n            for (let i = 0; i < annotations.length; i++) {\n              annotations[i].order = i + 1;\n            }\n            \n            fixedAnnotations += annotations.length;\n            \n            // 重新保存到存储\n            await annotationStorage.saveImageAnnotation(imageId, annotationData);\n            \n            console.log(`✓ 已修复图像 ${imageId}：分配序号 1-${annotations.length}`);\n          }\n        }\n      }\n      \n      // 处理植物标注数据中的annotations字段\n      console.log('正在扫描植物标注数据...');\n      \n      let processedPlants = 0;\n      let fixedPlantAnnotations = 0;\n      \n      for (const [plantId, plantData] of annotationStorage.annotations) {\n        if (plantData.annotations && plantData.annotations.length > 0) {\n          processedPlants++;\n          \n          let hasOrderIssues = false;\n          const annotations = plantData.annotations;\n          \n          // 检查是否有标注点没有序号\n          for (let i = 0; i < annotations.length; i++) {\n            if (typeof annotations[i].order !== 'number' || annotations[i].order <= 0) {\n              hasOrderIssues = true;\n              break;\n            }\n          }\n          \n          // 检查序号是否重复或不连续\n          if (!hasOrderIssues) {\n            const orders = annotations.map(kp => kp.order).sort((a, b) => a - b);\n            for (let i = 0; i < orders.length; i++) {\n              if (orders[i] !== i + 1) {\n                hasOrderIssues = true;\n                break;\n              }\n            }\n          }\n          \n          // 如果有问题，修复序号\n          if (hasOrderIssues) {\n            console.log(`修复植物 ${plantId} 的 ${annotations.length} 个标注点的序号...`);\n            \n            // 按照原有顺序分配序号\n            for (let i = 0; i < annotations.length; i++) {\n              annotations[i].order = i + 1;\n            }\n            \n            fixedPlantAnnotations += annotations.length;\n            \n            console.log(`✓ 已修复植物 ${plantId}：分配序号 1-${annotations.length}`);\n          }\n        }\n      }\n      \n      // 保存所有修改到服务器\n      if (fixedAnnotations > 0 || fixedPlantAnnotations > 0) {\n        console.log('正在保存修复的数据到服务器...');\n        await annotationStorage.saveAnnotationsToServer();\n        console.log('✓ 所有修复的数据已保存');\n      }\n      \n      // 输出修复结果\n      console.log('=== 修复完成 ===');\n      console.log(`扫描了 ${processedImages} 张图像的标注数据`);\n      console.log(`扫描了 ${processedPlants} 个植物的标注数据`);\n      console.log(`总计 ${totalAnnotations} 个标注点`);\n      console.log(`修复了 ${fixedAnnotations} 个图像标注点的序号`);\n      console.log(`修复了 ${fixedPlantAnnotations} 个植物标注点的序号`);\n      \n      if (fixedAnnotations === 0 && fixedPlantAnnotations === 0) {\n        console.log('✅ 所有数据的序号都是正确的，无需修复');\n      } else {\n        console.log(`✅ 已成功修复 ${fixedAnnotations + fixedPlantAnnotations} 个标注点的序号`);\n      }\n      \n      // 建议用户重新加载页面以确保数据生效\n      if (fixedAnnotations > 0 || fixedPlantAnnotations > 0) {\n        console.log('💡 建议重新加载页面以确保修复的数据完全生效');\n      }\n      \n      return {\n        success: true,\n        processedImages,\n        processedPlants,\n        totalAnnotations,\n        fixedAnnotations,\n        fixedPlantAnnotations,\n        totalFixed: fixedAnnotations + fixedPlantAnnotations\n      };\n      \n    } catch (error) {\n      console.error('修复传统数据失败:', error);\n      console.log('❌ 修复过程中发生错误，请检查控制台输出');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  \n  // 调试标注文件读取\n  window.DEBUG_ANNOTATION_FILE = async (imageId) => {\n    if (plantDataManager && plantDataManager.fileSystemManager) {\n      try {\n        console.log(`[调试] 尝试读取标注文件: ${imageId}`);\n        const data = await plantDataManager.fileSystemManager.loadAnnotationFile(imageId);\n        console.log(`[调试] 标注文件内容:`, data);\n        return data;\n      } catch (error) {\n        console.error(`[调试] 读取失败:`, error);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  // 调试：查找有标注数据的文件\n  window.DEBUG_FIND_ANNOTATED_FILES = async (maxCheck = 10) => {\n    if (plantDataManager && plantDataManager.fileSystemManager) {\n      try {\n        const allFiles = await plantDataManager.fileSystemManager.getAllAnnotationFiles();\n        console.log(`[调试] 总共 ${allFiles.length} 个标注文件，检查前 ${maxCheck} 个...`);\n\n        const annotatedFiles = [];\n        for (let i = 0; i < Math.min(maxCheck, allFiles.length); i++) {\n          const imageId = allFiles[i];\n          const data = await plantDataManager.fileSystemManager.loadAnnotationFile(imageId);\n          if (data && data.annotations && data.annotations.length > 0) {\n            annotatedFiles.push({\n              imageId,\n              annotationCount: data.annotations.length,\n              data\n            });\n            console.log(`[调试] 找到有标注的文件: ${imageId} (${data.annotations.length} 个标注点)`);\n          }\n        }\n\n        console.log(`[调试] 检查完成，找到 ${annotatedFiles.length} 个有标注数据的文件`);\n        return annotatedFiles;\n      } catch (error) {\n        console.error(`[调试] 查找失败:`, error);\n        return [];\n      }\n    }\n    return [];\n  };\n\n  console.log('开发模式：调试对象已绑定到window');\n  console.log('可用调试方法:');\n  console.log('- DEBUG_TIME_SERIES_EXPORT() - 检查时间序列导出状态');\n  console.log('- DEBUG_EXPORT_PURE() - 检查纯净导出数据');\n  console.log('- DEBUG_ANNOTATION_FILE(imageId) - 调试标注文件读取');\n  console.log('- DEBUG_FIND_ANNOTATED_FILES(maxCheck) - 查找有标注数据的文件');\n  console.log('- fixLegacyDataOrder() - 修复传统数据的序号字段');\n  console.log('- MIGRATE_PLANT_STATUS() - 🔧 NEW: 迁移植物完成状态数据');\n  \n  // 🔧 NEW: Migration script for plant completion status\n  window.MIGRATE_PLANT_STATUS = async function() {\n    console.log('=== 开始迁移植物完成状态数据 ===');\n    \n    try {\n      const plantDataManager = window.PlantAnnotationTool?.plantDataManager;\n      if (!plantDataManager) {\n        throw new Error('PlantDataManager未初始化，请先加载数据集');\n      }\n      \n      console.log('正在扫描所有植物状态...');\n      \n      const plants = plantDataManager.getPlantList();\n      let migratedCount = 0;\n      let alreadyCorrectCount = 0;\n      \n      for (const plant of plants) {\n        const plantId = plant.id;\n        console.log(`检查植物 ${plantId}，当前状态: ${plant.status}`);\n        \n        // Skip already skipped plants\n        if (plant.status === 'skipped') {\n          console.log(`${plantId}: 保持跳过状态`);\n          alreadyCorrectCount++;\n          continue;\n        }\n        \n        // Check if plant has annotations\n        let hasAnnotations = false;\n        try {\n          const annotations = plantDataManager.getPlantAnnotations(plantId);\n          hasAnnotations = annotations && annotations.length > 0;\n        } catch (error) {\n          console.warn(`无法检查 ${plantId} 的标注:`, error);\n        }\n        \n        let newStatus;\n        if (hasAnnotations && plant.status === 'completed') {\n          // 🔧 MIGRATION LOGIC: Plants with annotations that were auto-marked as completed\n          // should be set to 'completed' to maintain existing user expectations\n          newStatus = 'completed';\n          console.log(`${plantId}: 有标注且已标记完成 → 保持 completed 状态 (迁移兼容)`);\n          alreadyCorrectCount++;\n        } else if (hasAnnotations && plant.status !== 'completed') {\n          // Plants with annotations but not explicitly completed should be in-progress\n          newStatus = 'in-progress';\n          plantDataManager.updatePlantStatus(plantId, newStatus);\n          console.log(`${plantId}: 有标注但未明确完成 → 设置为 in-progress`);\n          migratedCount++;\n        } else if (!hasAnnotations) {\n          // Plants without annotations should be pending\n          newStatus = 'pending';\n          if (plant.status !== 'pending') {\n            plantDataManager.updatePlantStatus(plantId, newStatus);\n            console.log(`${plantId}: 无标注 → 设置为 pending`);\n            migratedCount++;\n          } else {\n            alreadyCorrectCount++;\n          }\n        } else {\n          alreadyCorrectCount++;\n        }\n      }\n      \n      console.log('=== 迁移完成 ===');\n      console.log(`总计扫描 ${plants.length} 个植物`);\n      console.log(`迁移了 ${migratedCount} 个植物的状态`);\n      console.log(`${alreadyCorrectCount} 个植物状态已正确`);\n      \n      // Refresh UI to show updated status\n      if (renderPlantList && typeof renderPlantList === 'function') {\n        renderPlantList(plants);\n        console.log('UI已刷新以显示新状态');\n      }\n      \n      if (updateProgressStats && typeof updateProgressStats === 'function') {\n        updateProgressStats();\n        console.log('进度统计已更新');\n      }\n      \n      console.log('💡 现在，只有点击 \"Complete Plant\" 按钮的植物才会标记为 completed');\n      console.log('💡 有标注但未点击完成按钮的植物显示为 in-progress');\n      \n      return {\n        success: true,\n        totalPlants: plants.length,\n        migratedCount,\n        alreadyCorrectCount\n      };\n      \n    } catch (error) {\n      console.error('迁移植物状态失败:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n}\n\n/**\n * 生成导出数据预览\n */\nasync function generateExportPreview() {\n  const previewContainer = document.getElementById('export-preview');\n  if (!previewContainer) return;\n\n  try {\n    previewContainer.innerHTML = '正在生成预览...';\n\n    // 获取导出数据\n    const exportData = await getDirectExportData();\n\n    if (Object.keys(exportData.annotations).length === 0 && Object.keys(exportData.skippedPlants).length === 0) {\n      previewContainer.innerHTML = '<div style=\"color: #6b7280; text-align: center; padding: 20px;\">No annotation data available</div>';\n      return;\n    }\n\n    // 生成预览HTML\n    const previewHTML = generateSimplePreviewHTML(exportData);\n    previewContainer.innerHTML = previewHTML;\n\n    // 绑定展开/折叠事件\n    bindPreviewEvents();\n\n  } catch (error) {\n    console.error('Failed to generate export preview:', error);\n    previewContainer.innerHTML = '<div style=\"color: #dc2626;\">Failed to generate preview, please check console</div>';\n  }\n}\n\n/**\n * 从图像ID推断植株ID\n */\nfunction inferPlantIdFromImageId(imageId) {\n  // 图像ID格式通常是: BR017-028122_sv-000_BR017-028122-2018-07-04_00_VIS_sv_000-0-0-0.png\n  // 植株ID通常是: BR017-028122\n\n  if (imageId.includes('_')) {\n    const parts = imageId.split('_');\n    if (parts.length > 0) {\n      // 取第一部分作为植株ID\n      return parts[0];\n    }\n  }\n\n  // 如果无法解析，尝试从文件名中提取\n  if (imageId.includes('-')) {\n    const parts = imageId.split('-');\n    if (parts.length >= 2) {\n      // 组合前两部分作为植株ID (如 BR017-028122)\n      return `${parts[0]}-${parts[1]}`;\n    }\n  }\n\n  // 最后的备选方案：返回原始imageId的前缀\n  return imageId.split('.')[0].split('_')[0];\n}\n\n/**\n * 生成简化的预览HTML\n */\nfunction generateSimplePreviewHTML(exportData) {\n  let html = '';\n\n  // Display annotation data\n  const annotationCount = Object.keys(exportData.annotations).length;\n  if (annotationCount > 0) {\n    html += `\n      <div style=\"margin-bottom: 20px;\">\n        <div style=\"font-weight: 600; margin-bottom: 10px; color: #374151;\">\n          📊 Annotation Data (${annotationCount} images)\n        </div>\n        <div style=\"max-height: 200px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px; padding: 10px;\">\n    `;\n\n    // 显示前10个标注数据作为预览\n    const imageIds = Object.keys(exportData.annotations).slice(0, 10);\n    for (const imageId of imageIds) {\n      const data = exportData.annotations[imageId];\n      // 如果没有plantId，尝试从imageId推断\n      const plantId = data.plantId || inferPlantIdFromImageId(imageId);\n\n      html += `\n        <div style=\"margin-bottom: 8px; padding: 8px; background: #f9fafb; border-radius: 4px; font-size: 13px;\">\n          <div style=\"font-weight: 500;\">${imageId}</div>\n          <div style=\"color: #6b7280;\">\n            Plant: ${plantId} |\n            Keypoints: ${data.annotations.length} |\n            Time: ${data.timestamp ? new Date(data.timestamp).toLocaleString() : 'N/A'}\n          </div>\n        </div>\n      `;\n    }\n\n    if (annotationCount > 10) {\n      html += `<div style=\"text-align: center; color: #6b7280; margin-top: 10px;\">... ${annotationCount - 10} more images</div>`;\n    }\n\n    html += '</div></div>';\n  }\n\n  // Display skipped plants\n  const skippedCount = Object.keys(exportData.skippedPlants).length;\n  if (skippedCount > 0) {\n    html += `\n      <div style=\"margin-bottom: 20px;\">\n        <div style=\"font-weight: 600; margin-bottom: 10px; color: #374151;\">\n          ⏭️ Skipped Plants (${skippedCount})\n        </div>\n        <div style=\"max-height: 150px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px; padding: 10px;\">\n    `;\n\n    for (const [plantId, data] of Object.entries(exportData.skippedPlants)) {\n      html += `\n        <div style=\"margin-bottom: 8px; padding: 8px; background: #fef3c7; border-radius: 4px; font-size: 13px;\">\n          <div style=\"font-weight: 500;\">${plantId}</div>\n          <div style=\"color: #92400e;\">\n            Reason: ${data.skipReason} |\n            Time: ${data.skipDate ? new Date(data.skipDate).toLocaleString() : 'N/A'}\n          </div>\n        </div>\n      `;\n    }\n\n    html += '</div></div>';\n  }\n\n  if (html === '') {\n    html = '<div style=\"color: #6b7280; text-align: center; padding: 20px;\">No data available</div>';\n  }\n\n  return html;\n}\n\n/**\n * 按植株和视角分组图像数据\n */\nfunction groupImagesByPlantAndView(imageData) {\n  const groupedData = {};\n  \n  for (const [imageId, annotations] of Object.entries(imageData)) {\n    // 解析图像ID获取植株和视角信息\n    const parts = imageId.split('_');\n    if (parts.length >= 2) {\n      const plantId = parts[0]; // BR017-028111\n      const viewAngle = parts[1]; // sv-000\n      \n      if (!groupedData[plantId]) {\n        groupedData[plantId] = {};\n      }\n      \n      if (!groupedData[plantId][viewAngle]) {\n        groupedData[plantId][viewAngle] = [];\n      }\n      \n      groupedData[plantId][viewAngle].push({\n        imageId,\n        annotations,\n        imageName: imageId,\n        keypointCount: annotations.length\n      });\n    }\n  }\n  \n  // 按时间排序每个视角的图像\n  for (const plantId of Object.keys(groupedData)) {\n    for (const viewAngle of Object.keys(groupedData[plantId])) {\n      groupedData[plantId][viewAngle].sort((a, b) => {\n        return a.imageId.localeCompare(b.imageId);\n      });\n    }\n  }\n  \n  return groupedData;\n}\n\n/**\n * 生成预览HTML\n */\nasync function generatePreviewHTML(groupedData) {\n  const plantIds = Object.keys(groupedData).sort();\n  \n  if (plantIds.length === 0) {\n    return '<div style=\"color: #6b7280; text-align: center; padding: 20px;\">暂无数据</div>';\n  }\n  \n  let html = `\n    <div style=\"margin-bottom: 15px; font-weight: 600; color: #374151;\">\n      共 ${plantIds.length} 个植株参与导出\n    </div>\n  `;\n  \n  for (const plantId of plantIds) {\n    const plantData = groupedData[plantId];\n    const viewAngles = Object.keys(plantData);\n    const totalImages = Object.values(plantData).reduce((sum, images) => sum + images.length, 0);\n    const totalKeypoints = Object.values(plantData).reduce((sum, images) => \n      sum + images.reduce((imgSum, img) => imgSum + img.keypointCount, 0), 0\n    );\n    \n    html += `\n      <div class=\"preview-plant\" style=\"border: 1px solid #d1d5db; border-radius: 8px; margin-bottom: 15px; overflow: hidden;\">\n        <div class=\"preview-plant-header\" style=\"background: #f3f4f6; padding: 12px; cursor: pointer; display: flex; justify-content: space-between; align-items: center;\"\n             onclick=\"togglePlantPreview('${plantId}')\">\n          <div>\n            <span style=\"font-weight: 600; color: #1f2937;\">🌱 ${plantId}</span>\n            <span style=\"color: #6b7280; margin-left: 10px;\">\n              ${viewAngles.length} views • ${totalImages} images • ${totalKeypoints} 个标注点\n            </span>\n          </div>\n          <span class=\"preview-toggle\" style=\"color: #6b7280;\">▼</span>\n        </div>\n        <div class=\"preview-plant-content\" id=\"preview-${plantId}\" style=\"display: none;\">\n          ${generateViewAnglesHTML(plantId, plantData)}\n        </div>\n      </div>\n    `;\n  }\n  \n  return html;\n}\n\n/**\n * 生成视角HTML\n */\nfunction generateViewAnglesHTML(plantId, plantData) {\n  let html = '';\n  \n  for (const [viewAngle, images] of Object.entries(plantData)) {\n    const totalKeypoints = images.reduce((sum, img) => sum + img.keypointCount, 0);\n    \n    html += `\n      <div class=\"preview-view-angle\" style=\"border-top: 1px solid #e5e7eb;\">\n        <div class=\"preview-view-header\" style=\"background: #fafafa; padding: 10px 15px; cursor: pointer; display: flex; justify-content: space-between; align-items: center;\"\n             onclick=\"toggleViewPreview('${plantId}', '${viewAngle}')\">\n          <div>\n            <span style=\"font-weight: 500; color: #374151;\">📷 ${viewAngle}</span>\n            <span style=\"color: #6b7280; margin-left: 10px;\">\n              ${images.length} images • ${totalKeypoints} annotations\n            </span>\n          </div>\n          <span class=\"preview-toggle\" style=\"color: #6b7280;\">▶</span>\n        </div>\n        <div class=\"preview-view-content\" id=\"preview-${plantId}-${viewAngle}\" style=\"display: none; padding: 10px 15px;\">\n          ${generateImagesHTML(images)}\n        </div>\n      </div>\n    `;\n  }\n  \n  return html;\n}\n\n/**\n * 生成图像HTML\n */\nfunction generateImagesHTML(images) {\n  let html = '<div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 15px;\">';\n  \n  for (const image of images) {\n    // 正确提取文件名 - 从完整的imageId中提取最后的文件名部分\n    const fileName = extractDisplayFileName(image.imageName);\n    \n    html += `\n      <div class=\"preview-image\" style=\"border: 1px solid #e5e7eb; border-radius: 8px; padding: 12px; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);\">\n        <div style=\"margin-bottom: 10px;\">\n          <div style=\"font-weight: 500; color: #374151; font-size: 14px; word-break: break-all;\" title=\"${image.imageName}\">\n            📄 ${fileName}\n          </div>\n          <div style=\"color: #6b7280; font-size: 12px; margin-top: 4px;\">\n            ${image.keypointCount} 个标注点\n          </div>\n        </div>\n        \n        <div class=\"preview-annotations\" style=\"background: #f8fafc; border-radius: 6px; padding: 10px;\">\n          <div style=\"font-size: 13px; font-weight: 500; color: #374151; margin-bottom: 8px;\">标注点预览:</div>\n          <div class=\"annotation-preview-container\" style=\"position: relative; width: 100%; height: 200px; border: 1px solid #d1d5db; border-radius: 4px; overflow: hidden; background: #f9fafb;\">\n            <canvas \n              class=\"annotation-preview-canvas\" \n              data-image-id=\"${image.imageId}\"\n              data-annotations='${JSON.stringify(image.annotations)}'\n              style=\"width: 100%; height: 100%; cursor: pointer;\"\n              title=\"点击查看大图\"\n              onclick=\"showImageDetail('${image.imageId}')\"\n            ></canvas>\n            <div class=\"preview-loading\" style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #6b7280; font-size: 12px;\">\n              加载中...\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  html += '</div>';\n  return html;\n}\n\n/**\n * 正确提取显示用的文件名\n */\nfunction extractDisplayFileName(imageName) {\n  // 从imageId中提取有意义的部分\n  // 例如: BR017-028111_sv-000_BR017-028111-2018-07-09_00_VIS_sv_000-0-0-0.png\n  // 提取: BR017-028111-2018-07-09_00_VIS_sv_000-0-0-0.png\n  \n  const parts = imageName.split('_');\n  if (parts.length >= 3) {\n    // 从第三部分开始是有意义的文件名信息\n    return parts.slice(2).join('_');\n  }\n  \n  // 如果格式不符合预期，返回原始名称\n  return imageName;\n}\n\n/**\n * 绑定预览事件\n */\nfunction bindPreviewEvents() {\n  // 植株展开/折叠事件通过onclick属性绑定\n  window.togglePlantPreview = function(plantId) {\n    const content = document.getElementById(`preview-${plantId}`);\n    const toggle = content.parentElement.querySelector('.preview-plant-header .preview-toggle');\n    \n    if (content.style.display === 'none') {\n      content.style.display = 'block';\n      toggle.textContent = '▲';\n      // 展开时渲染canvas\n      setTimeout(() => renderPreviewCanvases(content), 100);\n    } else {\n      content.style.display = 'none';\n      toggle.textContent = '▼';\n    }\n  };\n  \n  // 视角展开/折叠事件\n  window.toggleViewPreview = function(plantId, viewAngle) {\n    const content = document.getElementById(`preview-${plantId}-${viewAngle}`);\n    const toggle = content.parentElement.querySelector('.preview-view-header .preview-toggle');\n    \n    if (content.style.display === 'none') {\n      content.style.display = 'block';\n      toggle.textContent = '▼';\n      // 展开时渲染canvas\n      setTimeout(() => renderPreviewCanvases(content), 100);\n    } else {\n      content.style.display = 'none';\n      toggle.textContent = '▶';\n    }\n  };\n  \n  // 显示图像详情\n  window.showImageDetail = function(imageId) {\n    showImageDetailModal(imageId);\n  };\n  \n  // 渲染所有可见的canvas\n  setTimeout(() => {\n    const allCanvases = document.querySelectorAll('.annotation-preview-canvas');\n    allCanvases.forEach(canvas => {\n      if (isElementVisible(canvas)) {\n        renderAnnotationPreview(canvas);\n      }\n    });\n  }, 500);\n}\n\n/**\n * 渲染预览区域内的所有canvas\n */\nfunction renderPreviewCanvases(container) {\n  const canvases = container.querySelectorAll('.annotation-preview-canvas');\n  canvases.forEach(canvas => {\n    if (isElementVisible(canvas)) {\n      renderAnnotationPreview(canvas);\n    }\n  });\n}\n\n/**\n * 检查元素是否可见\n */\nfunction isElementVisible(element) {\n  const rect = element.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\n\n/**\n * 渲染单个标注预览canvas\n */\nasync function renderAnnotationPreview(canvas) {\n  try {\n    const imageId = canvas.dataset.imageId;\n    const annotations = JSON.parse(canvas.dataset.annotations);\n    const loadingElement = canvas.parentElement.querySelector('.preview-loading');\n    \n    // 检查是否已经渲染过\n    if (canvas.dataset.rendered === 'true') {\n      return;\n    }\n    \n    // 显示加载状态\n    if (loadingElement) {\n      loadingElement.style.display = 'block';\n      loadingElement.textContent = '加载图像...';\n    }\n    \n    // 获取图像数据\n    const imageData = await getImageDataFromId(imageId);\n    if (!imageData) {\n      throw new Error('无法获取图像数据');\n    }\n    \n    // 加载图像\n    const image = new Image();\n    image.crossOrigin = 'anonymous';\n    \n    await new Promise((resolve, reject) => {\n      image.onload = () => resolve();\n      image.onerror = () => reject(new Error('图像加载失败'));\n      image.src = imageData.url;\n    });\n    \n    // 设置canvas尺寸\n    const container = canvas.parentElement;\n    const containerRect = container.getBoundingClientRect();\n    const targetWidth = containerRect.width - 2; // 减去边框\n    const targetHeight = containerRect.height - 2;\n    \n    canvas.width = targetWidth * window.devicePixelRatio;\n    canvas.height = targetHeight * window.devicePixelRatio;\n    canvas.style.width = targetWidth + 'px';\n    canvas.style.height = targetHeight + 'px';\n    \n    const ctx = canvas.getContext('2d');\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n    \n    // 计算图像适应容器的尺寸\n    const imgAspect = image.width / image.height;\n    const containerAspect = targetWidth / targetHeight;\n    \n    let drawWidth, drawHeight, offsetX, offsetY;\n    \n    if (imgAspect > containerAspect) {\n      // 图像较宽，以宽度为准\n      drawWidth = targetWidth;\n      drawHeight = targetWidth / imgAspect;\n      offsetX = 0;\n      offsetY = (targetHeight - drawHeight) / 2;\n    } else {\n      // 图像较高，以高度为准\n      drawHeight = targetHeight;\n      drawWidth = targetHeight * imgAspect;\n      offsetX = (targetWidth - drawWidth) / 2;\n      offsetY = 0;\n    }\n    \n    // 绘制图像\n    ctx.clearRect(0, 0, targetWidth, targetHeight);\n    ctx.drawImage(image, offsetX, offsetY, drawWidth, drawHeight);\n    \n    // 绘制标注点\n    if (annotations && annotations.length > 0) {\n      // 计算标注点在canvas中的位置\n      const scaleX = drawWidth / image.width;\n      const scaleY = drawHeight / image.height;\n      \n      annotations.forEach((annotation, index) => {\n        const x = annotation.x * scaleX + offsetX;\n        const y = annotation.y * scaleY + offsetY;\n        \n        // 绘制标注点\n        ctx.fillStyle = '#ef4444';\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2;\n        \n        ctx.beginPath();\n        ctx.arc(x, y, 6, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.stroke();\n        \n        // 绘制标注点编号\n        ctx.fillStyle = '#ffffff';\n        ctx.font = 'bold 10px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText((index + 1).toString(), x, y);\n      });\n    }\n    \n    // 隐藏加载状态\n    if (loadingElement) {\n      loadingElement.style.display = 'none';\n    }\n    \n    // 标记为已渲染\n    canvas.dataset.rendered = 'true';\n    \n  } catch (error) {\n    console.error('渲染标注预览失败:', error);\n    const loadingElement = canvas.parentElement.querySelector('.preview-loading');\n    if (loadingElement) {\n      loadingElement.textContent = '加载失败';\n      loadingElement.style.color = '#dc2626';\n    }\n  }\n}\n\n/**\n * 从图像ID获取图像数据\n */\nasync function getImageDataFromId(imageId) {\n  try {\n    // 从imageId中解析植株ID\n    const parts = imageId.split('_');\n    if (parts.length < 2) {\n      throw new Error('无效的图像ID格式');\n    }\n    \n    const plantId = parts[0];\n    const viewAngle = parts[1];\n    \n    // 获取植株的图像数据\n    if (!plantDataManager) {\n      throw new Error('PlantDataManager未初始化');\n    }\n    \n    const images = await plantDataManager.getPlantImages(plantId, viewAngle);\n    const targetImage = images.find(img => img.id === imageId);\n    \n    if (!targetImage) {\n      throw new Error(`未找到图像: ${imageId}`);\n    }\n    \n    // 创建图像URL\n    const imageURL = await plantDataManager.fileSystemManager.createImageURL(targetImage);\n    \n    return {\n      url: imageURL,\n      data: targetImage\n    };\n    \n  } catch (error) {\n    console.error('获取图像数据失败:', error);\n    return null;\n  }\n}\n\n/**\n * 显示图像详情模态框\n */\nfunction showImageDetailModal(imageId) {\n  // 创建详情模态框 - 简单实现，显示原图和标注点\n  const modalHTML = `\n    <div id=\"image-detail-modal\" class=\"modal\" style=\"display: flex; z-index: 2000;\">\n      <div class=\"modal-content\" style=\"max-width: 90vw; max-height: 90vh; padding: 20px;\">\n        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n          <h3 style=\"margin: 0;\">图像详情</h3>\n          <button onclick=\"closeImageDetailModal()\" class=\"modal-close\"></button>\n        </div>\n        <div style=\"text-align: center;\">\n          <div style=\"font-size: 14px; color: #6b7280; margin-bottom: 10px; word-break: break-all;\">\n            ${imageId}\n          </div>\n          <div style=\"max-width: 100%; max-height: 70vh; overflow: auto; border: 1px solid #e5e7eb; border-radius: 8px;\">\n            <canvas id=\"detail-canvas\" style=\"max-width: 100%; height: auto;\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n  \n  // 移除已存在的详情模态框\n  const existingModal = document.getElementById('image-detail-modal');\n  if (existingModal) {\n    existingModal.remove();\n  }\n  \n  // 添加到body\n  document.body.insertAdjacentHTML('beforeend', modalHTML);\n  \n  // 渲染大图\n  renderImageDetail(imageId);\n  \n  // 绑定关闭事件\n  window.closeImageDetailModal = function() {\n    const modal = document.getElementById('image-detail-modal');\n    if (modal) {\n      modal.remove();\n    }\n  };\n}\n\n/**\n * 渲染图像详情\n */\nasync function renderImageDetail(imageId) {\n  const canvas = document.getElementById('detail-canvas');\n  if (!canvas) return;\n  \n  try {\n    // 获取标注数据\n    const previewCanvas = document.querySelector(`[data-image-id=\"${imageId}\"]`);\n    const annotations = previewCanvas ? JSON.parse(previewCanvas.dataset.annotations) : [];\n    \n    // 获取图像数据\n    const imageData = await getImageDataFromId(imageId);\n    if (!imageData) {\n      throw new Error('无法获取图像数据');\n    }\n    \n    // 加载图像\n    const image = new Image();\n    image.crossOrigin = 'anonymous';\n    \n    await new Promise((resolve, reject) => {\n      image.onload = () => resolve();\n      image.onerror = () => reject(new Error('图像加载失败'));\n      image.src = imageData.url;\n    });\n    \n    // 设置canvas尺寸（保持原图比例，但限制最大尺寸）\n    const maxWidth = 800;\n    const maxHeight = 600;\n    \n    let drawWidth = image.width;\n    let drawHeight = image.height;\n    \n    if (drawWidth > maxWidth || drawHeight > maxHeight) {\n      const scale = Math.min(maxWidth / drawWidth, maxHeight / drawHeight);\n      drawWidth *= scale;\n      drawHeight *= scale;\n    }\n    \n    canvas.width = drawWidth;\n    canvas.height = drawHeight;\n    \n    const ctx = canvas.getContext('2d');\n    \n    // 绘制图像\n    ctx.drawImage(image, 0, 0, drawWidth, drawHeight);\n    \n    // 绘制标注点\n    if (annotations && annotations.length > 0) {\n      const scaleX = drawWidth / image.width;\n      const scaleY = drawHeight / image.height;\n      \n      annotations.forEach((annotation, index) => {\n        const x = annotation.x * scaleX;\n        const y = annotation.y * scaleY;\n        \n        // 绘制标注点\n        ctx.fillStyle = '#ef4444';\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 3;\n        \n        ctx.beginPath();\n        ctx.arc(x, y, 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.stroke();\n        \n        // 绘制标注点编号\n        ctx.fillStyle = '#ffffff';\n        ctx.font = 'bold 14px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText((index + 1).toString(), x, y);\n      });\n    }\n    \n  } catch (error) {\n    console.error('渲染图像详情失败:', error);\n    canvas.parentElement.innerHTML = '<div style=\"color: #dc2626; padding: 20px;\">图像加载失败</div>';\n  }\n}\n\n// 全局函数：切换分支点预览\nwindow.toggleBranchPointPreview = function(show = null) {\n  if (branchPointPreviewManager) {\n    branchPointPreviewManager.toggleVisibility(show);\n  }\n};\n\n/**\n * 导航到上一张图片\n */\nasync function navigateToPreviousImage() {\n  // 🔧 FIX: Additional navigation lock check\n  if (appState.navigation.isNavigating) {\n    console.log('[Navigation] navigateToPreviousImage blocked - already navigating');\n    return;\n  }\n\n  if (!appState.currentPlant || !appState.currentImage) {\n    console.log('没有当前植物或图像，无法导航');\n    return;\n  }\n  \n  try {\n    // 获取当前视角的所有图像\n    const images = await plantDataManager.getPlantImages(\n      appState.currentPlant.id, \n      appState.currentPlant.selectedViewAngle\n    );\n    \n    if (images.length <= 1) {\n      console.log('只有一张图像，无法导航到上一张');\n      return;\n    }\n    \n    // 找到当前图像的索引\n    const currentIndex = images.findIndex(img => img.id === appState.currentImage.id);\n    \n    if (currentIndex === -1) {\n      console.warn('未找到当前图像在列表中的位置');\n      return;\n    }\n    \n    // 计算上一张图像的索引（循环到最后一张）\n    const previousIndex = currentIndex === 0 ? images.length - 1 : currentIndex - 1;\n    const previousImage = images[previousIndex];\n    \n    console.log(`导航：从第${currentIndex + 1}张切换到第${previousIndex + 1}张`);\n    \n    // 切换到上一张图像\n    await handleImageSelect(previousImage, true);\n    \n  } catch (error) {\n    console.error('导航到上一张图像失败:', error);\n    showError('图像导航失败', error.message);\n  }\n}\n\n/**\n * 导航到下一张图片\n * @param {boolean} autoMode - 是否为自动化模式（不循环回第一张）\n * @returns {boolean} 是否成功切换到下一张图片\n */\nasync function navigateToNextImage(autoMode = false) {\n  // 🔧 FIX: Additional navigation lock check\n  if (appState.navigation.isNavigating) {\n    console.log('[Navigation] navigateToNextImage blocked - already navigating');\n    return false;\n  }\n\n  if (!appState.currentPlant || !appState.currentImage) {\n    console.log('没有当前植物或图像，无法导航');\n    return false;\n  }\n\n  try {\n    // 获取当前视角的所有图像\n    const images = await plantDataManager.getPlantImages(\n      appState.currentPlant.id,\n      appState.currentPlant.selectedViewAngle\n    );\n\n    if (images.length <= 1) {\n      console.log('只有一张图像，无法导航到下一张');\n      return false;\n    }\n\n    // 找到当前图像的索引\n    const currentIndex = images.findIndex(img => img.id === appState.currentImage.id);\n\n    if (currentIndex === -1) {\n      console.warn('未找到当前图像在列表中的位置');\n      return false;\n    }\n\n    // 检查是否已经是最后一张\n    if (currentIndex === images.length - 1) {\n      if (autoMode) {\n        console.log('自动化模式：已经是最后一张图片，不循环');\n        return false;\n      }\n      // 非自动化模式：循环到第一张\n    }\n\n    // 计算下一张图像的索引\n    const nextIndex = currentIndex === images.length - 1 ? 0 : currentIndex + 1;\n    const nextImage = images[nextIndex];\n\n    console.log(`导航：从第${currentIndex + 1}张切换到第${nextIndex + 1}张`);\n\n    // 切换到下一张图像\n    await handleImageSelect(nextImage, true);\n    return true;\n\n  } catch (error) {\n    console.error('导航到下一张图像失败:', error);\n    showError('图像导航失败', error.message);\n    return false;\n  }\n}\n\n/**\n * 处理自动化方向选择（传统标注升级）\n */\nfunction handleAutoDirectionSelection() {\n  if (!annotationTool) {\n    showError('功能不可用', '标注工具未初始化');\n    return;\n  }\n\n  // 检查是否有标注点\n  if (!annotationTool.keypoints || annotationTool.keypoints.length === 0) {\n    showError('传统标注升级', '当前图像没有标注点，请先添加标注点');\n    return;\n  }\n\n  // 额外检查：若当前类型存在且不支持方向，提示并退出\n  const currentType = window.PlantAnnotationTool?.annotationTool?.customAnnotationManager?.getCurrentCustomType?.();\n  if (currentType && currentType.metadata && currentType.metadata.isDirectional === false) {\n    showError('Auto Direction Disabled', '当前选择的类型未启用方向功能');\n    return;\n  }\n\n  // 🔧 FIX: Read mode from UI selector before starting auto direction mode\n  const modeSelector = document.getElementById('auto-direction-mode-selector');\n  if (modeSelector && modeSelector.value) {\n    console.log(`[调试] 从UI选择器读取模式: ${modeSelector.value}`);\n    annotationTool.autoDirectionMode = modeSelector.value;\n  } else {\n    // Fallback to longitudinal if no selection\n    console.log('[调试] UI选择器无值，使用默认longitudinal模式');\n    annotationTool.autoDirectionMode = 'longitudinal';\n    if (modeSelector) {\n      modeSelector.value = 'longitudinal';\n    }\n  }\n\n  // 启动自动化方向升级模式\n  const success = annotationTool.startAutoDirectionMode();\n\n  if (!success) {\n    // startAutoDirectionMode 内部已经显示了提示信息\n    return;\n  }\n\n  // 更新按钮状态\n  const autoDirectionBtn = document.getElementById('auto-direction-btn');\n  if (autoDirectionBtn) {\n    console.log('[调试] 更新按钮状态为自动模式');\n\n    // 先移除现有的事件监听器\n    autoDirectionBtn.removeEventListener('click', handleAutoDirectionSelection);\n\n    // 更新按钮外观\n    autoDirectionBtn.textContent = 'Exit Auto Mode';\n    autoDirectionBtn.classList.add('active');\n\n    // 创建新的事件处理函数\n    const pauseHandler = () => {\n      console.log('[调试] 自动化按钮被点击，暂停模式');\n      annotationTool.pauseAutoDirectionMode();\n    };\n\n    // 添加新的事件监听器\n    autoDirectionBtn.addEventListener('click', pauseHandler);\n\n    // 保存处理函数引用，以便后续移除\n    autoDirectionBtn._pauseHandler = pauseHandler;\n  }\n\n  updateProgressInfo('传统标注升级模式已启动。移动鼠标选择方向，左键确认，右键暂停。');\n}\n\n/**\n * 重置自动方向选择按钮状态\n */\nfunction resetAutoDirectionButton() {\n  const autoDirectionBtn = document.getElementById('auto-direction-btn');\n  if (autoDirectionBtn) {\n    console.log('[调试] 重置自动方向按钮状态');\n\n    // 移除暂停处理函数\n    if (autoDirectionBtn._pauseHandler) {\n      autoDirectionBtn.removeEventListener('click', autoDirectionBtn._pauseHandler);\n      autoDirectionBtn._pauseHandler = null;\n    }\n\n    // 恢复按钮外观\n    autoDirectionBtn.textContent = 'Auto Direction';\n    autoDirectionBtn.classList.remove('active');\n\n    // 重新添加原始事件监听器\n    autoDirectionBtn.addEventListener('click', handleAutoDirectionSelection);\n    \n    console.log('[调试] 自动方向按钮已重置为初始状态');\n  }\n}\n\n// 将重置函数暴露到全局，供AnnotationTool调用\nwindow.resetAutoDirectionButton = resetAutoDirectionButton;\n\n/**\n * 显示跳过植株模态框\n */\nfunction showSkipPlantModal(plantId, event) {\n  // 阻止事件冒泡，避免触发植株选择\n  if (event) {\n    event.stopPropagation();\n  }\n\n  const plant = appState.plants.find(p => p.id === plantId);\n  if (!plant) {\n    showError('错误', '未找到指定的植株');\n    return;\n  }\n\n  // 设置植株名称\n  const plantNameElement = document.getElementById('skip-plant-name');\n  if (plantNameElement) {\n    plantNameElement.textContent = plant.id;\n  }\n\n  // 清空之前的输入\n  const reasonTextarea = document.getElementById('skip-reason');\n  if (reasonTextarea) {\n    reasonTextarea.value = '';\n  }\n\n  // 显示模态框\n  const modal = document.getElementById('skip-plant-modal');\n  if (modal) {\n    modal.style.display = 'flex';\n    modal.dataset.plantId = plantId;\n\n    // 聚焦到文本框\n    setTimeout(() => {\n      if (reasonTextarea) {\n        reasonTextarea.focus();\n      }\n    }, 100);\n  }\n}\n\n/**\n * 隐藏跳过植株模态框\n */\nfunction hideSkipPlantModal() {\n  const modal = document.getElementById('skip-plant-modal');\n  if (modal) {\n    modal.style.display = 'none';\n    modal.dataset.plantId = '';\n  }\n}\n\n/**\n * 确认跳过植株\n */\nasync function confirmSkipPlant() {\n  const modal = document.getElementById('skip-plant-modal');\n  const plantId = modal?.dataset.plantId;\n  const reasonTextarea = document.getElementById('skip-reason');\n  const reason = reasonTextarea?.value.trim();\n\n  if (!plantId) {\n    showError('错误', '未找到要跳过的植株');\n    return;\n  }\n\n  if (!reason) {\n    showError('输入错误', '请输入跳过原因');\n    reasonTextarea?.focus();\n    return;\n  }\n\n  try {\n    // 更新植株状态\n    await plantDataManager.skipPlant(plantId, reason);\n\n    // 更新UI\n    const plant = appState.plants.find(p => p.id === plantId);\n    if (plant) {\n      plant.status = 'skipped';\n      plant.skipReason = reason;\n      plant.skipDate = new Date().toISOString();\n\n      // 重新渲染植株列表项\n      const plantItem = document.querySelector(`[data-plant-id=\"${plantId}\"]`);\n      if (plantItem) {\n        const newItem = createPlantListItem(plant);\n        plantItem.parentNode.replaceChild(newItem, plantItem);\n        \n        // 🔧 FIX: Update note badge for the re-rendered plant item\n        if (window.PlantAnnotationTool?.noteUI) {\n          setTimeout(() => {\n            window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(plantId);\n          }, 100);\n        }\n      }\n\n      // 更新统计\n      updateProgressStats();\n\n      // 如果当前选中的是被跳过的植株，清除选择\n      if (appState.currentPlant?.id === plantId) {\n        console.log('当前植株被跳过，初始化空工作区');\n        initializeEmptyWorkspace();\n      }\n    }\n\n    hideSkipPlantModal();\n    showSuccess('跳过成功', `植株 ${plantId} 已标记为跳过`);\n\n  } catch (error) {\n    console.error('跳过植株失败:', error);\n    showError('跳过失败', error.message);\n  }\n}\n\n/**\n * 🔧 NEW: 处理撤销跳过植株 - 显示确认模态框\n */\nasync function handleUnskipPlant(plantId, event) {\n  // 阻止事件冒泡，避免触发植株选择\n  if (event) {\n    event.stopPropagation();\n  }\n\n  const plant = appState.plants.find(p => p.id === plantId);\n  if (!plant) {\n    showError('错误', '未找到指定的植株');\n    return;\n  }\n\n  if (plant.status !== 'skipped') {\n    showError('操作错误', '植株当前状态不是跳过状态');\n    return;\n  }\n\n  // 显示撤销跳过确认模态框\n  showUnskipPlantModal(plantId, plant.skipReason);\n}\n\n/**\n * 🔧 NEW: 处理撤销完成植株 - 显示确认模态框\n */\nasync function handleUncompletePlant(plantId, event) {\n  // 阻止事件冒泡，避免触发植株选择\n  if (event) {\n    event.stopPropagation();\n  }\n\n  const plant = appState.plants.find(p => p.id === plantId);\n  if (!plant) {\n    showError('错误', '未找到指定的植株');\n    return;\n  }\n\n  if (plant.status !== 'completed') {\n    showError('操作错误', '植株当前状态不是已完成状态');\n    return;\n  }\n\n  // 显示撤销完成确认模态框\n  showUncompletePlantModal(plantId);\n}\n\n/**\n * 处理状态过滤器变化\n */\nfunction handleStatusFilterChange() {\n  const statusFilter = document.getElementById('status-filter');\n  const searchInput = document.getElementById('plant-search');\n\n  if (!statusFilter || !plantDataManager) return;\n\n  const selectedStatus = statusFilter.value;\n  const searchQuery = searchInput?.value.trim() || '';\n\n  // 应用过滤\n  applyPlantsFilter(selectedStatus, searchQuery);\n}\n\n/**\n * 处理植株搜索输入\n */\nfunction handlePlantSearchInput() {\n  const statusFilter = document.getElementById('status-filter');\n  const searchInput = document.getElementById('plant-search');\n\n  if (!searchInput || !plantDataManager) return;\n\n  const searchQuery = searchInput.value.trim();\n  const selectedStatus = statusFilter?.value || 'all';\n\n  // 应用过滤\n  applyPlantsFilter(selectedStatus, searchQuery);\n}\n\n/**\n * 应用植株过滤\n */\nfunction applyPlantsFilter(status, searchQuery) {\n  if (!plantDataManager) return;\n\n  let filteredPlants = plantDataManager.filterPlantsByStatus(status);\n\n  // 如果有搜索查询，进一步过滤\n  if (searchQuery) {\n    const lowerQuery = searchQuery.toLowerCase();\n    filteredPlants = filteredPlants.filter(plant =>\n      plant.id.toLowerCase().includes(lowerQuery) ||\n      plant.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  // 重新渲染植株列表\n  renderPlantList(filteredPlants);\n\n  console.log(`过滤结果: 状态=${status}, 搜索=\"${searchQuery}\", 结果=${filteredPlants.length}个植株`);\n}\n\n/**\n * 🔧 NEW: 显示撤销跳过植株模态框\n */\nfunction showUnskipPlantModal(plantId, skipReason) {\n  const modal = document.getElementById('unskip-plant-modal');\n  const plantIdElement = document.getElementById('unskip-plant-id');\n  const skipReasonElement = document.getElementById('unskip-skip-reason');\n  const newStatusElement = document.getElementById('unskip-new-status');\n  \n  if (!modal) {\n    console.error('Unskip plant modal not found');\n    return;\n  }\n\n  // 设置植株信息\n  if (plantIdElement) {\n    plantIdElement.textContent = plantId;\n  }\n  \n  if (skipReasonElement) {\n    skipReasonElement.textContent = skipReason || '无';\n  }\n\n  // 🔧 FIX: Set the new status that will be applied\n  if (newStatusElement) {\n    newStatusElement.textContent = 'Pending (will be determined by annotations)';\n  }\n\n  // 显示模态框\n  modal.style.display = 'flex';\n  modal.dataset.plantId = plantId;\n}\n\n/**\n * 🔧 NEW: 隐藏撤销跳过植株模态框\n */\nfunction hideUnskipPlantModal() {\n  const modal = document.getElementById('unskip-plant-modal');\n  if (modal) {\n    modal.style.display = 'none';\n    modal.dataset.plantId = '';\n  }\n}\n\n/**\n * 🔧 NEW: 确认撤销跳过植株\n */\nasync function confirmUnskipPlant() {\n  const modal = document.getElementById('unskip-plant-modal');\n  const plantId = modal?.dataset.plantId;\n\n  if (!plantId) {\n    showError('错误', '未找到要撤销跳过的植株');\n    return;\n  }\n\n  try {\n    // 调用PlantDataManager的撤销跳过方法\n    await plantDataManager.unskipPlant(plantId);\n    console.log(`[Debug] 后端unskip操作完成，植物ID: ${plantId}`);\n\n    // 更新本地植株对象\n    const plant = appState.plants.find(p => p.id === plantId);\n    if (plant) {\n      console.log(`[Debug] 更新前植物状态: ${plant.status}, skipReason: ${plant.skipReason}`);\n      \n      const annotations = await plantDataManager.getPlantAnnotations(plantId);\n      plant.status = (annotations && annotations.length > 0) ? 'in-progress' : 'pending';\n      delete plant.skipReason;\n      delete plant.skipDate;\n      \n      console.log(`[Debug] 更新后植物状态: ${plant.status}, skipReason: ${plant.skipReason}`);\n\n      // 重新渲染植株列表项\n      const plantItem = document.querySelector(`[data-plant-id=\"${plantId}\"]`);\n      if (plantItem) {\n        const newItem = createPlantListItem(plant);\n        plantItem.parentNode.replaceChild(newItem, plantItem);\n        console.log(`[Debug] 植物列表项已重新渲染: ${plantId}`);\n        \n        // 🔧 FIX: Update note badge for the re-rendered plant item\n        if (window.PlantAnnotationTool?.noteUI) {\n          setTimeout(() => {\n            window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(plantId);\n          }, 100);\n        }\n      }\n\n      // 更新统计\n      updateProgressStats();\n      \n      // 🔧 NEW: Update complete plant button state after uncomplete\n      updateCompletePlantButtonState();\n    }\n\n    hideUnskipPlantModal();\n    showSuccess('撤销成功', `植株 ${plantId} 已恢复到正常状态`);\n\n  } catch (error) {\n    console.error('撤销跳过植株失败:', error);\n    showError('撤销失败', error.message);\n  }\n}\n\n/**\n * 🔧 NEW: 显示撤销完成植株模态框\n */\nfunction showUncompletePlantModal(plantId) {\n  const modal = document.getElementById('uncomplete-plant-modal');\n  const plantIdElement = document.getElementById('uncomplete-plant-id');\n  \n  if (!modal) {\n    console.error('Uncomplete plant modal not found');\n    return;\n  }\n\n  // 设置植株信息\n  if (plantIdElement) {\n    plantIdElement.textContent = plantId;\n  }\n\n  // 显示模态框\n  modal.style.display = 'flex';\n  modal.dataset.plantId = plantId;\n}\n\n/**\n * 🔧 NEW: 隐藏撤销完成植株模态框\n */\nfunction hideUncompletePlantModal() {\n  const modal = document.getElementById('uncomplete-plant-modal');\n  if (modal) {\n    modal.style.display = 'none';\n    modal.dataset.plantId = '';\n  }\n}\n\n/**\n * 🔧 NEW: 确认撤销完成植株\n */\nasync function confirmUncompletePlant() {\n  const modal = document.getElementById('uncomplete-plant-modal');\n  const plantId = modal?.dataset.plantId;\n\n  if (!plantId) {\n    showError('错误', '未找到要撤销完成的植株');\n    return;\n  }\n\n  try {\n    // 调用PlantDataManager的撤销完成方法\n    await plantDataManager.uncompletePlant(plantId);\n\n    // 更新本地植株对象\n    const plant = appState.plants.find(p => p.id === plantId);\n    if (plant) {\n      const annotations = await plantDataManager.getPlantAnnotations(plantId);\n      plant.status = (annotations && annotations.length > 0) ? 'in-progress' : 'pending';\n\n      // 重新渲染植株列表项\n      const plantItem = document.querySelector(`[data-plant-id=\"${plantId}\"]`);\n      if (plantItem) {\n        const newItem = createPlantListItem(plant);\n        plantItem.parentNode.replaceChild(newItem, plantItem);\n        \n        // 🔧 FIX: Update note badge for the re-rendered plant item\n        if (window.PlantAnnotationTool?.noteUI) {\n          setTimeout(() => {\n            window.PlantAnnotationTool.noteUI.updatePlantNoteBadge(plantId);\n          }, 100);\n        }\n      }\n\n      // 更新统计\n      updateProgressStats();\n      \n      // 🔧 NEW: Update complete plant button state after uncomplete\n      updateCompletePlantButtonState();\n    }\n\n    hideUncompletePlantModal();\n    showSuccess('撤销成功', `植株 ${plantId} 已恢复到进行中状态`);\n\n  } catch (error) {\n    console.error('撤销完成植株失败:', error);\n    showError('撤销失败', error.message);\n  }\n}\n\n// 将函数添加到全局对象，以便AnnotationTool可以访问\nwindow.handleAutoDirectionSelection = handleAutoDirectionSelection;\nwindow.navigateToNextImage = navigateToNextImage;\nwindow.showSkipPlantModal = showSkipPlantModal;\n\n// 🔧 NEW: Global functions for state reversal operations\nwindow.handleUnskipPlant = handleUnskipPlant;\n\n// 🔧 FIX: Expose handleImageSelect for cross-sectional mode support\nwindow.handleImageSelect = handleImageSelect;\n\n/**\n * 处理锁定倍数开关变化\n */\nfunction handleZoomLockChange() {\n  const zoomLockCheckbox = document.getElementById('zoom-lock-checkbox');\n  const zoomLockValue = document.getElementById('zoom-lock-value');\n\n  if (zoomLockCheckbox && zoomLockValue) {\n    const isLocked = zoomLockCheckbox.checked;\n    zoomLockValue.disabled = !isLocked;\n\n    console.log(`缩放锁定: ${isLocked ? '开启' : '关闭'}`);\n\n    if (isLocked) {\n      const lockValue = parseFloat(zoomLockValue.value);\n      console.log(`锁定倍数设置为: ${lockValue}x`);\n    }\n  }\n}\n\n/**\n * 处理锁定倍数值变化\n */\nfunction handleZoomLockValueChange() {\n  const zoomLockValue = document.getElementById('zoom-lock-value');\n  if (zoomLockValue) {\n    const lockValue = parseFloat(zoomLockValue.value);\n    console.log(`锁定倍数更新为: ${lockValue}x`);\n  }\n}\n\n/**\n * 处理自动切换到预期位置开关变化\n */\nfunction handleAutoMoveChange() {\n  const autoMoveCheckbox = document.getElementById('auto-move-checkbox');\n\n  if (autoMoveCheckbox) {\n    const isEnabled = autoMoveCheckbox.checked;\n    console.log(`自动切换到预期位置: ${isEnabled ? '开启' : '关闭'}`);\n\n    // 通知AnnotationTool更新设置\n    if (annotationTool && typeof annotationTool.setAutoMoveToExpectedPosition === 'function') {\n      annotationTool.setAutoMoveToExpectedPosition(isEnabled);\n    }\n  }\n}\n\n/**\n * 🔄 处理实时变更同步开关变化\n */\nfunction handleRealTimeChangeChange() {\n  const realTimeChangeCheckbox = document.getElementById('real-time-change-checkbox');\n  \n  if (realTimeChangeCheckbox) {\n    const isEnabled = realTimeChangeCheckbox.checked;\n    console.log(`🔄 实时变更同步: ${isEnabled ? '开启' : '关闭'}`);\n    \n    // 通知RealTimeSyncManager更新设置\n    if (realTimeSyncManager && typeof realTimeSyncManager.setEnabled === 'function') {\n      realTimeSyncManager.setEnabled(isEnabled);\n    }\n    \n    // 立即更新进度信息以反映状态变化\n    updateProgressInfo(`实时变更同步已${isEnabled ? '开启' : '关闭'}`);\n  }\n}\n\n/**\n * 🔧 NEW: Handle auto direction mode change (Longitudinal vs Cross-Sectional)\n */\nfunction handleAutoDirectionModeChange() {\n  const autoDirectionModeSelector = document.getElementById('auto-direction-mode-selector');\n  \n  if (autoDirectionModeSelector) {\n    const selectedMode = autoDirectionModeSelector.value;\n    console.log(`Auto direction mode changed to: ${selectedMode}`);\n    \n    // Notify AnnotationTool about the mode change\n    if (annotationTool && typeof annotationTool.setAutoDirectionMode === 'function') {\n      annotationTool.setAutoDirectionMode(selectedMode);\n    }\n    \n    // Update progress info to reflect the change\n    const modeText = selectedMode === 'cross-sectional' ? 'Vertical Mode (Order by Order)' : 'Horizontal Mode (Image by Image)';\n    updateProgressInfo(`Auto direction mode set to: ${modeText}`);\n    \n    // Update UI classes for visual feedback\n    const autoDirectionBtn = document.getElementById('auto-direction-btn');\n    if (autoDirectionBtn) {\n      autoDirectionBtn.classList.remove('longitudinal-mode', 'cross-sectional-mode');\n      autoDirectionBtn.classList.add(`${selectedMode}-mode`);\n    }\n  }\n}\n\n/**\n * 获取自动切换设置\n */\nfunction getAutoMoveSettings() {\n  const autoMoveCheckbox = document.getElementById('auto-move-checkbox');\n  return {\n    isEnabled: autoMoveCheckbox ? autoMoveCheckbox.checked : false\n  };\n}\n\n/**\n * 获取锁定倍数设置\n */\nfunction getZoomLockSettings() {\n  const zoomLockCheckbox = document.getElementById('zoom-lock-checkbox');\n  const zoomLockValue = document.getElementById('zoom-lock-value');\n\n  if (zoomLockCheckbox && zoomLockValue) {\n    return {\n      isLocked: zoomLockCheckbox.checked,\n      lockValue: parseFloat(zoomLockValue.value) || 2.5\n    };\n  }\n\n  return { isLocked: false, lockValue: 2.5 };\n}\n\n/**\n * 更新全屏加载进度\n */\nfunction updateFullscreenLoading(progress, subtitle, details) {\n  const progressFill = document.getElementById('progress-fill');\n  const progressText = document.getElementById('progress-text');\n  const loadingSubtitle = document.getElementById('loading-subtitle');\n  const loadingDetails = document.getElementById('loading-details');\n  \n  if (progressFill) {\n    progressFill.style.width = `${progress}%`;\n  }\n  \n  if (progressText) {\n    progressText.textContent = `${progress}%`;\n  }\n  \n  if (loadingSubtitle) {\n    loadingSubtitle.textContent = subtitle;\n  }\n  \n  if (loadingDetails) {\n    loadingDetails.textContent = details;\n  }\n}\n\n/**\n * 隐藏全屏加载指示器\n */\nfunction hideFullscreenLoading() {\n  const fullscreenLoading = document.getElementById('fullscreen-loading');\n  if (fullscreenLoading) {\n    fullscreenLoading.style.display = 'none';\n  }\n}\n\n/**\n * 自动连接数据集 - 完整批量加载版本 (带性能监控)\n */\nasync function autoConnectDataset() {\n  console.log('开始自动连接数据集 - 完整批量加载模式...');\n  \n  // 🔧 PERFORMANCE: 开始性能监控\n  if (performanceMonitor) {\n    performanceMonitor.startMonitoring();\n    performanceMonitor.addCheckpoint('开始数据集连接');\n  }\n  \n  try {\n    updateFullscreenLoading(5, 'Connecting to backend...', 'Establishing connection to the dataset service');\n    \n    // 检查后端连接\n    let datasetInfo;\n    try {\n      datasetInfo = await plantDataManager.fileSystemManager.getDatasetInfo();\n      performanceMonitor?.addCheckpoint('后端连接成功');\n    } catch (connectionError) {\n      performanceMonitor?.recordError(connectionError, '后端连接失败');\n      throw new ConnectionError(\n        '无法连接到后端服务',\n        '请确保后端服务已启动。运行 ./start-backend.sh 启动服务器',\n        {\n          originalError: connectionError,\n          serverUrl: 'http://localhost:3003',\n          suggestion: '尝试运行: ./start-backend.sh'\n        }\n      );\n    }\n    \n    if (!datasetInfo) {\n      const error = new Error('后端服务响应异常：数据集信息为空');\n      performanceMonitor?.recordError(error, '数据集信息验证');\n      throw error;\n    }\n\n    console.log('连接的数据集:', datasetInfo.datasetPath);\n\n    updateFullscreenLoading(15, 'Validating dataset structure...', 'Checking plant directories and structure');\n\n    // 验证目录结构\n    await validateDatasetStructure();\n    performanceMonitor?.addCheckpoint('目录结构验证完成');\n\n    updateFullscreenLoading(25, 'Loading plant data...', 'Scanning plant directories and loading basic info');\n\n    // 使用PlantDataManager加载数据集\n    const plants = await plantDataManager.loadDataset();\n    performanceMonitor?.recordDataLoaded('plants', plants.length);\n    \n    // 更新应用状态\n    appState.currentDatasetPath = datasetInfo.datasetPath;\n    appState.plants = plants;\n    currentDataset = {\n      path: datasetInfo.datasetPath,\n      name: 'Brassica napus dataset',\n      plantCount: plants.length\n    };\n    \n    console.log(`植物数据加载完成: ${plants.length} 个植物`);\n\n    // 🔧 PERFORMANCE OPTIMIZATION: 并行加载所有数据类型\n    updateFullscreenLoading(40, 'Loading all data types...', 'Bulk loading annotations, notes, and statistics');\n    performanceMonitor?.addCheckpoint('开始并行数据加载');\n\n    const loadingTasks = [];\n    const loadingResults = {\n      annotations: null,\n      notes: null,\n      annotationsLoaded: false,\n      notesLoaded: false,\n      errors: []\n    };\n\n    // 任务1: 批量加载标注数据\n    if (window.PlantAnnotationTool?.annotationManager) {\n      loadingTasks.push(\n        window.PlantAnnotationTool.annotationManager.getAllAnnotationsInBulk()\n          .then(bulkAnnotations => {\n            if (bulkAnnotations) {\n              loadingResults.annotations = bulkAnnotations;\n              loadingResults.annotationsLoaded = true;\n              performanceMonitor?.recordNetworkRequest('annotations', true);\n              performanceMonitor?.recordDataLoaded('annotations', \n                Object.keys(bulkAnnotations.plantAnnotations || {}).length + \n                Object.keys(bulkAnnotations.imageAnnotations || {}).length\n              );\n              console.log('[批量加载] 标注数据加载成功');\n              updateFullscreenLoading(60, 'Annotations loaded successfully...', 'Processing bulk annotation data');\n            } else {\n              console.log('[批量加载] 标注批量API不可用，将使用懒加载模式');\n              performanceMonitor?.recordFallback('标注批量API不可用');\n            }\n          })\n          .catch(error => {\n            console.warn('[批量加载] 标注数据加载失败:', error.message);\n            performanceMonitor?.recordError(error, '标注数据批量加载');\n            loadingResults.errors.push(`标注加载失败: ${error.message}`);\n          })\n      );\n    }\n\n    // 任务2: 批量加载笔记数据\n    if (window.PlantAnnotationTool?.noteManager) {\n      loadingTasks.push(\n        window.PlantAnnotationTool.noteManager.getAllNotesInBulk()\n          .then(bulkNotes => {\n            if (bulkNotes) {\n              loadingResults.notes = bulkNotes;\n              loadingResults.notesLoaded = true;\n              performanceMonitor?.recordNetworkRequest('notes', true);\n              performanceMonitor?.recordDataLoaded('notes',\n                Object.keys(bulkNotes.plantNotes || {}).length +\n                Object.keys(bulkNotes.imageNotes || {}).length\n              );\n              console.log('[批量加载] 笔记数据加载成功');\n              updateFullscreenLoading(80, 'Notes loaded successfully...', 'Processing bulk note data');\n            } else {\n              console.log('[批量加载] 笔记批量API不可用，将使用懒加载模式');\n              performanceMonitor?.recordFallback('笔记批量API不可用');\n            }\n          })\n          .catch(error => {\n            console.warn('[批量加载] 笔记数据加载失败:', error.message);\n            performanceMonitor?.recordError(error, '笔记数据批量加载');\n            loadingResults.errors.push(`笔记加载失败: ${error.message}`);\n          })\n      );\n    }\n\n    // 等待所有加载任务完成\n    await Promise.allSettled(loadingTasks);\n    performanceMonitor?.addCheckpoint('并行数据加载完成');\n\n    updateFullscreenLoading(90, 'Processing loaded data...', 'Updating caches and preparing UI components');\n\n    // 生成最终状态消息\n    const loadedComponents = [];\n    if (loadingResults.annotationsLoaded) {\n      const annotationStats = loadingResults.annotations.statistics || {};\n      const totalAnnotations = annotationStats.totalAnnotations || 0;\n      loadedComponents.push(`${totalAnnotations} annotations`);\n    }\n    if (loadingResults.notesLoaded) {\n      const noteStats = loadingResults.notes.statistics || {};\n      const totalNotes = noteStats.totalNotes || 0;\n      loadedComponents.push(`${totalNotes} notes`);\n    }\n\n    const loadedMessage = loadedComponents.length > 0 \n      ? `All data loaded: ${plants.length} plants, ${loadedComponents.join(', ')}`\n      : `Dataset loaded: ${plants.length} plants (bulk APIs not available)`;\n\n    updateFullscreenLoading(95, 'Finalizing initialization...', loadedMessage);\n\n    // 🔧 PERFORMANCE: 预填充缓存以获得即时徽章更新\n    if (loadingResults.notesLoaded && window.PlantAnnotationTool?.noteUI) {\n      try {\n        await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadgesFromBulk(loadingResults.notes);\n        performanceMonitor?.addCheckpoint('笔记徽章预填充完成');\n        console.log('[批量加载] 笔记徽章预填充完成');\n      } catch (error) {\n        console.warn('[批量加载] 笔记徽章预填充失败:', error.message);\n        performanceMonitor?.recordError(error, '笔记徽章预填充');\n      }\n    }\n\n    updateFullscreenLoading(100, 'Initialization complete!', 'All systems ready - entering main application');\n    \n    // 🔧 WAIT FOR COMPLETE LOADING: 只有在所有数据加载完成后才进入主应用\n    console.log(`[完整加载] 数据加载完成 - 标注: ${loadingResults.annotationsLoaded}, 笔记: ${loadingResults.notesLoaded}`);\n    \n    if (loadingResults.errors.length > 0) {\n      console.warn('[完整加载] 部分数据加载失败:', loadingResults.errors);\n    }\n\n    // 🔧 PERFORMANCE: 结束性能监控并生成报告\n    let performanceReport = null;\n    if (performanceMonitor) {\n      performanceReport = performanceMonitor.endMonitoring();\n      console.log('🚀 [性能报告] 批量加载性能:', performanceReport);\n      \n      // 将性能报告存储到全局对象中以便调试\n      window.PlantAnnotationTool.lastPerformanceReport = performanceReport;\n    }\n\n    // 短暂显示成功状态，然后进入主应用\n    setTimeout(() => {\n      hideFullscreenLoading();\n      \n      // 显示植物列表\n      renderPlantList(plants);\n      \n      // 初始更新统计显示\n      updateProgressStats();\n      \n      // 更新进度信息\n      updateProgressInfo(loadedMessage);\n      \n      // 显示性能信息（如果有的话）\n      if (performanceReport && performanceReport.performanceGrade) {\n        const gradeMsg = `性能评级: ${performanceReport.performanceGrade} (${performanceReport.summary.totalLoadingTime})`;\n        console.log(`[完整加载] ${gradeMsg}`);\n      }\n      \n      console.log(`[完整加载] 应用启动完成: ${plants.length} 个植物, 标注已加载: ${loadingResults.annotationsLoaded}, 笔记已加载: ${loadingResults.notesLoaded}`);\n    }, 1500); // 稍长的延迟以显示完成状态\n    \n  } catch (error) {\n    console.error('自动连接数据集失败:', error);\n    \n    // 记录错误到性能监控\n    performanceMonitor?.recordError(error, '数据集连接失败');\n    performanceMonitor?.endMonitoring();\n    \n    if (error instanceof ConnectionError) {\n      hideFullscreenLoading();\n      showConnectionError(error);\n    } else {\n      hideFullscreenLoading();\n      showError('数据集连接失败', `${error.message}\\n\\n请检查网络连接和后端服务状态`);\n    }\n    \n    throw error;\n  }\n}\n\n/**\n * 自定义连接错误类\n */\nclass ConnectionError extends Error {\n  constructor(title, message, details = {}) {\n    super(message);\n    this.name = 'ConnectionError';\n    this.title = title;\n    this.details = details;\n  }\n}\n\n/**\n * 显示连接错误的专门处理\n */\nfunction showConnectionError(error) {\n  const errorMessage = `${error.title}\\n\\n${error.message}`;\n  const detailMessage = error.details.suggestion ? \n    `\\n\\n建议解决方案：\\n${error.details.suggestion}` : '';\n  \n  showError(\n    '后端服务连接失败', \n    errorMessage + detailMessage + '\\n\\n服务器地址: ' + (error.details.serverUrl || 'http://localhost:3003')\n  );\n  \n  // 添加重试按钮到错误模态框\n  addRetryButton();\n}\n\n/**\n * 添加重试按钮到错误模态框\n */\nfunction addRetryButton() {\n  const errorModal = document.getElementById('error-modal');\n  if (!errorModal) return;\n  \n  // 检查是否已存在重试按钮\n  if (errorModal.querySelector('.retry-button')) return;\n  \n  const retryButton = document.createElement('button');\n  retryButton.textContent = '重试连接';\n  retryButton.className = 'retry-button';\n  retryButton.style.cssText = `\n    margin-left: 10px;\n    padding: 8px 16px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  `;\n  \n  retryButton.onclick = async () => {\n    errorModal.style.display = 'none';\n    showFullscreenLoading();\n    \n    try {\n      await autoConnectDataset();\n    } catch (retryError) {\n      console.error('重试失败:', retryError);\n    }\n  };\n  \n  // 添加到错误模态框的按钮区域\n  const buttonArea = errorModal.querySelector('.error-buttons') || errorModal;\n  buttonArea.appendChild(retryButton);\n}\n\n// 🔧 NEW: Delete Plant Annotations Functionality\n\n/**\n * 🔧 NEW: Setup deletion scope options in the modal\n */\nasync function setupDeletionScopeOptions(plantId) {\n  const modal = document.getElementById('delete-plant-annotations-modal');\n  const futureImagesInfo = document.getElementById('future-images-info');\n  const futureImagesCount = document.getElementById('future-images-count');\n  \n  // Reset deletion scope to default\n  const plantAllOption = modal.querySelector('input[name=\"deletion-scope\"][value=\"plant-all\"]');\n  if (plantAllOption) {\n    plantAllOption.checked = true;\n  }\n  \n  // Hide future images info initially\n  if (futureImagesInfo) {\n    futureImagesInfo.style.display = 'none';\n  }\n  \n  // Check if there's a current image context for spreading deletion\n  if (appState.currentImage && appState.currentPlant && appState.currentPlant.id === plantId) {\n    try {\n      // Get future images for spreading deletion\n      const futureImages = await getFutureImagesForClearing();\n      const futureCount = futureImages ? futureImages.length : 0;\n      \n      if (futureCount > 0) {\n        // Show future images info\n        if (futureImagesInfo && futureImagesCount) {\n          futureImagesCount.textContent = futureCount;\n          futureImagesInfo.style.display = 'block';\n        }\n        \n        // Enable current+future option\n        const currentFutureOption = modal.querySelector('input[name=\"deletion-scope\"][value=\"current-and-future\"]');\n        if (currentFutureOption) {\n          currentFutureOption.disabled = false;\n          currentFutureOption.parentElement.style.opacity = '1';\n        }\n        \n        // Enable current-only option\n        const currentOnlyOption = modal.querySelector('input[name=\"deletion-scope\"][value=\"current-only\"]');\n        if (currentOnlyOption) {\n          currentOnlyOption.disabled = false;\n          currentOnlyOption.parentElement.style.opacity = '1';\n        }\n      } else {\n        // Disable current+future option if no future images\n        disableScopeOption('current-and-future', 'No future images available');\n        disableScopeOption('current-only', 'Current image only (basic clear)');\n      }\n    } catch (error) {\n      console.warn('Failed to check future images for deletion scope:', error);\n      disableScopeOption('current-and-future', 'Cannot determine future images');\n      disableScopeOption('current-only', 'Current image context unavailable');\n    }\n  } else {\n    // No current image context - disable spreading options\n    disableScopeOption('current-and-future', 'No current image selected');\n    disableScopeOption('current-only', 'No current image selected');\n  }\n  \n  // Add event listener for scope changes\n  const scopeOptions = modal.querySelectorAll('input[name=\"deletion-scope\"]');\n  scopeOptions.forEach(option => {\n    option.addEventListener('change', handleDeletionScopeChange);\n  });\n}\n\n/**\n * 🔧 NEW: Disable a deletion scope option with reason\n */\nfunction disableScopeOption(value, reason) {\n  const modal = document.getElementById('delete-plant-annotations-modal');\n  const option = modal.querySelector(`input[name=\"deletion-scope\"][value=\"${value}\"]`);\n  if (option) {\n    option.disabled = true;\n    option.parentElement.style.opacity = '0.5';\n    option.parentElement.title = reason;\n  }\n}\n\n/**\n * 🔧 NEW: Handle deletion scope change\n */\nfunction handleDeletionScopeChange() {\n  const selectedScope = document.querySelector('input[name=\"deletion-scope\"]:checked');\n  const confirmCheckbox = document.getElementById('delete-confirmation-checkbox');\n  const confirmButton = document.getElementById('delete-confirm-btn');\n  \n  if (selectedScope) {\n    const scope = selectedScope.value;\n    \n    // Update confirmation text based on scope\n    const confirmText = confirmCheckbox.parentElement.querySelector('span');\n    if (confirmText) {\n      switch (scope) {\n        case 'plant-all':\n          confirmText.textContent = 'I understand that this action is irreversible and will delete all annotation data for this plant';\n          break;\n        case 'current-and-future':\n          confirmText.textContent = 'I understand that this action is irreversible and will delete current and future annotations';\n          break;\n        case 'current-only':\n          confirmText.textContent = 'I understand that this action is irreversible and will delete the current image annotations';\n          break;\n      }\n    }\n    \n    // Update button text based on scope\n    if (confirmButton) {\n      switch (scope) {\n        case 'plant-all':\n          confirmButton.textContent = '🗑️ Delete All Plant Annotations';\n          break;\n        case 'current-and-future':\n          confirmButton.textContent = '⚡ Delete Current + Future';\n          break;\n        case 'current-only':\n          confirmButton.textContent = '🗑️ Delete Current Image';\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Handle delete plant annotations button click\n */\nasync function handleDeletePlantAnnotations() {\n  if (!appState.currentPlant) {\n    showError('删除失败', '请先选择植物');\n    return;\n  }\n  \n  console.log(`[Delete Plant] 开始删除植物 ${appState.currentPlant.id} 的标注`);\n  \n  // Show the confirmation modal and load statistics\n  await showDeletePlantAnnotationsModal(appState.currentPlant.id);\n}\n\n/**\n * Show delete plant annotations modal with statistics\n */\nasync function showDeletePlantAnnotationsModal(plantId) {\n  const modal = document.getElementById('delete-plant-annotations-modal');\n  const plantIdElement = document.getElementById('delete-plant-id');\n  const statsLoading = document.getElementById('stats-loading');\n  const statsContent = document.getElementById('stats-content');\n  const confirmCheckbox = document.getElementById('delete-confirmation-checkbox');\n  const confirmButton = document.getElementById('delete-confirm-btn');\n  \n  if (!modal) return;\n  \n  // Reset modal state\n  plantIdElement.textContent = plantId;\n  statsLoading.style.display = 'block';\n  statsContent.style.display = 'none';\n  confirmCheckbox.checked = false;\n  confirmButton.disabled = true;\n  \n  // 🔧 NEW: Setup deletion scope options\n  setupDeletionScopeOptions(plantId);\n  \n  // Show modal\n  modal.style.display = 'flex';\n  \n  try {\n    // Load plant annotation statistics\n    console.log(`[Delete Plant] 加载植物 ${plantId} 的统计信息`);\n    const response = await fetch(`http://localhost:3003/api/annotations/plant/${plantId}/stats`);\n    const result = await response.json();\n    \n    if (result.success) {\n      // Update statistics display\n      document.getElementById('annotation-files-count').textContent = result.statistics.annotationFiles;\n      document.getElementById('annotation-points-count').textContent = result.statistics.totalAnnotationPoints;\n      document.getElementById('related-files-count').textContent = result.statistics.relatedFiles;\n      document.getElementById('total-files-count').textContent = result.statistics.totalFiles;\n      \n      // Show statistics\n      statsLoading.style.display = 'none';\n      statsContent.style.display = 'block';\n      \n      console.log(`[Delete Plant] 统计加载完成: ${result.statistics.totalFiles} 个文件, ${result.statistics.totalAnnotationPoints} 个标注点`);\n      \n      // Store statistics for later use\n      modal.dataset.plantStats = JSON.stringify(result.statistics);\n    } else {\n      throw new Error(result.error || '获取统计信息失败');\n    }\n  } catch (error) {\n    console.error(`[Delete Plant] 加载统计信息失败:`, error);\n    statsLoading.innerHTML = `<span style=\"color: #dc2626;\">❌ 加载统计信息失败: ${error.message}</span>`;\n  }\n}\n\n/**\n * Hide delete plant annotations modal\n */\nfunction hideDeletePlantAnnotationsModal() {\n  const modal = document.getElementById('delete-plant-annotations-modal');\n  if (modal) {\n    modal.style.display = 'none';\n    \n    // Reset modal state\n    const confirmCheckbox = document.getElementById('delete-confirmation-checkbox');\n    const confirmButton = document.getElementById('delete-confirm-btn');\n    if (confirmCheckbox) confirmCheckbox.checked = false;\n    if (confirmButton) {\n      confirmButton.disabled = true;\n      // 🔧 FIX: Also restore button text to default when hiding modal\n      confirmButton.textContent = '🗑️ Delete All Annotations';\n    }\n  }\n}\n\n/**\n * Handle confirmation checkbox change\n */\nfunction handleDeleteConfirmationChange() {\n  const confirmCheckbox = document.getElementById('delete-confirmation-checkbox');\n  const confirmButton = document.getElementById('delete-confirm-btn');\n  \n  if (confirmCheckbox && confirmButton) {\n    confirmButton.disabled = !confirmCheckbox.checked;\n  }\n}\n\n/**\n * Confirm and execute plant annotations deletion\n */\nasync function confirmDeletePlantAnnotations() {\n  if (!appState.currentPlant) {\n    showError('删除失败', '未选择植物');\n    return;\n  }\n  \n  const plantId = appState.currentPlant.id;\n  const modal = document.getElementById('delete-plant-annotations-modal');\n  const confirmButton = document.getElementById('delete-confirm-btn');\n  \n  if (!modal || !confirmButton) return;\n  \n  // 🔧 NEW: Get selected deletion scope\n  const selectedScope = modal.querySelector('input[name=\"deletion-scope\"]:checked');\n  const deletionScope = selectedScope ? selectedScope.value : 'plant-all';\n  \n  try {\n    // Show loading state\n    const originalText = confirmButton.textContent;\n    confirmButton.textContent = '⏳ Deleting...';\n    confirmButton.disabled = true;\n    \n    console.log(`[Delete Plant] 开始删除植物 ${plantId} 的标注，范围: ${deletionScope}`);\n    \n    let result;\n    \n    switch (deletionScope) {\n      case 'plant-all':\n        // Execute full plant deletion via API\n        result = await executeFullPlantDeletion(plantId);\n        break;\n        \n      case 'current-and-future':\n        // Execute spreading deletion\n        result = await executeSpreadingDeletion(plantId);\n        break;\n        \n      case 'current-only':\n        // Execute current image only deletion\n        result = await executeCurrentImageDeletion(plantId);\n        break;\n        \n      default:\n        throw new Error(`Unknown deletion scope: ${deletionScope}`);\n    }\n    \n    if (result.success) {\n      console.log(`[Delete Plant] 删除成功:`, result.statistics);\n      \n      // 🔧 FIX: Restore button text before hiding modal\n      confirmButton.textContent = originalText;\n      \n      // Hide modal\n      hideDeletePlantAnnotationsModal();\n      \n      // Show success message with statistics\n      const stats = result.statistics;\n      const successMessage = createSuccessMessage(plantId, deletionScope, stats);\n      showSuccess('删除成功', successMessage);\n      \n      // Update progress and UI\n      updateProgressInfo(`植物 ${plantId} 的标注数据已删除 (${deletionScope})`);\n      \n      // Handle UI updates based on deletion scope\n      await handlePostDeletionUpdates(plantId, deletionScope);\n      \n    } else {\n      throw new Error(result.error || '删除操作失败');\n    }\n    \n  } catch (error) {\n    console.error(`[Delete Plant] 删除植物 ${plantId} 失败:`, error);\n    \n    // Restore button state\n    confirmButton.textContent = originalText;\n    confirmButton.disabled = false;\n    \n    showError('删除失败', `删除植物 ${plantId} 的标注数据时出错: ${error.message}`);\n  }\n}\n\n/**\n * 🔧 NEW: Execute full plant deletion via API\n */\nasync function executeFullPlantDeletion(plantId) {\n  const response = await fetch(`http://localhost:3003/api/annotations/plant/${plantId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  return await response.json();\n}\n\n/**\n * 🔧 NEW: Execute spreading deletion (current + future images)\n */\nasync function executeSpreadingDeletion(plantId) {\n  if (!appState.currentImage || !appState.currentPlant) {\n    throw new Error('No current image context for spreading deletion');\n  }\n  \n  try {\n    // Get future images\n    const futureImages = await getFutureImagesForClearing();\n    const allImages = [appState.currentImage, ...futureImages];\n    \n    let deletedCount = 0;\n    let errors = [];\n    \n    // Delete annotations for each image\n    for (const image of allImages) {\n      try {\n        // 🔧 FIX: For current image, clear workspace FIRST to prevent auto-save interference\n        if (image.id === appState.currentImage.id && annotationTool) {\n          console.log(`[Spreading Delete] Clearing current image workspace: ${image.id}`);\n          annotationTool.clearKeypoints();\n          \n          // Update annotation status display immediately to reflect cleared state\n          if (typeof updateAnnotationStatusDisplay === 'function') {\n            setTimeout(updateAnnotationStatusDisplay, 100);\n          }\n        }\n        \n        // Clear annotation storage for this image\n        await clearAnnotationsForImage(image.id);\n        \n        deletedCount++;\n        updateProgressInfo(`已清除 ${deletedCount}/${allImages.length} 个图像...`);\n      } catch (error) {\n        console.error(`Failed to clear image ${image.id}:`, error);\n        errors.push(`${image.id}: ${error.message}`);\n      }\n    }\n    \n    // Update thumbnails\n    if (window.refreshThumbnailAnnotationStatus) {\n      for (const image of allImages) {\n        await window.refreshThumbnailAnnotationStatus(image.id);\n      }\n    }\n    \n    return {\n      success: true,\n      statistics: {\n        totalFilesDeleted: deletedCount,\n        totalFilesProcessed: allImages.length,\n        annotationFilesDeleted: deletedCount,\n        relatedFilesDeleted: 0,\n        backupPath: 'N/A (in-memory operation)',\n        errors: errors\n      }\n    };\n    \n  } catch (error) {\n    console.error('Spreading deletion failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}\n\n/**\n * 🔧 NEW: Execute current image only deletion\n */\nasync function executeCurrentImageDeletion(plantId) {\n  if (!appState.currentImage) {\n    throw new Error('No current image selected');\n  }\n  \n  try {\n    await clearAnnotationsForImage(appState.currentImage.id);\n    \n    // Update thumbnail\n    if (window.refreshThumbnailAnnotationStatus) {\n      await window.refreshThumbnailAnnotationStatus(appState.currentImage.id);\n    }\n    \n    // Clear from annotation tool\n    if (annotationTool) {\n      annotationTool.clearKeypoints();\n    }\n    \n    return {\n      success: true,\n      statistics: {\n        totalFilesDeleted: 1,\n        totalFilesProcessed: 1,\n        annotationFilesDeleted: 1,\n        relatedFilesDeleted: 0,\n        backupPath: 'N/A (single image operation)'\n      }\n    };\n    \n  } catch (error) {\n    console.error('Current image deletion failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}\n\n/**\n * 🔧 NEW: Create success message based on deletion scope\n */\nfunction createSuccessMessage(plantId, deletionScope, stats) {\n  let message = `植物 ${plantId} 的标注数据删除完成\\n\\n`;\n  \n  switch (deletionScope) {\n    case 'plant-all':\n      message += `删除文件: ${stats.totalFilesDeleted}/${stats.totalFilesProcessed}\\n`;\n      message += `标注文件: ${stats.annotationFilesDeleted}\\n`;\n      message += `相关文件: ${stats.relatedFilesDeleted}\\n`;\n      if (stats.backupPath) {\n        message += `备份已创建: ${stats.backupPath}`;\n      }\n      break;\n      \n    case 'current-and-future':\n      message += `传播删除完成\\n`;\n      message += `处理图像: ${stats.totalFilesDeleted}/${stats.totalFilesProcessed}\\n`;\n      if (stats.errors && stats.errors.length > 0) {\n        message += `错误: ${stats.errors.length} 个图像删除失败`;\n      }\n      break;\n      \n    case 'current-only':\n      message += `当前图像标注已清除\\n`;\n      message += `图像ID: ${appState.currentImage?.id || 'unknown'}`;\n      break;\n  }\n  \n  return message;\n}\n\n/**\n * 🔧 NEW: Handle post-deletion UI updates based on scope\n */\nasync function handlePostDeletionUpdates(plantId, deletionScope) {\n  switch (deletionScope) {\n    case 'plant-all':\n      // Clear current workspace if this was the current plant\n      if (appState.currentPlant && appState.currentPlant.id === plantId) {\n        initializeEmptyWorkspace();\n        \n        // Update plant status in the list\n        const plant = appState.plants.find(p => p.id === plantId);\n        if (plant) {\n          plant.status = 'pending'; // Reset to pending after deletion\n          \n          // Re-render the plant list item\n          const plantItem = document.querySelector(`[data-plant-id=\"${plantId}\"]`);\n          if (plantItem) {\n            const newItem = createPlantListItem(plant);\n            plantItem.parentNode.replaceChild(newItem, plantItem);\n          }\n        }\n      }\n      break;\n      \n    case 'current-and-future':\n    case 'current-only':\n      // Update annotation status display\n      if (typeof updateAnnotationStatusDisplay === 'function') {\n        await updateAnnotationStatusDisplay();\n      }\n      break;\n  }\n  \n  // Update statistics for all deletion scopes\n  if (typeof updateProgressStats === 'function') {\n    updateProgressStats();\n  }\n  \n  // Refresh note badges (since annotations are deleted, notes might be affected)\n  if (window.PlantAnnotationTool?.noteUI) {\n    await window.PlantAnnotationTool.noteUI.updateAllPlantNoteBadges();\n  }\n}\n\n/**\n * 🔧 NEW: Update complete plant button state based on current plant selection\n */\nfunction updateCompletePlantButtonState() {\n  const completeButton = document.getElementById('complete-plant-btn');\n  if (!completeButton) return;\n  \n  if (appState.currentPlant) {\n    const plant = appState.currentPlant;\n    \n    if (plant.status === 'completed') {\n      // Show as uncomplete button\n      completeButton.textContent = 'Uncomplete Plant';\n      completeButton.className = 'btn btn-warning';\n      completeButton.title = `撤销完成植株 ${plant.id}`;\n      completeButton.disabled = false;\n    } else if (plant.status === 'skipped') {\n      // Disable for skipped plants\n      completeButton.textContent = 'Complete Plant';\n      completeButton.className = 'btn btn-success';\n      completeButton.title = '无法完成已跳过的植株，请先撤销跳过';\n      completeButton.disabled = true;\n    } else {\n      // Show as complete button (pending/in-progress)\n      completeButton.textContent = 'Complete Plant';\n      completeButton.className = 'btn btn-success';\n      completeButton.title = `标记植株 ${plant.id} 为完成`;\n      completeButton.disabled = false;\n    }\n  } else {\n    // No plant selected\n    completeButton.textContent = 'Complete Plant';\n    completeButton.className = 'btn btn-success';\n    completeButton.title = '请先选择植物';\n    completeButton.disabled = true;\n  }\n}\n\n/**\n * Update delete button state based on current plant selection\n */\nfunction updateDeletePlantAnnotationsButtonState() {\n  const deleteButton = document.getElementById('delete-plant-annotations-btn');\n  if (!deleteButton) return;\n  \n  if (appState.currentPlant) {\n    deleteButton.disabled = false;\n    deleteButton.title = `删除植物 ${appState.currentPlant.id} 的所有标注数据`;\n  } else {\n    deleteButton.disabled = true;\n    deleteButton.title = '请先选择植物';\n  }\n}\n\n// 将删除按钮状态更新函数暴露到全局，供其他模块调用\nwindow.updateDeletePlantAnnotationsButtonState = updateDeletePlantAnnotationsButtonState;\n\n/**\n * 🔧 SIMPLIFIED: Handle clear all annotations - simple current image only\n */\nasync function handleClearAllAnnotations() {\n  if (!annotationTool) {\n    showError('清除失败', '标注工具未初始化');\n    return;\n  }\n  \n  const currentAnnotations = annotationTool.getAnnotationData();\n  if (currentAnnotations.keypoints.length === 0) {\n    showError('清除失败', '当前图像没有标注点');\n    return;\n  }\n  \n  // Simple confirmation dialog without spreading options\n  const message = `确定要清除当前图像的 ${currentAnnotations.keypoints.length} 个标注点吗？`;\n  \n  if (confirm(message)) {\n    // Clear current image only\n    annotationTool.clearKeypoints();\n    updateProgressInfo('已清除当前图像的标注');\n    \n    // Update thumbnail status\n    if (window.refreshThumbnailAnnotationStatus && appState.currentImage) {\n      await window.refreshThumbnailAnnotationStatus(appState.currentImage.id);\n    }\n    \n    // Update annotation status display\n    if (typeof updateAnnotationStatusDisplay === 'function') {\n      updateAnnotationStatusDisplay();\n    }\n  }\n}\n\n/**\n * 🔧 NEW: Handle SIFT matching\n */\nasync function handleSiftMatch() {\n  if (!annotationTool) {\n    showError('SIFT匹配失败', '标注工具未初始化');\n    return;\n  }\n  \n  if (!appState.currentPlant) {\n    showError('SIFT匹配失败', '请先选择植物');\n    return;\n  }\n  \n  // 禁用SIFT按钮防止重复点击\n  const siftBtn = document.getElementById('sift-match-btn');\n  if (siftBtn) {\n    siftBtn.disabled = true;\n    siftBtn.textContent = '⏳';\n  }\n  \n  try {\n    console.log('[SIFT] 开始执行SIFT匹配');\n    \n    // 调用AnnotationTool的SIFT匹配功能\n    await annotationTool.performSiftMatching();\n    \n  } catch (error) {\n    console.error('[SIFT] 匹配失败:', error);\n    showError('SIFT匹配失败', error.message || '执行SIFT匹配时发生错误');\n  } finally {\n    // 恢复SIFT按钮状态\n    if (siftBtn) {\n      siftBtn.disabled = false;\n      siftBtn.textContent = '🔍';\n    }\n  }\n}\n\n/**\n * 🔧 REMOVED: Handle spreading clear (Shift+Click) \n * This functionality has been moved to delete-plant-annotations-btn\n * to avoid duplication and user confusion.\n */\n// async function handleSpreadingClear() { ... } - REMOVED\n\n/**\n * 🔧 NEW: Get future images for clearing (simplified version)\n */\nasync function getFutureImagesForClearing() {\n  if (!appState.currentImage || !appState.currentPlant || !plantDataManager) {\n    return [];\n  }\n  \n  try {\n    // Get all images for current plant and view angle\n    const allImages = await plantDataManager.getPlantImages(\n      appState.currentPlant.id, \n      appState.currentPlant.selectedViewAngle\n    );\n    \n    if (!allImages || allImages.length === 0) {\n      return [];\n    }\n    \n    // Find current image index\n    const currentImageIndex = allImages.findIndex(img => img.id === appState.currentImage.id);\n    if (currentImageIndex === -1) {\n      return [];\n    }\n    \n    // Get current image date for comparison\n    const currentImage = allImages[currentImageIndex];\n    const currentDate = new Date(currentImage.dateTime);\n    \n    // Filter future images (images with later dates)\n    const futureImages = allImages.filter(img => {\n      const imgDate = new Date(img.dateTime);\n      return imgDate > currentDate;\n    });\n    \n    // Sort by date\n    futureImages.sort((a, b) => new Date(a.dateTime) - new Date(b.dateTime));\n    \n    return futureImages;\n    \n  } catch (error) {\n    console.error('Failed to get future images:', error);\n    return [];\n  }\n}\n\n/**\n * 🔧 NEW: Clear annotations for a specific image\n */\nasync function clearAnnotationsForImage(imageId) {\n  if (!plantDataManager) {\n    throw new Error('PlantDataManager not available');\n  }\n  \n  try {\n    // Save empty annotations (effectively clearing them)\n    await plantDataManager.saveImageAnnotations(imageId, []);\n    console.log(`Cleared annotations for image: ${imageId}`);\n  } catch (error) {\n    console.error(`Failed to clear annotations for image ${imageId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * 🔧 NEW: Perform clear operation with optional spreading\n */\nasync function performClearOperation(options) {\n  if (!annotationTool || !appState.currentImage || !appState.currentPlant) {\n    showError('清除失败', '应用状态无效');\n    return;\n  }\n  \n  const { clearScope, clearAllPoints, clearAnnotationsOnly } = options;\n  \n  try {\n    // Always clear current image first\n    console.log('Clearing annotations for current image:', appState.currentImage.id);\n    \n    if (clearAllPoints) {\n      annotationTool.clearKeypoints();\n    } else if (clearAnnotationsOnly) {\n      // Clear only annotations but preserve UI state\n      annotationTool.clearKeypointsWithoutSave();\n    }\n    \n    let processedImages = 1; // Current image\n    let affectedImages = [appState.currentImage.id];\n    \n    // If spreading deletion is requested\n    if (clearScope === 'current-and-future' && annotationSpreadingManager) {\n      // Show progress modal\n      const progressModalId = spreadingModalManager.showSpreadProgress({\n        operationId: `clear-spread-${Date.now()}`,\n        totalImages: 0, // Will be updated\n        onCancel: () => {\n          console.log('User cancelled clear spreading operation');\n        }\n      });\n      \n      try {\n        // Get future images\n        const futureImages = await annotationSpreadingManager.getFutureImages(\n          appState.currentImage.id,\n          appState.currentPlant.id,\n          appState.currentPlant.selectedViewAngle\n        );\n        \n        if (futureImages.length > 0) {\n          // Update progress modal with actual count\n          spreadingModalManager.updateSpreadProgress(progressModalId, {\n            completed: 1,\n            total: futureImages.length + 1,\n            status: 'Clearing future images...'\n          });\n          \n          // Perform spreading deletion\n          const result = await annotationSpreadingManager.spreadDeletionToFuture(\n            appState.currentImage.id,\n            appState.currentPlant.id,\n            appState.currentPlant.selectedViewAngle,\n            {\n              clearAllPoints,\n              clearAnnotationsOnly,\n              batchSize: spreadingConfigManager?.getConfigValue('spreadBehavior.batchSize') || 10,\n              onProgress: (progress) => {\n                spreadingModalManager.updateSpreadProgress(progressModalId, {\n                  ...progress,\n                  completed: progress.completed + 1, // +1 for current image already processed\n                  total: futureImages.length + 1\n                });\n              }\n            }\n          );\n          \n          processedImages += result.processedImages || 0;\n          affectedImages = affectedImages.concat(result.affectedImages || []);\n        }\n        \n        // Close progress modal\n        spreadingModalManager.closeModal(progressModalId);\n        \n      } catch (error) {\n        console.error('Spreading deletion failed:', error);\n        spreadingModalManager.closeModal(progressModalId);\n        spreadingModalManager.showError(\n          'Spreading Deletion Failed',\n          `Failed to clear annotations from future images: ${error.message}`\n        );\n      }\n    }\n    \n    // Show success message\n    const message = clearScope === 'current-and-future' \n      ? `成功清除 ${processedImages} 个图像的标注`\n      : '成功清除当前图像的标注';\n    \n    updateProgressInfo(message);\n    \n    // Refresh thumbnails for affected images\n    if (affectedImages.length > 0) {\n      for (const imageId of affectedImages) {\n        await refreshThumbnailAnnotationStatus(imageId);\n      }\n    }\n    \n    // Update statistics\n    updateProgressStats();\n    \n    // Update annotation status display\n    updateAnnotationStatusDisplay();\n    \n    console.log(`Clear operation completed. Processed ${processedImages} images.`);\n    \n    // Show success modal for spreading operations\n    if (clearScope === 'current-and-future' && processedImages > 1) {\n      spreadingModalManager.showSuccess(\n        'Clear Complete',\n        `Successfully cleared annotations from ${processedImages} images in the time series.`\n      );\n    }\n    \n  } catch (error) {\n    console.error('Clear operation failed:', error);\n    showError('清除失败', `清除标注时出错: ${error.message}`);\n  }\n}"],"file":"assets/index-BJYlm9zQ.js"}